
LoRaWAN_AT_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146b8  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002898  080147f0  080147f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017088  08017088  000195d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017088  08017088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017090  08017090  000195d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017090  08017090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08017098  08017098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000130  20000000  080170a0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  0001a000  2**2
                  ALLOC
 11 .bss          00001e98  20000130  20000130  0001a130  2**2
                  ALLOC
 12 RAM1_region   00000000  20001fc8  20001fc8  000195d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  000195d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001fc8  20001fc8  0001a130  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  000195d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005d6ff  00000000  00000000  00019602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c600  00000000  00000000  00076d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 0001a964  00000000  00000000  00083301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003048  00000000  00000000  0009dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000275c  00000000  00000000  000a0cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002d0f7  00000000  00000000  000a340c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00053838  00000000  00000000  000d0503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e3296  00000000  00000000  00123d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  00206fd1  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00008748  00000000  00000000  00207014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000cf  00000000  00000000  0020f75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000130 	.word	0x20000130
 8000154:	00000000 	.word	0x00000000
 8000158:	080147d8 	.word	0x080147d8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000134 	.word	0x20000134
 8000174:	080147d8 	.word	0x080147d8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b988 	b.w	8000ba4 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	468e      	mov	lr, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	4688      	mov	r8, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d962      	bls.n	8000988 <__udivmoddi4+0xdc>
 80008c2:	fab2 f682 	clz	r6, r2
 80008c6:	b14e      	cbz	r6, 80008dc <__udivmoddi4+0x30>
 80008c8:	f1c6 0320 	rsb	r3, r6, #32
 80008cc:	fa01 f806 	lsl.w	r8, r1, r6
 80008d0:	fa20 f303 	lsr.w	r3, r0, r3
 80008d4:	40b7      	lsls	r7, r6
 80008d6:	ea43 0808 	orr.w	r8, r3, r8
 80008da:	40b4      	lsls	r4, r6
 80008dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008e0:	fa1f fc87 	uxth.w	ip, r7
 80008e4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008e8:	0c23      	lsrs	r3, r4, #16
 80008ea:	fb0e 8811 	mls	r8, lr, r1, r8
 80008ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008f2:	fb01 f20c 	mul.w	r2, r1, ip
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d909      	bls.n	800090e <__udivmoddi4+0x62>
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000900:	f080 80ea 	bcs.w	8000ad8 <__udivmoddi4+0x22c>
 8000904:	429a      	cmp	r2, r3
 8000906:	f240 80e7 	bls.w	8000ad8 <__udivmoddi4+0x22c>
 800090a:	3902      	subs	r1, #2
 800090c:	443b      	add	r3, r7
 800090e:	1a9a      	subs	r2, r3, r2
 8000910:	b2a3      	uxth	r3, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800091e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000922:	459c      	cmp	ip, r3
 8000924:	d909      	bls.n	800093a <__udivmoddi4+0x8e>
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	f100 32ff 	add.w	r2, r0, #4294967295
 800092c:	f080 80d6 	bcs.w	8000adc <__udivmoddi4+0x230>
 8000930:	459c      	cmp	ip, r3
 8000932:	f240 80d3 	bls.w	8000adc <__udivmoddi4+0x230>
 8000936:	443b      	add	r3, r7
 8000938:	3802      	subs	r0, #2
 800093a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800093e:	eba3 030c 	sub.w	r3, r3, ip
 8000942:	2100      	movs	r1, #0
 8000944:	b11d      	cbz	r5, 800094e <__udivmoddi4+0xa2>
 8000946:	40f3      	lsrs	r3, r6
 8000948:	2200      	movs	r2, #0
 800094a:	e9c5 3200 	strd	r3, r2, [r5]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d905      	bls.n	8000962 <__udivmoddi4+0xb6>
 8000956:	b10d      	cbz	r5, 800095c <__udivmoddi4+0xb0>
 8000958:	e9c5 0100 	strd	r0, r1, [r5]
 800095c:	2100      	movs	r1, #0
 800095e:	4608      	mov	r0, r1
 8000960:	e7f5      	b.n	800094e <__udivmoddi4+0xa2>
 8000962:	fab3 f183 	clz	r1, r3
 8000966:	2900      	cmp	r1, #0
 8000968:	d146      	bne.n	80009f8 <__udivmoddi4+0x14c>
 800096a:	4573      	cmp	r3, lr
 800096c:	d302      	bcc.n	8000974 <__udivmoddi4+0xc8>
 800096e:	4282      	cmp	r2, r0
 8000970:	f200 8105 	bhi.w	8000b7e <__udivmoddi4+0x2d2>
 8000974:	1a84      	subs	r4, r0, r2
 8000976:	eb6e 0203 	sbc.w	r2, lr, r3
 800097a:	2001      	movs	r0, #1
 800097c:	4690      	mov	r8, r2
 800097e:	2d00      	cmp	r5, #0
 8000980:	d0e5      	beq.n	800094e <__udivmoddi4+0xa2>
 8000982:	e9c5 4800 	strd	r4, r8, [r5]
 8000986:	e7e2      	b.n	800094e <__udivmoddi4+0xa2>
 8000988:	2a00      	cmp	r2, #0
 800098a:	f000 8090 	beq.w	8000aae <__udivmoddi4+0x202>
 800098e:	fab2 f682 	clz	r6, r2
 8000992:	2e00      	cmp	r6, #0
 8000994:	f040 80a4 	bne.w	8000ae0 <__udivmoddi4+0x234>
 8000998:	1a8a      	subs	r2, r1, r2
 800099a:	0c03      	lsrs	r3, r0, #16
 800099c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a0:	b280      	uxth	r0, r0
 80009a2:	b2bc      	uxth	r4, r7
 80009a4:	2101      	movs	r1, #1
 80009a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009b2:	fb04 f20c 	mul.w	r2, r4, ip
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x11e>
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x11c>
 80009c2:	429a      	cmp	r2, r3
 80009c4:	f200 80e0 	bhi.w	8000b88 <__udivmoddi4+0x2dc>
 80009c8:	46c4      	mov	ip, r8
 80009ca:	1a9b      	subs	r3, r3, r2
 80009cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009d4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009d8:	fb02 f404 	mul.w	r4, r2, r4
 80009dc:	429c      	cmp	r4, r3
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0x144>
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x142>
 80009e8:	429c      	cmp	r4, r3
 80009ea:	f200 80ca 	bhi.w	8000b82 <__udivmoddi4+0x2d6>
 80009ee:	4602      	mov	r2, r0
 80009f0:	1b1b      	subs	r3, r3, r4
 80009f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009f6:	e7a5      	b.n	8000944 <__udivmoddi4+0x98>
 80009f8:	f1c1 0620 	rsb	r6, r1, #32
 80009fc:	408b      	lsls	r3, r1
 80009fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000a02:	431f      	orrs	r7, r3
 8000a04:	fa0e f401 	lsl.w	r4, lr, r1
 8000a08:	fa20 f306 	lsr.w	r3, r0, r6
 8000a0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a14:	4323      	orrs	r3, r4
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	fa1f fc87 	uxth.w	ip, r7
 8000a1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a22:	0c1c      	lsrs	r4, r3, #16
 8000a24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	d909      	bls.n	8000a4c <__udivmoddi4+0x1a0>
 8000a38:	193c      	adds	r4, r7, r4
 8000a3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a3e:	f080 809c 	bcs.w	8000b7a <__udivmoddi4+0x2ce>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f240 8099 	bls.w	8000b7a <__udivmoddi4+0x2ce>
 8000a48:	3802      	subs	r0, #2
 8000a4a:	443c      	add	r4, r7
 8000a4c:	eba4 040e 	sub.w	r4, r4, lr
 8000a50:	fa1f fe83 	uxth.w	lr, r3
 8000a54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a58:	fb09 4413 	mls	r4, r9, r3, r4
 8000a5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a64:	45a4      	cmp	ip, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x1ce>
 8000a68:	193c      	adds	r4, r7, r4
 8000a6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a6e:	f080 8082 	bcs.w	8000b76 <__udivmoddi4+0x2ca>
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d97f      	bls.n	8000b76 <__udivmoddi4+0x2ca>
 8000a76:	3b02      	subs	r3, #2
 8000a78:	443c      	add	r4, r7
 8000a7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a7e:	eba4 040c 	sub.w	r4, r4, ip
 8000a82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a86:	4564      	cmp	r4, ip
 8000a88:	4673      	mov	r3, lr
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	d362      	bcc.n	8000b54 <__udivmoddi4+0x2a8>
 8000a8e:	d05f      	beq.n	8000b50 <__udivmoddi4+0x2a4>
 8000a90:	b15d      	cbz	r5, 8000aaa <__udivmoddi4+0x1fe>
 8000a92:	ebb8 0203 	subs.w	r2, r8, r3
 8000a96:	eb64 0409 	sbc.w	r4, r4, r9
 8000a9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa2:	431e      	orrs	r6, r3
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e74f      	b.n	800094e <__udivmoddi4+0xa2>
 8000aae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ab2:	0c01      	lsrs	r1, r0, #16
 8000ab4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ab8:	b280      	uxth	r0, r0
 8000aba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	463c      	mov	r4, r7
 8000ac4:	46b8      	mov	r8, r7
 8000ac6:	46be      	mov	lr, r7
 8000ac8:	2620      	movs	r6, #32
 8000aca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ace:	eba2 0208 	sub.w	r2, r2, r8
 8000ad2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ad6:	e766      	b.n	80009a6 <__udivmoddi4+0xfa>
 8000ad8:	4601      	mov	r1, r0
 8000ada:	e718      	b.n	800090e <__udivmoddi4+0x62>
 8000adc:	4610      	mov	r0, r2
 8000ade:	e72c      	b.n	800093a <__udivmoddi4+0x8e>
 8000ae0:	f1c6 0220 	rsb	r2, r6, #32
 8000ae4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ae8:	40b7      	lsls	r7, r6
 8000aea:	40b1      	lsls	r1, r6
 8000aec:	fa20 f202 	lsr.w	r2, r0, r2
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	430a      	orrs	r2, r1
 8000af6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000afa:	b2bc      	uxth	r4, r7
 8000afc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b06:	fb08 f904 	mul.w	r9, r8, r4
 8000b0a:	40b0      	lsls	r0, r6
 8000b0c:	4589      	cmp	r9, r1
 8000b0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b12:	b280      	uxth	r0, r0
 8000b14:	d93e      	bls.n	8000b94 <__udivmoddi4+0x2e8>
 8000b16:	1879      	adds	r1, r7, r1
 8000b18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b1c:	d201      	bcs.n	8000b22 <__udivmoddi4+0x276>
 8000b1e:	4589      	cmp	r9, r1
 8000b20:	d81f      	bhi.n	8000b62 <__udivmoddi4+0x2b6>
 8000b22:	eba1 0109 	sub.w	r1, r1, r9
 8000b26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b2a:	fb09 f804 	mul.w	r8, r9, r4
 8000b2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b32:	b292      	uxth	r2, r2
 8000b34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b38:	4542      	cmp	r2, r8
 8000b3a:	d229      	bcs.n	8000b90 <__udivmoddi4+0x2e4>
 8000b3c:	18ba      	adds	r2, r7, r2
 8000b3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b42:	d2c4      	bcs.n	8000ace <__udivmoddi4+0x222>
 8000b44:	4542      	cmp	r2, r8
 8000b46:	d2c2      	bcs.n	8000ace <__udivmoddi4+0x222>
 8000b48:	f1a9 0102 	sub.w	r1, r9, #2
 8000b4c:	443a      	add	r2, r7
 8000b4e:	e7be      	b.n	8000ace <__udivmoddi4+0x222>
 8000b50:	45f0      	cmp	r8, lr
 8000b52:	d29d      	bcs.n	8000a90 <__udivmoddi4+0x1e4>
 8000b54:	ebbe 0302 	subs.w	r3, lr, r2
 8000b58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b5c:	3801      	subs	r0, #1
 8000b5e:	46e1      	mov	r9, ip
 8000b60:	e796      	b.n	8000a90 <__udivmoddi4+0x1e4>
 8000b62:	eba7 0909 	sub.w	r9, r7, r9
 8000b66:	4449      	add	r1, r9
 8000b68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b70:	fb09 f804 	mul.w	r8, r9, r4
 8000b74:	e7db      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b76:	4673      	mov	r3, lr
 8000b78:	e77f      	b.n	8000a7a <__udivmoddi4+0x1ce>
 8000b7a:	4650      	mov	r0, sl
 8000b7c:	e766      	b.n	8000a4c <__udivmoddi4+0x1a0>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e6fd      	b.n	800097e <__udivmoddi4+0xd2>
 8000b82:	443b      	add	r3, r7
 8000b84:	3a02      	subs	r2, #2
 8000b86:	e733      	b.n	80009f0 <__udivmoddi4+0x144>
 8000b88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	e71c      	b.n	80009ca <__udivmoddi4+0x11e>
 8000b90:	4649      	mov	r1, r9
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x222>
 8000b94:	eba1 0109 	sub.w	r1, r1, r9
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b9e:	fb09 f804 	mul.w	r8, r9, r4
 8000ba2:	e7c4      	b.n	8000b2e <__udivmoddi4+0x282>

08000ba4 <__aeabi_idiv0>:
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ba8:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000baa:	4813      	ldr	r0, [pc, #76]	@ (8000bf8 <MX_ADC_Init+0x50>)
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_ADC_Init+0x54>)
 8000bae:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000bb4:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bba:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbc:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bc2:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bc4:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bc6:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bcc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd0:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bd4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bdc:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000bde:	2207      	movs	r2, #7
 8000be0:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000be2:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000be4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000be8:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000bea:	f003 fad1 	bl	8004190 <HAL_ADC_Init>
 8000bee:	b900      	cbnz	r0, 8000bf2 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000bf0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bf2:	f000 fb17 	bl	8001224 <Error_Handler>
}
 8000bf6:	e7fb      	b.n	8000bf0 <MX_ADC_Init+0x48>
 8000bf8:	2000014c 	.word	0x2000014c
 8000bfc:	40012400 	.word	0x40012400

08000c00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000c00:	6802      	ldr	r2, [r0, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <HAL_ADC_MspInit+0x28>)
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d000      	beq.n	8000c0a <HAL_ADC_MspInit+0xa>
 8000c08:	4770      	bx	lr
{
 8000c0a:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c16:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c1e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000c20:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c22:	b002      	add	sp, #8
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40012400 	.word	0x40012400

08000c2c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000c2c:	6802      	ldr	r2, [r0, #0]
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_ADC_MspDeInit+0x18>)
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d000      	beq.n	8000c36 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000c34:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c3a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000c40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c42:	e7f7      	b.n	8000c34 <HAL_ADC_MspDeInit+0x8>
 8000c44:	40012400 	.word	0x40012400

08000c48 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000c48:	b530      	push	{r4, r5, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000c56:	f7ff ffa7 	bl	8000ba8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000c5a:	4816      	ldr	r0, [pc, #88]	@ (8000cb4 <ADC_ReadChannels+0x6c>)
 8000c5c:	f003 fed0 	bl	8004a00 <HAL_ADCEx_Calibration_Start>
 8000c60:	b9f8      	cbnz	r0, 8000ca2 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000c62:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c68:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c6a:	a901      	add	r1, sp, #4
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <ADC_ReadChannels+0x6c>)
 8000c6e:	f003 fc09 	bl	8004484 <HAL_ADC_ConfigChannel>
 8000c72:	b9c8      	cbnz	r0, 8000ca8 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000c74:	480f      	ldr	r0, [pc, #60]	@ (8000cb4 <ADC_ReadChannels+0x6c>)
 8000c76:	f003 fdc7 	bl	8004808 <HAL_ADC_Start>
 8000c7a:	b9c0      	cbnz	r0, 8000cae <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8000cb4 <ADC_ReadChannels+0x6c>)
 8000c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c82:	4620      	mov	r0, r4
 8000c84:	f003 fb9c 	bl	80043c0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f003 fe99 	bl	80049c0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f003 fbf5 	bl	800447e <HAL_ADC_GetValue>
 8000c94:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000c96:	4620      	mov	r0, r4
 8000c98:	f003 fe32 	bl	8004900 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	b005      	add	sp, #20
 8000ca0:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000ca2:	f000 fabf 	bl	8001224 <Error_Handler>
 8000ca6:	e7dc      	b.n	8000c62 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000ca8:	f000 fabc 	bl	8001224 <Error_Handler>
 8000cac:	e7e2      	b.n	8000c74 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000cae:	f000 fab9 	bl	8001224 <Error_Handler>
 8000cb2:	e7e3      	b.n	8000c7c <ADC_ReadChannels+0x34>
 8000cb4:	2000014c 	.word	0x2000014c

08000cb8 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000cb8:	4b01      	ldr	r3, [pc, #4]	@ (8000cc0 <SYS_InitMeasurement+0x8>)
 8000cba:	4a02      	ldr	r2, [pc, #8]	@ (8000cc4 <SYS_InitMeasurement+0xc>)
 8000cbc:	601a      	str	r2, [r3, #0]
}
 8000cbe:	4770      	bx	lr
 8000cc0:	2000014c 	.word	0x2000014c
 8000cc4:	40012400 	.word	0x40012400

08000cc8 <SYS_GetBatteryLevel>:
{
 8000cc8:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <SYS_GetBatteryLevel+0x38>)
 8000ccc:	f7ff ffbc 	bl	8000c48 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000cd0:	b1a0      	cbz	r0, 8000cfc <SYS_GetBatteryLevel+0x34>
 8000cd2:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <SYS_GetBatteryLevel+0x3c>)
 8000cd6:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 8000cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d007      	beq.n	8000cf2 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000ce2:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000ce6:	fb02 f000 	mul.w	r0, r2, r0
 8000cea:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cee:	b280      	uxth	r0, r0
 8000cf0:	e005      	b.n	8000cfe <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <SYS_GetBatteryLevel+0x40>)
 8000cf4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cf8:	b280      	uxth	r0, r0
 8000cfa:	e000      	b.n	8000cfe <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8000cfc:	2000      	movs	r0, #0
}
 8000cfe:	bd08      	pop	{r3, pc}
 8000d00:	b4002000 	.word	0xb4002000
 8000d04:	1fff7500 	.word	0x1fff7500
 8000d08:	004c08d8 	.word	0x004c08d8

08000d0c <SYS_GetTemperatureLevel>:
{
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000d16:	f7ff ffd7 	bl	8000cc8 <SYS_GetBatteryLevel>
 8000d1a:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000d1c:	4821      	ldr	r0, [pc, #132]	@ (8000da4 <SYS_GetTemperatureLevel+0x98>)
 8000d1e:	f7ff ff93 	bl	8000c48 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000d22:	4b21      	ldr	r3, [pc, #132]	@ (8000da8 <SYS_GetTemperatureLevel+0x9c>)
 8000d24:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 8000d28:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	d01d      	beq.n	8000d6c <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000d30:	fb00 f304 	mul.w	r3, r0, r4
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <SYS_GetTemperatureLevel+0xa0>)
 8000d38:	fba0 0303 	umull	r0, r3, r0, r3
 8000d3c:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8000d40:	2064      	movs	r0, #100	@ 0x64
 8000d42:	fb00 f303 	mul.w	r3, r0, r3
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d4c:	331e      	adds	r3, #30
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8000d54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8000d62:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8000d66:	b200      	sxth	r0, r0
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d6c:	fb04 f000 	mul.w	r0, r4, r0
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <SYS_GetTemperatureLevel+0xa4>)
 8000d72:	fba3 2300 	umull	r2, r3, r3, r0
 8000d76:	1ac4      	subs	r4, r0, r3
 8000d78:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8000d7c:	0adb      	lsrs	r3, r3, #11
 8000d7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000d8a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000d8e:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <SYS_GetTemperatureLevel+0xa8>)
 8000d90:	fb82 1203 	smull	r1, r2, r2, r3
 8000d94:	17db      	asrs	r3, r3, #31
 8000d96:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8000d9a:	331e      	adds	r3, #30
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000da2:	e7d7      	b.n	8000d54 <SYS_GetTemperatureLevel+0x48>
 8000da4:	b0001000 	.word	0xb0001000
 8000da8:	1fff7500 	.word	0x1fff7500
 8000dac:	09ee009f 	.word	0x09ee009f
 8000db0:	00100101 	.word	0x00100101
 8000db4:	68db8bad 	.word	0x68db8bad

08000db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db8:	b500      	push	{lr}
 8000dba:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000dc2:	f042 0204 	orr.w	r2, r2, #4
 8000dc6:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000dca:	f002 0204 	and.w	r2, r2, #4
 8000dce:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000dd0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000dd4:	f042 0201 	orr.w	r2, r2, #1
 8000dd8:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000de2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2102      	movs	r1, #2
 8000de8:	200f      	movs	r0, #15
 8000dea:	f003 ff0f 	bl	8004c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f003 ff1c 	bl	8004c2c <HAL_NVIC_EnableIRQ>

}
 8000df4:	b003      	add	sp, #12
 8000df6:	f85d fb04 	ldr.w	pc, [sp], #4

08000dfa <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e001      	b.n	8000e02 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8000dfe:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8000e00:	3308      	adds	r3, #8
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d20a      	bcs.n	8000e1c <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 8000e06:	6842      	ldr	r2, [r0, #4]
 8000e08:	f8d0 c000 	ldr.w	ip, [r0]
 8000e0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000e10:	bf08      	it	eq
 8000e12:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 8000e16:	d0f2      	beq.n	8000dfe <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8000e18:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 8000e1a:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	4770      	bx	lr

08000e20 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8000e20:	b130      	cbz	r0, 8000e30 <FLASH_IF_INT_Read+0x10>
{
 8000e22:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8000e24:	b139      	cbz	r1, 8000e36 <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8000e26:	b292      	uxth	r2, r2
 8000e28:	f012 fca0 	bl	801376c <UTIL_MEM_cpy_8>
  return ret_status;
 8000e2c:	2000      	movs	r0, #0
}
 8000e2e:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8000e30:	f06f 0005 	mvn.w	r0, #5
}
 8000e34:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 8000e36:	f06f 0005 	mvn.w	r0, #5
 8000e3a:	e7f8      	b.n	8000e2e <FLASH_IF_INT_Read+0xe>

08000e3c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8000e3c:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000e3e:	f004 f9ab 	bl	8005198 <HAL_FLASH_Unlock>
 8000e42:	b978      	cbnz	r0, 8000e64 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <FLASH_IF_INT_Clear_Error+0x30>)
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8000e4c:	619a      	str	r2, [r3, #24]
 8000e4e:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000e52:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8000e54:	f004 f9b8 	bl	80051c8 <HAL_FLASH_Lock>
 8000e58:	b908      	cbnz	r0, 8000e5e <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 8000e5a:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8000e5c:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8000e5e:	f06f 0004 	mvn.w	r0, #4
 8000e62:	e7fb      	b.n	8000e5c <FLASH_IF_INT_Clear_Error+0x20>
 8000e64:	f06f 0004 	mvn.w	r0, #4
 8000e68:	e7f8      	b.n	8000e5c <FLASH_IF_INT_Clear_Error+0x20>
 8000e6a:	bf00      	nop
 8000e6c:	58004000 	.word	0x58004000

08000e70 <FLASH_IF_INT_Erase>:
{
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d039      	beq.n	8000ef0 <FLASH_IF_INT_Erase+0x80>
 8000e7c:	460e      	mov	r6, r1
 8000e7e:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8000e80:	f7ff ffdc 	bl	8000e3c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8000e84:	4605      	mov	r5, r0
 8000e86:	b110      	cbz	r0, 8000e8e <FLASH_IF_INT_Erase+0x1e>
}
 8000e88:	4628      	mov	r0, r5
 8000e8a:	b004      	add	sp, #16
 8000e8c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8000e8e:	f004 f983 	bl	8005198 <HAL_FLASH_Unlock>
 8000e92:	bb80      	cbnz	r0, 8000ef6 <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e94:	2302      	movs	r3, #2
 8000e96:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8000e98:	f104 4378 	add.w	r3, r4, #4160749568	@ 0xf8000000
 8000e9c:	4817      	ldr	r0, [pc, #92]	@ (8000efc <FLASH_IF_INT_Erase+0x8c>)
 8000e9e:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	@ 0x5e0
 8000ea2:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <FLASH_IF_INT_Erase+0x90>)
 8000ea4:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8000ea8:	fbb3 fcf1 	udiv	ip, r3, r1
 8000eac:	fb01 331c 	mls	r3, r1, ip, r3
 8000eb0:	0adb      	lsrs	r3, r3, #11
 8000eb2:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8000eb4:	19a1      	adds	r1, r4, r6
 8000eb6:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 8000eba:	3901      	subs	r1, #1
 8000ebc:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	@ 0x5e0
 8000ec0:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8000ec4:	fbb1 f0f2 	udiv	r0, r1, r2
 8000ec8:	fb02 1110 	mls	r1, r2, r0, r1
 8000ecc:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8000ed4:	a903      	add	r1, sp, #12
 8000ed6:	4668      	mov	r0, sp
 8000ed8:	f004 fa4c 	bl	8005374 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8000edc:	b118      	cbz	r0, 8000ee6 <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d004      	beq.n	8000eec <FLASH_IF_INT_Erase+0x7c>
 8000ee2:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 8000ee6:	f004 f96f 	bl	80051c8 <HAL_FLASH_Lock>
 8000eea:	e7cd      	b.n	8000e88 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8000eec:	2501      	movs	r5, #1
 8000eee:	e7fa      	b.n	8000ee6 <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8000ef0:	f06f 0505 	mvn.w	r5, #5
 8000ef4:	e7c8      	b.n	8000e88 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8000ef6:	f06f 0504 	mvn.w	r5, #4
 8000efa:	e7c5      	b.n	8000e88 <FLASH_IF_INT_Erase+0x18>
 8000efc:	1fff7000 	.word	0x1fff7000
 8000f00:	03fffc00 	.word	0x03fffc00

08000f04 <FLASH_IF_INT_Write>:
{
 8000f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f08:	b089      	sub	sp, #36	@ 0x24
 8000f0a:	9003      	str	r0, [sp, #12]
 8000f0c:	9204      	str	r2, [sp, #16]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	f000 80b4 	beq.w	800107c <FLASH_IF_INT_Write+0x178>
 8000f14:	4683      	mov	fp, r0
 8000f16:	460e      	mov	r6, r1
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	f000 80b3 	beq.w	8001084 <FLASH_IF_INT_Write+0x180>
 8000f1e:	f012 0f07 	tst.w	r2, #7
 8000f22:	f040 80b3 	bne.w	800108c <FLASH_IF_INT_Write+0x188>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8000f26:	f010 0307 	ands.w	r3, r0, #7
 8000f2a:	9305      	str	r3, [sp, #20]
 8000f2c:	f040 80b2 	bne.w	8001094 <FLASH_IF_INT_Write+0x190>
  ret_status = FLASH_IF_INT_Clear_Error();
 8000f30:	f7ff ff84 	bl	8000e3c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8000f34:	9001      	str	r0, [sp, #4]
 8000f36:	b118      	cbz	r0, 8000f40 <FLASH_IF_INT_Write+0x3c>
}
 8000f38:	9801      	ldr	r0, [sp, #4]
 8000f3a:	b009      	add	sp, #36	@ 0x24
 8000f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8000f40:	f004 f92a 	bl	8005198 <HAL_FLASH_Unlock>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	f040 80a9 	bne.w	800109c <FLASH_IF_INT_Write+0x198>
      start_page_index = PAGE_INDEX(uDest);
 8000f4a:	9c03      	ldr	r4, [sp, #12]
 8000f4c:	f104 4278 	add.w	r2, r4, #4160749568	@ 0xf8000000
 8000f50:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <FLASH_IF_INT_Write+0x1a0>)
 8000f52:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	@ 0x5e0
 8000f56:	4954      	ldr	r1, [pc, #336]	@ (80010a8 <FLASH_IF_INT_Write+0x1a4>)
 8000f58:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8000f5c:	fbb2 f3f1 	udiv	r3, r2, r1
 8000f60:	fb01 2213 	mls	r2, r1, r3, r2
 8000f64:	0ad3      	lsrs	r3, r2, #11
 8000f66:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8000f68:	9b04      	ldr	r3, [sp, #16]
 8000f6a:	18e3      	adds	r3, r4, r3
 8000f6c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000f70:	3b01      	subs	r3, #1
 8000f72:	fbb3 f0f1 	udiv	r0, r3, r1
 8000f76:	fb01 3310 	mls	r3, r1, r0, r3
 8000f7a:	0adb      	lsrs	r3, r3, #11
 8000f7c:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8000f80:	3301      	adds	r3, #1
      if (number_pages > 1)
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d907      	bls.n	8000f96 <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8000f86:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8000f8a:	f5c9 6900 	rsb	r9, r9, #2048	@ 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8000f8e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8000f92:	9307      	str	r3, [sp, #28]
 8000f94:	e031      	b.n	8000ffa <FLASH_IF_INT_Write+0xf6>
  uint32_t length = uLength;
 8000f96:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8000f9a:	e7f8      	b.n	8000f8e <FLASH_IF_INT_Write+0x8a>
          current_length = length;
 8000f9c:	46c8      	mov	r8, r9
          current_source = uSource;
 8000f9e:	4637      	mov	r7, r6
          current_dest = uDest;
 8000fa0:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8000fa2:	9d05      	ldr	r5, [sp, #20]
 8000fa4:	f8cd b008 	str.w	fp, [sp, #8]
 8000fa8:	4545      	cmp	r5, r8
 8000faa:	d215      	bcs.n	8000fd8 <FLASH_IF_INT_Write+0xd4>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8000fac:	eb05 0b07 	add.w	fp, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8000fb0:	e9db 2300 	ldrd	r2, r3, [fp]
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f004 f954 	bl	8005264 <HAL_FLASH_Program>
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d147      	bne.n	8001050 <FLASH_IF_INT_Write+0x14c>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8000fc0:	6820      	ldr	r0, [r4, #0]
 8000fc2:	6862      	ldr	r2, [r4, #4]
 8000fc4:	59e9      	ldr	r1, [r5, r7]
 8000fc6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	bf08      	it	eq
 8000fce:	4288      	cmpeq	r0, r1
 8000fd0:	d144      	bne.n	800105c <FLASH_IF_INT_Write+0x158>
            current_dest = current_dest + 8U;
 8000fd2:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8000fd4:	3508      	adds	r5, #8
 8000fd6:	e7e7      	b.n	8000fa8 <FLASH_IF_INT_Write+0xa4>
 8000fd8:	f8dd b008 	ldr.w	fp, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d145      	bne.n	800106e <FLASH_IF_INT_Write+0x16a>
        uDest += length;
 8000fe2:	44cb      	add	fp, r9
        uSource += length;
 8000fe4:	444e      	add	r6, r9
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8000fe6:	9b04      	ldr	r3, [sp, #16]
 8000fe8:	eba3 0909 	sub.w	r9, r3, r9
 8000fec:	f5b9 6f00 	cmp.w	r9, #2048	@ 0x800
 8000ff0:	bf28      	it	cs
 8000ff2:	f44f 6900 	movcs.w	r9, #2048	@ 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8000ff6:	f10a 0a01 	add.w	sl, sl, #1
 8000ffa:	9b06      	ldr	r3, [sp, #24]
 8000ffc:	9a07      	ldr	r2, [sp, #28]
 8000ffe:	4413      	add	r3, r2
 8001000:	4553      	cmp	r3, sl
 8001002:	d934      	bls.n	800106e <FLASH_IF_INT_Write+0x16a>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001004:	f50a 3480 	add.w	r4, sl, #65536	@ 0x10000
 8001008:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800100a:	4649      	mov	r1, r9
 800100c:	9803      	ldr	r0, [sp, #12]
 800100e:	f7ff fef4 	bl	8000dfa <FLASH_IF_INT_IsEmpty>
 8001012:	2800      	cmp	r0, #0
 8001014:	d0c2      	beq.n	8000f9c <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <FLASH_IF_INT_Write+0x1a8>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	b328      	cbz	r0, 8001068 <FLASH_IF_INT_Write+0x164>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800101c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001020:	4621      	mov	r1, r4
 8001022:	f7ff fefd 	bl	8000e20 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <FLASH_IF_INT_Write+0x1a8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f3cb 000a 	ubfx	r0, fp, #0, #11
 800102e:	fa1f f289 	uxth.w	r2, r9
 8001032:	4631      	mov	r1, r6
 8001034:	4418      	add	r0, r3
 8001036:	f012 fb99 	bl	801376c <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800103a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff ff16 	bl	8000e70 <FLASH_IF_INT_Erase>
 8001044:	b9b0      	cbnz	r0, 8001074 <FLASH_IF_INT_Write+0x170>
          current_source = (uint32_t)pAllocatedBuffer;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <FLASH_IF_INT_Write+0x1a8>)
 8001048:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800104a:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 800104e:	e7a8      	b.n	8000fa2 <FLASH_IF_INT_Write+0x9e>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001050:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001054:	f06f 0303 	mvn.w	r3, #3
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	e7bf      	b.n	8000fdc <FLASH_IF_INT_Write+0xd8>
              ret_status = FLASH_IF_WRITE_ERROR;
 800105c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001060:	f06f 0303 	mvn.w	r3, #3
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	e7b9      	b.n	8000fdc <FLASH_IF_INT_Write+0xd8>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001068:	f06f 0305 	mvn.w	r3, #5
 800106c:	9301      	str	r3, [sp, #4]
      HAL_FLASH_Lock();
 800106e:	f004 f8ab 	bl	80051c8 <HAL_FLASH_Lock>
 8001072:	e761      	b.n	8000f38 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001074:	f06f 0301 	mvn.w	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	e7f8      	b.n	800106e <FLASH_IF_INT_Write+0x16a>
    return FLASH_IF_PARAM_ERROR;
 800107c:	f06f 0305 	mvn.w	r3, #5
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	e759      	b.n	8000f38 <FLASH_IF_INT_Write+0x34>
 8001084:	f06f 0305 	mvn.w	r3, #5
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	e755      	b.n	8000f38 <FLASH_IF_INT_Write+0x34>
 800108c:	f06f 0305 	mvn.w	r3, #5
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	e751      	b.n	8000f38 <FLASH_IF_INT_Write+0x34>
 8001094:	f06f 0305 	mvn.w	r3, #5
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	e74d      	b.n	8000f38 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800109c:	f06f 0304 	mvn.w	r3, #4
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	e749      	b.n	8000f38 <FLASH_IF_INT_Write+0x34>
 80010a4:	1fff7000 	.word	0x1fff7000
 80010a8:	03fffc00 	.word	0x03fffc00
 80010ac:	200001b0 	.word	0x200001b0

080010b0 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80010b0:	4b01      	ldr	r3, [pc, #4]	@ (80010b8 <FLASH_IF_Init+0x8>)
 80010b2:	6018      	str	r0, [r3, #0]
}
 80010b4:	2000      	movs	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	200001b0 	.word	0x200001b0

080010bc <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80010bc:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 80010c0:	d30e      	bcc.n	80010e0 <FLASH_IF_Write+0x24>
{
 80010c2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <FLASH_IF_Write+0x30>)
 80010c6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <FLASH_IF_Write+0x34>)
 80010cc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80010d0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4298      	cmp	r0, r3
 80010d8:	d805      	bhi.n	80010e6 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80010da:	f7ff ff13 	bl	8000f04 <FLASH_IF_INT_Write>
}
 80010de:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010e4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	e7f8      	b.n	80010de <FLASH_IF_Write+0x22>
 80010ec:	1fff7000 	.word	0x1fff7000
 80010f0:	03fffc00 	.word	0x03fffc00

080010f4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80010f4:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 80010f8:	d30e      	bcc.n	8001118 <FLASH_IF_Read+0x24>
{
 80010fa:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <FLASH_IF_Read+0x30>)
 80010fe:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <FLASH_IF_Read+0x34>)
 8001104:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001108:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800110c:	3b01      	subs	r3, #1
 800110e:	4299      	cmp	r1, r3
 8001110:	d805      	bhi.n	800111e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001112:	f7ff fe85 	bl	8000e20 <FLASH_IF_INT_Read>
}
 8001116:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
}
 800111c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800111e:	f04f 30ff 	mov.w	r0, #4294967295
 8001122:	e7f8      	b.n	8001116 <FLASH_IF_Read+0x22>
 8001124:	1fff7000 	.word	0x1fff7000
 8001128:	03fffc00 	.word	0x03fffc00

0800112c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800112c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8001130:	d30e      	bcc.n	8001150 <FLASH_IF_Erase+0x24>
{
 8001132:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <FLASH_IF_Erase+0x30>)
 8001136:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	@ 0x5e0
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <FLASH_IF_Erase+0x34>)
 800113c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001140:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001144:	3b01      	subs	r3, #1
 8001146:	4298      	cmp	r0, r3
 8001148:	d805      	bhi.n	8001156 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800114a:	f7ff fe91 	bl	8000e70 <FLASH_IF_INT_Erase>
}
 800114e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001154:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001156:	f04f 30ff 	mov.w	r0, #4294967295
 800115a:	e7f8      	b.n	800114e <FLASH_IF_Erase+0x22>
 800115c:	1fff7000 	.word	0x1fff7000
 8001160:	03fffc00 	.word	0x03fffc00

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001168:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	2400      	movs	r4, #0
 800116c:	9403      	str	r4, [sp, #12]
 800116e:	9404      	str	r4, [sp, #16]
 8001170:	9405      	str	r4, [sp, #20]
 8001172:	9406      	str	r4, [sp, #24]
 8001174:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800117a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800117c:	f042 0202 	orr.w	r2, r2, #2
 8001180:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001184:	f002 0202 	and.w	r2, r2, #2
 8001188:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800118a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800118c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800118e:	f042 0204 	orr.w	r2, r2, #4
 8001192:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001196:	f002 0204 	and.w	r2, r2, #4
 800119a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800119c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800119e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011ae:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80011b0:	4e1a      	ldr	r6, [pc, #104]	@ (800121c <MX_GPIO_Init+0xb8>)
 80011b2:	4622      	mov	r2, r4
 80011b4:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 80011b8:	4630      	mov	r0, r6
 80011ba:	f004 fa6b 	bl	8005694 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80011be:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 80011c2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2501      	movs	r5, #1
 80011c6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2302      	movs	r3, #2
 80011cc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	a903      	add	r1, sp, #12
 80011d0:	4630      	mov	r0, r6
 80011d2:	f004 f90f 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80011d6:	f04f 0803 	mov.w	r8, #3
 80011da:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011de:	f44f 1704 	mov.w	r7, #2162688	@ 0x210000
 80011e2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	a903      	add	r1, sp, #12
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ec:	f004 f902 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80011f0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	a903      	add	r1, sp, #12
 8001200:	4630      	mov	r0, r6
 8001202:	f004 f8f7 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001206:	2340      	movs	r3, #64	@ 0x40
 8001208:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800120e:	a903      	add	r1, sp, #12
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <MX_GPIO_Init+0xbc>)
 8001212:	f004 f8ef 	bl	80053f4 <HAL_GPIO_Init>

}
 8001216:	b008      	add	sp, #32
 8001218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800

08001224 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001226:	e7fe      	b.n	8001226 <Error_Handler+0x2>

08001228 <SystemClock_Config>:
{
 8001228:	b510      	push	{r4, lr}
 800122a:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122c:	2248      	movs	r2, #72	@ 0x48
 800122e:	2100      	movs	r1, #0
 8001230:	a808      	add	r0, sp, #32
 8001232:	f013 fa11 	bl	8014658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001236:	2400      	movs	r4, #0
 8001238:	9401      	str	r4, [sp, #4]
 800123a:	9402      	str	r4, [sp, #8]
 800123c:	9403      	str	r4, [sp, #12]
 800123e:	9404      	str	r4, [sp, #16]
 8001240:	9405      	str	r4, [sp, #20]
 8001242:	9406      	str	r4, [sp, #24]
 8001244:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001246:	f004 fa33 	bl	80056b0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800124a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800124e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001252:	f023 0318 	bic.w	r3, r3, #24
 8001256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800125e:	6813      	ldr	r3, [r2, #0]
 8001260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001274:	2324      	movs	r3, #36	@ 0x24
 8001276:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001278:	2381      	movs	r3, #129	@ 0x81
 800127a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001280:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001282:	23b0      	movs	r3, #176	@ 0xb0
 8001284:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001286:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	a808      	add	r0, sp, #32
 800128a:	f004 fbab 	bl	80059e4 <HAL_RCC_OscConfig>
 800128e:	b970      	cbnz	r0, 80012ae <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001290:	234f      	movs	r3, #79	@ 0x4f
 8001292:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001294:	2300      	movs	r3, #0
 8001296:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800129e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a0:	2102      	movs	r1, #2
 80012a2:	a801      	add	r0, sp, #4
 80012a4:	f004 fed0 	bl	8006048 <HAL_RCC_ClockConfig>
 80012a8:	b918      	cbnz	r0, 80012b2 <SystemClock_Config+0x8a>
}
 80012aa:	b01a      	add	sp, #104	@ 0x68
 80012ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012ae:	f7ff ffb9 	bl	8001224 <Error_Handler>
    Error_Handler();
 80012b2:	f7ff ffb7 	bl	8001224 <Error_Handler>

080012b6 <main>:
{
 80012b6:	b508      	push	{r3, lr}
  HAL_Init();
 80012b8:	f002 ff1c 	bl	80040f4 <HAL_Init>
  SystemClock_Config();
 80012bc:	f7ff ffb4 	bl	8001228 <SystemClock_Config>
  MX_GPIO_Init();
 80012c0:	f7ff ff50 	bl	8001164 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80012c4:	f000 fcbe 	bl	8001c44 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80012c8:	f000 fcc2 	bl	8001c50 <MX_LoRaWAN_Process>
  while (1)
 80012cc:	e7fc      	b.n	80012c8 <main+0x12>
	...

080012d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012d0:	b500      	push	{lr}
 80012d2:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80012d4:	222c      	movs	r2, #44	@ 0x2c
 80012d6:	2100      	movs	r1, #0
 80012d8:	a801      	add	r0, sp, #4
 80012da:	f013 f9bd 	bl	8014658 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012de:	4819      	ldr	r0, [pc, #100]	@ (8001344 <MX_RTC_Init+0x74>)
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <MX_RTC_Init+0x78>)
 80012e2:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80012e4:	231f      	movs	r3, #31
 80012e6:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012ec:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ee:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f4:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012f6:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80012f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fc:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012fe:	f005 f9ed 	bl	80066dc <HAL_RTC_Init>
 8001302:	b9a8      	cbnz	r0, 8001330 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <MX_RTC_Init+0x74>)
 8001306:	f005 fb2d 	bl	8006964 <HAL_RTCEx_SetSSRU_IT>
 800130a:	b9a0      	cbnz	r0, 8001336 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800130c:	2200      	movs	r2, #0
 800130e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001310:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001312:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001314:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001318:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800131a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800131e:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001320:	a901      	add	r1, sp, #4
 8001322:	4808      	ldr	r0, [pc, #32]	@ (8001344 <MX_RTC_Init+0x74>)
 8001324:	f005 fa42 	bl	80067ac <HAL_RTC_SetAlarm_IT>
 8001328:	b940      	cbnz	r0, 800133c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800132a:	b00d      	add	sp, #52	@ 0x34
 800132c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001330:	f7ff ff78 	bl	8001224 <Error_Handler>
 8001334:	e7e6      	b.n	8001304 <MX_RTC_Init+0x34>
    Error_Handler();
 8001336:	f7ff ff75 	bl	8001224 <Error_Handler>
 800133a:	e7e7      	b.n	800130c <MX_RTC_Init+0x3c>
    Error_Handler();
 800133c:	f7ff ff72 	bl	8001224 <Error_Handler>
}
 8001340:	e7f3      	b.n	800132a <MX_RTC_Init+0x5a>
 8001342:	bf00      	nop
 8001344:	200001b4 	.word	0x200001b4
 8001348:	40002800 	.word	0x40002800

0800134c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800134c:	b510      	push	{r4, lr}
 800134e:	b090      	sub	sp, #64	@ 0x40
 8001350:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001352:	2238      	movs	r2, #56	@ 0x38
 8001354:	2100      	movs	r1, #0
 8001356:	a802      	add	r0, sp, #8
 8001358:	f013 f97e 	bl	8014658 <memset>
  if(rtcHandle->Instance==RTC)
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_RTC_MspInit+0x7c>)
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001364:	b010      	add	sp, #64	@ 0x40
 8001366:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800136c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800136e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001372:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	a802      	add	r0, sp, #8
 8001376:	f004 ffcb 	bl	8006310 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	bb08      	cbnz	r0, 80013c0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001380:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800138c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800138e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001392:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800139c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	4611      	mov	r1, r2
 80013a2:	2002      	movs	r0, #2
 80013a4:	f003 fc32 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80013a8:	2002      	movs	r0, #2
 80013aa:	f003 fc3f 	bl	8004c2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	4611      	mov	r1, r2
 80013b2:	202a      	movs	r0, #42	@ 0x2a
 80013b4:	f003 fc2a 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013b8:	202a      	movs	r0, #42	@ 0x2a
 80013ba:	f003 fc37 	bl	8004c2c <HAL_NVIC_EnableIRQ>
}
 80013be:	e7d1      	b.n	8001364 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80013c0:	f7ff ff30 	bl	8001224 <Error_Handler>
 80013c4:	e7da      	b.n	800137c <HAL_RTC_MspInit+0x30>
 80013c6:	bf00      	nop
 80013c8:	40002800 	.word	0x40002800

080013cc <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80013cc:	4770      	bx	lr

080013ce <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80013ce:	4770      	bx	lr

080013d0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80013d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80013d2:	f002 fea5 	bl	8004120 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80013d6:	2001      	movs	r0, #1
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <PWR_EnterStopMode+0x14>)
 80013da:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80013de:	f004 f9cb 	bl	8005778 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80013e2:	bd08      	pop	{r3, pc}
 80013e4:	58000400 	.word	0x58000400

080013e8 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80013e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80013ea:	f002 fea0 	bl	800412e <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80013ee:	bd08      	pop	{r3, pc}

080013f0 <PWR_ExitStopMode>:
{
 80013f0:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80013f2:	f002 fe9c 	bl	800412e <HAL_ResumeTick>
  vcom_Resume();
 80013f6:	f000 fbed 	bl	8001bd4 <vcom_Resume>
}
 80013fa:	bd08      	pop	{r3, pc}

080013fc <PWR_EnterSleepMode>:
{
 80013fc:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80013fe:	f002 fe8f 	bl	8004120 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001402:	2101      	movs	r1, #1
 8001404:	2000      	movs	r0, #0
 8001406:	f004 f95b 	bl	80056c0 <HAL_PWR_EnterSLEEPMode>
}
 800140a:	bd08      	pop	{r3, pc}

0800140c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	4770      	bx	lr

0800140e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140e:	e7fe      	b.n	800140e <NMI_Handler>

08001410 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <HardFault_Handler>

08001412 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <MemManage_Handler>

08001414 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <BusFault_Handler>

08001416 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <UsageFault_Handler>

08001418 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001418:	4770      	bx	lr

0800141a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	4770      	bx	lr

0800141c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	4770      	bx	lr

08001420 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001422:	4802      	ldr	r0, [pc, #8]	@ (800142c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001424:	f005 faca 	bl	80069bc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001428:	bd08      	pop	{r3, pc}
 800142a:	bf00      	nop
 800142c:	200001b4 	.word	0x200001b4

08001430 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001432:	4802      	ldr	r0, [pc, #8]	@ (800143c <DMA1_Channel5_IRQHandler+0xc>)
 8001434:	f003 fdfe 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001438:	bd08      	pop	{r3, pc}
 800143a:	bf00      	nop
 800143c:	20000204 	.word	0x20000204

08001440 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001440:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001442:	4802      	ldr	r0, [pc, #8]	@ (800144c <LPUART1_IRQHandler+0xc>)
 8001444:	f005 ff7c 	bl	8007340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop
 800144c:	20000264 	.word	0x20000264

08001450 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001450:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001452:	4802      	ldr	r0, [pc, #8]	@ (800145c <RTC_Alarm_IRQHandler+0xc>)
 8001454:	f005 f8bc 	bl	80065d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001458:	bd08      	pop	{r3, pc}
 800145a:	bf00      	nop
 800145c:	200001b4 	.word	0x200001b4

08001460 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001462:	4802      	ldr	r0, [pc, #8]	@ (800146c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001464:	f005 fd62 	bl	8006f2c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001468:	bd08      	pop	{r3, pc}
 800146a:	bf00      	nop
 800146c:	200001ec 	.word	0x200001ec

08001470 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001470:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_SUBGHZ_Init+0x18>)
 8001474:	2308      	movs	r3, #8
 8001476:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001478:	f005 fad6 	bl	8006a28 <HAL_SUBGHZ_Init>
 800147c:	b900      	cbnz	r0, 8001480 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800147e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001480:	f7ff fed0 	bl	8001224 <Error_Handler>
}
 8001484:	e7fb      	b.n	800147e <MX_SUBGHZ_Init+0xe>
 8001486:	bf00      	nop
 8001488:	200001ec 	.word	0x200001ec

0800148c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800148c:	b500      	push	{lr}
 800148e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001494:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800149c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80014a4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	4611      	mov	r1, r2
 80014aa:	2032      	movs	r0, #50	@ 0x32
 80014ac:	f003 fbae 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80014b0:	2032      	movs	r0, #50	@ 0x32
 80014b2:	f003 fbbb 	bl	8004c2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80014b6:	b003      	add	sp, #12
 80014b8:	f85d fb04 	ldr.w	pc, [sp], #4

080014bc <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80014bc:	b40c      	push	{r2, r3}
 80014be:	b500      	push	{lr}
 80014c0:	b083      	sub	sp, #12
 80014c2:	ab04      	add	r3, sp, #16
 80014c4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80014c8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80014ca:	f013 f801 	bl	80144d0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80014ce:	b003      	add	sp, #12
 80014d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80014d4:	b002      	add	sp, #8
 80014d6:	4770      	bx	lr

080014d8 <TimestampNow>:
{
 80014d8:	b530      	push	{r4, r5, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 80014e0:	a802      	add	r0, sp, #8
 80014e2:	f012 fb51 	bl	8013b88 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80014e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	9b02      	ldr	r3, [sp, #8]
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <TimestampNow+0x2c>)
 80014f0:	2110      	movs	r1, #16
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff ffe2 	bl	80014bc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7fe fe3d 	bl	8000178 <strlen>
 80014fe:	8028      	strh	r0, [r5, #0]
}
 8001500:	b005      	add	sp, #20
 8001502:	bd30      	pop	{r4, r5, pc}
 8001504:	080148e8 	.word	0x080148e8

08001508 <SystemApp_Init>:
{
 8001508:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800150a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800150e:	6893      	ldr	r3, [r2, #8]
 8001510:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001514:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001516:	f012 fc2d 	bl	8013d74 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800151a:	2401      	movs	r4, #1
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <SystemApp_Init+0x48>)
 800151e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001520:	f000 f8b4 	bl	800168c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001524:	f011 ff7e 	bl	8013424 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001528:	480a      	ldr	r0, [pc, #40]	@ (8001554 <SystemApp_Init+0x4c>)
 800152a:	f011 ffa9 	bl	8013480 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <SystemApp_Init+0x50>)
 8001530:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001534:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001536:	2002      	movs	r0, #2
 8001538:	f011 ffa8 	bl	801348c <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800153c:	f7ff fbbc 	bl	8000cb8 <SYS_InitMeasurement>
  UTIL_LPM_Init();
 8001540:	f012 f8ba 	bl	80136b8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001544:	4621      	mov	r1, r4
 8001546:	4620      	mov	r0, r4
 8001548:	f012 f8d6 	bl	80136f8 <UTIL_LPM_SetOffMode>
}
 800154c:	bd10      	pop	{r4, pc}
 800154e:	bf00      	nop
 8001550:	200001f8 	.word	0x200001f8
 8001554:	080014d9 	.word	0x080014d9
 8001558:	58004000 	.word	0x58004000

0800155c <UTIL_SEQ_Idle>:
{
 800155c:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 800155e:	f012 f8e1 	bl	8013724 <UTIL_LPM_EnterLowPower>
}
 8001562:	bd08      	pop	{r3, pc}

08001564 <GetBatteryLevel>:
{
 8001564:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001566:	f7ff fbaf 	bl	8000cc8 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800156a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800156e:	4298      	cmp	r0, r3
 8001570:	d80d      	bhi.n	800158e <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001572:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001576:	d30c      	bcc.n	8001592 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001578:	f5a0 60e1 	sub.w	r0, r0, #1800	@ 0x708
 800157c:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001580:	0040      	lsls	r0, r0, #1
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <GetBatteryLevel+0x34>)
 8001584:	fba3 3000 	umull	r3, r0, r3, r0
 8001588:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 800158c:	e000      	b.n	8001590 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 800158e:	20fe      	movs	r0, #254	@ 0xfe
}
 8001590:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001592:	2000      	movs	r0, #0
 8001594:	e7fc      	b.n	8001590 <GetBatteryLevel+0x2c>
 8001596:	bf00      	nop
 8001598:	1b4e81b5 	.word	0x1b4e81b5

0800159c <GetTemperatureLevel>:
{
 800159c:	b508      	push	{r3, lr}
  temperatureLevel = (int16_t)(SYS_GetTemperatureLevel() >> 8);
 800159e:	f7ff fbb5 	bl	8000d0c <SYS_GetTemperatureLevel>
}
 80015a2:	f340 200f 	sbfx	r0, r0, #8, #16
 80015a6:	bd08      	pop	{r3, pc}

080015a8 <GetUniqueId>:
{
 80015a8:	b538      	push	{r3, r4, r5, lr}
 80015aa:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <GetUniqueId+0x68>)
 80015ae:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80015b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b6:	d013      	beq.n	80015e0 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 80015b8:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80015ba:	0a1a      	lsrs	r2, r3, #8
 80015bc:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80015be:	0c1a      	lsrs	r2, r3, #16
 80015c0:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 80015c2:	0e1b      	lsrs	r3, r3, #24
 80015c4:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <GetUniqueId+0x68>)
 80015c8:	f8d3 2584 	ldr.w	r2, [r3, #1412]	@ 0x584
    id[3] = val & 0xFF;
 80015cc:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80015ce:	f8d3 3584 	ldr.w	r3, [r3, #1412]	@ 0x584
 80015d2:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 80015d4:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 80015d6:	0c1a      	lsrs	r2, r3, #16
 80015d8:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 80015da:	0e1b      	lsrs	r3, r3, #24
 80015dc:	7003      	strb	r3, [r0, #0]
}
 80015de:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80015e0:	f002 fdac 	bl	800413c <HAL_GetUIDw0>
 80015e4:	4605      	mov	r5, r0
 80015e6:	f002 fdb5 	bl	8004154 <HAL_GetUIDw2>
 80015ea:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 80015ec:	f002 fdac 	bl	8004148 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 80015f0:	0e2b      	lsrs	r3, r5, #24
 80015f2:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 80015f4:	0c2b      	lsrs	r3, r5, #16
 80015f6:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 80015f8:	0a2b      	lsrs	r3, r5, #8
 80015fa:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 80015fc:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 80015fe:	0e03      	lsrs	r3, r0, #24
 8001600:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001602:	0c03      	lsrs	r3, r0, #16
 8001604:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001606:	0a03      	lsrs	r3, r0, #8
 8001608:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800160a:	7020      	strb	r0, [r4, #0]
 800160c:	e7e7      	b.n	80015de <GetUniqueId+0x36>
 800160e:	bf00      	nop
 8001610:	1fff7000 	.word	0x1fff7000

08001614 <GetDevAddr>:
{
 8001614:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001616:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <GetDevAddr+0x2c>)
 8001618:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  *devAddr = LL_FLASH_GetUDN();
 800161c:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d000      	beq.n	8001626 <GetDevAddr+0x12>
}
 8001624:	bd38      	pop	{r3, r4, r5, pc}
 8001626:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001628:	f002 fd88 	bl	800413c <HAL_GetUIDw0>
 800162c:	4605      	mov	r5, r0
 800162e:	f002 fd8b 	bl	8004148 <HAL_GetUIDw1>
 8001632:	4045      	eors	r5, r0
 8001634:	f002 fd8e 	bl	8004154 <HAL_GetUIDw2>
 8001638:	4045      	eors	r5, r0
 800163a:	6025      	str	r5, [r4, #0]
}
 800163c:	e7f2      	b.n	8001624 <GetDevAddr+0x10>
 800163e:	bf00      	nop
 8001640:	1fff7000 	.word	0x1fff7000

08001644 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001644:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001646:	2101      	movs	r1, #1
 8001648:	2002      	movs	r0, #2
 800164a:	f012 f83f 	bl	80136cc <UTIL_LPM_SetStopMode>
}
 800164e:	bd08      	pop	{r3, pc}

08001650 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001650:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001652:	2100      	movs	r1, #0
 8001654:	2002      	movs	r0, #2
 8001656:	f012 f839 	bl	80136cc <UTIL_LPM_SetStopMode>
}
 800165a:	bd08      	pop	{r3, pc}

0800165c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800165c:	2000      	movs	r0, #0
 800165e:	4770      	bx	lr

08001660 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001660:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <HAL_GetTick+0x14>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b90b      	cbnz	r3, 800166c <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001668:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 800166a:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 800166c:	f000 f87c 	bl	8001768 <TIMER_IF_GetTimerValue>
 8001670:	e7fb      	b.n	800166a <HAL_GetTick+0xa>
 8001672:	bf00      	nop
 8001674:	200001f8 	.word	0x200001f8

08001678 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001678:	b500      	push	{lr}
 800167a:	b083      	sub	sp, #12
 800167c:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800167e:	9801      	ldr	r0, [sp, #4]
 8001680:	f000 f958 	bl	8001934 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001684:	b003      	add	sp, #12
 8001686:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800168c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001690:	f002 fd66 	bl	8004160 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001694:	f002 fd6c 	bl	8004170 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001698:	f002 fd72 	bl	8004180 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800169c:	2400      	movs	r4, #0
 800169e:	9403      	str	r4, [sp, #12]
 80016a0:	9404      	str	r4, [sp, #16]
 80016a2:	9405      	str	r4, [sp, #20]
 80016a4:	9406      	str	r4, [sp, #24]
 80016a6:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016b6:	f042 0202 	orr.w	r2, r2, #2
 80016ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016be:	f002 0202 	and.w	r2, r2, #2
 80016c2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80016c4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016c8:	f042 0202 	orr.w	r2, r2, #2
 80016cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016d6:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80016d8:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 80016dc:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80016de:	4d0c      	ldr	r5, [pc, #48]	@ (8001710 <DBG_Init+0x84>)
 80016e0:	a903      	add	r1, sp, #12
 80016e2:	4628      	mov	r0, r5
 80016e4:	f003 fe86 	bl	80053f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80016e8:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 80016ec:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80016ee:	a903      	add	r1, sp, #12
 80016f0:	4628      	mov	r0, r5
 80016f2:	f003 fe7f 	bl	80053f4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80016f6:	4622      	mov	r2, r4
 80016f8:	4639      	mov	r1, r7
 80016fa:	4628      	mov	r0, r5
 80016fc:	f003 ffca 	bl	8005694 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001700:	4622      	mov	r2, r4
 8001702:	4631      	mov	r1, r6
 8001704:	4628      	mov	r0, r5
 8001706:	f003 ffc5 	bl	8005694 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800170a:	b009      	add	sp, #36	@ 0x24
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	bf00      	nop
 8001710:	48000400 	.word	0x48000400

08001714 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <TIMER_IF_SetTimerContext+0x1c>)
 8001716:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001718:	e001      	b.n	800171e <TIMER_IF_SetTimerContext+0xa>
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <TIMER_IF_SetTimerContext+0x1c>)
 800171c:	6898      	ldr	r0, [r3, #8]
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <TIMER_IF_SetTimerContext+0x1c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4283      	cmp	r3, r0
 8001724:	d1f9      	bne.n	800171a <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001726:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001728:	4b02      	ldr	r3, [pc, #8]	@ (8001734 <TIMER_IF_SetTimerContext+0x20>)
 800172a:	6018      	str	r0, [r3, #0]
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40002800 	.word	0x40002800
 8001734:	200001fc 	.word	0x200001fc

08001738 <TIMER_IF_GetTimerContext>:
}
 8001738:	4b01      	ldr	r3, [pc, #4]	@ (8001740 <TIMER_IF_GetTimerContext+0x8>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200001fc 	.word	0x200001fc

08001744 <TIMER_IF_GetTimerElapsedTime>:
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001746:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001748:	e001      	b.n	800174e <TIMER_IF_GetTimerElapsedTime+0xa>
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800174c:	6898      	ldr	r0, [r3, #8]
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	4283      	cmp	r3, r0
 8001754:	d1f9      	bne.n	800174a <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001756:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001758:	4b02      	ldr	r3, [pc, #8]	@ (8001764 <TIMER_IF_GetTimerElapsedTime+0x20>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	1ac0      	subs	r0, r0, r3
 800175e:	4770      	bx	lr
 8001760:	40002800 	.word	0x40002800
 8001764:	200001fc 	.word	0x200001fc

08001768 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <TIMER_IF_GetTimerValue+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b153      	cbz	r3, 8001784 <TIMER_IF_GetTimerValue+0x1c>
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <TIMER_IF_GetTimerValue+0x24>)
 8001770:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001772:	e001      	b.n	8001778 <TIMER_IF_GetTimerValue+0x10>
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <TIMER_IF_GetTimerValue+0x24>)
 8001776:	6898      	ldr	r0, [r3, #8]
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <TIMER_IF_GetTimerValue+0x24>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4283      	cmp	r3, r0
 800177e:	d1f9      	bne.n	8001774 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001780:	43c0      	mvns	r0, r0
 8001782:	4770      	bx	lr
  uint32_t ret = 0;
 8001784:	2000      	movs	r0, #0
}
 8001786:	4770      	bx	lr
 8001788:	20000200 	.word	0x20000200
 800178c:	40002800 	.word	0x40002800

08001790 <TIMER_IF_GetMinimumTimeout>:
}
 8001790:	2003      	movs	r0, #3
 8001792:	4770      	bx	lr

08001794 <TIMER_IF_Convert_ms2Tick>:
{
 8001794:	b508      	push	{r3, lr}
 8001796:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001798:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800179c:	2300      	movs	r3, #0
 800179e:	0280      	lsls	r0, r0, #10
 80017a0:	0d89      	lsrs	r1, r1, #22
 80017a2:	f7ff f86b 	bl	800087c <__aeabi_uldivmod>
}
 80017a6:	bd08      	pop	{r3, pc}

080017a8 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80017a8:	0ec2      	lsrs	r2, r0, #27
 80017aa:	0143      	lsls	r3, r0, #5
 80017ac:	1a1b      	subs	r3, r3, r0
 80017ae:	f162 0200 	sbc.w	r2, r2, #0
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	181b      	adds	r3, r3, r0
 80017bc:	f142 0000 	adc.w	r0, r2, #0
 80017c0:	00c0      	lsls	r0, r0, #3
 80017c2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80017c6:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80017ca:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80017ce:	4770      	bx	lr

080017d0 <TIMER_IF_StopTimer>:
{
 80017d0:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <TIMER_IF_StopTimer+0x20>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80017d8:	4c06      	ldr	r4, [pc, #24]	@ (80017f4 <TIMER_IF_StopTimer+0x24>)
 80017da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017de:	4620      	mov	r0, r4
 80017e0:	f004 feb6 	bl	8006550 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	6323      	str	r3, [r4, #48]	@ 0x30
}
 80017ea:	2000      	movs	r0, #0
 80017ec:	bd10      	pop	{r4, pc}
 80017ee:	bf00      	nop
 80017f0:	40002800 	.word	0x40002800
 80017f4:	200001b4 	.word	0x200001b4

080017f8 <TIMER_IF_BkUp_Write_MSBticks>:
{
 80017f8:	b508      	push	{r3, lr}
 80017fa:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80017fc:	2102      	movs	r1, #2
 80017fe:	4802      	ldr	r0, [pc, #8]	@ (8001808 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001800:	f005 f8f1 	bl	80069e6 <HAL_RTCEx_BKUPWrite>
}
 8001804:	bd08      	pop	{r3, pc}
 8001806:	bf00      	nop
 8001808:	200001b4 	.word	0x200001b4

0800180c <TIMER_IF_Init>:
{
 800180c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <TIMER_IF_Init+0x40>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b10b      	cbz	r3, 8001818 <TIMER_IF_Init+0xc>
}
 8001814:	2000      	movs	r0, #0
 8001816:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001818:	4c0d      	ldr	r4, [pc, #52]	@ (8001850 <TIMER_IF_Init+0x44>)
 800181a:	f04f 35ff 	mov.w	r5, #4294967295
 800181e:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8001820:	f7ff fd56 	bl	80012d0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001824:	f7ff ffd4 	bl	80017d0 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001828:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182c:	4620      	mov	r0, r4
 800182e:	f004 fe8f 	bl	8006550 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001832:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001834:	4620      	mov	r0, r4
 8001836:	f005 f875 	bl	8006924 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff ffdc 	bl	80017f8 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001840:	f7ff ff68 	bl	8001714 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001844:	4b01      	ldr	r3, [pc, #4]	@ (800184c <TIMER_IF_Init+0x40>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e7e3      	b.n	8001814 <TIMER_IF_Init+0x8>
 800184c:	20000200 	.word	0x20000200
 8001850:	200001b4 	.word	0x200001b4

08001854 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001854:	b508      	push	{r3, lr}
 8001856:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001858:	2100      	movs	r1, #0
 800185a:	4802      	ldr	r0, [pc, #8]	@ (8001864 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 800185c:	f005 f8c3 	bl	80069e6 <HAL_RTCEx_BKUPWrite>
}
 8001860:	bd08      	pop	{r3, pc}
 8001862:	bf00      	nop
 8001864:	200001b4 	.word	0x200001b4

08001868 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001868:	b508      	push	{r3, lr}
 800186a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800186c:	2101      	movs	r1, #1
 800186e:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001870:	f005 f8b9 	bl	80069e6 <HAL_RTCEx_BKUPWrite>
}
 8001874:	bd08      	pop	{r3, pc}
 8001876:	bf00      	nop
 8001878:	200001b4 	.word	0x200001b4

0800187c <TIMER_IF_StartTimer>:
{
 800187c:	b510      	push	{r4, lr}
 800187e:	b08c      	sub	sp, #48	@ 0x30
 8001880:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001882:	222c      	movs	r2, #44	@ 0x2c
 8001884:	2100      	movs	r1, #0
 8001886:	a801      	add	r0, sp, #4
 8001888:	f012 fee6 	bl	8014658 <memset>
  TIMER_IF_StopTimer();
 800188c:	f7ff ffa0 	bl	80017d0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <TIMER_IF_StartTimer+0x48>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001896:	2300      	movs	r3, #0
 8001898:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800189a:	43e4      	mvns	r4, r4
 800189c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800189e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80018a0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018a4:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80018a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018aa:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018ac:	2201      	movs	r2, #1
 80018ae:	a901      	add	r1, sp, #4
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <TIMER_IF_StartTimer+0x4c>)
 80018b2:	f004 ff7b 	bl	80067ac <HAL_RTC_SetAlarm_IT>
 80018b6:	b910      	cbnz	r0, 80018be <TIMER_IF_StartTimer+0x42>
}
 80018b8:	2000      	movs	r0, #0
 80018ba:	b00c      	add	sp, #48	@ 0x30
 80018bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80018be:	f7ff fcb1 	bl	8001224 <Error_Handler>
 80018c2:	e7f9      	b.n	80018b8 <TIMER_IF_StartTimer+0x3c>
 80018c4:	200001fc 	.word	0x200001fc
 80018c8:	200001b4 	.word	0x200001b4

080018cc <TIMER_IF_BkUp_Read_MSBticks>:
{
 80018cc:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80018ce:	2102      	movs	r1, #2
 80018d0:	4801      	ldr	r0, [pc, #4]	@ (80018d8 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 80018d2:	f005 f88f 	bl	80069f4 <HAL_RTCEx_BKUPRead>
}
 80018d6:	bd08      	pop	{r3, pc}
 80018d8:	200001b4 	.word	0x200001b4

080018dc <TIMER_IF_GetTime>:
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	4605      	mov	r5, r0
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <TIMER_IF_GetTime+0x34>)
 80018e2:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80018e4:	e001      	b.n	80018ea <TIMER_IF_GetTime+0xe>
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <TIMER_IF_GetTime+0x34>)
 80018e8:	689c      	ldr	r4, [r3, #8]
 80018ea:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <TIMER_IF_GetTime+0x34>)
 80018ec:	6892      	ldr	r2, [r2, #8]
 80018ee:	42a2      	cmp	r2, r4
 80018f0:	d1f9      	bne.n	80018e6 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 80018f2:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80018f4:	f7ff ffea 	bl	80018cc <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80018f8:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80018fa:	0aa4      	lsrs	r4, r4, #10
 80018fc:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001900:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001904:	f7ff ff50 	bl	80017a8 <TIMER_IF_Convert_Tick2ms>
 8001908:	8028      	strh	r0, [r5, #0]
}
 800190a:	4620      	mov	r0, r4
 800190c:	bd38      	pop	{r3, r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	40002800 	.word	0x40002800

08001914 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001914:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001916:	2100      	movs	r1, #0
 8001918:	4801      	ldr	r0, [pc, #4]	@ (8001920 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 800191a:	f005 f86b 	bl	80069f4 <HAL_RTCEx_BKUPRead>
}
 800191e:	bd08      	pop	{r3, pc}
 8001920:	200001b4 	.word	0x200001b4

08001924 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001924:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001926:	2101      	movs	r1, #1
 8001928:	4801      	ldr	r0, [pc, #4]	@ (8001930 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 800192a:	f005 f863 	bl	80069f4 <HAL_RTCEx_BKUPRead>
}
 800192e:	bd08      	pop	{r3, pc}
 8001930:	200001b4 	.word	0x200001b4

08001934 <TIMER_IF_DelayMs>:
{
 8001934:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001936:	f7ff ff2d 	bl	8001794 <TIMER_IF_Convert_ms2Tick>
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <TIMER_IF_DelayMs+0x38>)
 800193c:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800193e:	e001      	b.n	8001944 <TIMER_IF_DelayMs+0x10>
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <TIMER_IF_DelayMs+0x38>)
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <TIMER_IF_DelayMs+0x38>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	428b      	cmp	r3, r1
 800194a:	d1f9      	bne.n	8001940 <TIMER_IF_DelayMs+0xc>
 800194c:	e009      	b.n	8001962 <TIMER_IF_DelayMs+0x2e>
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <TIMER_IF_DelayMs+0x38>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4a06      	ldr	r2, [pc, #24]	@ (800196c <TIMER_IF_DelayMs+0x38>)
 8001954:	6892      	ldr	r2, [r2, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	d1f9      	bne.n	800194e <TIMER_IF_DelayMs+0x1a>
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	4298      	cmp	r0, r3
 800195e:	d903      	bls.n	8001968 <TIMER_IF_DelayMs+0x34>
    __NOP();
 8001960:	bf00      	nop
 8001962:	4b02      	ldr	r3, [pc, #8]	@ (800196c <TIMER_IF_DelayMs+0x38>)
 8001964:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001966:	e7f4      	b.n	8001952 <TIMER_IF_DelayMs+0x1e>
}
 8001968:	bd08      	pop	{r3, pc}
 800196a:	bf00      	nop
 800196c:	40002800 	.word	0x40002800

08001970 <HAL_RTC_AlarmAEventCallback>:
{
 8001970:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001972:	f012 fb23 	bl	8013fbc <UTIL_TIMER_IRQ_Handler>
}
 8001976:	bd08      	pop	{r3, pc}

08001978 <HAL_RTCEx_SSRUEventCallback>:
{
 8001978:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800197a:	f7ff ffa7 	bl	80018cc <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800197e:	3001      	adds	r0, #1
 8001980:	f7ff ff3a 	bl	80017f8 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001984:	bd08      	pop	{r3, pc}
	...

08001988 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001988:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800198a:	4818      	ldr	r0, [pc, #96]	@ (80019ec <MX_LPUART1_UART_Init+0x64>)
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <MX_LPUART1_UART_Init+0x68>)
 800198e:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001990:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001994:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	2300      	movs	r3, #0
 8001998:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800199a:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800199c:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800199e:	220c      	movs	r2, #12
 80019a0:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a4:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a6:	6243      	str	r3, [r0, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 80019aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019ae:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019b0:	f006 fb7e 	bl	80080b0 <HAL_UART_Init>
 80019b4:	b970      	cbnz	r0, 80019d4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b6:	2100      	movs	r1, #0
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <MX_LPUART1_UART_Init+0x64>)
 80019ba:	f006 fd2e 	bl	800841a <HAL_UARTEx_SetTxFifoThreshold>
 80019be:	b960      	cbnz	r0, 80019da <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c0:	2100      	movs	r1, #0
 80019c2:	480a      	ldr	r0, [pc, #40]	@ (80019ec <MX_LPUART1_UART_Init+0x64>)
 80019c4:	f006 fd4e 	bl	8008464 <HAL_UARTEx_SetRxFifoThreshold>
 80019c8:	b950      	cbnz	r0, 80019e0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 80019ca:	4808      	ldr	r0, [pc, #32]	@ (80019ec <MX_LPUART1_UART_Init+0x64>)
 80019cc:	f006 fd01 	bl	80083d2 <HAL_UARTEx_EnableFifoMode>
 80019d0:	b948      	cbnz	r0, 80019e6 <MX_LPUART1_UART_Init+0x5e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019d4:	f7ff fc26 	bl	8001224 <Error_Handler>
 80019d8:	e7ed      	b.n	80019b6 <MX_LPUART1_UART_Init+0x2e>
    Error_Handler();
 80019da:	f7ff fc23 	bl	8001224 <Error_Handler>
 80019de:	e7ef      	b.n	80019c0 <MX_LPUART1_UART_Init+0x38>
    Error_Handler();
 80019e0:	f7ff fc20 	bl	8001224 <Error_Handler>
 80019e4:	e7f1      	b.n	80019ca <MX_LPUART1_UART_Init+0x42>
    Error_Handler();
 80019e6:	f7ff fc1d 	bl	8001224 <Error_Handler>
}
 80019ea:	e7f2      	b.n	80019d2 <MX_LPUART1_UART_Init+0x4a>
 80019ec:	20000264 	.word	0x20000264
 80019f0:	40008000 	.word	0x40008000

080019f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f4:	b530      	push	{r4, r5, lr}
 80019f6:	b097      	sub	sp, #92	@ 0x5c
 80019f8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	2100      	movs	r1, #0
 80019fc:	9111      	str	r1, [sp, #68]	@ 0x44
 80019fe:	9112      	str	r1, [sp, #72]	@ 0x48
 8001a00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001a02:	9114      	str	r1, [sp, #80]	@ 0x50
 8001a04:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a06:	2238      	movs	r2, #56	@ 0x38
 8001a08:	a803      	add	r0, sp, #12
 8001a0a:	f012 fe25 	bl	8014658 <memset>
  if(uartHandle->Instance==LPUART1)
 8001a0e:	6822      	ldr	r2, [r4, #0]
 8001a10:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <HAL_UART_MspInit+0xd8>)
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001a16:	b017      	add	sp, #92	@ 0x5c
 8001a18:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8001a1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a22:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a24:	a803      	add	r0, sp, #12
 8001a26:	f004 fc73 	bl	8006310 <HAL_RCCEx_PeriphCLKConfig>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d144      	bne.n	8001ab8 <HAL_UART_MspInit+0xc4>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a3c:	f002 0201 	and.w	r2, r2, #1
 8001a40:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a42:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001a56:	230c      	movs	r3, #12
 8001a58:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2500      	movs	r5, #0
 8001a60:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a66:	2308      	movs	r3, #8
 8001a68:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	a911      	add	r1, sp, #68	@ 0x44
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a70:	f003 fcc0 	bl	80053f4 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8001a74:	4816      	ldr	r0, [pc, #88]	@ (8001ad0 <HAL_UART_MspInit+0xdc>)
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_UART_MspInit+0xe0>)
 8001a78:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001a7a:	2316      	movs	r3, #22
 8001a7c:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	6083      	str	r3, [r0, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a82:	60c5      	str	r5, [r0, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	6103      	str	r3, [r0, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a88:	6145      	str	r5, [r0, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8a:	6185      	str	r5, [r0, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001a8c:	61c5      	str	r5, [r0, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8e:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001a90:	f003 f944 	bl	8004d1c <HAL_DMA_Init>
 8001a94:	b998      	cbnz	r0, 8001abe <HAL_UART_MspInit+0xca>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a96:	2110      	movs	r1, #16
 8001a98:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <HAL_UART_MspInit+0xdc>)
 8001a9a:	f003 fb3f 	bl	800511c <HAL_DMA_ConfigChannelAttributes>
 8001a9e:	b988      	cbnz	r0, 8001ac4 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_UART_MspInit+0xdc>)
 8001aa2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8001aa4:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	2026      	movs	r0, #38	@ 0x26
 8001aac:	f003 f8ae 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001ab0:	2026      	movs	r0, #38	@ 0x26
 8001ab2:	f003 f8bb 	bl	8004c2c <HAL_NVIC_EnableIRQ>
}
 8001ab6:	e7ae      	b.n	8001a16 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001ab8:	f7ff fbb4 	bl	8001224 <Error_Handler>
 8001abc:	e7b7      	b.n	8001a2e <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001abe:	f7ff fbb1 	bl	8001224 <Error_Handler>
 8001ac2:	e7e8      	b.n	8001a96 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8001ac4:	f7ff fbae 	bl	8001224 <Error_Handler>
 8001ac8:	e7ea      	b.n	8001aa0 <HAL_UART_MspInit+0xac>
 8001aca:	bf00      	nop
 8001acc:	40008000 	.word	0x40008000
 8001ad0:	20000204 	.word	0x20000204
 8001ad4:	40020058 	.word	0x40020058

08001ad8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==LPUART1)
 8001ad8:	6802      	ldr	r2, [r0, #0]
 8001ada:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <HAL_UART_MspDeInit+0x34>)
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d000      	beq.n	8001ae2 <HAL_UART_MspDeInit+0xa>
 8001ae0:	4770      	bx	lr
{
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aea:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001af2:	210c      	movs	r1, #12
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af8:	f003 fd4e 	bl	8005598 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001afc:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8001afe:	f003 f97d 	bl	8004dfc <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8001b02:	2026      	movs	r0, #38	@ 0x26
 8001b04:	f003 f896 	bl	8004c34 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40008000 	.word	0x40008000

08001b10 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001b10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <vcom_Init+0x20>)
 8001b14:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001b16:	f7ff f94f 	bl	8000db8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001b1a:	f7ff ff35 	bl	8001988 <MX_LPUART1_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <vcom_Init+0x24>)
 8001b20:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	bd08      	pop	{r3, pc}
 8001b30:	200002fc 	.word	0x200002fc
 8001b34:	58000800 	.word	0x58000800

08001b38 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001b38:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b40:	f042 0201 	orr.w	r2, r2, #1
 8001b44:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8001b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
  __HAL_RCC_LPUART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 8001b4e:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <vcom_DeInit+0x28>)
 8001b50:	f7ff ffc2 	bl	8001ad8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001b54:	200f      	movs	r0, #15
 8001b56:	f003 f86d 	bl	8004c34 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	bd08      	pop	{r3, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000264 	.word	0x20000264

08001b64 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001b64:	b508      	push	{r3, lr}
 8001b66:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001b68:	4601      	mov	r1, r0
 8001b6a:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <vcom_Trace_DMA+0x10>)
 8001b6c:	f005 fb24 	bl	80071b8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001b70:	2000      	movs	r0, #0
 8001b72:	bd08      	pop	{r3, pc}
 8001b74:	20000264 	.word	0x20000264

08001b78 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <vcom_ReceiveInit+0x50>)
 8001b7e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001b80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b84:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8001b86:	ab02      	add	r3, sp, #8
 8001b88:	e913 0006 	ldmdb	r3, {r1, r2}
 8001b8c:	480f      	ldr	r0, [pc, #60]	@ (8001bcc <vcom_ReceiveInit+0x54>)
 8001b8e:	f006 fbc8 	bl	8008322 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <vcom_ReceiveInit+0x54>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8001b9c:	d1f9      	bne.n	8001b92 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 8001b9e:	69da      	ldr	r2, [r3, #28]
 8001ba0:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8001ba4:	d0fb      	beq.n	8001b9e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001bac:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8001bae:	4c07      	ldr	r4, [pc, #28]	@ (8001bcc <vcom_ReceiveInit+0x54>)
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f006 fbf7 	bl	80083a4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4905      	ldr	r1, [pc, #20]	@ (8001bd0 <vcom_ReceiveInit+0x58>)
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f006 fb4a 	bl	8008254 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002f8 	.word	0x200002f8
 8001bcc:	20000264 	.word	0x20000264
 8001bd0:	20000300 	.word	0x20000300

08001bd4 <vcom_Resume>:

void vcom_Resume(void)
{
 8001bd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001bd6:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <vcom_Resume+0x14>)
 8001bd8:	f003 f8a0 	bl	8004d1c <HAL_DMA_Init>
 8001bdc:	b900      	cbnz	r0, 8001be0 <vcom_Resume+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001bde:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001be0:	f7ff fb20 	bl	8001224 <Error_Handler>
}
 8001be4:	e7fb      	b.n	8001bde <vcom_Resume+0xa>
 8001be6:	bf00      	nop
 8001be8:	20000204 	.word	0x20000204

08001bec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == LPUART1)
 8001bee:	6802      	ldr	r2, [r0, #0]
 8001bf0:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <HAL_UART_TxCpltCallback+0x18>)
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d000      	beq.n	8001bf8 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001bf6:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_UART_TxCpltCallback+0x1c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	4798      	blx	r3
}
 8001c00:	e7f9      	b.n	8001bf6 <HAL_UART_TxCpltCallback+0xa>
 8001c02:	bf00      	nop
 8001c04:	40008000 	.word	0x40008000
 8001c08:	200002fc 	.word	0x200002fc

08001c0c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == LPUART1)
 8001c0c:	6802      	ldr	r2, [r0, #0]
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_UART_RxCpltCallback+0x2c>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d000      	beq.n	8001c16 <HAL_UART_RxCpltCallback+0xa>
 8001c14:	4770      	bx	lr
{
 8001c16:	b510      	push	{r4, lr}
 8001c18:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_UART_RxCpltCallback+0x30>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b12b      	cbz	r3, 8001c2c <HAL_UART_RxCpltCallback+0x20>
 8001c20:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8001c24:	b912      	cbnz	r2, 8001c2c <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001c26:	2101      	movs	r1, #1
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <HAL_UART_RxCpltCallback+0x34>)
 8001c2a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4904      	ldr	r1, [pc, #16]	@ (8001c40 <HAL_UART_RxCpltCallback+0x34>)
 8001c30:	4620      	mov	r0, r4
 8001c32:	f006 fb0f 	bl	8008254 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001c36:	bd10      	pop	{r4, pc}
 8001c38:	40008000 	.word	0x40008000
 8001c3c:	200002f8 	.word	0x200002f8
 8001c40:	20000300 	.word	0x20000300

08001c44 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001c46:	f7ff fc5f 	bl	8001508 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001c4a:	f000 f89f 	bl	8001d8c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001c4e:	bd08      	pop	{r3, pc}

08001c50 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001c50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c52:	f04f 30ff 	mov.w	r0, #4294967295
 8001c56:	f011 fddd 	bl	8013814 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001c5a:	bd08      	pop	{r3, pc}

08001c5c <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8001c5c:	4770      	bx	lr

08001c5e <OnTxPeriodicityChanged>:
static void OnTxPeriodicityChanged(uint32_t periodicity)
{
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
}
 8001c5e:	4770      	bx	lr

08001c60 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
}
 8001c60:	4770      	bx	lr
	...

08001c64 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8001c64:	4b01      	ldr	r3, [pc, #4]	@ (8001c6c <OnPingSlotPeriodicityChanged+0x8>)
 8001c66:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000

08001c70 <OnSystemReset>:
static void OnSystemReset(void)
{
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
}
 8001c70:	4770      	bx	lr

08001c72 <OnBeaconStatusChange>:
  if (params != NULL)
 8001c72:	b118      	cbz	r0, 8001c7c <OnBeaconStatusChange+0xa>
{
 8001c74:	b508      	push	{r3, lr}
    AT_event_Beacon(params);
 8001c76:	f000 faff 	bl	8002278 <AT_event_Beacon>
}
 8001c7a:	bd08      	pop	{r3, pc}
 8001c7c:	4770      	bx	lr

08001c7e <OnClassChange>:
{
 8001c7e:	b508      	push	{r3, lr}
  AT_event_ClassUpdate(deviceClass);
 8001c80:	f000 fae8 	bl	8002254 <AT_event_ClassUpdate>
}
 8001c84:	bd08      	pop	{r3, pc}
	...

08001c88 <OnRxTimerLedEvent>:
{
 8001c88:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c90:	4801      	ldr	r0, [pc, #4]	@ (8001c98 <OnRxTimerLedEvent+0x10>)
 8001c92:	f003 fcff 	bl	8005694 <HAL_GPIO_WritePin>
}
 8001c96:	bd08      	pop	{r3, pc}
 8001c98:	48000400 	.word	0x48000400

08001c9c <OnTxTimerLedEvent>:
{
 8001c9c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ca4:	4801      	ldr	r0, [pc, #4]	@ (8001cac <OnTxTimerLedEvent+0x10>)
 8001ca6:	f003 fcf5 	bl	8005694 <HAL_GPIO_WritePin>
}
 8001caa:	bd08      	pop	{r3, pc}
 8001cac:	48000400 	.word	0x48000400

08001cb0 <OnRxData>:
{
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	460c      	mov	r4, r1
  if ((appData != NULL) || (params != NULL))
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	b168      	cbz	r0, 8001cd4 <OnRxData+0x24>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <OnRxData+0x2c>)
 8001cc0:	f003 fce8 	bl	8005694 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8001cc4:	4806      	ldr	r0, [pc, #24]	@ (8001ce0 <OnRxData+0x30>)
 8001cc6:	f012 f919 	bl	8013efc <UTIL_TIMER_Start>
    AT_event_receive(appData, params);
 8001cca:	4621      	mov	r1, r4
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f000 fa35 	bl	800213c <AT_event_receive>
}
 8001cd2:	bd38      	pop	{r3, r4, r5, pc}
  if ((appData != NULL) || (params != NULL))
 8001cd4:	2900      	cmp	r1, #0
 8001cd6:	d1ef      	bne.n	8001cb8 <OnRxData+0x8>
 8001cd8:	e7fb      	b.n	8001cd2 <OnRxData+0x22>
 8001cda:	bf00      	nop
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	2000031c 	.word	0x2000031c

08001ce4 <OnTxData>:
  if ((params != NULL))
 8001ce4:	b188      	cbz	r0, 8001d0a <OnTxData+0x26>
{
 8001ce6:	b510      	push	{r4, lr}
 8001ce8:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8001cea:	7803      	ldrb	r3, [r0, #0]
 8001cec:	b91b      	cbnz	r3, 8001cf6 <OnTxData+0x12>
    AT_event_confirm(params);
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f000 fa9c 	bl	800222c <AT_event_confirm>
}
 8001cf4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cfc:	4803      	ldr	r0, [pc, #12]	@ (8001d0c <OnTxData+0x28>)
 8001cfe:	f003 fcc9 	bl	8005694 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8001d02:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <OnTxData+0x2c>)
 8001d04:	f012 f8fa 	bl	8013efc <UTIL_TIMER_Start>
 8001d08:	e7f1      	b.n	8001cee <OnTxData+0xa>
 8001d0a:	4770      	bx	lr
 8001d0c:	48000400 	.word	0x48000400
 8001d10:	20000334 	.word	0x20000334

08001d14 <OnJoinRequest>:
  if (joinParams != NULL)
 8001d14:	b190      	cbz	r0, 8001d3c <OnJoinRequest+0x28>
{
 8001d16:	b510      	push	{r4, lr}
 8001d18:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001d1a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8001d1e:	b11b      	cbz	r3, 8001d28 <OnJoinRequest+0x14>
    AT_event_join(joinParams);
 8001d20:	4620      	mov	r0, r4
 8001d22:	f000 f9f3 	bl	800210c <AT_event_join>
}
 8001d26:	bd10      	pop	{r4, pc}
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <OnJoinRequest+0x2c>)
 8001d2a:	f012 f88d 	bl	8013e48 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d34:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <OnJoinRequest+0x30>)
 8001d36:	f003 fcad 	bl	8005694 <HAL_GPIO_WritePin>
 8001d3a:	e7f1      	b.n	8001d20 <OnJoinRequest+0xc>
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000304 	.word	0x20000304
 8001d44:	48000400 	.word	0x48000400

08001d48 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8001d48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  AT_event_OnNvmDataChange(state);
 8001d4a:	f000 fadf 	bl	800230c <AT_event_OnNvmDataChange>
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8001d4e:	bd08      	pop	{r3, pc}

08001d50 <OnMacProcessNotify>:
{
 8001d50:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001d52:	2100      	movs	r1, #0
 8001d54:	2002      	movs	r0, #2
 8001d56:	f011 fd1d 	bl	8013794 <UTIL_SEQ_SetTask>
}
 8001d5a:	bd08      	pop	{r3, pc}

08001d5c <CmdProcessNotify>:
{
 8001d5c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Vcom), 0);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2001      	movs	r0, #1
 8001d62:	f011 fd17 	bl	8013794 <UTIL_SEQ_SetTask>
}
 8001d66:	bd08      	pop	{r3, pc}

08001d68 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8001d68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  AT_event_OnStoreContextRequest(nvm, nvm_size);
 8001d6a:	f000 fae5 	bl	8002338 <AT_event_OnStoreContextRequest>
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8001d6e:	bd08      	pop	{r3, pc}

08001d70 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8001d70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  AT_event_OnRestoreContextRequest(nvm, nvm_size);
 8001d72:	f000 faf3 	bl	800235c <AT_event_OnRestoreContextRequest>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8001d76:	bd08      	pop	{r3, pc}

08001d78 <OnJoinTimerLedEvent>:
{
 8001d78:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8001d7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d7e:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <OnJoinTimerLedEvent+0x10>)
 8001d80:	f003 fc8d 	bl	800569e <HAL_GPIO_TogglePin>
}
 8001d84:	bd08      	pop	{r3, pc}
 8001d86:	bf00      	nop
 8001d88:	48000400 	.word	0x48000400

08001d8c <LoRaWAN_Init>:
{
 8001d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8e:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8001d90:	2400      	movs	r4, #0
 8001d92:	9405      	str	r4, [sp, #20]
  CMD_Init(CmdProcessNotify);
 8001d94:	4848      	ldr	r0, [pc, #288]	@ (8001eb8 <LoRaWAN_Init+0x12c>)
 8001d96:	f001 fc2d 	bl	80035f4 <CMD_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8001d9a:	2501      	movs	r5, #1
 8001d9c:	9502      	str	r5, [sp, #8]
 8001d9e:	2703      	movs	r7, #3
 8001da0:	9701      	str	r7, [sp, #4]
 8001da2:	9500      	str	r5, [sp, #0]
 8001da4:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <LoRaWAN_Init+0x130>)
 8001da6:	4622      	mov	r2, r4
 8001da8:	4621      	mov	r1, r4
 8001daa:	2002      	movs	r0, #2
 8001dac:	f011 fbc8 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8001db0:	9402      	str	r4, [sp, #8]
 8001db2:	2305      	movs	r3, #5
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2602      	movs	r6, #2
 8001db8:	9600      	str	r6, [sp, #0]
 8001dba:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <LoRaWAN_Init+0x134>)
 8001dbc:	4622      	mov	r2, r4
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f011 fbbd 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8001dc6:	9402      	str	r4, [sp, #8]
 8001dc8:	9701      	str	r7, [sp, #4]
 8001dca:	9500      	str	r5, [sp, #0]
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec4 <LoRaWAN_Init+0x138>)
 8001dce:	4622      	mov	r2, r4
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	f011 fbb4 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8001dd8:	a905      	add	r1, sp, #20
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f006 fff8 	bl	8008dd0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8001de0:	9b05      	ldr	r3, [sp, #20]
 8001de2:	0e1a      	lsrs	r2, r3, #24
 8001de4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8001de8:	9102      	str	r1, [sp, #8]
 8001dea:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	9200      	str	r2, [sp, #0]
 8001df2:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <LoRaWAN_Init+0x13c>)
 8001df4:	4622      	mov	r2, r4
 8001df6:	4621      	mov	r1, r4
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f011 fba1 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8001dfe:	a905      	add	r1, sp, #20
 8001e00:	4628      	mov	r0, r5
 8001e02:	f006 ffe5 	bl	8008dd0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8001e06:	9b05      	ldr	r3, [sp, #20]
 8001e08:	0e1a      	lsrs	r2, r3, #24
 8001e0a:	b2d9      	uxtb	r1, r3
 8001e0c:	9103      	str	r1, [sp, #12]
 8001e0e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8001e12:	9102      	str	r1, [sp, #8]
 8001e14:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	9200      	str	r2, [sp, #0]
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <LoRaWAN_Init+0x140>)
 8001e1e:	4622      	mov	r2, r4
 8001e20:	4621      	mov	r1, r4
 8001e22:	4630      	mov	r0, r6
 8001e24:	f011 fb8c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001e28:	9400      	str	r4, [sp, #0]
 8001e2a:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <LoRaWAN_Init+0x144>)
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e32:	4828      	ldr	r0, [pc, #160]	@ (8001ed4 <LoRaWAN_Init+0x148>)
 8001e34:	f011 ffaa 	bl	8013d8c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8001e38:	9400      	str	r4, [sp, #0]
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <LoRaWAN_Init+0x14c>)
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e42:	4826      	ldr	r0, [pc, #152]	@ (8001edc <LoRaWAN_Init+0x150>)
 8001e44:	f011 ffa2 	bl	8013d8c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8001e48:	9400      	str	r4, [sp, #0]
 8001e4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <LoRaWAN_Init+0x154>)
 8001e4c:	462a      	mov	r2, r5
 8001e4e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e52:	4824      	ldr	r0, [pc, #144]	@ (8001ee4 <LoRaWAN_Init+0x158>)
 8001e54:	f011 ff9a 	bl	8013d8c <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff f929 	bl	80010b0 <FLASH_IF_Init>
 8001e5e:	bb38      	cbnz	r0, 8001eb0 <LoRaWAN_Init+0x124>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <LoRaWAN_Init+0x15c>)
 8001e62:	2100      	movs	r1, #0
 8001e64:	2002      	movs	r0, #2
 8001e66:	f011 fd9d 	bl	80139a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Vcom), UTIL_SEQ_RFU, CMD_Process);
 8001e6a:	4a20      	ldr	r2, [pc, #128]	@ (8001eec <LoRaWAN_Init+0x160>)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f011 fd98 	bl	80139a4 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8001e74:	f001 fc7a 	bl	800376c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8001e78:	491d      	ldr	r1, [pc, #116]	@ (8001ef0 <LoRaWAN_Init+0x164>)
 8001e7a:	481e      	ldr	r0, [pc, #120]	@ (8001ef4 <LoRaWAN_Init+0x168>)
 8001e7c:	f006 ff5c 	bl	8008d38 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8001e80:	481d      	ldr	r0, [pc, #116]	@ (8001ef8 <LoRaWAN_Init+0x16c>)
 8001e82:	f006 fe33 	bl	8008aec <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8001e86:	4817      	ldr	r0, [pc, #92]	@ (8001ee4 <LoRaWAN_Init+0x158>)
 8001e88:	f012 f838 	bl	8013efc <UTIL_TIMER_Start>
  APP_PPRINTF("ATtention command interface\r\n");
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <LoRaWAN_Init+0x170>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4611      	mov	r1, r2
 8001e92:	4610      	mov	r0, r2
 8001e94:	f011 fb54 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d1f7      	bne.n	8001e8c <LoRaWAN_Init+0x100>
  APP_PPRINTF("AT? to list all available functions\r\n");
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <LoRaWAN_Init+0x174>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f011 fb4c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d1f7      	bne.n	8001e9c <LoRaWAN_Init+0x110>
}
 8001eac:	b007      	add	sp, #28
 8001eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8001eb0:	f7ff f9b8 	bl	8001224 <Error_Handler>
 8001eb4:	e7d4      	b.n	8001e60 <LoRaWAN_Init+0xd4>
 8001eb6:	bf00      	nop
 8001eb8:	08001d5d 	.word	0x08001d5d
 8001ebc:	080148f4 	.word	0x080148f4
 8001ec0:	08014918 	.word	0x08014918
 8001ec4:	0801493c 	.word	0x0801493c
 8001ec8:	08014960 	.word	0x08014960
 8001ecc:	08014984 	.word	0x08014984
 8001ed0:	08001c9d 	.word	0x08001c9d
 8001ed4:	20000334 	.word	0x20000334
 8001ed8:	08001c89 	.word	0x08001c89
 8001edc:	2000031c 	.word	0x2000031c
 8001ee0:	08001d79 	.word	0x08001d79
 8001ee4:	20000304 	.word	0x20000304
 8001ee8:	080088cd 	.word	0x080088cd
 8001eec:	08003639 	.word	0x08003639
 8001ef0:	01030100 	.word	0x01030100
 8001ef4:	20000018 	.word	0x20000018
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	080149a8 	.word	0x080149a8
 8001f00:	080149c8 	.word	0x080149c8

08001f04 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f04:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f08:	4905      	ldr	r1, [pc, #20]	@ (8001f20 <__NVIC_SystemReset+0x1c>)
 8001f0a:	68ca      	ldr	r2, [r1, #12]
 8001f0c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <__NVIC_SystemReset+0x20>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]
 8001f16:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f1a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001f1c:	e7fd      	b.n	8001f1a <__NVIC_SystemReset+0x16>
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	05fa0004 	.word	0x05fa0004

08001f28 <print_u>:

  /* USER CODE END print_d_2 */
}

static void print_u(uint32_t value)
{
 8001f28:	b500      	push	{lr}
 8001f2a:	b083      	sub	sp, #12
  /* USER CODE BEGIN print_u_1 */

  /* USER CODE END print_u_1 */
  AT_PRINTF("%u\r\n", value);
 8001f2c:	9000      	str	r0, [sp, #0]
 8001f2e:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <print_u+0x18>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	4611      	mov	r1, r2
 8001f34:	4610      	mov	r0, r2
 8001f36:	f011 fb03 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_u_2 */

  /* USER CODE END print_u_2 */
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f40:	080149f0 	.word	0x080149f0

08001f44 <print_8_02x>:
{
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	b089      	sub	sp, #36	@ 0x24
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001f48:	7803      	ldrb	r3, [r0, #0]
 8001f4a:	7842      	ldrb	r2, [r0, #1]
 8001f4c:	7881      	ldrb	r1, [r0, #2]
 8001f4e:	78c4      	ldrb	r4, [r0, #3]
 8001f50:	7905      	ldrb	r5, [r0, #4]
 8001f52:	7946      	ldrb	r6, [r0, #5]
 8001f54:	7987      	ldrb	r7, [r0, #6]
 8001f56:	79c0      	ldrb	r0, [r0, #7]
 8001f58:	9007      	str	r0, [sp, #28]
 8001f5a:	9706      	str	r7, [sp, #24]
 8001f5c:	9605      	str	r6, [sp, #20]
 8001f5e:	9504      	str	r5, [sp, #16]
 8001f60:	9403      	str	r4, [sp, #12]
 8001f62:	9102      	str	r1, [sp, #8]
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <print_8_02x+0x34>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f011 fae6 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 8001f74:	b009      	add	sp, #36	@ 0x24
 8001f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f78:	08016434 	.word	0x08016434

08001f7c <print_16_02x>:
{
 8001f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f80:	b093      	sub	sp, #76	@ 0x4c
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001f82:	7803      	ldrb	r3, [r0, #0]
 8001f84:	9310      	str	r3, [sp, #64]	@ 0x40
 8001f86:	7842      	ldrb	r2, [r0, #1]
 8001f88:	9211      	str	r2, [sp, #68]	@ 0x44
 8001f8a:	7883      	ldrb	r3, [r0, #2]
 8001f8c:	78c2      	ldrb	r2, [r0, #3]
 8001f8e:	7901      	ldrb	r1, [r0, #4]
 8001f90:	7944      	ldrb	r4, [r0, #5]
 8001f92:	7985      	ldrb	r5, [r0, #6]
 8001f94:	79c6      	ldrb	r6, [r0, #7]
 8001f96:	7a07      	ldrb	r7, [r0, #8]
 8001f98:	f890 c009 	ldrb.w	ip, [r0, #9]
 8001f9c:	f890 e00a 	ldrb.w	lr, [r0, #10]
 8001fa0:	f890 800b 	ldrb.w	r8, [r0, #11]
 8001fa4:	f890 900c 	ldrb.w	r9, [r0, #12]
 8001fa8:	f890 a00d 	ldrb.w	sl, [r0, #13]
 8001fac:	f890 b00e 	ldrb.w	fp, [r0, #14]
 8001fb0:	7bc0      	ldrb	r0, [r0, #15]
 8001fb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8001fb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8001fb8:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8001fbc:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8001fc0:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8001fc4:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 8001fc8:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8001fcc:	9708      	str	r7, [sp, #32]
 8001fce:	9607      	str	r6, [sp, #28]
 8001fd0:	9506      	str	r5, [sp, #24]
 8001fd2:	9405      	str	r4, [sp, #20]
 8001fd4:	9104      	str	r1, [sp, #16]
 8001fd6:	9203      	str	r2, [sp, #12]
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <print_16_02x+0x78>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f011 faa9 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 8001fee:	b013      	add	sp, #76	@ 0x4c
 8001ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff4:	080149f8 	.word	0x080149f8

08001ff8 <print_uint32_as_02x>:
{
 8001ff8:	b500      	push	{lr}
 8001ffa:	b085      	sub	sp, #20
  AT_PRINTF("%02X:%02X:%02X:%02X\r\n",
 8001ffc:	0e03      	lsrs	r3, r0, #24
 8001ffe:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8002002:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8002006:	b2c0      	uxtb	r0, r0
 8002008:	9003      	str	r0, [sp, #12]
 800200a:	9102      	str	r1, [sp, #8]
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <print_uint32_as_02x+0x2c>)
 8002012:	2200      	movs	r2, #0
 8002014:	4611      	mov	r1, r2
 8002016:	4610      	mov	r0, r2
 8002018:	f011 fa92 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800201c:	b005      	add	sp, #20
 800201e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002022:	bf00      	nop
 8002024:	08016474 	.word	0x08016474

08002028 <print_d>:
{
 8002028:	b500      	push	{lr}
 800202a:	b083      	sub	sp, #12
  AT_PRINTF("%d\r\n", value);
 800202c:	9000      	str	r0, [sp, #0]
 800202e:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <print_d+0x18>)
 8002030:	2200      	movs	r2, #0
 8002032:	4611      	mov	r1, r2
 8002034:	4610      	mov	r0, r2
 8002036:	f011 fa83 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800203a:	b003      	add	sp, #12
 800203c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002040:	08014a4c 	.word	0x08014a4c

08002044 <sscanf_16_hhx>:
{
 8002044:	b500      	push	{lr}
 8002046:	b08f      	sub	sp, #60	@ 0x3c
 8002048:	460a      	mov	r2, r1
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800204a:	f101 030f 	add.w	r3, r1, #15
 800204e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002050:	f101 030e 	add.w	r3, r1, #14
 8002054:	930c      	str	r3, [sp, #48]	@ 0x30
 8002056:	f101 030d 	add.w	r3, r1, #13
 800205a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800205c:	f101 030c 	add.w	r3, r1, #12
 8002060:	930a      	str	r3, [sp, #40]	@ 0x28
 8002062:	f101 030b 	add.w	r3, r1, #11
 8002066:	9309      	str	r3, [sp, #36]	@ 0x24
 8002068:	f101 030a 	add.w	r3, r1, #10
 800206c:	9308      	str	r3, [sp, #32]
 800206e:	f101 0309 	add.w	r3, r1, #9
 8002072:	9307      	str	r3, [sp, #28]
 8002074:	f101 0308 	add.w	r3, r1, #8
 8002078:	9306      	str	r3, [sp, #24]
 800207a:	1dcb      	adds	r3, r1, #7
 800207c:	9305      	str	r3, [sp, #20]
 800207e:	1d8b      	adds	r3, r1, #6
 8002080:	9304      	str	r3, [sp, #16]
 8002082:	1d4b      	adds	r3, r1, #5
 8002084:	9303      	str	r3, [sp, #12]
 8002086:	1d0b      	adds	r3, r1, #4
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	1ccb      	adds	r3, r1, #3
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	1c8b      	adds	r3, r1, #2
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	1c4b      	adds	r3, r1, #1
 8002094:	4902      	ldr	r1, [pc, #8]	@ (80020a0 <sscanf_16_hhx+0x5c>)
 8002096:	f012 f96f 	bl	8014378 <tiny_sscanf>
}
 800209a:	b00f      	add	sp, #60	@ 0x3c
 800209c:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a0:	08014a54 	.word	0x08014a54

080020a4 <sscanf_uint32_as_hhx>:
{
 80020a4:	b500      	push	{lr}
 80020a6:	b083      	sub	sp, #12
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 80020a8:	9101      	str	r1, [sp, #4]
 80020aa:	1c4b      	adds	r3, r1, #1
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	1c8b      	adds	r3, r1, #2
 80020b0:	1cca      	adds	r2, r1, #3
 80020b2:	4903      	ldr	r1, [pc, #12]	@ (80020c0 <sscanf_uint32_as_hhx+0x1c>)
 80020b4:	f012 f960 	bl	8014378 <tiny_sscanf>
}
 80020b8:	b003      	add	sp, #12
 80020ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80020be:	bf00      	nop
 80020c0:	08014a90 	.word	0x08014a90

080020c4 <CertifSend>:

  /* USER CODE END OnCertifTimer_2 */
}

static void CertifSend(void)
{
 80020c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CertifSend_1 */

  /* USER CODE END CertifSend_1 */
  AppData.Buffer[0] = 0x43;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <CertifSend+0x30>)
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	2143      	movs	r1, #67	@ 0x43
 80020cc:	7011      	strb	r1, [r2, #0]
  AppData.BufferSize = 1;
 80020ce:	2201      	movs	r2, #1
 80020d0:	705a      	strb	r2, [r3, #1]
  AppData.Port = 99;
 80020d2:	2263      	movs	r2, #99	@ 0x63
 80020d4:	701a      	strb	r2, [r3, #0]

  /* Restart Tx to prevent a previous Join Failed */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80020d6:	f006 fb61 	bl	800879c <LmHandlerJoinStatus>
 80020da:	2801      	cmp	r0, #1
 80020dc:	d105      	bne.n	80020ea <CertifSend+0x26>
  {
    UTIL_TIMER_Start(&TxCertifTimer);
  }
  LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, false);
 80020de:	2200      	movs	r2, #0
 80020e0:	4611      	mov	r1, r2
 80020e2:	4804      	ldr	r0, [pc, #16]	@ (80020f4 <CertifSend+0x30>)
 80020e4:	f006 fb6c 	bl	80087c0 <LmHandlerSend>
}
 80020e8:	bd08      	pop	{r3, pc}
    UTIL_TIMER_Start(&TxCertifTimer);
 80020ea:	4803      	ldr	r0, [pc, #12]	@ (80020f8 <CertifSend+0x34>)
 80020ec:	f011 ff06 	bl	8013efc <UTIL_TIMER_Start>
 80020f0:	e7f5      	b.n	80020de <CertifSend+0x1a>
 80020f2:	bf00      	nop
 80020f4:	20000064 	.word	0x20000064
 80020f8:	2000034c 	.word	0x2000034c

080020fc <OnCertifTimer>:
{
 80020fc:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaCertifTx), CFG_SEQ_Prio_0);
 80020fe:	2100      	movs	r1, #0
 8002100:	2008      	movs	r0, #8
 8002102:	f011 fb47 	bl	8013794 <UTIL_SEQ_SetTask>
}
 8002106:	bd08      	pop	{r3, pc}

08002108 <AT_return_error>:
}
 8002108:	2001      	movs	r0, #1
 800210a:	4770      	bx	lr

0800210c <AT_event_join>:
{
 800210c:	b508      	push	{r3, lr}
  if ((params != NULL) && (params->Status == LORAMAC_HANDLER_SUCCESS))
 800210e:	b110      	cbz	r0, 8002116 <AT_event_join+0xa>
 8002110:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8002114:	b133      	cbz	r3, 8002124 <AT_event_join+0x18>
    AT_PRINTF("+EVT:JOIN FAILED\r\n");
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <AT_event_join+0x28>)
 8002118:	2200      	movs	r2, #0
 800211a:	4611      	mov	r1, r2
 800211c:	4610      	mov	r0, r2
 800211e:	f011 fa0f 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 8002122:	bd08      	pop	{r3, pc}
    AT_PRINTF("+EVT:JOINED\r\n");
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <AT_event_join+0x2c>)
 8002126:	2200      	movs	r2, #0
 8002128:	4611      	mov	r1, r2
 800212a:	4610      	mov	r0, r2
 800212c:	f011 fa08 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8002130:	e7f7      	b.n	8002122 <AT_event_join+0x16>
 8002132:	bf00      	nop
 8002134:	08014ab4 	.word	0x08014ab4
 8002138:	08014aa4 	.word	0x08014aa4

0800213c <AT_event_receive>:
{
 800213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002140:	b08c      	sub	sp, #48	@ 0x30
 8002142:	4607      	mov	r7, r0
 8002144:	460e      	mov	r6, r1
  const char *slotStrings[] = { "1", "2", "C", "C_MC", "P", "P_MC" };
 8002146:	ac06      	add	r4, sp, #24
 8002148:	4d32      	ldr	r5, [pc, #200]	@ (8002214 <AT_event_receive+0xd8>)
 800214a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002152:	e884 0003 	stmia.w	r4, {r0, r1}
  if (appData != NULL)
 8002156:	b347      	cbz	r7, 80021aa <AT_event_receive+0x6e>
 8002158:	463d      	mov	r5, r7
    RxPort = appData->Port;
 800215a:	f897 8000 	ldrb.w	r8, [r7]
    if ((appData->Buffer != NULL) && (appData->BufferSize > 0))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	b32b      	cbz	r3, 80021ae <AT_event_receive+0x72>
 8002162:	787f      	ldrb	r7, [r7, #1]
 8002164:	b31f      	cbz	r7, 80021ae <AT_event_receive+0x72>
      if (LORAWAN_APP_DATA_BUFFER_MAX_SIZE <= appData->BufferSize)
 8002166:	2ff1      	cmp	r7, #241	@ 0xf1
 8002168:	d900      	bls.n	800216c <AT_event_receive+0x30>
        ReceivedDataSize = LORAWAN_APP_DATA_BUFFER_MAX_SIZE;
 800216a:	27f2      	movs	r7, #242	@ 0xf2
      AT_PRINTF("+EVT:%d:%02X:", appData->Port, ReceivedDataSize);
 800216c:	9701      	str	r7, [sp, #4]
 800216e:	f8cd 8000 	str.w	r8, [sp]
 8002172:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <AT_event_receive+0xdc>)
 8002174:	2200      	movs	r2, #0
 8002176:	4611      	mov	r1, r2
 8002178:	4610      	mov	r0, r2
 800217a:	f011 f9e1 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
      for (uint8_t i = 0; i < ReceivedDataSize; i++)
 800217e:	2400      	movs	r4, #0
 8002180:	e00a      	b.n	8002198 <AT_event_receive+0x5c>
        AT_PRINTF("%02X", appData->Buffer[i]);
 8002182:	686b      	ldr	r3, [r5, #4]
 8002184:	5d1b      	ldrb	r3, [r3, r4]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4b24      	ldr	r3, [pc, #144]	@ (800221c <AT_event_receive+0xe0>)
 800218a:	2200      	movs	r2, #0
 800218c:	4611      	mov	r1, r2
 800218e:	4610      	mov	r0, r2
 8002190:	f011 f9d6 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
      for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8002194:	3401      	adds	r4, #1
 8002196:	b2e4      	uxtb	r4, r4
 8002198:	42a7      	cmp	r7, r4
 800219a:	d8f2      	bhi.n	8002182 <AT_event_receive+0x46>
      AT_PRINTF("\r\n");
 800219c:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <AT_event_receive+0xe4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	4611      	mov	r1, r2
 80021a2:	4610      	mov	r0, r2
 80021a4:	f011 f9cc 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 80021a8:	e001      	b.n	80021ae <AT_event_receive+0x72>
  uint8_t RxPort = 0;
 80021aa:	f04f 0800 	mov.w	r8, #0
  if ((params != NULL) && (params->RxSlot < RX_SLOT_NONE))
 80021ae:	b116      	cbz	r6, 80021b6 <AT_event_receive+0x7a>
 80021b0:	7c33      	ldrb	r3, [r6, #16]
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d902      	bls.n	80021bc <AT_event_receive+0x80>
}
 80021b6:	b00c      	add	sp, #48	@ 0x30
 80021b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    AT_PRINTF("+EVT:RX_%s, PORT %d, DR %d, RSSI %d, SNR %d", slotStrings[params->RxSlot], RxPort,
 80021bc:	f996 2008 	ldrsb.w	r2, [r6, #8]
 80021c0:	f996 1009 	ldrsb.w	r1, [r6, #9]
 80021c4:	f996 000a 	ldrsb.w	r0, [r6, #10]
 80021c8:	9004      	str	r0, [sp, #16]
 80021ca:	9103      	str	r1, [sp, #12]
 80021cc:	9202      	str	r2, [sp, #8]
 80021ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80021d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80021d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80021d8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <AT_event_receive+0xe8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	4611      	mov	r1, r2
 80021e4:	4610      	mov	r0, r2
 80021e6:	f011 f9ab 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    if (params->LinkCheck == true)
 80021ea:	7c73      	ldrb	r3, [r6, #17]
 80021ec:	b933      	cbnz	r3, 80021fc <AT_event_receive+0xc0>
    AT_PRINTF("\r\n");
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <AT_event_receive+0xe4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	4611      	mov	r1, r2
 80021f4:	4610      	mov	r0, r2
 80021f6:	f011 f9a3 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 80021fa:	e7dc      	b.n	80021b6 <AT_event_receive+0x7a>
      AT_PRINTF(", DMODM %d, GWN %d", params->DemodMargin, params->NbGateways);
 80021fc:	7cb3      	ldrb	r3, [r6, #18]
 80021fe:	7cf2      	ldrb	r2, [r6, #19]
 8002200:	9201      	str	r2, [sp, #4]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <AT_event_receive+0xec>)
 8002206:	2200      	movs	r2, #0
 8002208:	4611      	mov	r1, r2
 800220a:	4610      	mov	r0, r2
 800220c:	f011 f998 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8002210:	e7ed      	b.n	80021ee <AT_event_receive+0xb2>
 8002212:	bf00      	nop
 8002214:	080147f0 	.word	0x080147f0
 8002218:	08014ac8 	.word	0x08014ac8
 800221c:	08014ad8 	.word	0x08014ad8
 8002220:	08014f4c 	.word	0x08014f4c
 8002224:	08014ae0 	.word	0x08014ae0
 8002228:	08014b0c 	.word	0x08014b0c

0800222c <AT_event_confirm>:
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 800222c:	b170      	cbz	r0, 800224c <AT_event_confirm+0x20>
{
 800222e:	b508      	push	{r3, lr}
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8002230:	7a02      	ldrb	r2, [r0, #8]
 8002232:	2a01      	cmp	r2, #1
 8002234:	d000      	beq.n	8002238 <AT_event_confirm+0xc>
}
 8002236:	bd08      	pop	{r3, pc}
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8002238:	7a43      	ldrb	r3, [r0, #9]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0fb      	beq.n	8002236 <AT_event_confirm+0xa>
    AT_PRINTF("+EVT:SEND_CONFIRMED\r\n");
 800223e:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <AT_event_confirm+0x24>)
 8002240:	2200      	movs	r2, #0
 8002242:	4611      	mov	r1, r2
 8002244:	4610      	mov	r0, r2
 8002246:	f011 f97b 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800224a:	e7f4      	b.n	8002236 <AT_event_confirm+0xa>
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	08014b20 	.word	0x08014b20

08002254 <AT_event_ClassUpdate>:
{
 8002254:	b500      	push	{lr}
 8002256:	b083      	sub	sp, #12
  AT_PRINTF("+EVT:SWITCH_TO_CLASS_%c\r\n", "ABC"[deviceClass]);
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <AT_event_ClassUpdate+0x1c>)
 800225a:	5c1b      	ldrb	r3, [r3, r0]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <AT_event_ClassUpdate+0x20>)
 8002260:	2200      	movs	r2, #0
 8002262:	4611      	mov	r1, r2
 8002264:	4610      	mov	r0, r2
 8002266:	f011 f96b 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800226a:	b003      	add	sp, #12
 800226c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002270:	08014b54 	.word	0x08014b54
 8002274:	08014b38 	.word	0x08014b38

08002278 <AT_event_Beacon>:
  if (params != NULL)
 8002278:	2800      	cmp	r0, #0
 800227a:	d03f      	beq.n	80022fc <AT_event_Beacon+0x84>
{
 800227c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002280:	b08c      	sub	sp, #48	@ 0x30
 8002282:	4603      	mov	r3, r0
    switch (params->State)
 8002284:	7842      	ldrb	r2, [r0, #1]
 8002286:	2a02      	cmp	r2, #2
 8002288:	d00a      	beq.n	80022a0 <AT_event_Beacon+0x28>
 800228a:	2a03      	cmp	r2, #3
 800228c:	d02f      	beq.n	80022ee <AT_event_Beacon+0x76>
        AT_PRINTF("+EVT:BEACON_LOST\r\n");
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <AT_event_Beacon+0x88>)
 8002290:	2200      	movs	r2, #0
 8002292:	4611      	mov	r1, r2
 8002294:	4610      	mov	r0, r2
 8002296:	f011 f953 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800229a:	b00c      	add	sp, #48	@ 0x30
 800229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AT_PRINTF("+EVT:RX_BC, DR %d, RSSI %d, SNR %d, FQ %d, TIME %d, DESC %d, "
 80022a0:	7c02      	ldrb	r2, [r0, #16]
 80022a2:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 80022a6:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80022aa:	7d9c      	ldrb	r4, [r3, #22]
 80022ac:	7ddd      	ldrb	r5, [r3, #23]
 80022ae:	7e1e      	ldrb	r6, [r3, #24]
 80022b0:	7e5f      	ldrb	r7, [r3, #25]
 80022b2:	f893 c01a 	ldrb.w	ip, [r3, #26]
 80022b6:	f893 e01b 	ldrb.w	lr, [r3, #27]
 80022ba:	f893 801c 	ldrb.w	r8, [r3, #28]
 80022be:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80022c2:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 80022c6:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 80022ca:	9708      	str	r7, [sp, #32]
 80022cc:	9607      	str	r6, [sp, #28]
 80022ce:	9506      	str	r5, [sp, #24]
 80022d0:	9405      	str	r4, [sp, #20]
 80022d2:	685c      	ldr	r4, [r3, #4]
 80022d4:	9404      	str	r4, [sp, #16]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	9303      	str	r3, [sp, #12]
 80022da:	9002      	str	r0, [sp, #8]
 80022dc:	9101      	str	r1, [sp, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <AT_event_Beacon+0x8c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	4611      	mov	r1, r2
 80022e6:	4610      	mov	r0, r2
 80022e8:	f011 f92a 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80022ec:	e7d5      	b.n	800229a <AT_event_Beacon+0x22>
        AT_PRINTF("+EVT:BEACON_NOT_RECEIVED\r\n");
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <AT_event_Beacon+0x90>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	4611      	mov	r1, r2
 80022f4:	4610      	mov	r0, r2
 80022f6:	f011 f923 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 80022fa:	e7ce      	b.n	800229a <AT_event_Beacon+0x22>
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	08014b58 	.word	0x08014b58
 8002304:	08014b6c 	.word	0x08014b6c
 8002308:	08014bcc 	.word	0x08014bcc

0800230c <AT_event_OnNvmDataChange>:
{
 800230c:	b508      	push	{r3, lr}
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800230e:	2801      	cmp	r0, #1
 8002310:	d006      	beq.n	8002320 <AT_event_OnNvmDataChange+0x14>
    AT_PRINTF("NVM DATA RESTORED\r\n");
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <AT_event_OnNvmDataChange+0x24>)
 8002314:	2200      	movs	r2, #0
 8002316:	4611      	mov	r1, r2
 8002318:	4610      	mov	r0, r2
 800231a:	f011 f911 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800231e:	bd08      	pop	{r3, pc}
    AT_PRINTF("NVM DATA STORED\r\n");
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <AT_event_OnNvmDataChange+0x28>)
 8002322:	2200      	movs	r2, #0
 8002324:	4611      	mov	r1, r2
 8002326:	4610      	mov	r0, r2
 8002328:	f011 f90a 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 800232c:	e7f7      	b.n	800231e <AT_event_OnNvmDataChange+0x12>
 800232e:	bf00      	nop
 8002330:	08014bfc 	.word	0x08014bfc
 8002334:	08014be8 	.word	0x08014be8

08002338 <AT_event_OnStoreContextRequest>:
{
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	4604      	mov	r4, r0
 800233c:	460d      	mov	r5, r1
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800233e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <AT_event_OnStoreContextRequest+0x20>)
 8002344:	f7fe fef2 	bl	800112c <FLASH_IF_Erase>
 8002348:	b100      	cbz	r0, 800234c <AT_event_OnStoreContextRequest+0x14>
}
 800234a:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800234c:	462a      	mov	r2, r5
 800234e:	4621      	mov	r1, r4
 8002350:	4801      	ldr	r0, [pc, #4]	@ (8002358 <AT_event_OnStoreContextRequest+0x20>)
 8002352:	f7fe feb3 	bl	80010bc <FLASH_IF_Write>
}
 8002356:	e7f8      	b.n	800234a <AT_event_OnStoreContextRequest+0x12>
 8002358:	0803f000 	.word	0x0803f000

0800235c <AT_event_OnRestoreContextRequest>:
{
 800235c:	b508      	push	{r3, lr}
 800235e:	460a      	mov	r2, r1
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002360:	4901      	ldr	r1, [pc, #4]	@ (8002368 <AT_event_OnRestoreContextRequest+0xc>)
 8002362:	f7fe fec7 	bl	80010f4 <FLASH_IF_Read>
}
 8002366:	bd08      	pop	{r3, pc}
 8002368:	0803f000 	.word	0x0803f000

0800236c <AT_version_get>:
{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	b086      	sub	sp, #24
  AT_PRINTF("APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002370:	2501      	movs	r5, #1
 8002372:	9502      	str	r5, [sp, #8]
 8002374:	2603      	movs	r6, #3
 8002376:	9601      	str	r6, [sp, #4]
 8002378:	9500      	str	r5, [sp, #0]
 800237a:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <AT_version_get+0x9c>)
 800237c:	2200      	movs	r2, #0
 800237e:	4611      	mov	r1, r2
 8002380:	4610      	mov	r0, r2
 8002382:	f011 f8dd 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002386:	2400      	movs	r4, #0
 8002388:	9402      	str	r4, [sp, #8]
 800238a:	2305      	movs	r3, #5
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <AT_version_get+0xa0>)
 8002394:	4622      	mov	r2, r4
 8002396:	4621      	mov	r1, r4
 8002398:	4620      	mov	r0, r4
 800239a:	f011 f8d1 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800239e:	9402      	str	r4, [sp, #8]
 80023a0:	9601      	str	r6, [sp, #4]
 80023a2:	9500      	str	r5, [sp, #0]
 80023a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <AT_version_get+0xa4>)
 80023a6:	4622      	mov	r2, r4
 80023a8:	4621      	mov	r1, r4
 80023aa:	4620      	mov	r0, r4
 80023ac:	f011 f8c8 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80023b0:	a905      	add	r1, sp, #20
 80023b2:	4620      	mov	r0, r4
 80023b4:	f006 fd0c 	bl	8008dd0 <LmHandlerGetVersion>
  AT_PRINTF("L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80023b8:	9b05      	ldr	r3, [sp, #20]
 80023ba:	0e1a      	lsrs	r2, r3, #24
 80023bc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80023c0:	9102      	str	r1, [sp, #8]
 80023c2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	9200      	str	r2, [sp, #0]
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <AT_version_get+0xa8>)
 80023cc:	4622      	mov	r2, r4
 80023ce:	4621      	mov	r1, r4
 80023d0:	4620      	mov	r0, r4
 80023d2:	f011 f8b5 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 80023d6:	a905      	add	r1, sp, #20
 80023d8:	4628      	mov	r0, r5
 80023da:	f006 fcf9 	bl	8008dd0 <LmHandlerGetVersion>
  AT_PRINTF("RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 80023de:	9b05      	ldr	r3, [sp, #20]
 80023e0:	0e1a      	lsrs	r2, r3, #24
 80023e2:	b2d9      	uxtb	r1, r3
 80023e4:	9103      	str	r1, [sp, #12]
 80023e6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80023ea:	9102      	str	r1, [sp, #8]
 80023ec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	9200      	str	r2, [sp, #0]
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <AT_version_get+0xac>)
 80023f6:	4622      	mov	r2, r4
 80023f8:	4621      	mov	r1, r4
 80023fa:	4620      	mov	r0, r4
 80023fc:	f011 f8a0 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 8002400:	4620      	mov	r0, r4
 8002402:	b006      	add	sp, #24
 8002404:	bd70      	pop	{r4, r5, r6, pc}
 8002406:	bf00      	nop
 8002408:	080148f4 	.word	0x080148f4
 800240c:	08014918 	.word	0x08014918
 8002410:	0801493c 	.word	0x0801493c
 8002414:	08014960 	.word	0x08014960
 8002418:	08014984 	.word	0x08014984

0800241c <AT_verbose_get>:
{
 800241c:	b508      	push	{r3, lr}
  print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 800241e:	f011 f83b 	bl	8013498 <UTIL_ADV_TRACE_GetVerboseLevel>
 8002422:	f7ff fd81 	bl	8001f28 <print_u>
}
 8002426:	2000      	movs	r0, #0
 8002428:	bd08      	pop	{r3, pc}
	...

0800242c <AT_verbose_set>:
{
 800242c:	b500      	push	{lr}
 800242e:	b083      	sub	sp, #12
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 8002430:	aa01      	add	r2, sp, #4
 8002432:	490f      	ldr	r1, [pc, #60]	@ (8002470 <AT_verbose_set+0x44>)
 8002434:	f011 ffa0 	bl	8014378 <tiny_sscanf>
 8002438:	2801      	cmp	r0, #1
 800243a:	d109      	bne.n	8002450 <AT_verbose_set+0x24>
  if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF))
 800243c:	9801      	ldr	r0, [sp, #4]
 800243e:	2803      	cmp	r0, #3
 8002440:	d80e      	bhi.n	8002460 <AT_verbose_set+0x34>
  UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 8002442:	b2c0      	uxtb	r0, r0
 8002444:	f011 f822 	bl	801348c <UTIL_ADV_TRACE_SetVerboseLevel>
  return AT_OK;
 8002448:	2000      	movs	r0, #0
}
 800244a:	b003      	add	sp, #12
 800244c:	f85d fb04 	ldr.w	pc, [sp], #4
    AT_PRINTF("AT+VL: verbose level is not well set\r\n");
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <AT_verbose_set+0x48>)
 8002452:	2200      	movs	r2, #0
 8002454:	4611      	mov	r1, r2
 8002456:	4610      	mov	r0, r2
 8002458:	f011 f872 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800245c:	2002      	movs	r0, #2
 800245e:	e7f4      	b.n	800244a <AT_verbose_set+0x1e>
    AT_PRINTF("AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)\r\n");
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <AT_verbose_set+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	4611      	mov	r1, r2
 8002466:	4610      	mov	r0, r2
 8002468:	f011 f86a 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800246c:	2002      	movs	r0, #2
 800246e:	e7ec      	b.n	800244a <AT_verbose_set+0x1e>
 8002470:	08014c10 	.word	0x08014c10
 8002474:	08014c14 	.word	0x08014c14
 8002478:	08014c3c 	.word	0x08014c3c

0800247c <AT_LocalTime_get>:
{
 800247c:	b500      	push	{lr}
 800247e:	b093      	sub	sp, #76	@ 0x4c
  SysTime_t UnixEpoch = SysTimeGet();
 8002480:	a807      	add	r0, sp, #28
 8002482:	f011 fb81 	bl	8013b88 <SysTimeGet>
  UnixEpoch.Seconds -= 18; /*removing leap seconds*/
 8002486:	9807      	ldr	r0, [sp, #28]
 8002488:	f1a0 0312 	sub.w	r3, r0, #18
 800248c:	9307      	str	r3, [sp, #28]
  UnixEpoch.Seconds += 3600 * 2; /*adding 2 hours*/
 800248e:	f500 50e0 	add.w	r0, r0, #7168	@ 0x1c00
 8002492:	300e      	adds	r0, #14
 8002494:	9007      	str	r0, [sp, #28]
  SysTimeLocalTime(UnixEpoch.Seconds,  & localtime);
 8002496:	a909      	add	r1, sp, #36	@ 0x24
 8002498:	f011 fbfa 	bl	8013c90 <SysTimeLocalTime>
  AT_PRINTF("LTIME:%02dh%02dm%02ds on %02d/%02d/%04d\r\n",
 800249c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800249e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80024a6:	3301      	adds	r3, #1
 80024a8:	9304      	str	r3, [sp, #16]
 80024aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80024ac:	9303      	str	r3, [sp, #12]
 80024ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <AT_LocalTime_get+0x54>)
 80024bc:	2200      	movs	r2, #0
 80024be:	4611      	mov	r1, r2
 80024c0:	4610      	mov	r0, r2
 80024c2:	f011 f83d 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 80024c6:	2000      	movs	r0, #0
 80024c8:	b013      	add	sp, #76	@ 0x4c
 80024ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ce:	bf00      	nop
 80024d0:	08014c80 	.word	0x08014c80

080024d4 <AT_reset>:
{
 80024d4:	b508      	push	{r3, lr}
  NVIC_SystemReset();
 80024d6:	f7ff fd15 	bl	8001f04 <__NVIC_SystemReset>
	...

080024dc <AT_restore_factory_settings>:
{
 80024dc:	b508      	push	{r3, lr}
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 80024de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024e2:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <AT_restore_factory_settings+0x18>)
 80024e4:	f7fe fe22 	bl	800112c <FLASH_IF_Erase>
 80024e8:	b108      	cbz	r0, 80024ee <AT_restore_factory_settings+0x12>
}
 80024ea:	2000      	movs	r0, #0
 80024ec:	bd08      	pop	{r3, pc}
    NVIC_SystemReset();
 80024ee:	f7ff fd09 	bl	8001f04 <__NVIC_SystemReset>
 80024f2:	bf00      	nop
 80024f4:	0803f000 	.word	0x0803f000

080024f8 <AT_store_context>:
{
 80024f8:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80024fa:	f006 ff49 	bl	8009390 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80024fe:	f110 0f08 	cmn.w	r0, #8
 8002502:	d004      	beq.n	800250e <AT_store_context+0x16>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002504:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002508:	d009      	beq.n	800251e <AT_store_context+0x26>
  return AT_OK;
 800250a:	2000      	movs	r0, #0
}
 800250c:	bd08      	pop	{r3, pc}
    AT_PRINTF("NVM DATA UP TO DATE\r\n");
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <AT_store_context+0x38>)
 8002510:	2200      	movs	r2, #0
 8002512:	4611      	mov	r1, r2
 8002514:	4610      	mov	r0, r2
 8002516:	f011 f813 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 800251a:	2000      	movs	r0, #0
 800251c:	e7f6      	b.n	800250c <AT_store_context+0x14>
    AT_PRINTF("NVM DATA STORE FAILED\r\n");
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <AT_store_context+0x3c>)
 8002520:	2200      	movs	r2, #0
 8002522:	4611      	mov	r1, r2
 8002524:	4610      	mov	r0, r2
 8002526:	f011 f80b 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_ERROR;
 800252a:	2001      	movs	r0, #1
 800252c:	e7ee      	b.n	800250c <AT_store_context+0x14>
 800252e:	bf00      	nop
 8002530:	08014cac 	.word	0x08014cac
 8002534:	08014cc4 	.word	0x08014cc4

08002538 <AT_JoinEUI_get>:
{
 8002538:	b500      	push	{lr}
 800253a:	b083      	sub	sp, #12
  if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS)
 800253c:	4668      	mov	r0, sp
 800253e:	f006 fca0 	bl	8008e82 <LmHandlerGetAppEUI>
 8002542:	b930      	cbnz	r0, 8002552 <AT_JoinEUI_get+0x1a>
  print_8_02x(appEUI);
 8002544:	4668      	mov	r0, sp
 8002546:	f7ff fcfd 	bl	8001f44 <print_8_02x>
  return AT_OK;
 800254a:	2000      	movs	r0, #0
}
 800254c:	b003      	add	sp, #12
 800254e:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002552:	2002      	movs	r0, #2
 8002554:	e7fa      	b.n	800254c <AT_JoinEUI_get+0x14>
	...

08002558 <AT_JoinEUI_set>:
{
 8002558:	b500      	push	{lr}
 800255a:	b089      	sub	sp, #36	@ 0x24
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800255c:	f10d 031f 	add.w	r3, sp, #31
 8002560:	9305      	str	r3, [sp, #20]
 8002562:	f10d 031e 	add.w	r3, sp, #30
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	f10d 031d 	add.w	r3, sp, #29
 800256c:	9303      	str	r3, [sp, #12]
 800256e:	ab07      	add	r3, sp, #28
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	f10d 031b 	add.w	r3, sp, #27
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f10d 031a 	add.w	r3, sp, #26
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f10d 0319 	add.w	r3, sp, #25
 8002582:	aa06      	add	r2, sp, #24
 8002584:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <AT_JoinEUI_set+0x4c>)
 8002586:	f011 fef7 	bl	8014378 <tiny_sscanf>
 800258a:	2808      	cmp	r0, #8
 800258c:	d003      	beq.n	8002596 <AT_JoinEUI_set+0x3e>
    return AT_PARAM_ERROR;
 800258e:	2002      	movs	r0, #2
}
 8002590:	b009      	add	sp, #36	@ 0x24
 8002592:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppEUI(JoinEui))
 8002596:	a806      	add	r0, sp, #24
 8002598:	f006 fc87 	bl	8008eaa <LmHandlerSetAppEUI>
 800259c:	2800      	cmp	r0, #0
 800259e:	d0f7      	beq.n	8002590 <AT_JoinEUI_set+0x38>
    return AT_ERROR;
 80025a0:	2001      	movs	r0, #1
 80025a2:	e7f5      	b.n	8002590 <AT_JoinEUI_set+0x38>
 80025a4:	08014a7c 	.word	0x08014a7c

080025a8 <AT_NwkKey_get>:
{
 80025a8:	b500      	push	{lr}
 80025aa:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(NWK_KEY, nwkKey))
 80025ac:	4669      	mov	r1, sp
 80025ae:	2001      	movs	r0, #1
 80025b0:	f006 feb3 	bl	800931a <LmHandlerGetKey>
 80025b4:	b118      	cbz	r0, 80025be <AT_NwkKey_get+0x16>
    return AT_ERROR;
 80025b6:	2001      	movs	r0, #1
}
 80025b8:	b005      	add	sp, #20
 80025ba:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(nwkKey);
 80025be:	4668      	mov	r0, sp
 80025c0:	f7ff fcdc 	bl	8001f7c <print_16_02x>
  return AT_OK;
 80025c4:	2000      	movs	r0, #0
 80025c6:	e7f7      	b.n	80025b8 <AT_NwkKey_get+0x10>

080025c8 <AT_NwkKey_set>:
{
 80025c8:	b500      	push	{lr}
 80025ca:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, nwkKey) != 16)
 80025cc:	4669      	mov	r1, sp
 80025ce:	f7ff fd39 	bl	8002044 <sscanf_16_hhx>
 80025d2:	2810      	cmp	r0, #16
 80025d4:	d003      	beq.n	80025de <AT_NwkKey_set+0x16>
    return AT_PARAM_ERROR;
 80025d6:	2002      	movs	r0, #2
}
 80025d8:	b005      	add	sp, #20
 80025da:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(NWK_KEY, nwkKey))
 80025de:	4669      	mov	r1, sp
 80025e0:	2001      	movs	r0, #1
 80025e2:	f006 feb1 	bl	8009348 <LmHandlerSetKey>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d0f6      	beq.n	80025d8 <AT_NwkKey_set+0x10>
    return AT_ERROR;
 80025ea:	2001      	movs	r0, #1
 80025ec:	e7f4      	b.n	80025d8 <AT_NwkKey_set+0x10>

080025ee <AT_AppKey_get>:
{
 80025ee:	b500      	push	{lr}
 80025f0:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(APP_KEY, appKey))
 80025f2:	4669      	mov	r1, sp
 80025f4:	2000      	movs	r0, #0
 80025f6:	f006 fe90 	bl	800931a <LmHandlerGetKey>
 80025fa:	b118      	cbz	r0, 8002604 <AT_AppKey_get+0x16>
    return AT_ERROR;
 80025fc:	2001      	movs	r0, #1
}
 80025fe:	b005      	add	sp, #20
 8002600:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(appKey);
 8002604:	4668      	mov	r0, sp
 8002606:	f7ff fcb9 	bl	8001f7c <print_16_02x>
  return AT_OK;
 800260a:	2000      	movs	r0, #0
 800260c:	e7f7      	b.n	80025fe <AT_AppKey_get+0x10>

0800260e <AT_AppKey_set>:
{
 800260e:	b500      	push	{lr}
 8002610:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, appKey) != 16)
 8002612:	4669      	mov	r1, sp
 8002614:	f7ff fd16 	bl	8002044 <sscanf_16_hhx>
 8002618:	2810      	cmp	r0, #16
 800261a:	d003      	beq.n	8002624 <AT_AppKey_set+0x16>
    return AT_PARAM_ERROR;
 800261c:	2002      	movs	r0, #2
}
 800261e:	b005      	add	sp, #20
 8002620:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(APP_KEY, appKey))
 8002624:	4669      	mov	r1, sp
 8002626:	2000      	movs	r0, #0
 8002628:	f006 fe8e 	bl	8009348 <LmHandlerSetKey>
 800262c:	2800      	cmp	r0, #0
 800262e:	d0f6      	beq.n	800261e <AT_AppKey_set+0x10>
    return AT_ERROR;
 8002630:	2001      	movs	r0, #1
 8002632:	e7f4      	b.n	800261e <AT_AppKey_set+0x10>

08002634 <AT_NwkSKey_get>:
{
 8002634:	b500      	push	{lr}
 8002636:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(NWK_S_KEY, nwkSKey))
 8002638:	4669      	mov	r1, sp
 800263a:	2008      	movs	r0, #8
 800263c:	f006 fe6d 	bl	800931a <LmHandlerGetKey>
 8002640:	b118      	cbz	r0, 800264a <AT_NwkSKey_get+0x16>
    return AT_ERROR;
 8002642:	2001      	movs	r0, #1
}
 8002644:	b005      	add	sp, #20
 8002646:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(nwkSKey);
 800264a:	4668      	mov	r0, sp
 800264c:	f7ff fc96 	bl	8001f7c <print_16_02x>
  return AT_OK;
 8002650:	2000      	movs	r0, #0
 8002652:	e7f7      	b.n	8002644 <AT_NwkSKey_get+0x10>

08002654 <AT_NwkSKey_set>:
{
 8002654:	b500      	push	{lr}
 8002656:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, nwkSKey) != 16)
 8002658:	4669      	mov	r1, sp
 800265a:	f7ff fcf3 	bl	8002044 <sscanf_16_hhx>
 800265e:	2810      	cmp	r0, #16
 8002660:	d003      	beq.n	800266a <AT_NwkSKey_set+0x16>
    return AT_PARAM_ERROR;
 8002662:	2002      	movs	r0, #2
}
 8002664:	b005      	add	sp, #20
 8002666:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(NWK_S_KEY, nwkSKey))
 800266a:	4669      	mov	r1, sp
 800266c:	2008      	movs	r0, #8
 800266e:	f006 fe6b 	bl	8009348 <LmHandlerSetKey>
 8002672:	2800      	cmp	r0, #0
 8002674:	d0f6      	beq.n	8002664 <AT_NwkSKey_set+0x10>
    return AT_ERROR;
 8002676:	2001      	movs	r0, #1
 8002678:	e7f4      	b.n	8002664 <AT_NwkSKey_set+0x10>

0800267a <AT_AppSKey_get>:
{
 800267a:	b500      	push	{lr}
 800267c:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetKey(APP_S_KEY, appSKey))
 800267e:	4669      	mov	r1, sp
 8002680:	2009      	movs	r0, #9
 8002682:	f006 fe4a 	bl	800931a <LmHandlerGetKey>
 8002686:	b118      	cbz	r0, 8002690 <AT_AppSKey_get+0x16>
    return AT_ERROR;
 8002688:	2001      	movs	r0, #1
}
 800268a:	b005      	add	sp, #20
 800268c:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(appSKey);
 8002690:	4668      	mov	r0, sp
 8002692:	f7ff fc73 	bl	8001f7c <print_16_02x>
  return AT_OK;
 8002696:	2000      	movs	r0, #0
 8002698:	e7f7      	b.n	800268a <AT_AppSKey_get+0x10>

0800269a <AT_AppSKey_set>:
{
 800269a:	b500      	push	{lr}
 800269c:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, appSKey) != 16)
 800269e:	4669      	mov	r1, sp
 80026a0:	f7ff fcd0 	bl	8002044 <sscanf_16_hhx>
 80026a4:	2810      	cmp	r0, #16
 80026a6:	d003      	beq.n	80026b0 <AT_AppSKey_set+0x16>
    return AT_PARAM_ERROR;
 80026a8:	2002      	movs	r0, #2
}
 80026aa:	b005      	add	sp, #20
 80026ac:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetKey(APP_S_KEY, appSKey))
 80026b0:	4669      	mov	r1, sp
 80026b2:	2009      	movs	r0, #9
 80026b4:	f006 fe48 	bl	8009348 <LmHandlerSetKey>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d0f6      	beq.n	80026aa <AT_AppSKey_set+0x10>
    return AT_ERROR;
 80026bc:	2001      	movs	r0, #1
 80026be:	e7f4      	b.n	80026aa <AT_AppSKey_set+0x10>

080026c0 <AT_DevAddr_get>:
{
 80026c0:	b500      	push	{lr}
 80026c2:	b083      	sub	sp, #12
  if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS)
 80026c4:	a801      	add	r0, sp, #4
 80026c6:	f006 fc35 	bl	8008f34 <LmHandlerGetDevAddr>
 80026ca:	b930      	cbnz	r0, 80026da <AT_DevAddr_get+0x1a>
  print_uint32_as_02x(devAddr);
 80026cc:	9801      	ldr	r0, [sp, #4]
 80026ce:	f7ff fc93 	bl	8001ff8 <print_uint32_as_02x>
  return AT_OK;
 80026d2:	2000      	movs	r0, #0
}
 80026d4:	b003      	add	sp, #12
 80026d6:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80026da:	2002      	movs	r0, #2
 80026dc:	e7fa      	b.n	80026d4 <AT_DevAddr_get+0x14>

080026de <AT_DevAddr_set>:
{
 80026de:	b500      	push	{lr}
 80026e0:	b083      	sub	sp, #12
  if (sscanf_uint32_as_hhx(param, &devAddr) != 4)
 80026e2:	a901      	add	r1, sp, #4
 80026e4:	f7ff fcde 	bl	80020a4 <sscanf_uint32_as_hhx>
 80026e8:	2804      	cmp	r0, #4
 80026ea:	d003      	beq.n	80026f4 <AT_DevAddr_set+0x16>
    return AT_PARAM_ERROR;
 80026ec:	2002      	movs	r0, #2
}
 80026ee:	b003      	add	sp, #12
 80026f0:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevAddr(devAddr))
 80026f4:	9801      	ldr	r0, [sp, #4]
 80026f6:	f006 fc32 	bl	8008f5e <LmHandlerSetDevAddr>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d0f7      	beq.n	80026ee <AT_DevAddr_set+0x10>
    return AT_ERROR;
 80026fe:	2001      	movs	r0, #1
 8002700:	e7f5      	b.n	80026ee <AT_DevAddr_set+0x10>

08002702 <AT_DevEUI_get>:
{
 8002702:	b500      	push	{lr}
 8002704:	b083      	sub	sp, #12
  if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS)
 8002706:	4668      	mov	r0, sp
 8002708:	f006 fb8f 	bl	8008e2a <LmHandlerGetDevEUI>
 800270c:	b930      	cbnz	r0, 800271c <AT_DevEUI_get+0x1a>
  print_8_02x(devEUI);
 800270e:	4668      	mov	r0, sp
 8002710:	f7ff fc18 	bl	8001f44 <print_8_02x>
  return AT_OK;
 8002714:	2000      	movs	r0, #0
}
 8002716:	b003      	add	sp, #12
 8002718:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800271c:	2002      	movs	r0, #2
 800271e:	e7fa      	b.n	8002716 <AT_DevEUI_get+0x14>

08002720 <AT_DevEUI_set>:
{
 8002720:	b500      	push	{lr}
 8002722:	b089      	sub	sp, #36	@ 0x24
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8002724:	f10d 031f 	add.w	r3, sp, #31
 8002728:	9305      	str	r3, [sp, #20]
 800272a:	f10d 031e 	add.w	r3, sp, #30
 800272e:	9304      	str	r3, [sp, #16]
 8002730:	f10d 031d 	add.w	r3, sp, #29
 8002734:	9303      	str	r3, [sp, #12]
 8002736:	ab07      	add	r3, sp, #28
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	f10d 031b 	add.w	r3, sp, #27
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	f10d 031a 	add.w	r3, sp, #26
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f10d 0319 	add.w	r3, sp, #25
 800274a:	aa06      	add	r2, sp, #24
 800274c:	4907      	ldr	r1, [pc, #28]	@ (800276c <AT_DevEUI_set+0x4c>)
 800274e:	f011 fe13 	bl	8014378 <tiny_sscanf>
 8002752:	2808      	cmp	r0, #8
 8002754:	d003      	beq.n	800275e <AT_DevEUI_set+0x3e>
    return AT_PARAM_ERROR;
 8002756:	2002      	movs	r0, #2
}
 8002758:	b009      	add	sp, #36	@ 0x24
 800275a:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevEUI(devEui))
 800275e:	a806      	add	r0, sp, #24
 8002760:	f006 fb77 	bl	8008e52 <LmHandlerSetDevEUI>
 8002764:	2800      	cmp	r0, #0
 8002766:	d0f7      	beq.n	8002758 <AT_DevEUI_set+0x38>
    return AT_ERROR;
 8002768:	2001      	movs	r0, #1
 800276a:	e7f5      	b.n	8002758 <AT_DevEUI_set+0x38>
 800276c:	08014a7c 	.word	0x08014a7c

08002770 <AT_NetworkID_get>:
{
 8002770:	b500      	push	{lr}
 8002772:	b083      	sub	sp, #12
  if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS)
 8002774:	a801      	add	r0, sp, #4
 8002776:	f006 fbb0 	bl	8008eda <LmHandlerGetNetworkID>
 800277a:	b930      	cbnz	r0, 800278a <AT_NetworkID_get+0x1a>
  print_d(networkId);
 800277c:	9801      	ldr	r0, [sp, #4]
 800277e:	f7ff fc53 	bl	8002028 <print_d>
  return AT_OK;
 8002782:	2000      	movs	r0, #0
}
 8002784:	b003      	add	sp, #12
 8002786:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800278a:	2002      	movs	r0, #2
 800278c:	e7fa      	b.n	8002784 <AT_NetworkID_get+0x14>
	...

08002790 <AT_NetworkID_set>:
{
 8002790:	b500      	push	{lr}
 8002792:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%u", &networkId) != 1)
 8002794:	aa01      	add	r2, sp, #4
 8002796:	4909      	ldr	r1, [pc, #36]	@ (80027bc <AT_NetworkID_set+0x2c>)
 8002798:	f011 fdee 	bl	8014378 <tiny_sscanf>
 800279c:	2801      	cmp	r0, #1
 800279e:	d108      	bne.n	80027b2 <AT_NetworkID_set+0x22>
  if (networkId > 127)
 80027a0:	9801      	ldr	r0, [sp, #4]
 80027a2:	287f      	cmp	r0, #127	@ 0x7f
 80027a4:	d807      	bhi.n	80027b6 <AT_NetworkID_set+0x26>
  LmHandlerSetNetworkID(networkId);
 80027a6:	f006 fbad 	bl	8008f04 <LmHandlerSetNetworkID>
  return AT_OK;
 80027aa:	2000      	movs	r0, #0
}
 80027ac:	b003      	add	sp, #12
 80027ae:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80027b2:	2002      	movs	r0, #2
 80027b4:	e7fa      	b.n	80027ac <AT_NetworkID_set+0x1c>
    return AT_PARAM_ERROR;
 80027b6:	2002      	movs	r0, #2
 80027b8:	e7f8      	b.n	80027ac <AT_NetworkID_set+0x1c>
 80027ba:	bf00      	nop
 80027bc:	08014c10 	.word	0x08014c10

080027c0 <AT_Join>:
{
 80027c0:	b508      	push	{r3, lr}
  switch (param[0])
 80027c2:	7803      	ldrb	r3, [r0, #0]
 80027c4:	2b30      	cmp	r3, #48	@ 0x30
 80027c6:	d003      	beq.n	80027d0 <AT_Join+0x10>
 80027c8:	2b31      	cmp	r3, #49	@ 0x31
 80027ca:	d007      	beq.n	80027dc <AT_Join+0x1c>
 80027cc:	2002      	movs	r0, #2
 80027ce:	e004      	b.n	80027da <AT_Join+0x1a>
      LmHandlerJoin(ACTIVATION_TYPE_ABP, true);
 80027d0:	2101      	movs	r1, #1
 80027d2:	4608      	mov	r0, r1
 80027d4:	f005 ff50 	bl	8008678 <LmHandlerJoin>
  return AT_OK;
 80027d8:	2000      	movs	r0, #0
}
 80027da:	bd08      	pop	{r3, pc}
      LmHandlerJoin(ACTIVATION_TYPE_OTAA, true);
 80027dc:	2101      	movs	r1, #1
 80027de:	2002      	movs	r0, #2
 80027e0:	f005 ff4a 	bl	8008678 <LmHandlerJoin>
  return AT_OK;
 80027e4:	2000      	movs	r0, #0
      break;
 80027e6:	e7f8      	b.n	80027da <AT_Join+0x1a>

080027e8 <AT_Link_Check>:
{
 80027e8:	b508      	push	{r3, lr}
  if (LmHandlerLinkCheckReq() != LORAMAC_HANDLER_SUCCESS)
 80027ea:	f006 fb0f 	bl	8008e0c <LmHandlerLinkCheckReq>
 80027ee:	b900      	cbnz	r0, 80027f2 <AT_Link_Check+0xa>
}
 80027f0:	bd08      	pop	{r3, pc}
    return AT_PARAM_ERROR;
 80027f2:	2002      	movs	r0, #2
 80027f4:	e7fc      	b.n	80027f0 <AT_Link_Check+0x8>
	...

080027f8 <AT_Send>:
{
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	b083      	sub	sp, #12
 80027fc:	4605      	mov	r5, r0
  uint16_t bufSize = strlen(param);
 80027fe:	f7fd fcbb 	bl	8000178 <strlen>
 8002802:	b284      	uxth	r4, r0
  char hex[3] = {0, 0, 0};
 8002804:	2300      	movs	r3, #0
 8002806:	f8ad 3000 	strh.w	r3, [sp]
 800280a:	f88d 3002 	strb.w	r3, [sp, #2]
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 800280e:	aa01      	add	r2, sp, #4
 8002810:	4946      	ldr	r1, [pc, #280]	@ (800292c <AT_Send+0x134>)
 8002812:	4628      	mov	r0, r5
 8002814:	f011 fdb0 	bl	8014378 <tiny_sscanf>
 8002818:	2801      	cmp	r0, #1
 800281a:	d00a      	beq.n	8002832 <AT_Send+0x3a>
    AT_PRINTF("AT+SEND without the application port\r\n");
 800281c:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <AT_Send+0x138>)
 800281e:	2200      	movs	r2, #0
 8002820:	4611      	mov	r1, r2
 8002822:	4610      	mov	r0, r2
 8002824:	f010 fe8c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8002828:	2002      	movs	r0, #2
 800282a:	e023      	b.n	8002874 <AT_Send+0x7c>
    buf ++;
 800282c:	3501      	adds	r5, #1
    bufSize --;
 800282e:	3c01      	subs	r4, #1
 8002830:	b2a4      	uxth	r4, r4
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
 8002832:	782a      	ldrb	r2, [r5, #0]
 8002834:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b09      	cmp	r3, #9
 800283c:	d801      	bhi.n	8002842 <AT_Send+0x4a>
 800283e:	2c01      	cmp	r4, #1
 8002840:	d8f4      	bhi.n	800282c <AT_Send+0x34>
  if ((bufSize == 0) || (':' != buf[0]))
 8002842:	b184      	cbz	r4, 8002866 <AT_Send+0x6e>
 8002844:	2a3a      	cmp	r2, #58	@ 0x3a
 8002846:	d10e      	bne.n	8002866 <AT_Send+0x6e>
    bufSize --;
 8002848:	1e63      	subs	r3, r4, #1
 800284a:	b29b      	uxth	r3, r3
  switch (buf[0])
 800284c:	786a      	ldrb	r2, [r5, #1]
 800284e:	2a30      	cmp	r2, #48	@ 0x30
 8002850:	d012      	beq.n	8002878 <AT_Send+0x80>
 8002852:	2a31      	cmp	r2, #49	@ 0x31
 8002854:	d037      	beq.n	80028c6 <AT_Send+0xce>
      AT_PRINTF("AT+SEND without the acknowledge flag\r\n");
 8002856:	4b37      	ldr	r3, [pc, #220]	@ (8002934 <AT_Send+0x13c>)
 8002858:	2200      	movs	r2, #0
 800285a:	4611      	mov	r1, r2
 800285c:	4610      	mov	r0, r2
 800285e:	f010 fe6f 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
      return AT_PARAM_ERROR;
 8002862:	2002      	movs	r0, #2
 8002864:	e006      	b.n	8002874 <AT_Send+0x7c>
    AT_PRINTF("AT+SEND missing : character after app port\r\n");
 8002866:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <AT_Send+0x140>)
 8002868:	2200      	movs	r2, #0
 800286a:	4611      	mov	r1, r2
 800286c:	4610      	mov	r0, r2
 800286e:	f010 fe67 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8002872:	2002      	movs	r0, #2
}
 8002874:	b003      	add	sp, #12
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (buf[0])
 8002878:	2600      	movs	r6, #0
  if (bufSize > 0)
 800287a:	b333      	cbz	r3, 80028ca <AT_Send+0xd2>
    buf ++;
 800287c:	1caf      	adds	r7, r5, #2
    bufSize --;
 800287e:	3c02      	subs	r4, #2
 8002880:	b2a4      	uxth	r4, r4
  if ((bufSize == 0) || (':' != buf[0]))
 8002882:	b314      	cbz	r4, 80028ca <AT_Send+0xd2>
 8002884:	78ab      	ldrb	r3, [r5, #2]
 8002886:	2b3a      	cmp	r3, #58	@ 0x3a
 8002888:	d11f      	bne.n	80028ca <AT_Send+0xd2>
    buf ++;
 800288a:	3701      	adds	r7, #1
    bufSize --;
 800288c:	3c01      	subs	r4, #1
 800288e:	b2a4      	uxth	r4, r4
  unsigned size = 0;
 8002890:	2500      	movs	r5, #0
  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 8002892:	2df1      	cmp	r5, #241	@ 0xf1
 8002894:	d821      	bhi.n	80028da <AT_Send+0xe2>
 8002896:	2c01      	cmp	r4, #1
 8002898:	d91f      	bls.n	80028da <AT_Send+0xe2>
    hex[0] = buf[size * 2];
 800289a:	f817 3015 	ldrb.w	r3, [r7, r5, lsl #1]
 800289e:	f88d 3000 	strb.w	r3, [sp]
    hex[1] = buf[size * 2 + 1];
 80028a2:	eb07 0345 	add.w	r3, r7, r5, lsl #1
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	f88d 3001 	strb.w	r3, [sp, #1]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 80028ac:	4b23      	ldr	r3, [pc, #140]	@ (800293c <AT_Send+0x144>)
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	442a      	add	r2, r5
 80028b2:	4923      	ldr	r1, [pc, #140]	@ (8002940 <AT_Send+0x148>)
 80028b4:	4668      	mov	r0, sp
 80028b6:	f011 fd5f 	bl	8014378 <tiny_sscanf>
 80028ba:	2801      	cmp	r0, #1
 80028bc:	d12d      	bne.n	800291a <AT_Send+0x122>
    size++;
 80028be:	3501      	adds	r5, #1
    bufSize -= 2;
 80028c0:	3c02      	subs	r4, #2
 80028c2:	b2a4      	uxth	r4, r4
 80028c4:	e7e5      	b.n	8002892 <AT_Send+0x9a>
      isTxConfirmed = LORAMAC_HANDLER_CONFIRMED_MSG;
 80028c6:	2601      	movs	r6, #1
 80028c8:	e7d7      	b.n	800287a <AT_Send+0x82>
    AT_PRINTF("AT+SEND missing : character after ack flag\r\n");
 80028ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <AT_Send+0x14c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	4611      	mov	r1, r2
 80028d0:	4610      	mov	r0, r2
 80028d2:	f010 fe35 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 80028d6:	2002      	movs	r0, #2
 80028d8:	e7cc      	b.n	8002874 <AT_Send+0x7c>
  if (bufSize != 0)
 80028da:	bb04      	cbnz	r4, 800291e <AT_Send+0x126>
  AppData.BufferSize = size;
 80028dc:	4817      	ldr	r0, [pc, #92]	@ (800293c <AT_Send+0x144>)
 80028de:	7045      	strb	r5, [r0, #1]
  AppData.Port = appPort;
 80028e0:	9b01      	ldr	r3, [sp, #4]
 80028e2:	7003      	strb	r3, [r0, #0]
  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, false);
 80028e4:	2200      	movs	r2, #0
 80028e6:	4631      	mov	r1, r6
 80028e8:	f005 ff6a 	bl	80087c0 <LmHandlerSend>
  switch (lmhStatus)
 80028ec:	1d83      	adds	r3, r0, #6
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d811      	bhi.n	8002916 <AT_Send+0x11e>
 80028f2:	e8df f003 	tbb	[pc, r3]
 80028f6:	0e0c      	.short	0x0e0c
 80028f8:	10061606 	.word	0x10061606
 80028fc:	04          	.byte	0x04
 80028fd:	00          	.byte	0x00
 80028fe:	2000      	movs	r0, #0
 8002900:	e7b8      	b.n	8002874 <AT_Send+0x7c>
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 8002902:	f005 ff4b 	bl	800879c <LmHandlerJoinStatus>
 8002906:	2801      	cmp	r0, #1
 8002908:	d00d      	beq.n	8002926 <AT_Send+0x12e>
 800290a:	2005      	movs	r0, #5
 800290c:	e7b2      	b.n	8002874 <AT_Send+0x7c>
      status = AT_DUTYCYCLE_RESTRICTED;
 800290e:	2008      	movs	r0, #8
      break;
 8002910:	e7b0      	b.n	8002874 <AT_Send+0x7c>
      status = AT_CRYPTO_ERROR;
 8002912:	2009      	movs	r0, #9
      break;
 8002914:	e7ae      	b.n	8002874 <AT_Send+0x7c>
      status = AT_ERROR;
 8002916:	2001      	movs	r0, #1
      break;
 8002918:	e7ac      	b.n	8002874 <AT_Send+0x7c>
      return AT_PARAM_ERROR;
 800291a:	2002      	movs	r0, #2
 800291c:	e7aa      	b.n	8002874 <AT_Send+0x7c>
    return AT_PARAM_ERROR;
 800291e:	2002      	movs	r0, #2
 8002920:	e7a8      	b.n	8002874 <AT_Send+0x7c>
      status = AT_NO_NET_JOINED;
 8002922:	2005      	movs	r0, #5
 8002924:	e7a6      	b.n	8002874 <AT_Send+0x7c>
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 8002926:	2003      	movs	r0, #3
 8002928:	e7a4      	b.n	8002874 <AT_Send+0x7c>
 800292a:	bf00      	nop
 800292c:	08014cdc 	.word	0x08014cdc
 8002930:	08014ce0 	.word	0x08014ce0
 8002934:	08014d38 	.word	0x08014d38
 8002938:	08014d08 	.word	0x08014d08
 800293c:	20000064 	.word	0x20000064
 8002940:	08014d90 	.word	0x08014d90
 8002944:	08014d60 	.word	0x08014d60

08002948 <AT_ADR_get>:
{
 8002948:	b500      	push	{lr}
 800294a:	b083      	sub	sp, #12
  if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS)
 800294c:	f10d 0007 	add.w	r0, sp, #7
 8002950:	f006 fb2e 	bl	8008fb0 <LmHandlerGetAdrEnable>
 8002954:	b938      	cbnz	r0, 8002966 <AT_ADR_get+0x1e>
  print_d(adrEnable);
 8002956:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800295a:	f7ff fb65 	bl	8002028 <print_d>
  return AT_OK;
 800295e:	2000      	movs	r0, #0
}
 8002960:	b003      	add	sp, #12
 8002962:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002966:	2002      	movs	r0, #2
 8002968:	e7fa      	b.n	8002960 <AT_ADR_get+0x18>

0800296a <AT_ADR_set>:
{
 800296a:	b508      	push	{r3, lr}
  switch (param[0])
 800296c:	7800      	ldrb	r0, [r0, #0]
 800296e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8002972:	2b01      	cmp	r3, #1
 8002974:	d901      	bls.n	800297a <AT_ADR_set+0x10>
      return AT_PARAM_ERROR;
 8002976:	2002      	movs	r0, #2
}
 8002978:	bd08      	pop	{r3, pc}
      LmHandlerSetAdrEnable(param[0] - '0');
 800297a:	3830      	subs	r0, #48	@ 0x30
 800297c:	bf18      	it	ne
 800297e:	2001      	movne	r0, #1
 8002980:	f006 fb22 	bl	8008fc8 <LmHandlerSetAdrEnable>
  return AT_OK;
 8002984:	2000      	movs	r0, #0
 8002986:	e7f7      	b.n	8002978 <AT_ADR_set+0xe>

08002988 <AT_DataRate_get>:
{
 8002988:	b500      	push	{lr}
 800298a:	b083      	sub	sp, #12
  if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS)
 800298c:	f10d 0007 	add.w	r0, sp, #7
 8002990:	f006 f876 	bl	8008a80 <LmHandlerGetTxDatarate>
 8002994:	b938      	cbnz	r0, 80029a6 <AT_DataRate_get+0x1e>
  print_d(txDatarate);
 8002996:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800299a:	f7ff fb45 	bl	8002028 <print_d>
  return AT_OK;
 800299e:	2000      	movs	r0, #0
}
 80029a0:	b003      	add	sp, #12
 80029a2:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80029a6:	2002      	movs	r0, #2
 80029a8:	e7fa      	b.n	80029a0 <AT_DataRate_get+0x18>
	...

080029ac <AT_DataRate_set>:
{
 80029ac:	b500      	push	{lr}
 80029ae:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 80029b0:	f10d 0207 	add.w	r2, sp, #7
 80029b4:	490a      	ldr	r1, [pc, #40]	@ (80029e0 <AT_DataRate_set+0x34>)
 80029b6:	f011 fcdf 	bl	8014378 <tiny_sscanf>
 80029ba:	2801      	cmp	r0, #1
 80029bc:	d109      	bne.n	80029d2 <AT_DataRate_set+0x26>
  if ((datarate < 0) || (datarate > 15))
 80029be:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80029c2:	b2c3      	uxtb	r3, r0
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d808      	bhi.n	80029da <AT_DataRate_set+0x2e>
  if (LmHandlerSetTxDatarate(datarate) != LORAMAC_HANDLER_SUCCESS)
 80029c8:	f006 fb14 	bl	8008ff4 <LmHandlerSetTxDatarate>
 80029cc:	b110      	cbz	r0, 80029d4 <AT_DataRate_set+0x28>
    return AT_ERROR;
 80029ce:	2001      	movs	r0, #1
 80029d0:	e000      	b.n	80029d4 <AT_DataRate_set+0x28>
    return AT_PARAM_ERROR;
 80029d2:	2002      	movs	r0, #2
}
 80029d4:	b003      	add	sp, #12
 80029d6:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80029da:	2002      	movs	r0, #2
 80029dc:	e7fa      	b.n	80029d4 <AT_DataRate_set+0x28>
 80029de:	bf00      	nop
 80029e0:	08014d98 	.word	0x08014d98

080029e4 <AT_Region_get>:
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	b08e      	sub	sp, #56	@ 0x38
  const char *regionStrings[] =
 80029e8:	f10d 0c10 	add.w	ip, sp, #16
 80029ec:	4c13      	ldr	r4, [pc, #76]	@ (8002a3c <AT_Region_get+0x58>)
 80029ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80029fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fe:	e88c 0003 	stmia.w	ip, {r0, r1}
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8002a02:	f10d 000f 	add.w	r0, sp, #15
 8002a06:	f006 f855 	bl	8008ab4 <LmHandlerGetActiveRegion>
 8002a0a:	b998      	cbnz	r0, 8002a34 <AT_Region_get+0x50>
  if (region > LORAMAC_REGION_RU864)
 8002a0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	d811      	bhi.n	8002a38 <AT_Region_get+0x54>
  AT_PRINTF("%d:%s\r\n", region, regionStrings[region]);
 8002a14:	aa0e      	add	r2, sp, #56	@ 0x38
 8002a16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002a1a:	f852 2c28 	ldr.w	r2, [r2, #-40]
 8002a1e:	9201      	str	r2, [sp, #4]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <AT_Region_get+0x5c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	4611      	mov	r1, r2
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f010 fd89 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8002a2e:	2000      	movs	r0, #0
}
 8002a30:	b00e      	add	sp, #56	@ 0x38
 8002a32:	bd10      	pop	{r4, pc}
    return AT_PARAM_ERROR;
 8002a34:	2002      	movs	r0, #2
 8002a36:	e7fb      	b.n	8002a30 <AT_Region_get+0x4c>
    return AT_PARAM_ERROR;
 8002a38:	2002      	movs	r0, #2
 8002a3a:	e7f9      	b.n	8002a30 <AT_Region_get+0x4c>
 8002a3c:	08014808 	.word	0x08014808
 8002a40:	08014da0 	.word	0x08014da0

08002a44 <AT_Region_set>:
{
 8002a44:	b500      	push	{lr}
 8002a46:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &region) != 1)
 8002a48:	f10d 0207 	add.w	r2, sp, #7
 8002a4c:	4909      	ldr	r1, [pc, #36]	@ (8002a74 <AT_Region_set+0x30>)
 8002a4e:	f011 fc93 	bl	8014378 <tiny_sscanf>
 8002a52:	2801      	cmp	r0, #1
 8002a54:	d108      	bne.n	8002a68 <AT_Region_set+0x24>
  if (region > LORAMAC_REGION_RU864)
 8002a56:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002a5a:	2809      	cmp	r0, #9
 8002a5c:	d808      	bhi.n	8002a70 <AT_Region_set+0x2c>
  if (LmHandlerSetActiveRegion(region) != LORAMAC_HANDLER_SUCCESS)
 8002a5e:	f006 fa97 	bl	8008f90 <LmHandlerSetActiveRegion>
 8002a62:	b110      	cbz	r0, 8002a6a <AT_Region_set+0x26>
    return AT_PARAM_ERROR;
 8002a64:	2002      	movs	r0, #2
 8002a66:	e000      	b.n	8002a6a <AT_Region_set+0x26>
    return AT_PARAM_ERROR;
 8002a68:	2002      	movs	r0, #2
}
 8002a6a:	b003      	add	sp, #12
 8002a6c:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002a70:	2002      	movs	r0, #2
 8002a72:	e7fa      	b.n	8002a6a <AT_Region_set+0x26>
 8002a74:	08014d98 	.word	0x08014d98

08002a78 <AT_DeviceClass_get>:
{
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	b084      	sub	sp, #16
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 8002a7c:	f000 fe86 	bl	800378c <LoraInfo_GetPtr>
  if (loraInfo == NULL)
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d044      	beq.n	8002b0e <AT_DeviceClass_get+0x96>
 8002a84:	4604      	mov	r4, r0
  if (LmHandlerGetCurrentClass(&currentClass) != LORAMAC_HANDLER_SUCCESS)
 8002a86:	f10d 000f 	add.w	r0, sp, #15
 8002a8a:	f005 ff9d 	bl	80089c8 <LmHandlerGetCurrentClass>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d13f      	bne.n	8002b12 <AT_DeviceClass_get+0x9a>
  if ((loraInfo->ClassB == 1) && (ClassBEnableRequest == true) && (currentClass == CLASS_A))
 8002a92:	68a3      	ldr	r3, [r4, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <AT_DeviceClass_get+0x2c>
 8002a98:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <AT_DeviceClass_get+0xa0>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b113      	cbz	r3, 8002aa4 <AT_DeviceClass_get+0x2c>
 8002a9e:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8002aa2:	b16c      	cbz	r4, 8002ac0 <AT_DeviceClass_get+0x48>
    AT_PRINTF("%c\r\n", 'A' + currentClass);
 8002aa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002aa8:	3341      	adds	r3, #65	@ 0x41
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <AT_DeviceClass_get+0xa4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f010 fd44 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8002ab8:	2400      	movs	r4, #0
}
 8002aba:	4620      	mov	r0, r4
 8002abc:	b004      	add	sp, #16
 8002abe:	bd10      	pop	{r4, pc}
    if (LmHandlerGetBeaconState(&beaconState) != LORAMAC_HANDLER_SUCCESS)
 8002ac0:	f10d 000e 	add.w	r0, sp, #14
 8002ac4:	f006 fc26 	bl	8009314 <LmHandlerGetBeaconState>
 8002ac8:	b950      	cbnz	r0, 8002ae0 <AT_DeviceClass_get+0x68>
    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 8002aca:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	d816      	bhi.n	8002b00 <AT_DeviceClass_get+0x88>
 8002ad2:	e8df f003 	tbb	[pc, r3]
 8002ad6:	0707      	.short	0x0707
 8002ad8:	0e071515 	.word	0x0e071515
 8002adc:	0e0e0e15 	.word	0x0e0e0e15
      return AT_PARAM_ERROR;
 8002ae0:	2402      	movs	r4, #2
 8002ae2:	e7ea      	b.n	8002aba <AT_DeviceClass_get+0x42>
      AT_PRINTF("B,S0\r\n");
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <AT_DeviceClass_get+0xa8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4610      	mov	r0, r2
 8002aec:	f010 fd28 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8002af0:	e7e3      	b.n	8002aba <AT_DeviceClass_get+0x42>
      AT_PRINTF("B,S1\r\n");
 8002af2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <AT_DeviceClass_get+0xac>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	4611      	mov	r1, r2
 8002af8:	4610      	mov	r0, r2
 8002afa:	f010 fd21 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8002afe:	e7dc      	b.n	8002aba <AT_DeviceClass_get+0x42>
      AT_PRINTF("B,S2\r\n");
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <AT_DeviceClass_get+0xb0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	4611      	mov	r1, r2
 8002b06:	4610      	mov	r0, r2
 8002b08:	f010 fd1a 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  {
 8002b0c:	e7d5      	b.n	8002aba <AT_DeviceClass_get+0x42>
    return AT_ERROR;
 8002b0e:	2401      	movs	r4, #1
 8002b10:	e7d3      	b.n	8002aba <AT_DeviceClass_get+0x42>
    return AT_PARAM_ERROR;
 8002b12:	2402      	movs	r4, #2
 8002b14:	e7d1      	b.n	8002aba <AT_DeviceClass_get+0x42>
 8002b16:	bf00      	nop
 8002b18:	20000456 	.word	0x20000456
 8002b1c:	08014dc0 	.word	0x08014dc0
 8002b20:	08014da8 	.word	0x08014da8
 8002b24:	08014db0 	.word	0x08014db0
 8002b28:	08014db8 	.word	0x08014db8

08002b2c <AT_DeviceClass_set>:
{
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	4604      	mov	r4, r0
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 8002b30:	f000 fe2c 	bl	800378c <LoraInfo_GetPtr>
  if (loraInfo == NULL)
 8002b34:	b320      	cbz	r0, 8002b80 <AT_DeviceClass_set+0x54>
  switch (param[0])
 8002b36:	7823      	ldrb	r3, [r4, #0]
 8002b38:	2b42      	cmp	r3, #66	@ 0x42
 8002b3a:	d012      	beq.n	8002b62 <AT_DeviceClass_set+0x36>
 8002b3c:	2b43      	cmp	r3, #67	@ 0x43
 8002b3e:	d01b      	beq.n	8002b78 <AT_DeviceClass_set+0x4c>
 8002b40:	2b41      	cmp	r3, #65	@ 0x41
 8002b42:	d11f      	bne.n	8002b84 <AT_DeviceClass_set+0x58>
      if (loraInfo->ClassB == 1)
 8002b44:	6883      	ldr	r3, [r0, #8]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d007      	beq.n	8002b5a <AT_DeviceClass_set+0x2e>
      errorStatus = LmHandlerRequestClass(CLASS_A);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f005 fee2 	bl	8008914 <LmHandlerRequestClass>
  if (errorStatus == LORAMAC_HANDLER_NO_NETWORK_JOINED)
 8002b50:	f110 0f03 	cmn.w	r0, #3
 8002b54:	d018      	beq.n	8002b88 <AT_DeviceClass_set+0x5c>
  else if (errorStatus != LORAMAC_HANDLER_SUCCESS)
 8002b56:	b9c8      	cbnz	r0, 8002b8c <AT_DeviceClass_set+0x60>
}
 8002b58:	bd10      	pop	{r4, pc}
        ClassBEnableRequest = false;
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <AT_DeviceClass_set+0x64>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e7f3      	b.n	8002b4a <AT_DeviceClass_set+0x1e>
      if (loraInfo->ClassB == 1)
 8002b62:	6883      	ldr	r3, [r0, #8]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <AT_DeviceClass_set+0x40>
        return AT_NO_CLASS_B_ENABLE;
 8002b68:	2007      	movs	r0, #7
 8002b6a:	e7f5      	b.n	8002b58 <AT_DeviceClass_set+0x2c>
        ClassBEnableRequest = true;
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <AT_DeviceClass_set+0x64>)
 8002b70:	7018      	strb	r0, [r3, #0]
        errorStatus = LmHandlerRequestClass(CLASS_B);  /*Class B AT cmd switch Class B not supported cf.[UM2073]*/
 8002b72:	f005 fecf 	bl	8008914 <LmHandlerRequestClass>
      break;
 8002b76:	e7eb      	b.n	8002b50 <AT_DeviceClass_set+0x24>
      errorStatus = LmHandlerRequestClass(CLASS_C);
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f005 fecb 	bl	8008914 <LmHandlerRequestClass>
      break;
 8002b7e:	e7e7      	b.n	8002b50 <AT_DeviceClass_set+0x24>
    return AT_ERROR;
 8002b80:	2001      	movs	r0, #1
 8002b82:	e7e9      	b.n	8002b58 <AT_DeviceClass_set+0x2c>
  switch (param[0])
 8002b84:	2002      	movs	r0, #2
 8002b86:	e7e7      	b.n	8002b58 <AT_DeviceClass_set+0x2c>
    return AT_NO_NET_JOINED;
 8002b88:	2005      	movs	r0, #5
 8002b8a:	e7e5      	b.n	8002b58 <AT_DeviceClass_set+0x2c>
    return AT_ERROR;
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	e7e3      	b.n	8002b58 <AT_DeviceClass_set+0x2c>
 8002b90:	20000456 	.word	0x20000456

08002b94 <AT_DutyCycle_get>:
{
 8002b94:	b500      	push	{lr}
 8002b96:	b083      	sub	sp, #12
  if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable) != LORAMAC_HANDLER_SUCCESS)
 8002b98:	f10d 0007 	add.w	r0, sp, #7
 8002b9c:	f006 fa46 	bl	800902c <LmHandlerGetDutyCycleEnable>
 8002ba0:	b938      	cbnz	r0, 8002bb2 <AT_DutyCycle_get+0x1e>
  print_d(dutyCycleEnable);
 8002ba2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002ba6:	f7ff fa3f 	bl	8002028 <print_d>
  return AT_OK;
 8002baa:	2000      	movs	r0, #0
}
 8002bac:	b003      	add	sp, #12
 8002bae:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002bb2:	2002      	movs	r0, #2
 8002bb4:	e7fa      	b.n	8002bac <AT_DutyCycle_get+0x18>

08002bb6 <AT_DutyCycle_set>:
{
 8002bb6:	b508      	push	{r3, lr}
  switch (param[0])
 8002bb8:	7800      	ldrb	r0, [r0, #0]
 8002bba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d901      	bls.n	8002bc6 <AT_DutyCycle_set+0x10>
      return AT_PARAM_ERROR;
 8002bc2:	2002      	movs	r0, #2
}
 8002bc4:	bd08      	pop	{r3, pc}
      LmHandlerSetDutyCycleEnable(param[0] - '0');
 8002bc6:	3830      	subs	r0, #48	@ 0x30
 8002bc8:	bf18      	it	ne
 8002bca:	2001      	movne	r0, #1
 8002bcc:	f006 fa3a 	bl	8009044 <LmHandlerSetDutyCycleEnable>
  return AT_OK;
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e7f7      	b.n	8002bc4 <AT_DutyCycle_set+0xe>

08002bd4 <AT_JoinAcceptDelay1_get>:
{
 8002bd4:	b500      	push	{lr}
 8002bd6:	b083      	sub	sp, #12
  if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002bd8:	a801      	add	r0, sp, #4
 8002bda:	f006 fb01 	bl	80091e0 <LmHandlerGetJoinRx1Delay>
 8002bde:	b930      	cbnz	r0, 8002bee <AT_JoinAcceptDelay1_get+0x1a>
  print_u(rxDelay);
 8002be0:	9801      	ldr	r0, [sp, #4]
 8002be2:	f7ff f9a1 	bl	8001f28 <print_u>
  return AT_OK;
 8002be6:	2000      	movs	r0, #0
}
 8002be8:	b003      	add	sp, #12
 8002bea:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002bee:	2002      	movs	r0, #2
 8002bf0:	e7fa      	b.n	8002be8 <AT_JoinAcceptDelay1_get+0x14>
	...

08002bf4 <AT_JoinAcceptDelay1_set>:
{
 8002bf4:	b500      	push	{lr}
 8002bf6:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8002bf8:	aa01      	add	r2, sp, #4
 8002bfa:	4908      	ldr	r1, [pc, #32]	@ (8002c1c <AT_JoinAcceptDelay1_set+0x28>)
 8002bfc:	f011 fbbc 	bl	8014378 <tiny_sscanf>
 8002c00:	2801      	cmp	r0, #1
 8002c02:	d003      	beq.n	8002c0c <AT_JoinAcceptDelay1_set+0x18>
    return AT_PARAM_ERROR;
 8002c04:	2002      	movs	r0, #2
}
 8002c06:	b003      	add	sp, #12
 8002c08:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetJoinRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002c0c:	9801      	ldr	r0, [sp, #4]
 8002c0e:	f006 fb5b 	bl	80092c8 <LmHandlerSetJoinRx1Delay>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d0f7      	beq.n	8002c06 <AT_JoinAcceptDelay1_set+0x12>
    return AT_PARAM_ERROR;
 8002c16:	2002      	movs	r0, #2
 8002c18:	e7f5      	b.n	8002c06 <AT_JoinAcceptDelay1_set+0x12>
 8002c1a:	bf00      	nop
 8002c1c:	08014dc8 	.word	0x08014dc8

08002c20 <AT_JoinAcceptDelay2_get>:
{
 8002c20:	b500      	push	{lr}
 8002c22:	b083      	sub	sp, #12
  if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002c24:	a801      	add	r0, sp, #4
 8002c26:	f006 faf0 	bl	800920a <LmHandlerGetJoinRx2Delay>
 8002c2a:	b930      	cbnz	r0, 8002c3a <AT_JoinAcceptDelay2_get+0x1a>
  print_u(rxDelay);
 8002c2c:	9801      	ldr	r0, [sp, #4]
 8002c2e:	f7ff f97b 	bl	8001f28 <print_u>
  return AT_OK;
 8002c32:	2000      	movs	r0, #0
}
 8002c34:	b003      	add	sp, #12
 8002c36:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002c3a:	2002      	movs	r0, #2
 8002c3c:	e7fa      	b.n	8002c34 <AT_JoinAcceptDelay2_get+0x14>
	...

08002c40 <AT_JoinAcceptDelay2_set>:
{
 8002c40:	b500      	push	{lr}
 8002c42:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8002c44:	aa01      	add	r2, sp, #4
 8002c46:	4908      	ldr	r1, [pc, #32]	@ (8002c68 <AT_JoinAcceptDelay2_set+0x28>)
 8002c48:	f011 fb96 	bl	8014378 <tiny_sscanf>
 8002c4c:	2801      	cmp	r0, #1
 8002c4e:	d003      	beq.n	8002c58 <AT_JoinAcceptDelay2_set+0x18>
    return AT_PARAM_ERROR;
 8002c50:	2002      	movs	r0, #2
}
 8002c52:	b003      	add	sp, #12
 8002c54:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetJoinRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002c58:	9801      	ldr	r0, [sp, #4]
 8002c5a:	f006 fb45 	bl	80092e8 <LmHandlerSetJoinRx2Delay>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d0f7      	beq.n	8002c52 <AT_JoinAcceptDelay2_set+0x12>
    return AT_PARAM_ERROR;
 8002c62:	2002      	movs	r0, #2
 8002c64:	e7f5      	b.n	8002c52 <AT_JoinAcceptDelay2_set+0x12>
 8002c66:	bf00      	nop
 8002c68:	08014dc8 	.word	0x08014dc8

08002c6c <AT_Rx1Delay_get>:
{
 8002c6c:	b500      	push	{lr}
 8002c6e:	b083      	sub	sp, #12
  if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002c70:	a801      	add	r0, sp, #4
 8002c72:	f006 fa8b 	bl	800918c <LmHandlerGetRx1Delay>
 8002c76:	b930      	cbnz	r0, 8002c86 <AT_Rx1Delay_get+0x1a>
  print_u(rxDelay);
 8002c78:	9801      	ldr	r0, [sp, #4]
 8002c7a:	f7ff f955 	bl	8001f28 <print_u>
  return AT_OK;
 8002c7e:	2000      	movs	r0, #0
}
 8002c80:	b003      	add	sp, #12
 8002c82:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002c86:	2002      	movs	r0, #2
 8002c88:	e7fa      	b.n	8002c80 <AT_Rx1Delay_get+0x14>
	...

08002c8c <AT_Rx1Delay_set>:
{
 8002c8c:	b500      	push	{lr}
 8002c8e:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8002c90:	aa01      	add	r2, sp, #4
 8002c92:	4908      	ldr	r1, [pc, #32]	@ (8002cb4 <AT_Rx1Delay_set+0x28>)
 8002c94:	f011 fb70 	bl	8014378 <tiny_sscanf>
 8002c98:	2801      	cmp	r0, #1
 8002c9a:	d003      	beq.n	8002ca4 <AT_Rx1Delay_set+0x18>
    return AT_PARAM_ERROR;
 8002c9c:	2002      	movs	r0, #2
}
 8002c9e:	b003      	add	sp, #12
 8002ca0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002ca4:	9801      	ldr	r0, [sp, #4]
 8002ca6:	f006 faef 	bl	8009288 <LmHandlerSetRx1Delay>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d0f7      	beq.n	8002c9e <AT_Rx1Delay_set+0x12>
    return AT_PARAM_ERROR;
 8002cae:	2002      	movs	r0, #2
 8002cb0:	e7f5      	b.n	8002c9e <AT_Rx1Delay_set+0x12>
 8002cb2:	bf00      	nop
 8002cb4:	08014dc8 	.word	0x08014dc8

08002cb8 <AT_Rx2Delay_get>:
{
 8002cb8:	b500      	push	{lr}
 8002cba:	b083      	sub	sp, #12
  if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002cbc:	a801      	add	r0, sp, #4
 8002cbe:	f006 fa7a 	bl	80091b6 <LmHandlerGetRx2Delay>
 8002cc2:	b930      	cbnz	r0, 8002cd2 <AT_Rx2Delay_get+0x1a>
  print_u(rxDelay);
 8002cc4:	9801      	ldr	r0, [sp, #4]
 8002cc6:	f7ff f92f 	bl	8001f28 <print_u>
  return AT_OK;
 8002cca:	2000      	movs	r0, #0
}
 8002ccc:	b003      	add	sp, #12
 8002cce:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	e7fa      	b.n	8002ccc <AT_Rx2Delay_get+0x14>
	...

08002cd8 <AT_Rx2Delay_set>:
{
 8002cd8:	b500      	push	{lr}
 8002cda:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8002cdc:	aa01      	add	r2, sp, #4
 8002cde:	4908      	ldr	r1, [pc, #32]	@ (8002d00 <AT_Rx2Delay_set+0x28>)
 8002ce0:	f011 fb4a 	bl	8014378 <tiny_sscanf>
 8002ce4:	2801      	cmp	r0, #1
 8002ce6:	d003      	beq.n	8002cf0 <AT_Rx2Delay_set+0x18>
    return AT_PARAM_ERROR;
 8002ce8:	2002      	movs	r0, #2
}
 8002cea:	b003      	add	sp, #12
 8002cec:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002cf0:	9801      	ldr	r0, [sp, #4]
 8002cf2:	f006 fad9 	bl	80092a8 <LmHandlerSetRx2Delay>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d0f7      	beq.n	8002cea <AT_Rx2Delay_set+0x12>
    return AT_PARAM_ERROR;
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	e7f5      	b.n	8002cea <AT_Rx2Delay_set+0x12>
 8002cfe:	bf00      	nop
 8002d00:	08014dc8 	.word	0x08014dc8

08002d04 <AT_Rx2DataRate_get>:
{
 8002d04:	b500      	push	{lr}
 8002d06:	b083      	sub	sp, #12
  LmHandlerGetRX2Params(&rx2Params);
 8002d08:	4668      	mov	r0, sp
 8002d0a:	f006 f9a5 	bl	8009058 <LmHandlerGetRX2Params>
  print_d(rx2Params.Datarate);
 8002d0e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002d12:	f7ff f989 	bl	8002028 <print_d>
}
 8002d16:	2000      	movs	r0, #0
 8002d18:	b003      	add	sp, #12
 8002d1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d20 <AT_Rx2DataRate_set>:
{
 8002d20:	b510      	push	{r4, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	4604      	mov	r4, r0
  LmHandlerGetRX2Params(&rx2Params);
 8002d26:	4668      	mov	r0, sp
 8002d28:	f006 f996 	bl	8009058 <LmHandlerGetRX2Params>
  if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1)
 8002d2c:	aa01      	add	r2, sp, #4
 8002d2e:	490a      	ldr	r1, [pc, #40]	@ (8002d58 <AT_Rx2DataRate_set+0x38>)
 8002d30:	4620      	mov	r0, r4
 8002d32:	f011 fb21 	bl	8014378 <tiny_sscanf>
 8002d36:	2801      	cmp	r0, #1
 8002d38:	d109      	bne.n	8002d4e <AT_Rx2DataRate_set+0x2e>
  else if (rx2Params.Datarate > 15)
 8002d3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d808      	bhi.n	8002d54 <AT_Rx2DataRate_set+0x34>
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 8002d42:	4668      	mov	r0, sp
 8002d44:	f006 fa8c 	bl	8009260 <LmHandlerSetRX2Params>
 8002d48:	b110      	cbz	r0, 8002d50 <AT_Rx2DataRate_set+0x30>
    return AT_PARAM_ERROR;
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	e000      	b.n	8002d50 <AT_Rx2DataRate_set+0x30>
    return AT_PARAM_ERROR;
 8002d4e:	2002      	movs	r0, #2
}
 8002d50:	b002      	add	sp, #8
 8002d52:	bd10      	pop	{r4, pc}
    return AT_PARAM_ERROR;
 8002d54:	2002      	movs	r0, #2
 8002d56:	e7fb      	b.n	8002d50 <AT_Rx2DataRate_set+0x30>
 8002d58:	08014d98 	.word	0x08014d98

08002d5c <AT_Rx2Frequency_get>:
{
 8002d5c:	b500      	push	{lr}
 8002d5e:	b083      	sub	sp, #12
  LmHandlerGetRX2Params(&rx2Params);
 8002d60:	4668      	mov	r0, sp
 8002d62:	f006 f979 	bl	8009058 <LmHandlerGetRX2Params>
  print_d(rx2Params.Frequency);
 8002d66:	9800      	ldr	r0, [sp, #0]
 8002d68:	f7ff f95e 	bl	8002028 <print_d>
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	b003      	add	sp, #12
 8002d70:	f85d fb04 	ldr.w	pc, [sp], #4

08002d74 <AT_Rx2Frequency_set>:
{
 8002d74:	b510      	push	{r4, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	4604      	mov	r4, r0
  LmHandlerGetRX2Params(&rx2Params);
 8002d7a:	4668      	mov	r0, sp
 8002d7c:	f006 f96c 	bl	8009058 <LmHandlerGetRX2Params>
  if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1)
 8002d80:	466a      	mov	r2, sp
 8002d82:	4908      	ldr	r1, [pc, #32]	@ (8002da4 <AT_Rx2Frequency_set+0x30>)
 8002d84:	4620      	mov	r0, r4
 8002d86:	f011 faf7 	bl	8014378 <tiny_sscanf>
 8002d8a:	2801      	cmp	r0, #1
 8002d8c:	d002      	beq.n	8002d94 <AT_Rx2Frequency_set+0x20>
    return AT_PARAM_ERROR;
 8002d8e:	2002      	movs	r0, #2
}
 8002d90:	b002      	add	sp, #8
 8002d92:	bd10      	pop	{r4, pc}
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 8002d94:	4668      	mov	r0, sp
 8002d96:	f006 fa63 	bl	8009260 <LmHandlerSetRX2Params>
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d0f8      	beq.n	8002d90 <AT_Rx2Frequency_set+0x1c>
    return AT_PARAM_ERROR;
 8002d9e:	2002      	movs	r0, #2
 8002da0:	e7f6      	b.n	8002d90 <AT_Rx2Frequency_set+0x1c>
 8002da2:	bf00      	nop
 8002da4:	08014dc8 	.word	0x08014dc8

08002da8 <AT_TransmitPower_get>:
{
 8002da8:	b500      	push	{lr}
 8002daa:	b083      	sub	sp, #12
  if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS)
 8002dac:	f10d 0007 	add.w	r0, sp, #7
 8002db0:	f006 f96a 	bl	8009088 <LmHandlerGetTxPower>
 8002db4:	b938      	cbnz	r0, 8002dc6 <AT_TransmitPower_get+0x1e>
  print_d(txPower);
 8002db6:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8002dba:	f7ff f935 	bl	8002028 <print_d>
  return AT_OK;
 8002dbe:	2000      	movs	r0, #0
}
 8002dc0:	b003      	add	sp, #12
 8002dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	e7fa      	b.n	8002dc0 <AT_TransmitPower_get+0x18>
	...

08002dcc <AT_TransmitPower_set>:
{
 8002dcc:	b500      	push	{lr}
 8002dce:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &txPower) != 1)
 8002dd0:	f10d 0207 	add.w	r2, sp, #7
 8002dd4:	4908      	ldr	r1, [pc, #32]	@ (8002df8 <AT_TransmitPower_set+0x2c>)
 8002dd6:	f011 facf 	bl	8014378 <tiny_sscanf>
 8002dda:	2801      	cmp	r0, #1
 8002ddc:	d003      	beq.n	8002de6 <AT_TransmitPower_set+0x1a>
    return AT_PARAM_ERROR;
 8002dde:	2002      	movs	r0, #2
}
 8002de0:	b003      	add	sp, #12
 8002de2:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LmHandlerSetTxPower(txPower) != LORAMAC_HANDLER_SUCCESS)
 8002de6:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8002dea:	f006 fa23 	bl	8009234 <LmHandlerSetTxPower>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d0f6      	beq.n	8002de0 <AT_TransmitPower_set+0x14>
    return AT_PARAM_ERROR;
 8002df2:	2002      	movs	r0, #2
 8002df4:	e7f4      	b.n	8002de0 <AT_TransmitPower_set+0x14>
 8002df6:	bf00      	nop
 8002df8:	08014d98 	.word	0x08014d98

08002dfc <AT_PingSlot_get>:
{
 8002dfc:	b500      	push	{lr}
 8002dfe:	b083      	sub	sp, #12
  if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS)
 8002e00:	f10d 0007 	add.w	r0, sp, #7
 8002e04:	f006 fa80 	bl	8009308 <LmHandlerGetPingPeriodicity>
 8002e08:	b938      	cbnz	r0, 8002e1a <AT_PingSlot_get+0x1e>
  print_d(periodicity);
 8002e0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002e0e:	f7ff f90b 	bl	8002028 <print_d>
  return AT_OK;
 8002e12:	2000      	movs	r0, #0
}
 8002e14:	b003      	add	sp, #12
 8002e16:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	e7fa      	b.n	8002e14 <AT_PingSlot_get+0x18>
	...

08002e20 <AT_PingSlot_set>:
{
 8002e20:	b500      	push	{lr}
 8002e22:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &periodicity) != 1)
 8002e24:	f10d 0207 	add.w	r2, sp, #7
 8002e28:	4909      	ldr	r1, [pc, #36]	@ (8002e50 <AT_PingSlot_set+0x30>)
 8002e2a:	f011 faa5 	bl	8014378 <tiny_sscanf>
 8002e2e:	2801      	cmp	r0, #1
 8002e30:	d108      	bne.n	8002e44 <AT_PingSlot_set+0x24>
  else if (periodicity > 7)
 8002e32:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002e36:	2807      	cmp	r0, #7
 8002e38:	d808      	bhi.n	8002e4c <AT_PingSlot_set+0x2c>
  else if (LmHandlerSetPingPeriodicity(periodicity) != LORAMAC_HANDLER_SUCCESS)
 8002e3a:	f006 fa68 	bl	800930e <LmHandlerSetPingPeriodicity>
 8002e3e:	b110      	cbz	r0, 8002e46 <AT_PingSlot_set+0x26>
    return AT_PARAM_ERROR;
 8002e40:	2002      	movs	r0, #2
 8002e42:	e000      	b.n	8002e46 <AT_PingSlot_set+0x26>
    return AT_PARAM_ERROR;
 8002e44:	2002      	movs	r0, #2
}
 8002e46:	b003      	add	sp, #12
 8002e48:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	e7fa      	b.n	8002e46 <AT_PingSlot_set+0x26>
 8002e50:	08014d98 	.word	0x08014d98

08002e54 <AT_test_txTone>:
{
 8002e54:	b508      	push	{r3, lr}
  if (0U == TST_TxTone())
 8002e56:	f000 fd01 	bl	800385c <TST_TxTone>
 8002e5a:	b900      	cbnz	r0, 8002e5e <AT_test_txTone+0xa>
}
 8002e5c:	bd08      	pop	{r3, pc}
    return AT_BUSY_ERROR;
 8002e5e:	2003      	movs	r0, #3
 8002e60:	e7fc      	b.n	8002e5c <AT_test_txTone+0x8>

08002e62 <AT_test_rxRssi>:
{
 8002e62:	b508      	push	{r3, lr}
  if (0U == TST_RxRssi())
 8002e64:	f000 fd20 	bl	80038a8 <TST_RxRssi>
 8002e68:	b900      	cbnz	r0, 8002e6c <AT_test_rxRssi+0xa>
}
 8002e6a:	bd08      	pop	{r3, pc}
    return AT_BUSY_ERROR;
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	e7fc      	b.n	8002e6a <AT_test_rxRssi+0x8>

08002e70 <AT_test_get_config>:
{
 8002e70:	b510      	push	{r4, lr}
 8002e72:	b096      	sub	sp, #88	@ 0x58
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 8002e74:	f10d 0c0c 	add.w	ip, sp, #12
 8002e78:	4c6d      	ldr	r4, [pc, #436]	@ (8003030 <AT_test_get_config+0x1c0>)
 8002e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002e80:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002e84:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  TST_get_config(&testParam);
 8002e88:	a80a      	add	r0, sp, #40	@ 0x28
 8002e8a:	f000 fd8d 	bl	80039a8 <TST_get_config>
  AT_PRINTF("1: Freq= %d Hz\r\n", testParam.freq);
 8002e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	4b68      	ldr	r3, [pc, #416]	@ (8003034 <AT_test_get_config+0x1c4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	4611      	mov	r1, r2
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f010 fb51 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("2: Power= %d dBm\r\n", testParam.power);
 8002e9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4b65      	ldr	r3, [pc, #404]	@ (8003038 <AT_test_get_config+0x1c8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f010 fb49 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_MSK))
 8002eae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002eb0:	b163      	cbz	r3, 8002ecc <AT_test_get_config+0x5c>
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d00a      	beq.n	8002ecc <AT_test_get_config+0x5c>
  else if (testParam.modulation == TEST_LORA)
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d067      	beq.n	8002f8a <AT_test_get_config+0x11a>
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 8002eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800303c <AT_test_get_config+0x1cc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f010 fb3b 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8002eca:	e04d      	b.n	8002f68 <AT_test_get_config+0xf8>
    AT_PRINTF("3: Bandwidth= %d Hz\r\n", testParam.bandwidth);
 8002ecc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	@ (8003040 <AT_test_get_config+0x1d0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f010 fb32 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: FSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 8002edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4b58      	ldr	r3, [pc, #352]	@ (8003044 <AT_test_get_config+0x1d4>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f010 fb2a 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: Coding Rate not applicable\r\n");
 8002eec:	4b56      	ldr	r3, [pc, #344]	@ (8003048 <AT_test_get_config+0x1d8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f010 fb24 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 8002ef8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4b53      	ldr	r3, [pc, #332]	@ (800304c <AT_test_get_config+0x1dc>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	4611      	mov	r1, r2
 8002f02:	4610      	mov	r0, r2
 8002f04:	f010 fb1c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 8002f08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4b50      	ldr	r3, [pc, #320]	@ (8003050 <AT_test_get_config+0x1e0>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4611      	mov	r1, r2
 8002f12:	4610      	mov	r0, r2
 8002f14:	f010 fb14 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    if (testParam.modulation == TEST_FSK)
 8002f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f1a:	bb43      	cbnz	r3, 8002f6e <AT_test_get_config+0xfe>
      AT_PRINTF("8: modulation FSK\r\n");
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003054 <AT_test_get_config+0x1e4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4611      	mov	r1, r2
 8002f22:	4610      	mov	r0, r2
 8002f24:	f010 fb0c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 8002f28:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003058 <AT_test_get_config+0x1e8>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4611      	mov	r1, r2
 8002f32:	4610      	mov	r0, r2
 8002f34:	f010 fb04 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    if (testParam.modulation == TEST_FSK)
 8002f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f3a:	b9fb      	cbnz	r3, 8002f7c <AT_test_get_config+0x10c>
      AT_PRINTF("10: FSK deviation= %d Hz\r\n", testParam.fskDev);
 8002f3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4b46      	ldr	r3, [pc, #280]	@ (800305c <AT_test_get_config+0x1ec>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	4611      	mov	r1, r2
 8002f46:	4610      	mov	r0, r2
 8002f48:	f010 fafa 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt not applicable\r\n");
 8002f4c:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <AT_test_get_config+0x1f0>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4611      	mov	r1, r2
 8002f52:	4610      	mov	r0, r2
 8002f54:	f010 faf4 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12: FSK gaussian BT product= %d \r\n", testParam.BTproduct);
 8002f58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <AT_test_get_config+0x1f4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4611      	mov	r1, r2
 8002f62:	4610      	mov	r0, r2
 8002f64:	f010 faec 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 8002f68:	2000      	movs	r0, #0
 8002f6a:	b016      	add	sp, #88	@ 0x58
 8002f6c:	bd10      	pop	{r4, pc}
      AT_PRINTF("8: modulation MSK\r\n");
 8002f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003068 <AT_test_get_config+0x1f8>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	4611      	mov	r1, r2
 8002f74:	4610      	mov	r0, r2
 8002f76:	f010 fae3 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8002f7a:	e7d5      	b.n	8002f28 <AT_test_get_config+0xb8>
      AT_PRINTF("10: FSK deviation forced to FSK datarate/4\r\n");
 8002f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800306c <AT_test_get_config+0x1fc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	4611      	mov	r1, r2
 8002f82:	4610      	mov	r0, r2
 8002f84:	f010 fadc 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8002f88:	e7e0      	b.n	8002f4c <AT_test_get_config+0xdc>
    AT_PRINTF("3: Bandwidth= %d (=%d Hz)\r\n", testParam.bandwidth, loraBW[testParam.bandwidth]);
 8002f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f8c:	aa16      	add	r2, sp, #88	@ 0x58
 8002f8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002f92:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8002f96:	9201      	str	r2, [sp, #4]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4b35      	ldr	r3, [pc, #212]	@ (8003070 <AT_test_get_config+0x200>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f010 facd 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: SF= %d \r\n", testParam.loraSf_datarate);
 8002fa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4b32      	ldr	r3, [pc, #200]	@ (8003074 <AT_test_get_config+0x204>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f010 fac5 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: CR= %d (=4/%d) \r\n", testParam.codingRate, testParam.codingRate + 4);
 8002fb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	9201      	str	r2, [sp, #4]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <AT_test_get_config+0x208>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f010 fabb 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 8002fca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <AT_test_get_config+0x1dc>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f010 fab3 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 8002fda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <AT_test_get_config+0x1e0>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f010 faab 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation LORA\r\n");
 8002fea:	4b24      	ldr	r3, [pc, #144]	@ (800307c <AT_test_get_config+0x20c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f010 faa5 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 8002ff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <AT_test_get_config+0x1e8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	4611      	mov	r1, r2
 8003000:	4610      	mov	r0, r2
 8003002:	f010 fa9d 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: Frequency deviation not applicable\r\n");
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <AT_test_get_config+0x210>)
 8003008:	2200      	movs	r2, #0
 800300a:	4611      	mov	r1, r2
 800300c:	4610      	mov	r0, r2
 800300e:	f010 fa97 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", testParam.lowDrOpt);
 8003012:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4b1b      	ldr	r3, [pc, #108]	@ (8003084 <AT_test_get_config+0x214>)
 8003018:	2200      	movs	r2, #0
 800301a:	4611      	mov	r1, r2
 800301c:	4610      	mov	r0, r2
 800301e:	f010 fa8f 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12 BT product not applicable\r\n");
 8003022:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <AT_test_get_config+0x218>)
 8003024:	2200      	movs	r2, #0
 8003026:	4611      	mov	r1, r2
 8003028:	4610      	mov	r0, r2
 800302a:	f010 fa89 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 800302e:	e79b      	b.n	8002f68 <AT_test_get_config+0xf8>
 8003030:	08014830 	.word	0x08014830
 8003034:	08014dcc 	.word	0x08014dcc
 8003038:	08014de0 	.word	0x08014de0
 800303c:	08015014 	.word	0x08015014
 8003040:	08014df4 	.word	0x08014df4
 8003044:	08014e0c 	.word	0x08014e0c
 8003048:	08014e28 	.word	0x08014e28
 800304c:	08014e48 	.word	0x08014e48
 8003050:	08014e60 	.word	0x08014e60
 8003054:	08014e7c 	.word	0x08014e7c
 8003058:	08014ea4 	.word	0x08014ea4
 800305c:	08014ec0 	.word	0x08014ec0
 8003060:	08014f0c 	.word	0x08014f0c
 8003064:	08014f2c 	.word	0x08014f2c
 8003068:	08014e90 	.word	0x08014e90
 800306c:	08014edc 	.word	0x08014edc
 8003070:	08014f50 	.word	0x08014f50
 8003074:	08014f6c 	.word	0x08014f6c
 8003078:	08014f7c 	.word	0x08014f7c
 800307c:	08014f94 	.word	0x08014f94
 8003080:	08014fac 	.word	0x08014fac
 8003084:	08014fd8 	.word	0x08014fd8
 8003088:	08014ff4 	.word	0x08014ff4

0800308c <AT_test_set_config>:
{
 800308c:	b510      	push	{r4, lr}
 800308e:	b0a6      	sub	sp, #152	@ 0x98
 8003090:	4604      	mov	r4, r0
  testParameter_t testParam = {0};
 8003092:	2230      	movs	r2, #48	@ 0x30
 8003094:	2100      	movs	r1, #0
 8003096:	a81a      	add	r0, sp, #104	@ 0x68
 8003098:	f011 fade 	bl	8014658 <memset>
  if (13 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 800309c:	ab0e      	add	r3, sp, #56	@ 0x38
 800309e:	930a      	str	r3, [sp, #40]	@ 0x28
 80030a0:	ab0f      	add	r3, sp, #60	@ 0x3c
 80030a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80030a4:	ab10      	add	r3, sp, #64	@ 0x40
 80030a6:	9308      	str	r3, [sp, #32]
 80030a8:	ab11      	add	r3, sp, #68	@ 0x44
 80030aa:	9307      	str	r3, [sp, #28]
 80030ac:	ab12      	add	r3, sp, #72	@ 0x48
 80030ae:	9306      	str	r3, [sp, #24]
 80030b0:	ab13      	add	r3, sp, #76	@ 0x4c
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	ab14      	add	r3, sp, #80	@ 0x50
 80030b6:	9304      	str	r3, [sp, #16]
 80030b8:	ab15      	add	r3, sp, #84	@ 0x54
 80030ba:	9303      	str	r3, [sp, #12]
 80030bc:	ab0d      	add	r3, sp, #52	@ 0x34
 80030be:	9302      	str	r3, [sp, #8]
 80030c0:	ab16      	add	r3, sp, #88	@ 0x58
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	ab17      	add	r3, sp, #92	@ 0x5c
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	ab18      	add	r3, sp, #96	@ 0x60
 80030ca:	aa19      	add	r2, sp, #100	@ 0x64
 80030cc:	4969      	ldr	r1, [pc, #420]	@ (8003274 <AT_test_set_config+0x1e8>)
 80030ce:	4620      	mov	r0, r4
 80030d0:	f011 f952 	bl	8014378 <tiny_sscanf>
 80030d4:	280d      	cmp	r0, #13
 80030d6:	d002      	beq.n	80030de <AT_test_set_config+0x52>
    return AT_PARAM_ERROR;
 80030d8:	2002      	movs	r0, #2
}
 80030da:	b026      	add	sp, #152	@ 0x98
 80030dc:	bd10      	pop	{r4, pc}
  TST_get_config(&testParam);
 80030de:	a81a      	add	r0, sp, #104	@ 0x68
 80030e0:	f000 fc62 	bl	80039a8 <TST_get_config>
  if (modulation == TEST_FSK)
 80030e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	f200 80aa 	bhi.w	8003240 <AT_test_set_config+0x1b4>
 80030ec:	e8df f003 	tbb	[pc, r3]
 80030f0:	24211e02 	.word	0x24211e02
    testParam.modulation = TEST_FSK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	931a      	str	r3, [sp, #104]	@ 0x68
  if (freq < 1000)
 80030f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80030fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030fe:	d21e      	bcs.n	800313e <AT_test_set_config+0xb2>
    testParam.freq = freq * 1000000;
 8003100:	4a5d      	ldr	r2, [pc, #372]	@ (8003278 <AT_test_set_config+0x1ec>)
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	931b      	str	r3, [sp, #108]	@ 0x6c
  if ((power >= -9) && (power <= 22))
 8003108:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800310a:	f103 0209 	add.w	r2, r3, #9
 800310e:	2a1f      	cmp	r2, #31
 8003110:	f200 8098 	bhi.w	8003244 <AT_test_set_config+0x1b8>
    testParam.power = power;
 8003114:	931c      	str	r3, [sp, #112]	@ 0x70
  if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 8003116:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003118:	b99b      	cbnz	r3, 8003142 <AT_test_set_config+0xb6>
 800311a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800311c:	f5b2 5f96 	cmp.w	r2, #4800	@ 0x12c0
 8003120:	d30f      	bcc.n	8003142 <AT_test_set_config+0xb6>
 8003122:	4956      	ldr	r1, [pc, #344]	@ (800327c <AT_test_set_config+0x1f0>)
 8003124:	428a      	cmp	r2, r1
 8003126:	d80c      	bhi.n	8003142 <AT_test_set_config+0xb6>
    testParam.bandwidth = bandwidth;
 8003128:	921d      	str	r2, [sp, #116]	@ 0x74
 800312a:	e010      	b.n	800314e <AT_test_set_config+0xc2>
    testParam.modulation = TEST_LORA;
 800312c:	2301      	movs	r3, #1
 800312e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003130:	e7e2      	b.n	80030f8 <AT_test_set_config+0x6c>
    testParam.modulation = TEST_BPSK;
 8003132:	2302      	movs	r3, #2
 8003134:	931a      	str	r3, [sp, #104]	@ 0x68
 8003136:	e7df      	b.n	80030f8 <AT_test_set_config+0x6c>
    testParam.modulation = TEST_MSK;
 8003138:	2303      	movs	r3, #3
 800313a:	931a      	str	r3, [sp, #104]	@ 0x68
 800313c:	e7dc      	b.n	80030f8 <AT_test_set_config+0x6c>
    testParam.freq = freq;
 800313e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003140:	e7e2      	b.n	8003108 <AT_test_set_config+0x7c>
  else if ((testParam.modulation == TEST_MSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 8003142:	2b03      	cmp	r3, #3
 8003144:	d00d      	beq.n	8003162 <AT_test_set_config+0xd6>
  else if ((testParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 8003146:	2b01      	cmp	r3, #1
 8003148:	d014      	beq.n	8003174 <AT_test_set_config+0xe8>
  else if (testParam.modulation == TEST_BPSK)
 800314a:	2b02      	cmp	r3, #2
 800314c:	d17c      	bne.n	8003248 <AT_test_set_config+0x1bc>
  if ((testParam.modulation == TEST_FSK) && (loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 800314e:	b9b3      	cbnz	r3, 800317e <AT_test_set_config+0xf2>
 8003150:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003152:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 8003156:	d312      	bcc.n	800317e <AT_test_set_config+0xf2>
 8003158:	4949      	ldr	r1, [pc, #292]	@ (8003280 <AT_test_set_config+0x1f4>)
 800315a:	428a      	cmp	r2, r1
 800315c:	d80f      	bhi.n	800317e <AT_test_set_config+0xf2>
    testParam.loraSf_datarate = loraSf_datarate;
 800315e:	921e      	str	r2, [sp, #120]	@ 0x78
 8003160:	e018      	b.n	8003194 <AT_test_set_config+0x108>
  else if ((testParam.modulation == TEST_MSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 8003162:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8003164:	f5b2 5f96 	cmp.w	r2, #4800	@ 0x12c0
 8003168:	d3ed      	bcc.n	8003146 <AT_test_set_config+0xba>
 800316a:	4944      	ldr	r1, [pc, #272]	@ (800327c <AT_test_set_config+0x1f0>)
 800316c:	428a      	cmp	r2, r1
 800316e:	d8ea      	bhi.n	8003146 <AT_test_set_config+0xba>
    testParam.bandwidth = bandwidth;
 8003170:	921d      	str	r2, [sp, #116]	@ 0x74
 8003172:	e7ec      	b.n	800314e <AT_test_set_config+0xc2>
  else if ((testParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 8003174:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8003176:	2a06      	cmp	r2, #6
 8003178:	d8e7      	bhi.n	800314a <AT_test_set_config+0xbe>
    testParam.bandwidth = bandwidth;
 800317a:	921d      	str	r2, [sp, #116]	@ 0x74
 800317c:	e7e7      	b.n	800314e <AT_test_set_config+0xc2>
  else if ((testParam.modulation == TEST_MSK) && (loraSf_datarate >= 100) && (loraSf_datarate <= 300000))
 800317e:	2b03      	cmp	r3, #3
 8003180:	d010      	beq.n	80031a4 <AT_test_set_config+0x118>
  else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 8003182:	2b01      	cmp	r3, #1
 8003184:	d016      	beq.n	80031b4 <AT_test_set_config+0x128>
  else if ((testParam.modulation == TEST_BPSK) && (loraSf_datarate <= 1000))
 8003186:	2b02      	cmp	r3, #2
 8003188:	d160      	bne.n	800324c <AT_test_set_config+0x1c0>
 800318a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800318c:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8003190:	d85e      	bhi.n	8003250 <AT_test_set_config+0x1c4>
    testParam.loraSf_datarate = loraSf_datarate;
 8003192:	921e      	str	r2, [sp, #120]	@ 0x78
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_MSK) || (testParam.modulation == TEST_BPSK))
 8003194:	2b01      	cmp	r3, #1
 8003196:	d017      	beq.n	80031c8 <AT_test_set_config+0x13c>
 8003198:	d913      	bls.n	80031c2 <AT_test_set_config+0x136>
 800319a:	1e9a      	subs	r2, r3, #2
 800319c:	2a01      	cmp	r2, #1
 800319e:	d919      	bls.n	80031d4 <AT_test_set_config+0x148>
    return AT_PARAM_ERROR;
 80031a0:	2002      	movs	r0, #2
 80031a2:	e79a      	b.n	80030da <AT_test_set_config+0x4e>
  else if ((testParam.modulation == TEST_MSK) && (loraSf_datarate >= 100) && (loraSf_datarate <= 300000))
 80031a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80031a6:	2a63      	cmp	r2, #99	@ 0x63
 80031a8:	d9eb      	bls.n	8003182 <AT_test_set_config+0xf6>
 80031aa:	4935      	ldr	r1, [pc, #212]	@ (8003280 <AT_test_set_config+0x1f4>)
 80031ac:	428a      	cmp	r2, r1
 80031ae:	d8e8      	bhi.n	8003182 <AT_test_set_config+0xf6>
    testParam.loraSf_datarate = loraSf_datarate;
 80031b0:	921e      	str	r2, [sp, #120]	@ 0x78
 80031b2:	e7ef      	b.n	8003194 <AT_test_set_config+0x108>
  else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 80031b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80031b6:	2a04      	cmp	r2, #4
 80031b8:	d9e5      	bls.n	8003186 <AT_test_set_config+0xfa>
 80031ba:	2a0c      	cmp	r2, #12
 80031bc:	d8e3      	bhi.n	8003186 <AT_test_set_config+0xfa>
    testParam.loraSf_datarate = loraSf_datarate;
 80031be:	921e      	str	r2, [sp, #120]	@ 0x78
 80031c0:	e7e8      	b.n	8003194 <AT_test_set_config+0x108>
 80031c2:	b13b      	cbz	r3, 80031d4 <AT_test_set_config+0x148>
  if (modulation == TEST_FSK)
 80031c4:	2002      	movs	r0, #2
 80031c6:	e788      	b.n	80030da <AT_test_set_config+0x4e>
  else if ((testParam.modulation == TEST_LORA) && ((codingRate >= 5) && (codingRate <= 8)))
 80031c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80031ca:	1f51      	subs	r1, r2, #5
 80031cc:	2903      	cmp	r1, #3
 80031ce:	d841      	bhi.n	8003254 <AT_test_set_config+0x1c8>
    testParam.codingRate = codingRate - 4;
 80031d0:	3a04      	subs	r2, #4
 80031d2:	921f      	str	r2, [sp, #124]	@ 0x7c
  if (lna <= 1)
 80031d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80031d6:	2a01      	cmp	r2, #1
 80031d8:	d83e      	bhi.n	8003258 <AT_test_set_config+0x1cc>
    testParam.lna = lna;
 80031da:	9220      	str	r2, [sp, #128]	@ 0x80
  if (paBoost <= 1)
 80031dc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80031de:	2a01      	cmp	r2, #1
 80031e0:	d917      	bls.n	8003212 <AT_test_set_config+0x186>
  if ((payloadLen != 0) && (payloadLen < 256))
 80031e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80031e4:	1e51      	subs	r1, r2, #1
 80031e6:	29fe      	cmp	r1, #254	@ 0xfe
 80031e8:	d838      	bhi.n	800325c <AT_test_set_config+0x1d0>
    testParam.payloadLen = payloadLen;
 80031ea:	9222      	str	r2, [sp, #136]	@ 0x88
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK) || (testParam.modulation == TEST_MSK))
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	2a02      	cmp	r2, #2
 80031f0:	d907      	bls.n	8003202 <AT_test_set_config+0x176>
  else if ((testParam.modulation == TEST_FSK) && ((fskDeviation >= 600) && (fskDeviation <= 200000)))
 80031f2:	bbab      	cbnz	r3, 8003260 <AT_test_set_config+0x1d4>
 80031f4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80031f6:	f5a1 7416 	sub.w	r4, r1, #600	@ 0x258
 80031fa:	4822      	ldr	r0, [pc, #136]	@ (8003284 <AT_test_set_config+0x1f8>)
 80031fc:	4284      	cmp	r4, r0
 80031fe:	d831      	bhi.n	8003264 <AT_test_set_config+0x1d8>
    testParam.fskDev = fskDeviation;
 8003200:	9123      	str	r1, [sp, #140]	@ 0x8c
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK) || (testParam.modulation == TEST_MSK))
 8003202:	2b01      	cmp	r3, #1
 8003204:	d00a      	beq.n	800321c <AT_test_set_config+0x190>
 8003206:	d906      	bls.n	8003216 <AT_test_set_config+0x18a>
 8003208:	1e99      	subs	r1, r3, #2
 800320a:	2901      	cmp	r1, #1
 800320c:	d90a      	bls.n	8003224 <AT_test_set_config+0x198>
    return AT_PARAM_ERROR;
 800320e:	2002      	movs	r0, #2
 8003210:	e763      	b.n	80030da <AT_test_set_config+0x4e>
    testParam.paBoost = paBoost;
 8003212:	9221      	str	r2, [sp, #132]	@ 0x84
 8003214:	e7e5      	b.n	80031e2 <AT_test_set_config+0x156>
 8003216:	b12b      	cbz	r3, 8003224 <AT_test_set_config+0x198>
    return AT_PARAM_ERROR;
 8003218:	2002      	movs	r0, #2
 800321a:	e75e      	b.n	80030da <AT_test_set_config+0x4e>
  else if ((testParam.modulation == TEST_LORA) && (lowDrOpt <= 2))
 800321c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800321e:	2902      	cmp	r1, #2
 8003220:	d822      	bhi.n	8003268 <AT_test_set_config+0x1dc>
    testParam.lowDrOpt = lowDrOpt;
 8003222:	9124      	str	r1, [sp, #144]	@ 0x90
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 8003224:	2a01      	cmp	r2, #1
 8003226:	d906      	bls.n	8003236 <AT_test_set_config+0x1aa>
  else if (((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_MSK)) && (BTproduct <= 4))
 8003228:	b10b      	cbz	r3, 800322e <AT_test_set_config+0x1a2>
 800322a:	2b03      	cmp	r3, #3
 800322c:	d11e      	bne.n	800326c <AT_test_set_config+0x1e0>
 800322e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003230:	2b04      	cmp	r3, #4
 8003232:	d81d      	bhi.n	8003270 <AT_test_set_config+0x1e4>
    testParam.BTproduct = BTproduct;
 8003234:	9325      	str	r3, [sp, #148]	@ 0x94
  TST_set_config(&testParam);
 8003236:	a81a      	add	r0, sp, #104	@ 0x68
 8003238:	f000 fbac 	bl	8003994 <TST_set_config>
  return AT_OK;
 800323c:	2000      	movs	r0, #0
 800323e:	e74c      	b.n	80030da <AT_test_set_config+0x4e>
  if (modulation == TEST_FSK)
 8003240:	2002      	movs	r0, #2
 8003242:	e74a      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8003244:	2002      	movs	r0, #2
 8003246:	e748      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8003248:	2002      	movs	r0, #2
 800324a:	e746      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 800324c:	2002      	movs	r0, #2
 800324e:	e744      	b.n	80030da <AT_test_set_config+0x4e>
 8003250:	2002      	movs	r0, #2
 8003252:	e742      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8003254:	2002      	movs	r0, #2
 8003256:	e740      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8003258:	2002      	movs	r0, #2
 800325a:	e73e      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 800325c:	2002      	movs	r0, #2
 800325e:	e73c      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8003260:	2002      	movs	r0, #2
 8003262:	e73a      	b.n	80030da <AT_test_set_config+0x4e>
 8003264:	2002      	movs	r0, #2
 8003266:	e738      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8003268:	2002      	movs	r0, #2
 800326a:	e736      	b.n	80030da <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 800326c:	2002      	movs	r0, #2
 800326e:	e734      	b.n	80030da <AT_test_set_config+0x4e>
 8003270:	2002      	movs	r0, #2
 8003272:	e732      	b.n	80030da <AT_test_set_config+0x4e>
 8003274:	08015030 	.word	0x08015030
 8003278:	000f4240 	.word	0x000f4240
 800327c:	00072038 	.word	0x00072038
 8003280:	000493e0 	.word	0x000493e0
 8003284:	00030ae8 	.word	0x00030ae8

08003288 <AT_test_tx>:
{
 8003288:	b500      	push	{lr}
 800328a:	b083      	sub	sp, #12
  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 800328c:	aa01      	add	r2, sp, #4
 800328e:	490a      	ldr	r1, [pc, #40]	@ (80032b8 <AT_test_tx+0x30>)
 8003290:	f011 f872 	bl	8014378 <tiny_sscanf>
 8003294:	2801      	cmp	r0, #1
 8003296:	d105      	bne.n	80032a4 <AT_test_tx+0x1c>
  if (0U == TST_TX_Start(nb_packet))
 8003298:	9801      	ldr	r0, [sp, #4]
 800329a:	f000 fb9d 	bl	80039d8 <TST_TX_Start>
 800329e:	b140      	cbz	r0, 80032b2 <AT_test_tx+0x2a>
    return AT_ERROR;
 80032a0:	2001      	movs	r0, #1
 80032a2:	e006      	b.n	80032b2 <AT_test_tx+0x2a>
    AT_PRINTF("AT+TTX: nb packets sent is missing\r\n");
 80032a4:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <AT_test_tx+0x34>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	4611      	mov	r1, r2
 80032aa:	4610      	mov	r0, r2
 80032ac:	f010 f948 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 80032b0:	2002      	movs	r0, #2
}
 80032b2:	b003      	add	sp, #12
 80032b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b8:	08014c10 	.word	0x08014c10
 80032bc:	08015058 	.word	0x08015058

080032c0 <AT_test_rx>:
{
 80032c0:	b500      	push	{lr}
 80032c2:	b083      	sub	sp, #12
  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 80032c4:	aa01      	add	r2, sp, #4
 80032c6:	490a      	ldr	r1, [pc, #40]	@ (80032f0 <AT_test_rx+0x30>)
 80032c8:	f011 f856 	bl	8014378 <tiny_sscanf>
 80032cc:	2801      	cmp	r0, #1
 80032ce:	d105      	bne.n	80032dc <AT_test_rx+0x1c>
  if (0U == TST_RX_Start(nb_packet))
 80032d0:	9801      	ldr	r0, [sp, #4]
 80032d2:	f000 fcd1 	bl	8003c78 <TST_RX_Start>
 80032d6:	b140      	cbz	r0, 80032ea <AT_test_rx+0x2a>
    return AT_ERROR;
 80032d8:	2001      	movs	r0, #1
 80032da:	e006      	b.n	80032ea <AT_test_rx+0x2a>
    AT_PRINTF("AT+TRX: nb expected packets is missing\r\n");
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <AT_test_rx+0x34>)
 80032de:	2200      	movs	r2, #0
 80032e0:	4611      	mov	r1, r2
 80032e2:	4610      	mov	r0, r2
 80032e4:	f010 f92c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 80032e8:	2002      	movs	r0, #2
}
 80032ea:	b003      	add	sp, #12
 80032ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80032f0:	08014c10 	.word	0x08014c10
 80032f4:	08015080 	.word	0x08015080

080032f8 <AT_test_tx_hopping>:
{
 80032f8:	b530      	push	{r4, r5, lr}
 80032fa:	b095      	sub	sp, #84	@ 0x54
  if (4 != tiny_sscanf(buf, "%u,%u,%u,%u", &freq_start, &freq_stop, &delta_f, &nb_tx))
 80032fc:	ab10      	add	r3, sp, #64	@ 0x40
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	ab11      	add	r3, sp, #68	@ 0x44
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	ab12      	add	r3, sp, #72	@ 0x48
 8003306:	aa13      	add	r2, sp, #76	@ 0x4c
 8003308:	491f      	ldr	r1, [pc, #124]	@ (8003388 <AT_test_tx_hopping+0x90>)
 800330a:	f011 f835 	bl	8014378 <tiny_sscanf>
 800330e:	2804      	cmp	r0, #4
 8003310:	d134      	bne.n	800337c <AT_test_tx_hopping+0x84>
  if (freq_start < 1000)
 8003312:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003318:	d203      	bcs.n	8003322 <AT_test_tx_hopping+0x2a>
    freq_start *= 1000000;
 800331a:	4a1c      	ldr	r2, [pc, #112]	@ (800338c <AT_test_tx_hopping+0x94>)
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (freq_stop < 1000)
 8003322:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003324:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003328:	d203      	bcs.n	8003332 <AT_test_tx_hopping+0x3a>
    freq_stop *= 1000000;
 800332a:	4a18      	ldr	r2, [pc, #96]	@ (800338c <AT_test_tx_hopping+0x94>)
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	9312      	str	r3, [sp, #72]	@ 0x48
  hop_freq = freq_start;
 8003332:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
  for (int32_t i = 0; i < nb_tx; i++)
 8003334:	2500      	movs	r5, #0
 8003336:	e000      	b.n	800333a <AT_test_tx_hopping+0x42>
 8003338:	3501      	adds	r5, #1
 800333a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800333c:	429d      	cmp	r5, r3
 800333e:	d21b      	bcs.n	8003378 <AT_test_tx_hopping+0x80>
    TST_get_config(&test_param);
 8003340:	a804      	add	r0, sp, #16
 8003342:	f000 fb31 	bl	80039a8 <TST_get_config>
    test_param.freq = hop_freq;
 8003346:	9405      	str	r4, [sp, #20]
    TST_set_config(&test_param);
 8003348:	a804      	add	r0, sp, #16
 800334a:	f000 fb23 	bl	8003994 <TST_set_config>
    APP_TPRINTF("Tx Hop at %dHz. %d of %d\r\n", hop_freq, i, nb_tx);
 800334e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	9501      	str	r5, [sp, #4]
 8003354:	9400      	str	r4, [sp, #0]
 8003356:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <AT_test_tx_hopping+0x98>)
 8003358:	2201      	movs	r2, #1
 800335a:	2100      	movs	r1, #0
 800335c:	4608      	mov	r0, r1
 800335e:	f010 f8ef 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    if (0U != TST_TX_Start(1))
 8003362:	2001      	movs	r0, #1
 8003364:	f000 fb38 	bl	80039d8 <TST_TX_Start>
 8003368:	b958      	cbnz	r0, 8003382 <AT_test_tx_hopping+0x8a>
    hop_freq += delta_f;
 800336a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800336c:	441c      	add	r4, r3
    if (hop_freq > freq_stop)
 800336e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003370:	42a3      	cmp	r3, r4
 8003372:	d2e1      	bcs.n	8003338 <AT_test_tx_hopping+0x40>
      hop_freq = freq_start;
 8003374:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8003376:	e7df      	b.n	8003338 <AT_test_tx_hopping+0x40>
  return AT_OK;
 8003378:	2000      	movs	r0, #0
 800337a:	e000      	b.n	800337e <AT_test_tx_hopping+0x86>
    return AT_PARAM_ERROR;
 800337c:	2002      	movs	r0, #2
}
 800337e:	b015      	add	sp, #84	@ 0x54
 8003380:	bd30      	pop	{r4, r5, pc}
      return AT_BUSY_ERROR;
 8003382:	2003      	movs	r0, #3
 8003384:	e7fb      	b.n	800337e <AT_test_tx_hopping+0x86>
 8003386:	bf00      	nop
 8003388:	080150ac 	.word	0x080150ac
 800338c:	000f4240 	.word	0x000f4240
 8003390:	080150b8 	.word	0x080150b8

08003394 <AT_test_stop>:
{
 8003394:	b508      	push	{r3, lr}
  TST_stop();
 8003396:	f000 fb11 	bl	80039bc <TST_stop>
  AT_PRINTF("Test Stop\r\n");
 800339a:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <AT_test_stop+0x18>)
 800339c:	2200      	movs	r2, #0
 800339e:	4611      	mov	r1, r2
 80033a0:	4610      	mov	r0, r2
 80033a2:	f010 f8cd 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	bd08      	pop	{r3, pc}
 80033aa:	bf00      	nop
 80033ac:	080150d4 	.word	0x080150d4

080033b0 <AT_Certif>:
{
 80033b0:	b530      	push	{r4, r5, lr}
 80033b2:	b083      	sub	sp, #12
  switch (param[0])
 80033b4:	7803      	ldrb	r3, [r0, #0]
 80033b6:	2b30      	cmp	r3, #48	@ 0x30
 80033b8:	d003      	beq.n	80033c2 <AT_Certif+0x12>
 80033ba:	2b31      	cmp	r3, #49	@ 0x31
 80033bc:	d005      	beq.n	80033ca <AT_Certif+0x1a>
 80033be:	2002      	movs	r0, #2
 80033c0:	e01a      	b.n	80033f8 <AT_Certif+0x48>
      LmHandlerJoin(ACTIVATION_TYPE_ABP, true);
 80033c2:	2101      	movs	r1, #1
 80033c4:	4608      	mov	r0, r1
 80033c6:	f005 f957 	bl	8008678 <LmHandlerJoin>
      LmHandlerJoin(ACTIVATION_TYPE_OTAA, true);
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f005 f953 	bl	8008678 <LmHandlerJoin>
  UTIL_TIMER_Create(&TxCertifTimer, 8000, UTIL_TIMER_ONESHOT, OnCertifTimer, NULL);  /* 8s */
 80033d2:	4d0a      	ldr	r5, [pc, #40]	@ (80033fc <AT_Certif+0x4c>)
 80033d4:	2400      	movs	r4, #0
 80033d6:	9400      	str	r4, [sp, #0]
 80033d8:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <AT_Certif+0x50>)
 80033da:	4622      	mov	r2, r4
 80033dc:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80033e0:	4628      	mov	r0, r5
 80033e2:	f010 fcd3 	bl	8013d8c <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&TxCertifTimer);
 80033e6:	4628      	mov	r0, r5
 80033e8:	f010 fd88 	bl	8013efc <UTIL_TIMER_Start>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaCertifTx), UTIL_SEQ_RFU, CertifSend);
 80033ec:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <AT_Certif+0x54>)
 80033ee:	4621      	mov	r1, r4
 80033f0:	2008      	movs	r0, #8
 80033f2:	f010 fad7 	bl	80139a4 <UTIL_SEQ_RegTask>
  return AT_OK;
 80033f6:	4620      	mov	r0, r4
}
 80033f8:	b003      	add	sp, #12
 80033fa:	bd30      	pop	{r4, r5, pc}
 80033fc:	2000034c 	.word	0x2000034c
 8003400:	080020fd 	.word	0x080020fd
 8003404:	080020c5 	.word	0x080020c5

08003408 <AT_bat_get>:
{
 8003408:	b508      	push	{r3, lr}
  print_d(SYS_GetBatteryLevel());
 800340a:	f7fd fc5d 	bl	8000cc8 <SYS_GetBatteryLevel>
 800340e:	f7fe fe0b 	bl	8002028 <print_d>
}
 8003412:	2000      	movs	r0, #0
 8003414:	bd08      	pop	{r3, pc}

08003416 <CMD_ProcessBackSpace>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t CMD_ProcessBackSpace(char *cmd)
{
 8003416:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CMD_ProcessBackSpace_1 */

  /* USER CODE END CMD_ProcessBackSpace_1 */
  uint32_t i = 0;
  uint32_t bs_cnt = 0;
  uint32_t cmd_len = 0;
 8003418:	2100      	movs	r1, #0
  uint32_t bs_cnt = 0;
 800341a:	460c      	mov	r4, r1
  /*get command length and number of backspace*/
  while (cmd[cmd_len] != '\0')
 800341c:	e000      	b.n	8003420 <CMD_ProcessBackSpace+0xa>
  {
    if (cmd[cmd_len] == '\b')
    {
      bs_cnt++;
    }
    cmd_len++;
 800341e:	3101      	adds	r1, #1
  while (cmd[cmd_len] != '\0')
 8003420:	5c43      	ldrb	r3, [r0, r1]
 8003422:	b11b      	cbz	r3, 800342c <CMD_ProcessBackSpace+0x16>
    if (cmd[cmd_len] == '\b')
 8003424:	2b08      	cmp	r3, #8
 8003426:	d1fa      	bne.n	800341e <CMD_ProcessBackSpace+0x8>
      bs_cnt++;
 8003428:	3401      	adds	r4, #1
 800342a:	e7f8      	b.n	800341e <CMD_ProcessBackSpace+0x8>
  }
  /*for every backspace, remove backspace and its preceding character*/
  for (i = 0; i < bs_cnt; i++)
 800342c:	f04f 0c00 	mov.w	ip, #0
 8003430:	e017      	b.n	8003462 <CMD_ProcessBackSpace+0x4c>
    int32_t j = 0;

    /*set cursor to backspace*/
    while (cmd[curs] != '\b')
    {
      curs++;
 8003432:	3301      	adds	r3, #1
    while (cmd[curs] != '\b')
 8003434:	5cc2      	ldrb	r2, [r0, r3]
 8003436:	2a08      	cmp	r2, #8
 8003438:	d1fb      	bne.n	8003432 <CMD_ProcessBackSpace+0x1c>
    }
    if (curs > 0)
 800343a:	2b00      	cmp	r3, #0
 800343c:	dd17      	ble.n	800346e <CMD_ProcessBackSpace+0x58>
    {
      for (j = curs - 1; j < cmd_len - 2; j++)
 800343e:	3b01      	subs	r3, #1
 8003440:	e003      	b.n	800344a <CMD_ProcessBackSpace+0x34>
      {
        cmd[j] = cmd[j + 2];
 8003442:	18c2      	adds	r2, r0, r3
 8003444:	7892      	ldrb	r2, [r2, #2]
 8003446:	54c2      	strb	r2, [r0, r3]
      for (j = curs - 1; j < cmd_len - 2; j++)
 8003448:	3301      	adds	r3, #1
 800344a:	1e8a      	subs	r2, r1, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d8f8      	bhi.n	8003442 <CMD_ProcessBackSpace+0x2c>
      }
      cmd[j++] = '\0';
 8003450:	f103 0e01 	add.w	lr, r3, #1
 8003454:	2100      	movs	r1, #0
 8003456:	54c1      	strb	r1, [r0, r3]
      cmd[j++] = '\0';
 8003458:	f800 100e 	strb.w	r1, [r0, lr]
  for (i = 0; i < bs_cnt; i++)
 800345c:	f10c 0c01 	add.w	ip, ip, #1
      cmd_len -= 2;
 8003460:	4611      	mov	r1, r2
  for (i = 0; i < bs_cnt; i++)
 8003462:	45a4      	cmp	ip, r4
 8003464:	d201      	bcs.n	800346a <CMD_ProcessBackSpace+0x54>
    int32_t curs = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	e7e4      	b.n	8003434 <CMD_ProcessBackSpace+0x1e>
    else
    {
      return -1;
    }
  }
  return 0;
 800346a:	2000      	movs	r0, #0
  /* USER CODE BEGIN CMD_ProcessBackSpace_2 */

  /* USER CODE END CMD_ProcessBackSpace_2 */
}
 800346c:	bd10      	pop	{r4, pc}
      return -1;
 800346e:	f04f 30ff 	mov.w	r0, #4294967295
 8003472:	e7fb      	b.n	800346c <CMD_ProcessBackSpace+0x56>

08003474 <CMD_GetChar>:

static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error)
{
 8003474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CMD_GetChar_1 */

  /* USER CODE END CMD_GetChar_1 */
  charCount++;
 8003476:	4a0f      	ldr	r2, [pc, #60]	@ (80034b4 <CMD_GetChar+0x40>)
 8003478:	6811      	ldr	r1, [r2, #0]
 800347a:	1c4b      	adds	r3, r1, #1
 800347c:	6013      	str	r3, [r2, #0]
  if (charCount == (CIRC_BUFF_SIZE + 1))
 800347e:	2b09      	cmp	r3, #9
 8003480:	d00d      	beq.n	800349e <CMD_GetChar+0x2a>
    circBuffOverflow = 1;
    charCount--;
  }
  else
  {
    circBuffer[widx++] = *rxChar;
 8003482:	490d      	ldr	r1, [pc, #52]	@ (80034b8 <CMD_GetChar+0x44>)
 8003484:	680a      	ldr	r2, [r1, #0]
 8003486:	1c53      	adds	r3, r2, #1
 8003488:	600b      	str	r3, [r1, #0]
 800348a:	7800      	ldrb	r0, [r0, #0]
 800348c:	490b      	ldr	r1, [pc, #44]	@ (80034bc <CMD_GetChar+0x48>)
 800348e:	5488      	strb	r0, [r1, r2]
    if (widx == CIRC_BUFF_SIZE)
 8003490:	2b08      	cmp	r3, #8
 8003492:	d00a      	beq.n	80034aa <CMD_GetChar+0x36>
    {
      widx = 0;
    }
  }

  if (NotifyCb != NULL)
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <CMD_GetChar+0x4c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b103      	cbz	r3, 800349c <CMD_GetChar+0x28>
  {
    NotifyCb();
 800349a:	4798      	blx	r3
  }
  /* USER CODE BEGIN CMD_GetChar_2 */

  /* USER CODE END CMD_GetChar_2 */
}
 800349c:	bd08      	pop	{r3, pc}
    circBuffOverflow = 1;
 800349e:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <CMD_GetChar+0x50>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
    charCount--;
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <CMD_GetChar+0x40>)
 80034a6:	6019      	str	r1, [r3, #0]
 80034a8:	e7f4      	b.n	8003494 <CMD_GetChar+0x20>
      widx = 0;
 80034aa:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <CMD_GetChar+0x44>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e7f0      	b.n	8003494 <CMD_GetChar+0x20>
 80034b2:	bf00      	nop
 80034b4:	20000460 	.word	0x20000460
 80034b8:	20000468 	.word	0x20000468
 80034bc:	2000068c 	.word	0x2000068c
 80034c0:	20000458 	.word	0x20000458
 80034c4:	2000045c 	.word	0x2000045c

080034c8 <com_error>:

  /* USER CODE END parse_cmd_2 */
}

static void com_error(ATEerror_t error_type)
{
 80034c8:	b510      	push	{r4, lr}
 80034ca:	4604      	mov	r4, r0
  /* USER CODE BEGIN com_error_1 */

  /* USER CODE END com_error_1 */
  if (error_type > AT_MAX)
 80034cc:	280a      	cmp	r0, #10
 80034ce:	d900      	bls.n	80034d2 <com_error+0xa>
  {
    error_type = AT_MAX;
 80034d0:	240a      	movs	r4, #10
  }
  AT_PPRINTF(ATError_description[error_type]);
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <com_error+0x20>)
 80034d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80034d8:	2200      	movs	r2, #0
 80034da:	4611      	mov	r1, r2
 80034dc:	4610      	mov	r0, r2
 80034de:	f010 f82f 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d1f5      	bne.n	80034d2 <com_error+0xa>
  /* USER CODE BEGIN com_error_2 */

  /* USER CODE END com_error_2 */
}
 80034e6:	bd10      	pop	{r4, pc}
 80034e8:	080169d8 	.word	0x080169d8

080034ec <parse_cmd>:
{
 80034ec:	b570      	push	{r4, r5, r6, lr}
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 80034ee:	7802      	ldrb	r2, [r0, #0]
 80034f0:	2a41      	cmp	r2, #65	@ 0x41
 80034f2:	d003      	beq.n	80034fc <parse_cmd+0x10>
    status = AT_ERROR;
 80034f4:	2001      	movs	r0, #1
  com_error(status);
 80034f6:	f7ff ffe7 	bl	80034c8 <com_error>
}
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	4603      	mov	r3, r0
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 80034fe:	7842      	ldrb	r2, [r0, #1]
 8003500:	2a54      	cmp	r2, #84	@ 0x54
 8003502:	d001      	beq.n	8003508 <parse_cmd+0x1c>
    status = AT_ERROR;
 8003504:	2001      	movs	r0, #1
 8003506:	e7f6      	b.n	80034f6 <parse_cmd+0xa>
  else if (cmd[2] == '\0')
 8003508:	7880      	ldrb	r0, [r0, #2]
 800350a:	2800      	cmp	r0, #0
 800350c:	d0f3      	beq.n	80034f6 <parse_cmd+0xa>
  else if (cmd[2] == '?')
 800350e:	283f      	cmp	r0, #63	@ 0x3f
 8003510:	d012      	beq.n	8003538 <parse_cmd+0x4c>
    cmd += 2;
 8003512:	1c9c      	adds	r4, r3, #2
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 8003514:	2500      	movs	r5, #0
 8003516:	2d26      	cmp	r5, #38	@ 0x26
 8003518:	d864      	bhi.n	80035e4 <parse_cmd+0xf8>
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 800351a:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <parse_cmd+0x100>)
 800351c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8003520:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8003524:	6856      	ldr	r6, [r2, #4]
 8003526:	4632      	mov	r2, r6
 8003528:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
 800352c:	4620      	mov	r0, r4
 800352e:	f011 f89b 	bl	8014668 <strncmp>
 8003532:	b308      	cbz	r0, 8003578 <parse_cmd+0x8c>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 8003534:	3501      	adds	r5, #1
 8003536:	e7ee      	b.n	8003516 <parse_cmd+0x2a>
    AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 8003538:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <parse_cmd+0x104>)
 800353a:	2200      	movs	r2, #0
 800353c:	4611      	mov	r1, r2
 800353e:	4610      	mov	r0, r2
 8003540:	f00f fffe 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003544:	2800      	cmp	r0, #0
 8003546:	d1f7      	bne.n	8003538 <parse_cmd+0x4c>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 8003548:	2400      	movs	r4, #0
 800354a:	e00d      	b.n	8003568 <parse_cmd+0x7c>
      AT_PPRINTF(ATCommand[i].help_string);
 800354c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003550:	4b26      	ldr	r3, [pc, #152]	@ (80035ec <parse_cmd+0x100>)
 8003552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	4611      	mov	r1, r2
 800355c:	4610      	mov	r0, r2
 800355e:	f00f ffef 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003562:	2800      	cmp	r0, #0
 8003564:	d1f2      	bne.n	800354c <parse_cmd+0x60>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 8003566:	3401      	adds	r4, #1
 8003568:	2c26      	cmp	r4, #38	@ 0x26
 800356a:	d9ef      	bls.n	800354c <parse_cmd+0x60>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800356c:	f00f ff74 	bl	8013458 <UTIL_ADV_TRACE_IsBufferEmpty>
 8003570:	2801      	cmp	r0, #1
 8003572:	d1fb      	bne.n	800356c <parse_cmd+0x80>
  ATEerror_t status = AT_OK;
 8003574:	2000      	movs	r0, #0
 8003576:	e7be      	b.n	80034f6 <parse_cmd+0xa>
        cmd += Current_ATCommand->size_string;
 8003578:	19a0      	adds	r0, r4, r6
        switch (cmd[0])
 800357a:	5da3      	ldrb	r3, [r4, r6]
 800357c:	2b3d      	cmp	r3, #61	@ 0x3d
 800357e:	d00b      	beq.n	8003598 <parse_cmd+0xac>
 8003580:	2b3f      	cmp	r3, #63	@ 0x3f
 8003582:	d021      	beq.n	80035c8 <parse_cmd+0xdc>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d12f      	bne.n	80035e8 <parse_cmd+0xfc>
            status = Current_ATCommand->run(cmd);
 8003588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800358c:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <parse_cmd+0x100>)
 800358e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	4798      	blx	r3
            break;
 8003596:	e7ae      	b.n	80034f6 <parse_cmd+0xa>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 8003598:	7843      	ldrb	r3, [r0, #1]
 800359a:	2b3f      	cmp	r3, #63	@ 0x3f
 800359c:	d008      	beq.n	80035b0 <parse_cmd+0xc4>
              status = Current_ATCommand->set(cmd + 1);
 800359e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035a2:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <parse_cmd+0x100>)
 80035a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	3001      	adds	r0, #1
 80035ac:	4798      	blx	r3
 80035ae:	e7a2      	b.n	80034f6 <parse_cmd+0xa>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 80035b0:	7883      	ldrb	r3, [r0, #2]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f3      	bne.n	800359e <parse_cmd+0xb2>
              status = Current_ATCommand->get(cmd + 1);
 80035b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <parse_cmd+0x100>)
 80035bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	3001      	adds	r0, #1
 80035c4:	4798      	blx	r3
 80035c6:	e796      	b.n	80034f6 <parse_cmd+0xa>
            AT_PPRINTF(Current_ATCommand->help_string);
 80035c8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80035cc:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <parse_cmd+0x100>)
 80035ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	4611      	mov	r1, r2
 80035d8:	4610      	mov	r0, r2
 80035da:	f00f ffb1 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 80035de:	2800      	cmp	r0, #0
 80035e0:	d1f2      	bne.n	80035c8 <parse_cmd+0xdc>
 80035e2:	e788      	b.n	80034f6 <parse_cmd+0xa>
    status = AT_ERROR;
 80035e4:	2001      	movs	r0, #1
 80035e6:	e786      	b.n	80034f6 <parse_cmd+0xa>
        switch (cmd[0])
 80035e8:	2001      	movs	r0, #1
 80035ea:	e784      	b.n	80034f6 <parse_cmd+0xa>
 80035ec:	08016630 	.word	0x08016630
 80035f0:	08015150 	.word	0x08015150

080035f4 <CMD_Init>:
{
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
  UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 80035f8:	4808      	ldr	r0, [pc, #32]	@ (800361c <CMD_Init+0x28>)
 80035fa:	f00f ff39 	bl	8013470 <UTIL_ADV_TRACE_StartRxProcess>
  if (CmdProcessNotify != NULL)
 80035fe:	b10c      	cbz	r4, 8003604 <CMD_Init+0x10>
    NotifyCb = CmdProcessNotify;
 8003600:	4b07      	ldr	r3, [pc, #28]	@ (8003620 <CMD_Init+0x2c>)
 8003602:	601c      	str	r4, [r3, #0]
  widx = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	4a07      	ldr	r2, [pc, #28]	@ (8003624 <CMD_Init+0x30>)
 8003608:	6013      	str	r3, [r2, #0]
  ridx = 0;
 800360a:	4a07      	ldr	r2, [pc, #28]	@ (8003628 <CMD_Init+0x34>)
 800360c:	6013      	str	r3, [r2, #0]
  charCount = 0;
 800360e:	4a07      	ldr	r2, [pc, #28]	@ (800362c <CMD_Init+0x38>)
 8003610:	6013      	str	r3, [r2, #0]
  i = 0;
 8003612:	4a07      	ldr	r2, [pc, #28]	@ (8003630 <CMD_Init+0x3c>)
 8003614:	6013      	str	r3, [r2, #0]
  circBuffOverflow = 0;
 8003616:	4a07      	ldr	r2, [pc, #28]	@ (8003634 <CMD_Init+0x40>)
 8003618:	6013      	str	r3, [r2, #0]
}
 800361a:	bd10      	pop	{r4, pc}
 800361c:	08003475 	.word	0x08003475
 8003620:	20000458 	.word	0x20000458
 8003624:	20000468 	.word	0x20000468
 8003628:	20000464 	.word	0x20000464
 800362c:	20000460 	.word	0x20000460
 8003630:	2000046c 	.word	0x2000046c
 8003634:	2000045c 	.word	0x2000045c

08003638 <CMD_Process>:
{
 8003638:	b570      	push	{r4, r5, r6, lr}
  if (circBuffOverflow == 1)
 800363a:	4b45      	ldr	r3, [pc, #276]	@ (8003750 <CMD_Process+0x118>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d127      	bne.n	8003692 <CMD_Process+0x5a>
    com_error(AT_TEST_PARAM_OVERFLOW);
 8003642:	2004      	movs	r0, #4
 8003644:	f7ff ff40 	bl	80034c8 <com_error>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003648:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800364c:	b672      	cpsid	i
    ridx = widx;
 800364e:	4b41      	ldr	r3, [pc, #260]	@ (8003754 <CMD_Process+0x11c>)
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <CMD_Process+0x120>)
 8003654:	6019      	str	r1, [r3, #0]
    charCount = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	4940      	ldr	r1, [pc, #256]	@ (800375c <CMD_Process+0x124>)
 800365a:	600b      	str	r3, [r1, #0]
    circBuffOverflow = 0;
 800365c:	493c      	ldr	r1, [pc, #240]	@ (8003750 <CMD_Process+0x118>)
 800365e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003660:	f382 8810 	msr	PRIMASK, r2
    i = 0;
 8003664:	4a3e      	ldr	r2, [pc, #248]	@ (8003760 <CMD_Process+0x128>)
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	e013      	b.n	8003692 <CMD_Process+0x5a>
      ridx++;
 800366a:	3301      	adds	r3, #1
 800366c:	4a3a      	ldr	r2, [pc, #232]	@ (8003758 <CMD_Process+0x120>)
 800366e:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 8003670:	2b08      	cmp	r3, #8
 8003672:	d036      	beq.n	80036e2 <CMD_Process+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003678:	b672      	cpsid	i
      charCount--;
 800367a:	4a38      	ldr	r2, [pc, #224]	@ (800375c <CMD_Process+0x124>)
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	3b01      	subs	r3, #1
 8003680:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	f381 8810 	msr	PRIMASK, r1
      com_error(AT_RX_ERROR);
 8003686:	2006      	movs	r0, #6
 8003688:	f7ff ff1e 	bl	80034c8 <com_error>
      i = 0;
 800368c:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <CMD_Process+0x128>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
  while (charCount != 0)
 8003692:	4b32      	ldr	r3, [pc, #200]	@ (800375c <CMD_Process+0x124>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d059      	beq.n	800374e <CMD_Process+0x116>
    if (circBuffer[ridx] == AT_ERROR_RX_CHAR)
 800369a:	4b2f      	ldr	r3, [pc, #188]	@ (8003758 <CMD_Process+0x120>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a31      	ldr	r2, [pc, #196]	@ (8003764 <CMD_Process+0x12c>)
 80036a0:	5cd2      	ldrb	r2, [r2, r3]
 80036a2:	2a01      	cmp	r2, #1
 80036a4:	d0e1      	beq.n	800366a <CMD_Process+0x32>
    else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n'))
 80036a6:	2a0d      	cmp	r2, #13
 80036a8:	d01f      	beq.n	80036ea <CMD_Process+0xb2>
 80036aa:	2a0a      	cmp	r2, #10
 80036ac:	d01d      	beq.n	80036ea <CMD_Process+0xb2>
    else if (i == (CMD_SIZE - 1))
 80036ae:	492c      	ldr	r1, [pc, #176]	@ (8003760 <CMD_Process+0x128>)
 80036b0:	6809      	ldr	r1, [r1, #0]
 80036b2:	f240 201b 	movw	r0, #539	@ 0x21b
 80036b6:	4281      	cmp	r1, r0
 80036b8:	d03e      	beq.n	8003738 <CMD_Process+0x100>
      command[i++] = circBuffer[ridx++];
 80036ba:	3301      	adds	r3, #1
 80036bc:	4826      	ldr	r0, [pc, #152]	@ (8003758 <CMD_Process+0x120>)
 80036be:	6003      	str	r3, [r0, #0]
 80036c0:	1c4c      	adds	r4, r1, #1
 80036c2:	4827      	ldr	r0, [pc, #156]	@ (8003760 <CMD_Process+0x128>)
 80036c4:	6004      	str	r4, [r0, #0]
 80036c6:	4828      	ldr	r0, [pc, #160]	@ (8003768 <CMD_Process+0x130>)
 80036c8:	5442      	strb	r2, [r0, r1]
      if (ridx == CIRC_BUFF_SIZE)
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d03b      	beq.n	8003746 <CMD_Process+0x10e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80036d2:	b672      	cpsid	i
      charCount--;
 80036d4:	4a21      	ldr	r2, [pc, #132]	@ (800375c <CMD_Process+0x124>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	f381 8810 	msr	PRIMASK, r1
}
 80036e0:	e7d7      	b.n	8003692 <CMD_Process+0x5a>
        ridx = 0;
 80036e2:	4613      	mov	r3, r2
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e7c4      	b.n	8003674 <CMD_Process+0x3c>
      ridx++;
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003758 <CMD_Process+0x120>)
 80036ee:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d01d      	beq.n	8003730 <CMD_Process+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80036f8:	b672      	cpsid	i
      charCount--;
 80036fa:	4a18      	ldr	r2, [pc, #96]	@ (800375c <CMD_Process+0x124>)
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	3b01      	subs	r3, #1
 8003700:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	f381 8810 	msr	PRIMASK, r1
      if (i != 0)
 8003706:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <CMD_Process+0x128>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0c1      	beq.n	8003692 <CMD_Process+0x5a>
        command[i] = '\0';
 800370e:	4c16      	ldr	r4, [pc, #88]	@ (8003768 <CMD_Process+0x130>)
 8003710:	2500      	movs	r5, #0
 8003712:	54e5      	strb	r5, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003714:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003718:	b672      	cpsid	i
        CMD_ProcessBackSpace(command);
 800371a:	4620      	mov	r0, r4
 800371c:	f7ff fe7b 	bl	8003416 <CMD_ProcessBackSpace>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003720:	f386 8810 	msr	PRIMASK, r6
        parse_cmd(command);
 8003724:	4620      	mov	r0, r4
 8003726:	f7ff fee1 	bl	80034ec <parse_cmd>
        i = 0;
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <CMD_Process+0x128>)
 800372c:	601d      	str	r5, [r3, #0]
 800372e:	e7b0      	b.n	8003692 <CMD_Process+0x5a>
        ridx = 0;
 8003730:	4613      	mov	r3, r2
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e7dd      	b.n	80036f4 <CMD_Process+0xbc>
      i = 0;
 8003738:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <CMD_Process+0x128>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
      com_error(AT_TEST_PARAM_OVERFLOW);
 800373e:	2004      	movs	r0, #4
 8003740:	f7ff fec2 	bl	80034c8 <com_error>
 8003744:	e7a5      	b.n	8003692 <CMD_Process+0x5a>
        ridx = 0;
 8003746:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <CMD_Process+0x120>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e7bf      	b.n	80036ce <CMD_Process+0x96>
}
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	2000045c 	.word	0x2000045c
 8003754:	20000468 	.word	0x20000468
 8003758:	20000464 	.word	0x20000464
 800375c:	20000460 	.word	0x20000460
 8003760:	2000046c 	.word	0x2000046c
 8003764:	2000068c 	.word	0x2000068c
 8003768:	20000470 	.word	0x20000470

0800376c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <LoraInfo_Init+0x1c>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8003772:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003774:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8003776:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8003778:	2220      	movs	r2, #32
 800377a:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800377c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8003780:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003786:	4770      	bx	lr
 8003788:	20000694 	.word	0x20000694

0800378c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 800378c:	4800      	ldr	r0, [pc, #0]	@ (8003790 <LoraInfo_GetPtr+0x4>)
 800378e:	4770      	bx	lr
 8003790:	20000694 	.word	0x20000694

08003794 <Prbs9_generator>:

  /* USER CODE END OnRxError_2 */
}

static int32_t Prbs9_generator(uint8_t *payload, uint8_t len)
{
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	4604      	mov	r4, r0
 8003798:	460d      	mov	r5, r1
  /* USER CODE BEGIN Prbs9_generator_1 */

  /* USER CODE END Prbs9_generator_1 */
  uint16_t prbs9_val = PRBS9_INIT;
  /*init payload to 0*/
  UTIL_MEM_set_8(payload, 0, len);
 800379a:	460a      	mov	r2, r1
 800379c:	2100      	movs	r1, #0
 800379e:	f00f fff0 	bl	8013782 <UTIL_MEM_set_8>

  for (int32_t i = 0; i < len * 8; i++)
 80037a2:	2200      	movs	r2, #0
  uint16_t prbs9_val = PRBS9_INIT;
 80037a4:	2002      	movs	r0, #2
  for (int32_t i = 0; i < len * 8; i++)
 80037a6:	e00c      	b.n	80037c2 <Prbs9_generator+0x2e>
  {
    /*fill buffer with prbs9 sequence*/
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 80037a8:	10c9      	asrs	r1, r1, #3
 80037aa:	f814 c001 	ldrb.w	ip, [r4, r1]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	f002 0e07 	and.w	lr, r2, #7
 80037b6:	fa03 f30e 	lsl.w	r3, r3, lr
 80037ba:	ea4c 0303 	orr.w	r3, ip, r3
 80037be:	5463      	strb	r3, [r4, r1]
  for (int32_t i = 0; i < len * 8; i++)
 80037c0:	3201      	adds	r2, #1
 80037c2:	ebb2 0fc5 	cmp.w	r2, r5, lsl #3
 80037c6:	da0d      	bge.n	80037e4 <Prbs9_generator+0x50>
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
 80037c8:	0903      	lsrs	r3, r0, #4
 80037ca:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80037d6:	f3c3 0008 	ubfx	r0, r3, #0, #9
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 80037da:	4611      	mov	r1, r2
 80037dc:	2a00      	cmp	r2, #0
 80037de:	dae3      	bge.n	80037a8 <Prbs9_generator+0x14>
 80037e0:	1dd1      	adds	r1, r2, #7
 80037e2:	e7e1      	b.n	80037a8 <Prbs9_generator+0x14>
  }
  return 0;
  /* USER CODE BEGIN Prbs9_generator_2 */

  /* USER CODE END Prbs9_generator_2 */
}
 80037e4:	2000      	movs	r0, #0
 80037e6:	bd38      	pop	{r3, r4, r5, pc}

080037e8 <OnTxDone>:
{
 80037e8:	b508      	push	{r3, lr}
  RadioTxDone_flag = 1;
 80037ea:	2001      	movs	r0, #1
 80037ec:	4b02      	ldr	r3, [pc, #8]	@ (80037f8 <OnTxDone+0x10>)
 80037ee:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 80037f0:	f00f ffe4 	bl	80137bc <UTIL_SEQ_SetEvt>
}
 80037f4:	bd08      	pop	{r3, pc}
 80037f6:	bf00      	nop
 80037f8:	200007d4 	.word	0x200007d4

080037fc <OnRxDone>:
{
 80037fc:	b508      	push	{r3, lr}
  last_rx_rssi = rssi;
 80037fe:	4905      	ldr	r1, [pc, #20]	@ (8003814 <OnRxDone+0x18>)
 8003800:	800a      	strh	r2, [r1, #0]
  last_rx_LoraSnr_FskCfo = LoraSnr_FskCfo;
 8003802:	4a05      	ldr	r2, [pc, #20]	@ (8003818 <OnRxDone+0x1c>)
 8003804:	7013      	strb	r3, [r2, #0]
  RadioRxDone_flag = 1;
 8003806:	2001      	movs	r0, #1
 8003808:	4b04      	ldr	r3, [pc, #16]	@ (800381c <OnRxDone+0x20>)
 800380a:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800380c:	f00f ffd6 	bl	80137bc <UTIL_SEQ_SetEvt>
}
 8003810:	bd08      	pop	{r3, pc}
 8003812:	bf00      	nop
 8003814:	200007c2 	.word	0x200007c2
 8003818:	200007c0 	.word	0x200007c0
 800381c:	200007cc 	.word	0x200007cc

08003820 <OnTxTimeout>:
{
 8003820:	b508      	push	{r3, lr}
  RadioTxTimeout_flag = 1;
 8003822:	2001      	movs	r0, #1
 8003824:	4b02      	ldr	r3, [pc, #8]	@ (8003830 <OnTxTimeout+0x10>)
 8003826:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8003828:	f00f ffc8 	bl	80137bc <UTIL_SEQ_SetEvt>
}
 800382c:	bd08      	pop	{r3, pc}
 800382e:	bf00      	nop
 8003830:	200007d0 	.word	0x200007d0

08003834 <OnRxTimeout>:
{
 8003834:	b508      	push	{r3, lr}
  RadioRxTimeout_flag = 1;
 8003836:	2001      	movs	r0, #1
 8003838:	4b02      	ldr	r3, [pc, #8]	@ (8003844 <OnRxTimeout+0x10>)
 800383a:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800383c:	f00f ffbe 	bl	80137bc <UTIL_SEQ_SetEvt>
}
 8003840:	bd08      	pop	{r3, pc}
 8003842:	bf00      	nop
 8003844:	200007c8 	.word	0x200007c8

08003848 <OnRxError>:
{
 8003848:	b508      	push	{r3, lr}
  RadioError_flag = 1;
 800384a:	2001      	movs	r0, #1
 800384c:	4b02      	ldr	r3, [pc, #8]	@ (8003858 <OnRxError+0x10>)
 800384e:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8003850:	f00f ffb4 	bl	80137bc <UTIL_SEQ_SetEvt>
}
 8003854:	bd08      	pop	{r3, pc}
 8003856:	bf00      	nop
 8003858:	200007c4 	.word	0x200007c4

0800385c <TST_TxTone>:
  if ((TestState & TX_TEST_TONE) != TX_TEST_TONE)
 800385c:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <TST_TxTone+0x3c>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f013 0f01 	tst.w	r3, #1
 8003864:	d115      	bne.n	8003892 <TST_TxTone+0x36>
{
 8003866:	b510      	push	{r4, lr}
    TestState |= TX_TEST_TONE;
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <TST_TxTone+0x3c>)
 800386e:	7013      	strb	r3, [r2, #0]
    APP_TPRINTF("Tx FSK Test\r\n");
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <TST_TxTone+0x40>)
 8003872:	2201      	movs	r2, #1
 8003874:	2100      	movs	r1, #0
 8003876:	4608      	mov	r0, r1
 8003878:	f00f fe62 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    Radio.SetTxContinuousWave(testParam.freq, testParam.power, CONTINUOUS_TIMEOUT);
 800387c:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <TST_TxTone+0x44>)
 800387e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8003880:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <TST_TxTone+0x48>)
 8003882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003886:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800388a:	6858      	ldr	r0, [r3, #4]
 800388c:	47a0      	blx	r4
    return 0;
 800388e:	2000      	movs	r0, #0
}
 8003890:	bd10      	pop	{r4, pc}
    return -1;
 8003892:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003896:	4770      	bx	lr
 8003898:	200007d8 	.word	0x200007d8
 800389c:	08016190 	.word	0x08016190
 80038a0:	08016f38 	.word	0x08016f38
 80038a4:	2000006c 	.word	0x2000006c

080038a8 <TST_RxRssi>:
{
 80038a8:	b530      	push	{r4, r5, lr}
 80038aa:	b093      	sub	sp, #76	@ 0x4c
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 80038ac:	4b33      	ldr	r3, [pc, #204]	@ (800397c <TST_RxRssi+0xd4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f013 0502 	ands.w	r5, r3, #2
 80038b4:	d15f      	bne.n	8003976 <TST_RxRssi+0xce>
    TestState |= RX_TEST_RSSI;
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	4a30      	ldr	r2, [pc, #192]	@ (800397c <TST_RxRssi+0xd4>)
 80038bc:	7013      	strb	r3, [r2, #0]
    APP_TPRINTF("Rx FSK Test\r\n");
 80038be:	4b30      	ldr	r3, [pc, #192]	@ (8003980 <TST_RxRssi+0xd8>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	2100      	movs	r1, #0
 80038c4:	4608      	mov	r0, r1
 80038c6:	f00f fe3b 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    Radio.SetChannel(testParam.freq);
 80038ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003984 <TST_RxRssi+0xdc>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4c2e      	ldr	r4, [pc, #184]	@ (8003988 <TST_RxRssi+0xe0>)
 80038d0:	6860      	ldr	r0, [r4, #4]
 80038d2:	4798      	blx	r3
    uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80038d4:	4b2d      	ldr	r3, [pc, #180]	@ (800398c <TST_RxRssi+0xe4>)
 80038d6:	9302      	str	r3, [sp, #8]
 80038d8:	2300      	movs	r3, #0
 80038da:	9303      	str	r3, [sp, #12]
    RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 80038dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80038de:	b10b      	cbz	r3, 80038e4 <TST_RxRssi+0x3c>
 80038e0:	3308      	adds	r3, #8
 80038e2:	b2dd      	uxtb	r5, r3
 80038e4:	f88d 5030 	strb.w	r5, [sp, #48]	@ 0x30
    RxConfig.fsk.Bandwidth = testParam.bandwidth;
 80038e8:	4c27      	ldr	r4, [pc, #156]	@ (8003988 <TST_RxRssi+0xe0>)
 80038ea:	68e3      	ldr	r3, [r4, #12]
 80038ec:	9305      	str	r3, [sp, #20]
    RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 80038ee:	6923      	ldr	r3, [r4, #16]
 80038f0:	9306      	str	r3, [sp, #24]
    RxConfig.fsk.PreambleLen = 3;   /*in Byte*/
 80038f2:	2303      	movs	r3, #3
 80038f4:	9307      	str	r3, [sp, #28]
    RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 80038f6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 80038fa:	ab02      	add	r3, sp, #8
 80038fc:	9308      	str	r3, [sp, #32]
    RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 80038fe:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8003902:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 8003906:	2201      	movs	r2, #1
 8003908:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
    RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800390c:	23f2      	movs	r3, #242	@ 0xf2
 800390e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
    RxConfig.fsk.CrcPolynomial = 0x1021;
 8003912:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003916:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
    RxConfig.fsk.Whitening = RADIO_FSK_DC_FREEWHITENING;
 800391a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
    Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800391e:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <TST_RxRssi+0xdc>)
 8003920:	6f5d      	ldr	r5, [r3, #116]	@ 0x74
 8003922:	2300      	movs	r3, #0
 8003924:	a904      	add	r1, sp, #16
 8003926:	4618      	mov	r0, r3
 8003928:	47a8      	blx	r5
    if (testParam.lna == 0)
 800392a:	69a3      	ldr	r3, [r4, #24]
 800392c:	b9eb      	cbnz	r3, 800396a <TST_RxRssi+0xc2>
      Radio.Rx(timeout);
 800392e:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <TST_RxRssi+0xdc>)
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8003936:	4798      	blx	r3
    HAL_Delay(Radio.GetWakeupTime());   /* Wait for 50ms */
 8003938:	4c12      	ldr	r4, [pc, #72]	@ (8003984 <TST_RxRssi+0xdc>)
 800393a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800393c:	4798      	blx	r3
 800393e:	f7fd fe9b 	bl	8001678 <HAL_Delay>
    rssiVal = Radio.Rssi(MODEM_FSK);
 8003942:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003944:	2000      	movs	r0, #0
 8003946:	4798      	blx	r3
    APP_TPRINTF(">>> RSSI Value= %d dBm\r\n", rssiVal);
 8003948:	9000      	str	r0, [sp, #0]
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <TST_RxRssi+0xe8>)
 800394c:	2201      	movs	r2, #1
 800394e:	2100      	movs	r1, #0
 8003950:	4608      	mov	r0, r1
 8003952:	f00f fdf5 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    Radio.Sleep();
 8003956:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003958:	4798      	blx	r3
    TestState &= ~RX_TEST_RSSI;
 800395a:	4a08      	ldr	r2, [pc, #32]	@ (800397c <TST_RxRssi+0xd4>)
 800395c:	7813      	ldrb	r3, [r2, #0]
 800395e:	f023 0302 	bic.w	r3, r3, #2
 8003962:	7013      	strb	r3, [r2, #0]
    return 0;
 8003964:	2000      	movs	r0, #0
}
 8003966:	b013      	add	sp, #76	@ 0x4c
 8003968:	bd30      	pop	{r4, r5, pc}
      Radio.RxBoosted(timeout);
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <TST_RxRssi+0xdc>)
 800396c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8003972:	4798      	blx	r3
 8003974:	e7e0      	b.n	8003938 <TST_RxRssi+0x90>
    return -1;
 8003976:	f04f 30ff 	mov.w	r0, #4294967295
 800397a:	e7f4      	b.n	8003966 <TST_RxRssi+0xbe>
 800397c:	200007d8 	.word	0x200007d8
 8003980:	080161a0 	.word	0x080161a0
 8003984:	08016f38 	.word	0x08016f38
 8003988:	2000006c 	.word	0x2000006c
 800398c:	00c194c1 	.word	0x00c194c1
 8003990:	080161b0 	.word	0x080161b0

08003994 <TST_set_config>:
{
 8003994:	b508      	push	{r3, lr}
 8003996:	4601      	mov	r1, r0
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 8003998:	2230      	movs	r2, #48	@ 0x30
 800399a:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <TST_set_config+0x10>)
 800399c:	f00f fee6 	bl	801376c <UTIL_MEM_cpy_8>
}
 80039a0:	2000      	movs	r0, #0
 80039a2:	bd08      	pop	{r3, pc}
 80039a4:	2000006c 	.word	0x2000006c

080039a8 <TST_get_config>:
{
 80039a8:	b508      	push	{r3, lr}
  UTIL_MEM_cpy_8(Param, &testParam, sizeof(testParameter_t));
 80039aa:	2230      	movs	r2, #48	@ 0x30
 80039ac:	4902      	ldr	r1, [pc, #8]	@ (80039b8 <TST_get_config+0x10>)
 80039ae:	f00f fedd 	bl	801376c <UTIL_MEM_cpy_8>
}
 80039b2:	2000      	movs	r0, #0
 80039b4:	bd08      	pop	{r3, pc}
 80039b6:	bf00      	nop
 80039b8:	2000006c 	.word	0x2000006c

080039bc <TST_stop>:
{
 80039bc:	b510      	push	{r4, lr}
  TestState = 0;
 80039be:	2400      	movs	r4, #0
 80039c0:	4b03      	ldr	r3, [pc, #12]	@ (80039d0 <TST_stop+0x14>)
 80039c2:	701c      	strb	r4, [r3, #0]
  Radio.Sleep();
 80039c4:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <TST_stop+0x18>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	4798      	blx	r3
}
 80039ca:	4620      	mov	r0, r4
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	bf00      	nop
 80039d0:	200007d8 	.word	0x200007d8
 80039d4:	08016f38 	.word	0x08016f38

080039d8 <TST_TX_Start>:
{
 80039d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039dc:	b08c      	sub	sp, #48	@ 0x30
  if ((TestState & TX_TEST_MODU) != TX_TEST_MODU)
 80039de:	4b93      	ldr	r3, [pc, #588]	@ (8003c2c <TST_TX_Start+0x254>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f013 0704 	ands.w	r7, r3, #4
 80039e6:	f040 811b 	bne.w	8003c20 <TST_TX_Start+0x248>
 80039ea:	4606      	mov	r6, r0
    TestState |= TX_TEST_MODU;
 80039ec:	f043 0304 	orr.w	r3, r3, #4
 80039f0:	4a8e      	ldr	r2, [pc, #568]	@ (8003c2c <TST_TX_Start+0x254>)
 80039f2:	7013      	strb	r3, [r2, #0]
    APP_TPRINTF("Tx Test\r\n");
 80039f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003c30 <TST_TX_Start+0x258>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	2100      	movs	r1, #0
 80039fa:	4608      	mov	r0, r1
 80039fc:	f00f fda0 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    RadioEvents.TxDone = OnTxDone;
 8003a00:	488c      	ldr	r0, [pc, #560]	@ (8003c34 <TST_TX_Start+0x25c>)
 8003a02:	4b8d      	ldr	r3, [pc, #564]	@ (8003c38 <TST_TX_Start+0x260>)
 8003a04:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 8003a06:	4b8d      	ldr	r3, [pc, #564]	@ (8003c3c <TST_TX_Start+0x264>)
 8003a08:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8003a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003c40 <TST_TX_Start+0x268>)
 8003a0c:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8003a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c44 <TST_TX_Start+0x26c>)
 8003a10:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 8003a12:	4b8d      	ldr	r3, [pc, #564]	@ (8003c48 <TST_TX_Start+0x270>)
 8003a14:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 8003a16:	4b8d      	ldr	r3, [pc, #564]	@ (8003c4c <TST_TX_Start+0x274>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4798      	blx	r3
    Prbs9_generator(payload, testParam.payloadLen);
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c50 <TST_TX_Start+0x278>)
 8003a1e:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003a22:	488c      	ldr	r0, [pc, #560]	@ (8003c54 <TST_TX_Start+0x27c>)
 8003a24:	f7ff feb6 	bl	8003794 <Prbs9_generator>
    for (i = 1; i <= nb_packet; i++)
 8003a28:	2401      	movs	r4, #1
 8003a2a:	e056      	b.n	8003ada <TST_TX_Start+0x102>
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8003a2c:	4b8a      	ldr	r3, [pc, #552]	@ (8003c58 <TST_TX_Start+0x280>)
 8003a2e:	9303      	str	r3, [sp, #12]
 8003a30:	2300      	movs	r3, #0
 8003a32:	9304      	str	r3, [sp, #16]
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 8003a34:	4b86      	ldr	r3, [pc, #536]	@ (8003c50 <TST_TX_Start+0x278>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d06d      	beq.n	8003b18 <TST_TX_Start+0x140>
 8003a3c:	3307      	adds	r3, #7
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
        TxConfig.fsk.FrequencyDeviation = testParam.fskDev;
 8003a44:	4a82      	ldr	r2, [pc, #520]	@ (8003c50 <TST_TX_Start+0x278>)
 8003a46:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003a48:	930b      	str	r3, [sp, #44]	@ 0x2c
        TxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 8003a4a:	6913      	ldr	r3, [r2, #16]
 8003a4c:	9305      	str	r3, [sp, #20]
        TxConfig.fsk.PreambleLen = 3;   /*in Byte        */
 8003a4e:	2303      	movs	r3, #3
 8003a50:	9306      	str	r3, [sp, #24]
        TxConfig.fsk.SyncWordLength = 3; /*in Byte        */
 8003a52:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
        TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 8003a56:	ab03      	add	r3, sp, #12
 8003a58:	9307      	str	r3, [sp, #28]
        TxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed  */
 8003a5a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8003a5e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
        TxConfig.fsk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 8003a62:	2301      	movs	r3, #1
 8003a64:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 8003a68:	23f2      	movs	r3, #242	@ 0xf2
 8003a6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
        TxConfig.fsk.CrcPolynomial = 0x1021;
 8003a6e:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003a72:	f8ad 3020 	strh.w	r3, [sp, #32]
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 8003a76:	2000      	movs	r0, #0
 8003a78:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 8003a7c:	4b73      	ldr	r3, [pc, #460]	@ (8003c4c <TST_TX_Start+0x274>)
 8003a7e:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8003a80:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003a84:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8003a88:	a905      	add	r1, sp, #20
 8003a8a:	47a8      	blx	r5
      Radio.Send(payload, testParam.payloadLen);
 8003a8c:	4d6f      	ldr	r5, [pc, #444]	@ (8003c4c <TST_TX_Start+0x274>)
 8003a8e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003a90:	4a6f      	ldr	r2, [pc, #444]	@ (8003c50 <TST_TX_Start+0x278>)
 8003a92:	f892 1020 	ldrb.w	r1, [r2, #32]
 8003a96:	486f      	ldr	r0, [pc, #444]	@ (8003c54 <TST_TX_Start+0x27c>)
 8003a98:	4798      	blx	r3
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f00f ff56 	bl	801394c <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 8003aa0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003aa2:	4798      	blx	r3
      if (RadioTxDone_flag == 1)
 8003aa4:	4b6d      	ldr	r3, [pc, #436]	@ (8003c5c <TST_TX_Start+0x284>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	f000 809b 	beq.w	8003be4 <TST_TX_Start+0x20c>
      if (RadioTxTimeout_flag == 1)
 8003aae:	4b6c      	ldr	r3, [pc, #432]	@ (8003c60 <TST_TX_Start+0x288>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	f000 809d 	beq.w	8003bf2 <TST_TX_Start+0x21a>
      if (RadioError_flag == 1)
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c64 <TST_TX_Start+0x28c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f000 809f 	beq.w	8003c00 <TST_TX_Start+0x228>
      HAL_Delay(500);
 8003ac2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ac6:	f7fd fdd7 	bl	8001678 <HAL_Delay>
      RadioTxDone_flag = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	4a63      	ldr	r2, [pc, #396]	@ (8003c5c <TST_TX_Start+0x284>)
 8003ace:	6013      	str	r3, [r2, #0]
      RadioTxTimeout_flag = 0;
 8003ad0:	4a63      	ldr	r2, [pc, #396]	@ (8003c60 <TST_TX_Start+0x288>)
 8003ad2:	6013      	str	r3, [r2, #0]
      RadioError_flag = 0;
 8003ad4:	4a63      	ldr	r2, [pc, #396]	@ (8003c64 <TST_TX_Start+0x28c>)
 8003ad6:	6013      	str	r3, [r2, #0]
    for (i = 1; i <= nb_packet; i++)
 8003ad8:	3401      	adds	r4, #1
 8003ada:	42b4      	cmp	r4, r6
 8003adc:	f300 8097 	bgt.w	8003c0e <TST_TX_Start+0x236>
      APP_TPRINTF("Tx %d of %d\r\n", i, nb_packet);
 8003ae0:	9601      	str	r6, [sp, #4]
 8003ae2:	9400      	str	r4, [sp, #0]
 8003ae4:	4b60      	ldr	r3, [pc, #384]	@ (8003c68 <TST_TX_Start+0x290>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4608      	mov	r0, r1
 8003aec:	f00f fd28 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetChannel(testParam.freq);
 8003af0:	4b56      	ldr	r3, [pc, #344]	@ (8003c4c <TST_TX_Start+0x274>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4d56      	ldr	r5, [pc, #344]	@ (8003c50 <TST_TX_Start+0x278>)
 8003af6:	6868      	ldr	r0, [r5, #4]
 8003af8:	4798      	blx	r3
      if (testParam.modulation == TEST_FSK)
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	f200 8092 	bhi.w	8003c26 <TST_TX_Start+0x24e>
 8003b02:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <TST_TX_Start+0x130>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003a2d 	.word	0x08003a2d
 8003b0c:	08003b7d 	.word	0x08003b7d
 8003b10:	08003bcb 	.word	0x08003bcb
 8003b14:	08003b1d 	.word	0x08003b1d
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 8003b18:	463b      	mov	r3, r7
 8003b1a:	e791      	b.n	8003a40 <TST_TX_Start+0x68>
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8003b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c58 <TST_TX_Start+0x280>)
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	2300      	movs	r3, #0
 8003b22:	9304      	str	r3, [sp, #16]
        TxConfig.msk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 8003b24:	4b4a      	ldr	r3, [pc, #296]	@ (8003c50 <TST_TX_Start+0x278>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	b333      	cbz	r3, 8003b78 <TST_TX_Start+0x1a0>
 8003b2a:	3307      	adds	r3, #7
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
        TxConfig.msk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 8003b32:	4a47      	ldr	r2, [pc, #284]	@ (8003c50 <TST_TX_Start+0x278>)
 8003b34:	6913      	ldr	r3, [r2, #16]
 8003b36:	9305      	str	r3, [sp, #20]
        TxConfig.msk.PreambleLen = 3;   /*in Byte        */
 8003b38:	2003      	movs	r0, #3
 8003b3a:	9006      	str	r0, [sp, #24]
        TxConfig.msk.SyncWordLength = 3; /*in Byte        */
 8003b3c:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
        TxConfig.msk.SyncWord = syncword; /*SyncWord Buffer*/
 8003b40:	ab03      	add	r3, sp, #12
 8003b42:	9307      	str	r3, [sp, #28]
        TxConfig.msk.whiteSeed = 0x01FF; /*WhiteningSeed  */
 8003b44:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8003b48:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
        TxConfig.msk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        TxConfig.msk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 8003b52:	23f2      	movs	r3, #242	@ 0xf2
 8003b54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
        TxConfig.msk.CrcPolynomial = 0x1021;
 8003b58:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003b5c:	f8ad 3020 	strh.w	r3, [sp, #32]
        TxConfig.msk.Whitening = RADIO_FSK_DC_FREE_OFF;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
        Radio.RadioSetTxGenericConfig(GENERIC_MSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 8003b66:	4b39      	ldr	r3, [pc, #228]	@ (8003c4c <TST_TX_Start+0x274>)
 8003b68:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8003b6a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003b6e:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8003b72:	a905      	add	r1, sp, #20
 8003b74:	47a8      	blx	r5
 8003b76:	e789      	b.n	8003a8c <TST_TX_Start+0xb4>
        TxConfig.msk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 8003b78:	463b      	mov	r3, r7
 8003b7a:	e7d8      	b.n	8003b2e <TST_TX_Start+0x156>
        TxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 8003b7c:	4a34      	ldr	r2, [pc, #208]	@ (8003c50 <TST_TX_Start+0x278>)
 8003b7e:	7b13      	ldrb	r3, [r2, #12]
 8003b80:	f88d 3015 	strb.w	r3, [sp, #21]
        TxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 8003b84:	7c13      	ldrb	r3, [r2, #16]
 8003b86:	f88d 3014 	strb.w	r3, [sp, #20]
        TxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 8003b8a:	7d13      	ldrb	r3, [r2, #20]
 8003b8c:	f88d 3016 	strb.w	r3, [sp, #22]
        TxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 8003b90:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8003b94:	f88d 3017 	strb.w	r3, [sp, #23]
        TxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 8003b98:	2308      	movs	r3, #8
 8003b9a:	f8ad 3018 	strh.w	r3, [sp, #24]
        TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 8003b9e:	f04f 0800 	mov.w	r8, #0
 8003ba2:	f88d 801a 	strb.w	r8, [sp, #26]
        TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f88d 001b 	strb.w	r0, [sp, #27]
        TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 8003bac:	f88d 801c 	strb.w	r8, [sp, #28]
        Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 8003bb0:	4d26      	ldr	r5, [pc, #152]	@ (8003c4c <TST_TX_Start+0x274>)
 8003bb2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003bb6:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8003bba:	a905      	add	r1, sp, #20
 8003bbc:	f8d5 c078 	ldr.w	ip, [r5, #120]	@ 0x78
 8003bc0:	47e0      	blx	ip
        Radio.SetPublicNetwork(false); /*set private syncword*/
 8003bc2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	4798      	blx	r3
 8003bc8:	e760      	b.n	8003a8c <TST_TX_Start+0xb4>
        TxConfig.bpsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 8003bca:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <TST_TX_Start+0x278>)
 8003bcc:	6913      	ldr	r3, [r2, #16]
 8003bce:	9305      	str	r3, [sp, #20]
        Radio.RadioSetTxGenericConfig(GENERIC_BPSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c4c <TST_TX_Start+0x274>)
 8003bd2:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8003bd4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003bd8:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8003bdc:	a905      	add	r1, sp, #20
 8003bde:	2002      	movs	r0, #2
 8003be0:	47a8      	blx	r5
 8003be2:	e753      	b.n	8003a8c <TST_TX_Start+0xb4>
        APP_TPRINTF("OnTxDone\r\n");
 8003be4:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <TST_TX_Start+0x294>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	2100      	movs	r1, #0
 8003bea:	4608      	mov	r0, r1
 8003bec:	f00f fca8 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003bf0:	e75d      	b.n	8003aae <TST_TX_Start+0xd6>
        APP_TPRINTF("OnTxTimeout\r\n");
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c70 <TST_TX_Start+0x298>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	f00f fca1 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003bfe:	e75b      	b.n	8003ab8 <TST_TX_Start+0xe0>
        APP_TPRINTF("OnRxError\r\n");
 8003c00:	4b1c      	ldr	r3, [pc, #112]	@ (8003c74 <TST_TX_Start+0x29c>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	2100      	movs	r1, #0
 8003c06:	4608      	mov	r0, r1
 8003c08:	f00f fc9a 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003c0c:	e759      	b.n	8003ac2 <TST_TX_Start+0xea>
    TestState &= ~TX_TEST_MODU;
 8003c0e:	4a07      	ldr	r2, [pc, #28]	@ (8003c2c <TST_TX_Start+0x254>)
 8003c10:	7813      	ldrb	r3, [r2, #0]
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	7013      	strb	r3, [r2, #0]
    return 0;
 8003c18:	2000      	movs	r0, #0
}
 8003c1a:	b00c      	add	sp, #48	@ 0x30
 8003c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	e7f9      	b.n	8003c1a <TST_TX_Start+0x242>
      if (testParam.modulation == TEST_FSK)
 8003c26:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2a:	e7f6      	b.n	8003c1a <TST_TX_Start+0x242>
 8003c2c:	200007d8 	.word	0x200007d8
 8003c30:	080161cc 	.word	0x080161cc
 8003c34:	200007a4 	.word	0x200007a4
 8003c38:	080037e9 	.word	0x080037e9
 8003c3c:	080037fd 	.word	0x080037fd
 8003c40:	08003821 	.word	0x08003821
 8003c44:	08003835 	.word	0x08003835
 8003c48:	08003849 	.word	0x08003849
 8003c4c:	08016f38 	.word	0x08016f38
 8003c50:	2000006c 	.word	0x2000006c
 8003c54:	200006a4 	.word	0x200006a4
 8003c58:	00c194c1 	.word	0x00c194c1
 8003c5c:	200007d4 	.word	0x200007d4
 8003c60:	200007d0 	.word	0x200007d0
 8003c64:	200007c4 	.word	0x200007c4
 8003c68:	080161d8 	.word	0x080161d8
 8003c6c:	080161e8 	.word	0x080161e8
 8003c70:	080161f4 	.word	0x080161f4
 8003c74:	08016204 	.word	0x08016204

08003c78 <TST_RX_Start>:
{
 8003c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7c:	b094      	sub	sp, #80	@ 0x50
 8003c7e:	4606      	mov	r6, r0
  RxConfigGeneric_t RxConfig = {0};
 8003c80:	2238      	movs	r2, #56	@ 0x38
 8003c82:	2100      	movs	r1, #0
 8003c84:	a806      	add	r0, sp, #24
 8003c86:	f010 fce7 	bl	8014658 <memset>
  if (((TestState & RX_TEST_MODU) != RX_TEST_MODU) && (nb_packet > 0))
 8003c8a:	4b93      	ldr	r3, [pc, #588]	@ (8003ed8 <TST_RX_Start+0x260>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	f013 0808 	ands.w	r8, r3, #8
 8003c92:	f040 8117 	bne.w	8003ec4 <TST_RX_Start+0x24c>
 8003c96:	2e00      	cmp	r6, #0
 8003c98:	f340 8117 	ble.w	8003eca <TST_RX_Start+0x252>
    TestState |= RX_TEST_MODU;
 8003c9c:	f043 0308 	orr.w	r3, r3, #8
 8003ca0:	4a8d      	ldr	r2, [pc, #564]	@ (8003ed8 <TST_RX_Start+0x260>)
 8003ca2:	7013      	strb	r3, [r2, #0]
    RadioEvents.TxDone = OnTxDone;
 8003ca4:	488d      	ldr	r0, [pc, #564]	@ (8003edc <TST_RX_Start+0x264>)
 8003ca6:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee0 <TST_RX_Start+0x268>)
 8003ca8:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 8003caa:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee4 <TST_RX_Start+0x26c>)
 8003cac:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8003cae:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee8 <TST_RX_Start+0x270>)
 8003cb0:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8003cb2:	4b8e      	ldr	r3, [pc, #568]	@ (8003eec <TST_RX_Start+0x274>)
 8003cb4:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 8003cb6:	4b8e      	ldr	r3, [pc, #568]	@ (8003ef0 <TST_RX_Start+0x278>)
 8003cb8:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 8003cba:	4b8e      	ldr	r3, [pc, #568]	@ (8003ef4 <TST_RX_Start+0x27c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4798      	blx	r3
  uint32_t count_RxKo = 0;
 8003cc0:	2500      	movs	r5, #0
  uint32_t count_RxOk = 0;
 8003cc2:	462f      	mov	r7, r5
    for (i = 1; i <= nb_packet; i++)
 8003cc4:	2401      	movs	r4, #1
 8003cc6:	e084      	b.n	8003dd2 <TST_RX_Start+0x15a>
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 8003cc8:	4643      	mov	r3, r8
 8003cca:	e09b      	b.n	8003e04 <TST_RX_Start+0x18c>
      else if (testParam.modulation == TEST_LORA)
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 80ff 	bne.w	8003ed0 <TST_RX_Start+0x258>
        RxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 8003cd2:	4b89      	ldr	r3, [pc, #548]	@ (8003ef8 <TST_RX_Start+0x280>)
 8003cd4:	7b1a      	ldrb	r2, [r3, #12]
 8003cd6:	f88d 2045 	strb.w	r2, [sp, #69]	@ 0x45
        RxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 8003cda:	7c1a      	ldrb	r2, [r3, #16]
 8003cdc:	f88d 2044 	strb.w	r2, [sp, #68]	@ 0x44
        RxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 8003ce0:	7d1a      	ldrb	r2, [r3, #20]
 8003ce2:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
        RxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 8003ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cea:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
        RxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 8003cee:	2308      	movs	r3, #8
 8003cf0:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
        RxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 8003cf4:	f04f 0900 	mov.w	r9, #0
 8003cf8:	f88d 904a 	strb.w	r9, [sp, #74]	@ 0x4a
        RxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c
        RxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 8003d02:	f88d 904d 	strb.w	r9, [sp, #77]	@ 0x4d
        Radio.RadioSetRxGenericConfig(GENERIC_LORA, &RxConfig, RX_CONTINUOUS_ON, LORA_SYMBOL_TIMEOUT);
 8003d06:	f8df a1ec 	ldr.w	sl, [pc, #492]	@ 8003ef4 <TST_RX_Start+0x27c>
 8003d0a:	231e      	movs	r3, #30
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	a906      	add	r1, sp, #24
 8003d10:	f8da c074 	ldr.w	ip, [sl, #116]	@ 0x74
 8003d14:	47e0      	blx	ip
        Radio.SetPublicNetwork(false); /*set private syncword*/
 8003d16:	f8da 3058 	ldr.w	r3, [sl, #88]	@ 0x58
 8003d1a:	4648      	mov	r0, r9
 8003d1c:	4798      	blx	r3
 8003d1e:	e09c      	b.n	8003e5a <TST_RX_Start+0x1e2>
        Radio.RxBoosted(RX_TIMEOUT_VALUE);
 8003d20:	4b74      	ldr	r3, [pc, #464]	@ (8003ef4 <TST_RX_Start+0x27c>)
 8003d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d24:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003d28:	4798      	blx	r3
 8003d2a:	e0a0      	b.n	8003e6e <TST_RX_Start+0x1f6>
        int16_t rssi = last_rx_rssi;
 8003d2c:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <TST_RX_Start+0x284>)
 8003d2e:	f8b3 9000 	ldrh.w	r9, [r3]
 8003d32:	fa0f f989 	sxth.w	r9, r9
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 8003d36:	4b72      	ldr	r3, [pc, #456]	@ (8003f00 <TST_RX_Start+0x288>)
 8003d38:	f893 a000 	ldrb.w	sl, [r3]
 8003d3c:	fa4f fa8a 	sxtb.w	sl, sl
        APP_TPRINTF("OnRxDone\r\n");
 8003d40:	4b70      	ldr	r3, [pc, #448]	@ (8003f04 <TST_RX_Start+0x28c>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	2100      	movs	r1, #0
 8003d46:	4608      	mov	r0, r1
 8003d48:	f00f fbfa 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <TST_RX_Start+0x280>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	b953      	cbnz	r3, 8003d68 <TST_RX_Start+0xf0>
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 8003d52:	f8cd a004 	str.w	sl, [sp, #4]
 8003d56:	f8cd 9000 	str.w	r9, [sp]
 8003d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8003f08 <TST_RX_Start+0x290>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4608      	mov	r0, r1
 8003d62:	f00f fbed 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003d66:	e08d      	b.n	8003e84 <TST_RX_Start+0x20c>
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 8003d68:	f8cd a004 	str.w	sl, [sp, #4]
 8003d6c:	f8cd 9000 	str.w	r9, [sp]
 8003d70:	4b66      	ldr	r3, [pc, #408]	@ (8003f0c <TST_RX_Start+0x294>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	2100      	movs	r1, #0
 8003d76:	4608      	mov	r0, r1
 8003d78:	f00f fbe2 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003d7c:	e082      	b.n	8003e84 <TST_RX_Start+0x20c>
        APP_TPRINTF("OnRxTimeout\r\n");
 8003d7e:	4b64      	ldr	r3, [pc, #400]	@ (8003f10 <TST_RX_Start+0x298>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	2100      	movs	r1, #0
 8003d84:	4608      	mov	r0, r1
 8003d86:	f00f fbdb 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003d8a:	e080      	b.n	8003e8e <TST_RX_Start+0x216>
        APP_TPRINTF("OnRxError\r\n");
 8003d8c:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <TST_RX_Start+0x29c>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	2100      	movs	r1, #0
 8003d92:	4608      	mov	r0, r1
 8003d94:	f00f fbd4 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 8003d98:	e07e      	b.n	8003e98 <TST_RX_Start+0x220>
        count_RxKo++;
 8003d9a:	3501      	adds	r5, #1
      if (RadioRxDone_flag == 1)
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003f18 <TST_RX_Start+0x2a0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f000 8084 	beq.w	8003eae <TST_RX_Start+0x236>
      RadioRxDone_flag = 0;
 8003da6:	2000      	movs	r0, #0
 8003da8:	4b5b      	ldr	r3, [pc, #364]	@ (8003f18 <TST_RX_Start+0x2a0>)
 8003daa:	6018      	str	r0, [r3, #0]
      RadioRxTimeout_flag = 0;
 8003dac:	4b5b      	ldr	r3, [pc, #364]	@ (8003f1c <TST_RX_Start+0x2a4>)
 8003dae:	6018      	str	r0, [r3, #0]
      RadioError_flag = 0;
 8003db0:	4b5b      	ldr	r3, [pc, #364]	@ (8003f20 <TST_RX_Start+0x2a8>)
 8003db2:	6018      	str	r0, [r3, #0]
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 8003db4:	2364      	movs	r3, #100	@ 0x64
 8003db6:	fb05 f303 	mul.w	r3, r5, r3
 8003dba:	197a      	adds	r2, r7, r5
 8003dbc:	fbb3 f3f2 	udiv	r3, r3, r2
      APP_TPRINTF("Rx %d of %d  >>> PER= %d %%\r\n", i, nb_packet, PER);
 8003dc0:	9302      	str	r3, [sp, #8]
 8003dc2:	9601      	str	r6, [sp, #4]
 8003dc4:	9400      	str	r4, [sp, #0]
 8003dc6:	4b57      	ldr	r3, [pc, #348]	@ (8003f24 <TST_RX_Start+0x2ac>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4601      	mov	r1, r0
 8003dcc:	f00f fbb8 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    for (i = 1; i <= nb_packet; i++)
 8003dd0:	3401      	adds	r4, #1
 8003dd2:	42b4      	cmp	r4, r6
 8003dd4:	dc6d      	bgt.n	8003eb2 <TST_RX_Start+0x23a>
      Radio.SetChannel(testParam.freq);
 8003dd6:	4b47      	ldr	r3, [pc, #284]	@ (8003ef4 <TST_RX_Start+0x27c>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 8003ef8 <TST_RX_Start+0x280>
 8003dde:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8003de2:	4798      	blx	r3
      if (testParam.modulation == TEST_FSK)
 8003de4:	f8d9 3000 	ldr.w	r3, [r9]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f47f af6f 	bne.w	8003ccc <TST_RX_Start+0x54>
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8003dee:	4b4e      	ldr	r3, [pc, #312]	@ (8003f28 <TST_RX_Start+0x2b0>)
 8003df0:	9304      	str	r3, [sp, #16]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9305      	str	r3, [sp, #20]
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 8003df6:	f8d9 302c 	ldr.w	r3, [r9, #44]	@ 0x2c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f43f af64 	beq.w	8003cc8 <TST_RX_Start+0x50>
 8003e00:	3308      	adds	r3, #8
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
        RxConfig.fsk.Bandwidth = testParam.bandwidth;
 8003e08:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <TST_RX_Start+0x280>)
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	9207      	str	r2, [sp, #28]
        RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	9308      	str	r3, [sp, #32]
        RxConfig.fsk.PreambleLen = 3; /*in Byte*/
 8003e12:	2303      	movs	r3, #3
 8003e14:	9309      	str	r3, [sp, #36]	@ 0x24
        RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 8003e16:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
        RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 8003e1a:	ab04      	add	r3, sp, #16
 8003e1c:	930a      	str	r3, [sp, #40]	@ 0x28
        RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 8003e1e:	2304      	movs	r3, #4
 8003e20:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
        RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 8003e24:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8003e28:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
        RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
        RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 8003e32:	23f2      	movs	r3, #242	@ 0xf2
 8003e34:	f88d 303b 	strb.w	r3, [sp, #59]	@ 0x3b
        RxConfig.fsk.CrcPolynomial = 0x1021;
 8003e38:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003e3c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 8003e40:	2000      	movs	r0, #0
 8003e42:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
        RxConfig.fsk.MaxPayloadLength = 255;
 8003e46:	23ff      	movs	r3, #255	@ 0xff
 8003e48:	930b      	str	r3, [sp, #44]	@ 0x2c
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 8003e4a:	f88d 0039 	strb.w	r0, [sp, #57]	@ 0x39
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 8003e4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ef4 <TST_RX_Start+0x27c>)
 8003e50:	f8d3 9074 	ldr.w	r9, [r3, #116]	@ 0x74
 8003e54:	4603      	mov	r3, r0
 8003e56:	a906      	add	r1, sp, #24
 8003e58:	47c8      	blx	r9
      if (testParam.lna == 0)
 8003e5a:	4b27      	ldr	r3, [pc, #156]	@ (8003ef8 <TST_RX_Start+0x280>)
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f47f af5e 	bne.w	8003d20 <TST_RX_Start+0xa8>
        Radio.Rx(RX_TIMEOUT_VALUE);
 8003e64:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <TST_RX_Start+0x27c>)
 8003e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e68:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003e6c:	4798      	blx	r3
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f00f fd6c 	bl	801394c <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 8003e74:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef4 <TST_RX_Start+0x27c>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	4798      	blx	r3
      if (RadioRxDone_flag == 1)
 8003e7a:	4b27      	ldr	r3, [pc, #156]	@ (8003f18 <TST_RX_Start+0x2a0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	f43f af54 	beq.w	8003d2c <TST_RX_Start+0xb4>
      if (RadioRxTimeout_flag == 1)
 8003e84:	4b25      	ldr	r3, [pc, #148]	@ (8003f1c <TST_RX_Start+0x2a4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	f43f af78 	beq.w	8003d7e <TST_RX_Start+0x106>
      if (RadioError_flag == 1)
 8003e8e:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <TST_RX_Start+0x2a8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	f43f af7a 	beq.w	8003d8c <TST_RX_Start+0x114>
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 8003e98:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <TST_RX_Start+0x2a4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f43f af7c 	beq.w	8003d9a <TST_RX_Start+0x122>
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f20 <TST_RX_Start+0x2a8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f47f af78 	bne.w	8003d9c <TST_RX_Start+0x124>
 8003eac:	e775      	b.n	8003d9a <TST_RX_Start+0x122>
        count_RxOk++;
 8003eae:	3701      	adds	r7, #1
 8003eb0:	e779      	b.n	8003da6 <TST_RX_Start+0x12e>
    TestState &= ~RX_TEST_MODU;
 8003eb2:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <TST_RX_Start+0x260>)
 8003eb4:	7813      	ldrb	r3, [r2, #0]
 8003eb6:	f023 0308 	bic.w	r3, r3, #8
 8003eba:	7013      	strb	r3, [r2, #0]
    return 0;
 8003ebc:	2000      	movs	r0, #0
}
 8003ebe:	b014      	add	sp, #80	@ 0x50
 8003ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	e7f9      	b.n	8003ebe <TST_RX_Start+0x246>
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ece:	e7f6      	b.n	8003ebe <TST_RX_Start+0x246>
        return -1; /* error */
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	e7f3      	b.n	8003ebe <TST_RX_Start+0x246>
 8003ed6:	bf00      	nop
 8003ed8:	200007d8 	.word	0x200007d8
 8003edc:	200007a4 	.word	0x200007a4
 8003ee0:	080037e9 	.word	0x080037e9
 8003ee4:	080037fd 	.word	0x080037fd
 8003ee8:	08003821 	.word	0x08003821
 8003eec:	08003835 	.word	0x08003835
 8003ef0:	08003849 	.word	0x08003849
 8003ef4:	08016f38 	.word	0x08016f38
 8003ef8:	2000006c 	.word	0x2000006c
 8003efc:	200007c2 	.word	0x200007c2
 8003f00:	200007c0 	.word	0x200007c0
 8003f04:	08016210 	.word	0x08016210
 8003f08:	0801621c 	.word	0x0801621c
 8003f0c:	0801623c 	.word	0x0801623c
 8003f10:	08016260 	.word	0x08016260
 8003f14:	08016204 	.word	0x08016204
 8003f18:	200007cc 	.word	0x200007cc
 8003f1c:	200007c8 	.word	0x200007c8
 8003f20:	200007c4 	.word	0x200007c4
 8003f24:	08016270 	.word	0x08016270
 8003f28:	00c194c1 	.word	0x00c194c1

08003f2c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8003f2c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8003f2e:	f000 f83f 	bl	8003fb0 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003f32:	bd08      	pop	{r3, pc}

08003f34 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8003f34:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8003f36:	f000 f87b 	bl	8004030 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003f3a:	bd08      	pop	{r3, pc}

08003f3c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8003f3c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8003f3e:	f000 f8cd 	bl	80040dc <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003f42:	bd08      	pop	{r3, pc}

08003f44 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8003f44:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8003f46:	f000 f8cb 	bl	80040e0 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003f4a:	bd08      	pop	{r3, pc}

08003f4c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8003f4c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8003f4e:	f000 f8c9 	bl	80040e4 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003f52:	bd08      	pop	{r3, pc}

08003f54 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8003f54:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8003f56:	f000 f8c7 	bl	80040e8 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8003f5a:	bd08      	pop	{r3, pc}

08003f5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f5c:	480d      	ldr	r0, [pc, #52]	@ (8003f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f60:	f000 f8c7 	bl	80040f2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f64:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f66:	490d      	ldr	r1, [pc, #52]	@ (8003f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f68:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa0 <LoopForever+0xe>)
  movs r3, #0
 8003f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f6c:	e002      	b.n	8003f74 <LoopCopyDataInit>

08003f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f72:	3304      	adds	r3, #4

08003f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f78:	d3f9      	bcc.n	8003f6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003fa8 <LoopForever+0x16>)
  movs r3, #0
 8003f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f80:	e001      	b.n	8003f86 <LoopFillZerobss>

08003f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f84:	3204      	adds	r2, #4

08003f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f88:	d3fb      	bcc.n	8003f82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f8a:	f010 fb7f 	bl	801468c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f8e:	f7fd f992 	bl	80012b6 <main>

08003f92 <LoopForever>:

LoopForever:
    b LoopForever
 8003f92:	e7fe      	b.n	8003f92 <LoopForever>
  ldr   r0, =_estack
 8003f94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f9c:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8003fa0:	080170a0 	.word	0x080170a0
  ldr r2, =_sbss
 8003fa4:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8003fa8:	20001fc8 	.word	0x20001fc8

08003fac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fac:	e7fe      	b.n	8003fac <ADC_IRQHandler>
	...

08003fb0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003fb4:	2400      	movs	r4, #0
 8003fb6:	9401      	str	r4, [sp, #4]
 8003fb8:	9402      	str	r4, [sp, #8]
 8003fba:	9403      	str	r4, [sp, #12]
 8003fbc:	9404      	str	r4, [sp, #16]
 8003fbe:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fc6:	f042 0204 	orr.w	r2, r2, #4
 8003fca:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003fd4:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003fd6:	2510      	movs	r5, #16
 8003fd8:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003fe2:	4e12      	ldr	r6, [pc, #72]	@ (800402c <BSP_RADIO_Init+0x7c>)
 8003fe4:	a901      	add	r1, sp, #4
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f001 fa04 	bl	80053f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003fec:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8003ff0:	9701      	str	r7, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003ff2:	a901      	add	r1, sp, #4
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f001 f9fd 	bl	80053f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003ffa:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8003ffc:	a901      	add	r1, sp, #4
 8003ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004002:	f001 f9f7 	bl	80053f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004006:	4622      	mov	r2, r4
 8004008:	4639      	mov	r1, r7
 800400a:	4630      	mov	r0, r6
 800400c:	f001 fb42 	bl	8005694 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004010:	4622      	mov	r2, r4
 8004012:	4629      	mov	r1, r5
 8004014:	4630      	mov	r0, r6
 8004016:	f001 fb3d 	bl	8005694 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800401a:	4622      	mov	r2, r4
 800401c:	4629      	mov	r1, r5
 800401e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004022:	f001 fb37 	bl	8005694 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8004026:	4620      	mov	r0, r4
 8004028:	b007      	add	sp, #28
 800402a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402c:	48000800 	.word	0x48000800

08004030 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8004030:	b510      	push	{r4, lr}
  switch (Config)
 8004032:	2803      	cmp	r0, #3
 8004034:	d815      	bhi.n	8004062 <BSP_RADIO_ConfigRFSwitch+0x32>
 8004036:	e8df f000 	tbb	[pc, r0]
 800403a:	1602      	.short	0x1602
 800403c:	3c29      	.short	0x3c29
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800403e:	2200      	movs	r2, #0
 8004040:	2110      	movs	r1, #16
 8004042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004046:	f001 fb25 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800404a:	4c23      	ldr	r4, [pc, #140]	@ (80040d8 <BSP_RADIO_ConfigRFSwitch+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	2110      	movs	r1, #16
 8004050:	4620      	mov	r0, r4
 8004052:	f001 fb1f 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004056:	2200      	movs	r2, #0
 8004058:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800405c:	4620      	mov	r0, r4
 800405e:	f001 fb19 	bl	8005694 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8004062:	2000      	movs	r0, #0
 8004064:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8004066:	2201      	movs	r2, #1
 8004068:	2110      	movs	r1, #16
 800406a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800406e:	f001 fb11 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004072:	4c19      	ldr	r4, [pc, #100]	@ (80040d8 <BSP_RADIO_ConfigRFSwitch+0xa8>)
 8004074:	2201      	movs	r2, #1
 8004076:	2110      	movs	r1, #16
 8004078:	4620      	mov	r0, r4
 800407a:	f001 fb0b 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800407e:	2200      	movs	r2, #0
 8004080:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004084:	4620      	mov	r0, r4
 8004086:	f001 fb05 	bl	8005694 <HAL_GPIO_WritePin>
      break;
 800408a:	e7ea      	b.n	8004062 <BSP_RADIO_ConfigRFSwitch+0x32>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800408c:	2201      	movs	r2, #1
 800408e:	2110      	movs	r1, #16
 8004090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004094:	f001 fafe 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004098:	4c0f      	ldr	r4, [pc, #60]	@ (80040d8 <BSP_RADIO_ConfigRFSwitch+0xa8>)
 800409a:	2201      	movs	r2, #1
 800409c:	2110      	movs	r1, #16
 800409e:	4620      	mov	r0, r4
 80040a0:	f001 faf8 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80040a4:	2201      	movs	r2, #1
 80040a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040aa:	4620      	mov	r0, r4
 80040ac:	f001 faf2 	bl	8005694 <HAL_GPIO_WritePin>
      break;
 80040b0:	e7d7      	b.n	8004062 <BSP_RADIO_ConfigRFSwitch+0x32>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80040b2:	2201      	movs	r2, #1
 80040b4:	2110      	movs	r1, #16
 80040b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040ba:	f001 faeb 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80040be:	4c06      	ldr	r4, [pc, #24]	@ (80040d8 <BSP_RADIO_ConfigRFSwitch+0xa8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	2110      	movs	r1, #16
 80040c4:	4620      	mov	r0, r4
 80040c6:	f001 fae5 	bl	8005694 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80040ca:	2201      	movs	r2, #1
 80040cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040d0:	4620      	mov	r0, r4
 80040d2:	f001 fadf 	bl	8005694 <HAL_GPIO_WritePin>
      break;
 80040d6:	e7c4      	b.n	8004062 <BSP_RADIO_ConfigRFSwitch+0x32>
 80040d8:	48000800 	.word	0x48000800

080040dc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80040dc:	2000      	movs	r0, #0
 80040de:	4770      	bx	lr

080040e0 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80040e0:	2001      	movs	r0, #1
 80040e2:	4770      	bx	lr

080040e4 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80040e4:	2001      	movs	r0, #1
 80040e6:	4770      	bx	lr

080040e8 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80040e8:	b908      	cbnz	r0, 80040ee <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80040ea:	200f      	movs	r0, #15
 80040ec:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80040ee:	2016      	movs	r0, #22
  }

  return ret;
}
 80040f0:	4770      	bx	lr

080040f2 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80040f2:	4770      	bx	lr

080040f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f6:	2003      	movs	r0, #3
 80040f8:	f000 fd76 	bl	8004be8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040fc:	f001 fc62 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <HAL_Init+0x28>)
 8004102:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004104:	200f      	movs	r0, #15
 8004106:	f7fd faa9 	bl	800165c <HAL_InitTick>
 800410a:	b110      	cbz	r0, 8004112 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800410c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800410e:	4620      	mov	r0, r4
 8004110:	bd10      	pop	{r4, pc}
 8004112:	4604      	mov	r4, r0
    HAL_MspInit();
 8004114:	f7fd f97a 	bl	800140c <HAL_MspInit>
 8004118:	e7f9      	b.n	800410e <HAL_Init+0x1a>
 800411a:	bf00      	nop
 800411c:	2000009c 	.word	0x2000009c

08004120 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004120:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004124:	6913      	ldr	r3, [r2, #16]
 8004126:	f023 0302 	bic.w	r3, r3, #2
 800412a:	6113      	str	r3, [r2, #16]
}
 800412c:	4770      	bx	lr

0800412e <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800412e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004132:	6913      	ldr	r3, [r2, #16]
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	6113      	str	r3, [r2, #16]
}
 800413a:	4770      	bx	lr

0800413c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 800413c:	4b01      	ldr	r3, [pc, #4]	@ (8004144 <HAL_GetUIDw0+0x8>)
 800413e:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 8004142:	4770      	bx	lr
 8004144:	1fff7000 	.word	0x1fff7000

08004148 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8004148:	4b01      	ldr	r3, [pc, #4]	@ (8004150 <HAL_GetUIDw1+0x8>)
 800414a:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 800414e:	4770      	bx	lr
 8004150:	1fff7000 	.word	0x1fff7000

08004154 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8004154:	4b01      	ldr	r3, [pc, #4]	@ (800415c <HAL_GetUIDw2+0x8>)
 8004156:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 800415a:	4770      	bx	lr
 800415c:	1fff7000 	.word	0x1fff7000

08004160 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004160:	4a02      	ldr	r2, [pc, #8]	@ (800416c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004162:	6853      	ldr	r3, [r2, #4]
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 800416a:	4770      	bx	lr
 800416c:	e0042000 	.word	0xe0042000

08004170 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004170:	4a02      	ldr	r2, [pc, #8]	@ (800417c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8004172:	6853      	ldr	r3, [r2, #4]
 8004174:	f023 0302 	bic.w	r3, r3, #2
 8004178:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 800417a:	4770      	bx	lr
 800417c:	e0042000 	.word	0xe0042000

08004180 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004180:	4a02      	ldr	r2, [pc, #8]	@ (800418c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8004182:	6853      	ldr	r3, [r2, #4]
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 800418a:	4770      	bx	lr
 800418c:	e0042000 	.word	0xe0042000

08004190 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004190:	b530      	push	{r4, r5, lr}
 8004192:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004194:	2300      	movs	r3, #0
 8004196:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004198:	2800      	cmp	r0, #0
 800419a:	f000 8106 	beq.w	80043aa <HAL_ADC_Init+0x21a>
 800419e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041a0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80041a2:	b1bb      	cbz	r3, 80041d4 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041a4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041a6:	6893      	ldr	r3, [r2, #8]
 80041a8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80041ac:	d11f      	bne.n	80041ee <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80041ae:	6893      	ldr	r3, [r2, #8]
 80041b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80041b4:	f023 0317 	bic.w	r3, r3, #23
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041be:	4b7c      	ldr	r3, [pc, #496]	@ (80043b0 <HAL_ADC_Init+0x220>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	4a7b      	ldr	r2, [pc, #492]	@ (80043b4 <HAL_ADC_Init+0x224>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	3301      	adds	r3, #1
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80041d2:	e009      	b.n	80041e8 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 80041d4:	f7fc fd14 	bl	8000c00 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80041d8:	2300      	movs	r3, #0
 80041da:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80041dc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80041e0:	e7e0      	b.n	80041a4 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80041e2:	9b01      	ldr	r3, [sp, #4]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80041e8:	9b01      	ldr	r3, [sp, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f9      	bne.n	80041e2 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ee:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041f0:	6893      	ldr	r3, [r2, #8]
 80041f2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80041f6:	f040 809a 	bne.w	800432e <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041fc:	f043 0310 	orr.w	r3, r3, #16
 8004200:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004202:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800420a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800420c:	6893      	ldr	r3, [r2, #8]
 800420e:	f013 0304 	ands.w	r3, r3, #4
 8004212:	d000      	beq.n	8004216 <HAL_ADC_Init+0x86>
 8004214:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004216:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004218:	f011 0f10 	tst.w	r1, #16
 800421c:	f040 80be 	bne.w	800439c <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004220:	2b00      	cmp	r3, #0
 8004222:	f040 80bb 	bne.w	800439c <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004226:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004228:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004232:	6893      	ldr	r3, [r2, #8]
 8004234:	f013 0f01 	tst.w	r3, #1
 8004238:	d14f      	bne.n	80042da <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800423a:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800423c:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800423e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004242:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004244:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004248:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800424a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800424e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004250:	b109      	cbz	r1, 8004256 <HAL_ADC_Init+0xc6>
 8004252:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004256:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8004258:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800425a:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800425c:	6921      	ldr	r1, [r4, #16]
 800425e:	2900      	cmp	r1, #0
 8004260:	db67      	blt.n	8004332 <HAL_ADC_Init+0x1a2>
 8004262:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8004266:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004268:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800426c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004270:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004274:	2901      	cmp	r1, #1
 8004276:	d05f      	beq.n	8004338 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004278:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800427a:	b121      	cbz	r1, 8004286 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800427c:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8004280:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004282:	4329      	orrs	r1, r5
 8004284:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004286:	68d1      	ldr	r1, [r2, #12]
 8004288:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 800428c:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 8004290:	4319      	orrs	r1, r3
 8004292:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800429a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800429c:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800429e:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 80042a2:	2901      	cmp	r1, #1
 80042a4:	d055      	beq.n	8004352 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80042a6:	6821      	ldr	r1, [r4, #0]
 80042a8:	690d      	ldr	r5, [r1, #16]
 80042aa:	4b43      	ldr	r3, [pc, #268]	@ (80043b8 <HAL_ADC_Init+0x228>)
 80042ac:	402b      	ands	r3, r5
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80042b8:	d00f      	beq.n	80042da <HAL_ADC_Init+0x14a>
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d00c      	beq.n	80042da <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80042c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042c4:	d009      	beq.n	80042da <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80042c6:	493d      	ldr	r1, [pc, #244]	@ (80043bc <HAL_ADC_Init+0x22c>)
 80042c8:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 80042cc:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 80042d0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80042da:	6821      	ldr	r1, [r4, #0]
 80042dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80042de:	694a      	ldr	r2, [r1, #20]
 80042e0:	f022 0207 	bic.w	r2, r2, #7
 80042e4:	4313      	orrs	r3, r2
 80042e6:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80042ec:	6953      	ldr	r3, [r2, #20]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80042f6:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80042f8:	6923      	ldr	r3, [r4, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d133      	bne.n	8004366 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004302:	f063 030f 	orn	r3, r3, #15
 8004306:	6293      	str	r3, [r2, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004308:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8004310:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004312:	429a      	cmp	r2, r3
 8004314:	d039      	beq.n	800438a <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004318:	f023 0312 	bic.w	r3, r3, #18
 800431c:	f043 0310 	orr.w	r3, r3, #16
 8004320:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004322:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800432a:	2001      	movs	r0, #1
 800432c:	e03b      	b.n	80043a6 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800432e:	2000      	movs	r0, #0
 8004330:	e76c      	b.n	800420c <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004332:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004336:	e796      	b.n	8004266 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004338:	b915      	cbnz	r5, 8004340 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800433a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433e:	e79b      	b.n	8004278 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004340:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004342:	f041 0120 	orr.w	r1, r1, #32
 8004346:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004348:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800434a:	f041 0101 	orr.w	r1, r1, #1
 800434e:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8004350:	e792      	b.n	8004278 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8004352:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004354:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8004356:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004358:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 800435a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800435c:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800435e:	431a      	orrs	r2, r3
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	e79f      	b.n	80042a6 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800436a:	d1cd      	bne.n	8004308 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 800436c:	6821      	ldr	r1, [r4, #0]
 800436e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004370:	69e3      	ldr	r3, [r4, #28]
 8004372:	3b01      	subs	r3, #1
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	f003 031c 	and.w	r3, r3, #28
 800437a:	f06f 020f 	mvn.w	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004384:	4313      	orrs	r3, r2
 8004386:	628b      	str	r3, [r1, #40]	@ 0x28
 8004388:	e7be      	b.n	8004308 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 800438a:	2300      	movs	r3, #0
 800438c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800438e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004390:	f023 0303 	bic.w	r3, r3, #3
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	65a3      	str	r3, [r4, #88]	@ 0x58
 800439a:	e004      	b.n	80043a6 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800439e:	f043 0310 	orr.w	r3, r3, #16
 80043a2:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80043a4:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80043a6:	b003      	add	sp, #12
 80043a8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
 80043ac:	e7fb      	b.n	80043a6 <HAL_ADC_Init+0x216>
 80043ae:	bf00      	nop
 80043b0:	2000009c 	.word	0x2000009c
 80043b4:	053e2d63 	.word	0x053e2d63
 80043b8:	1ffffc02 	.word	0x1ffffc02
 80043bc:	40012000 	.word	0x40012000

080043c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	4604      	mov	r4, r0
 80043c4:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80043c6:	6946      	ldr	r6, [r0, #20]
 80043c8:	2e08      	cmp	r6, #8
 80043ca:	d005      	beq.n	80043d8 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80043cc:	6803      	ldr	r3, [r0, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f013 0f01 	tst.w	r3, #1
 80043d4:	d11e      	bne.n	8004414 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80043d6:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80043d8:	f7fd f942 	bl	8001660 <HAL_GetTick>
 80043dc:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4232      	tst	r2, r6
 80043e4:	d11c      	bne.n	8004420 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80043ea:	d0f8      	beq.n	80043de <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80043ec:	f7fd f938 	bl	8001660 <HAL_GetTick>
 80043f0:	1bc3      	subs	r3, r0, r7
 80043f2:	42ab      	cmp	r3, r5
 80043f4:	d801      	bhi.n	80043fa <HAL_ADC_PollForConversion+0x3a>
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	d1f1      	bne.n	80043de <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4233      	tst	r3, r6
 8004400:	d1ed      	bne.n	80043de <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004402:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800440a:	2300      	movs	r3, #0
 800440c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 8004410:	2003      	movs	r0, #3
 8004412:	e028      	b.n	8004466 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004414:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004416:	f043 0320 	orr.w	r3, r3, #32
 800441a:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 800441c:	2001      	movs	r0, #1
 800441e:	e022      	b.n	8004466 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004420:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004426:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800442e:	d115      	bne.n	800445c <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004430:	7ea2      	ldrb	r2, [r4, #26]
 8004432:	b99a      	cbnz	r2, 800445c <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f012 0f08 	tst.w	r2, #8
 800443a:	d00f      	beq.n	800445c <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	f012 0f04 	tst.w	r2, #4
 8004442:	d111      	bne.n	8004468 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	f022 020c 	bic.w	r2, r2, #12
 800444a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800444c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800444e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800445c:	7e20      	ldrb	r0, [r4, #24]
 800445e:	b960      	cbnz	r0, 800447a <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	220c      	movs	r2, #12
 8004464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004468:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800446a:	f043 0320 	orr.w	r3, r3, #32
 800446e:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004470:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8004478:	e7f0      	b.n	800445c <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800447a:	2000      	movs	r0, #0
 800447c:	e7f3      	b.n	8004466 <HAL_ADC_PollForConversion+0xa6>

0800447e <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800447e:	6803      	ldr	r3, [r0, #0]
 8004480:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8004482:	4770      	bx	lr

08004484 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004484:	b470      	push	{r4, r5, r6}
 8004486:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004488:	2200      	movs	r2, #0
 800448a:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800448c:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800448e:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8004492:	2a01      	cmp	r2, #1
 8004494:	f000 8103 	beq.w	800469e <HAL_ADC_ConfigChannel+0x21a>
 8004498:	4603      	mov	r3, r0
 800449a:	2201      	movs	r2, #1
 800449c:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044a0:	6802      	ldr	r2, [r0, #0]
 80044a2:	6890      	ldr	r0, [r2, #8]
 80044a4:	f010 0f04 	tst.w	r0, #4
 80044a8:	d00a      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80044ac:	f042 0220 	orr.w	r2, r2, #32
 80044b0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80044b2:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 80044ba:	b003      	add	sp, #12
 80044bc:	bc70      	pop	{r4, r5, r6}
 80044be:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80044c0:	6848      	ldr	r0, [r1, #4]
 80044c2:	2802      	cmp	r0, #2
 80044c4:	f000 809c 	beq.w	8004600 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044c8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 80044cc:	d027      	beq.n	800451e <HAL_ADC_ConfigChannel+0x9a>
 80044ce:	4d75      	ldr	r5, [pc, #468]	@ (80046a4 <HAL_ADC_ConfigChannel+0x220>)
 80044d0:	42ac      	cmp	r4, r5
 80044d2:	d024      	beq.n	800451e <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80044d4:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80044d6:	f000 001f 	and.w	r0, r0, #31
 80044da:	250f      	movs	r5, #15
 80044dc:	4085      	lsls	r5, r0
 80044de:	ea24 0505 	bic.w	r5, r4, r5
 80044e2:	680c      	ldr	r4, [r1, #0]
 80044e4:	f3c4 0611 	ubfx	r6, r4, #0, #18
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	d131      	bne.n	8004550 <HAL_ADC_ConfigChannel+0xcc>
 80044ec:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80044f0:	4084      	lsls	r4, r0
 80044f2:	432c      	orrs	r4, r5
 80044f4:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80044f6:	684c      	ldr	r4, [r1, #4]
 80044f8:	08a0      	lsrs	r0, r4, #2
 80044fa:	3001      	adds	r0, #1
 80044fc:	69dd      	ldr	r5, [r3, #28]
 80044fe:	42a8      	cmp	r0, r5
 8004500:	d813      	bhi.n	800452a <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004502:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8004504:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8004506:	f004 041f 	and.w	r4, r4, #31
 800450a:	260f      	movs	r6, #15
 800450c:	40a6      	lsls	r6, r4
 800450e:	ea20 0006 	bic.w	r0, r0, r6
 8004512:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8004516:	40a5      	lsls	r5, r4
 8004518:	4328      	orrs	r0, r5
 800451a:	6290      	str	r0, [r2, #40]	@ 0x28
}
 800451c:	e005      	b.n	800452a <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800451e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004520:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8004522:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8004526:	4320      	orrs	r0, r4
 8004528:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800452a:	681c      	ldr	r4, [r3, #0]
 800452c:	680d      	ldr	r5, [r1, #0]
 800452e:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8004530:	6960      	ldr	r0, [r4, #20]
 8004532:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8004536:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800453a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800453e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004542:	4302      	orrs	r2, r0
 8004544:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004546:	680a      	ldr	r2, [r1, #0]
 8004548:	2a00      	cmp	r2, #0
 800454a:	db09      	blt.n	8004560 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800454c:	2000      	movs	r0, #0
 800454e:	e7b1      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004554:	b114      	cbz	r4, 800455c <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004556:	fab4 f484 	clz	r4, r4
 800455a:	e7c9      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 800455c:	2420      	movs	r4, #32
 800455e:	e7c7      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004560:	4951      	ldr	r1, [pc, #324]	@ (80046a8 <HAL_ADC_ConfigChannel+0x224>)
 8004562:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 8004566:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800456a:	4c50      	ldr	r4, [pc, #320]	@ (80046ac <HAL_ADC_ConfigChannel+0x228>)
 800456c:	42a2      	cmp	r2, r4
 800456e:	d007      	beq.n	8004580 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004570:	4c4f      	ldr	r4, [pc, #316]	@ (80046b0 <HAL_ADC_ConfigChannel+0x22c>)
 8004572:	42a2      	cmp	r2, r4
 8004574:	d026      	beq.n	80045c4 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004576:	4c4f      	ldr	r4, [pc, #316]	@ (80046b4 <HAL_ADC_ConfigChannel+0x230>)
 8004578:	42a2      	cmp	r2, r4
 800457a:	d032      	beq.n	80045e2 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800457c:	2000      	movs	r0, #0
 800457e:	e799      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004580:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8004584:	d1f4      	bne.n	8004570 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004586:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800458a:	4847      	ldr	r0, [pc, #284]	@ (80046a8 <HAL_ADC_ConfigChannel+0x224>)
 800458c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8004590:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004594:	4311      	orrs	r1, r2
 8004596:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800459a:	4a47      	ldr	r2, [pc, #284]	@ (80046b8 <HAL_ADC_ConfigChannel+0x234>)
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	0992      	lsrs	r2, r2, #6
 80045a0:	4946      	ldr	r1, [pc, #280]	@ (80046bc <HAL_ADC_ConfigChannel+0x238>)
 80045a2:	fba1 1202 	umull	r1, r2, r1, r2
 80045a6:	0992      	lsrs	r2, r2, #6
 80045a8:	3201      	adds	r2, #1
 80045aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80045ae:	0092      	lsls	r2, r2, #2
 80045b0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80045b2:	e002      	b.n	80045ba <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 80045b4:	9a01      	ldr	r2, [sp, #4]
 80045b6:	3a01      	subs	r2, #1
 80045b8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80045ba:	9a01      	ldr	r2, [sp, #4]
 80045bc:	2a00      	cmp	r2, #0
 80045be:	d1f9      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c0:	2000      	movs	r0, #0
 80045c2:	e777      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045c4:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 80045c8:	d1d5      	bne.n	8004576 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045ca:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 80045ce:	4836      	ldr	r0, [pc, #216]	@ (80046a8 <HAL_ADC_ConfigChannel+0x224>)
 80045d0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 80045d4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80045d8:	4311      	orrs	r1, r2
 80045da:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045de:	2000      	movs	r0, #0
}
 80045e0:	e768      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045e2:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 80045e6:	d158      	bne.n	800469a <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045e8:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045ec:	482e      	ldr	r0, [pc, #184]	@ (80046a8 <HAL_ADC_ConfigChannel+0x224>)
 80045ee:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80045f2:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80045f6:	430a      	orrs	r2, r1
 80045f8:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045fc:	2000      	movs	r0, #0
}
 80045fe:	e759      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004600:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8004604:	d002      	beq.n	800460c <HAL_ADC_ConfigChannel+0x188>
 8004606:	4827      	ldr	r0, [pc, #156]	@ (80046a4 <HAL_ADC_ConfigChannel+0x220>)
 8004608:	4284      	cmp	r4, r0
 800460a:	d106      	bne.n	800461a <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800460c:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800460e:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8004610:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8004614:	ea20 0004 	bic.w	r0, r0, r4
 8004618:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800461a:	680a      	ldr	r2, [r1, #0]
 800461c:	2a00      	cmp	r2, #0
 800461e:	db01      	blt.n	8004624 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004620:	2000      	movs	r0, #0
 8004622:	e747      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004624:	4920      	ldr	r1, [pc, #128]	@ (80046a8 <HAL_ADC_ConfigChannel+0x224>)
 8004626:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800462a:	4820      	ldr	r0, [pc, #128]	@ (80046ac <HAL_ADC_ConfigChannel+0x228>)
 800462c:	4282      	cmp	r2, r0
 800462e:	d007      	beq.n	8004640 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004630:	481f      	ldr	r0, [pc, #124]	@ (80046b0 <HAL_ADC_ConfigChannel+0x22c>)
 8004632:	4282      	cmp	r2, r0
 8004634:	d013      	beq.n	800465e <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004636:	481f      	ldr	r0, [pc, #124]	@ (80046b4 <HAL_ADC_ConfigChannel+0x230>)
 8004638:	4282      	cmp	r2, r0
 800463a:	d01f      	beq.n	800467c <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463c:	2000      	movs	r0, #0
 800463e:	e739      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004640:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004644:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 8004648:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 800464c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8004650:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004654:	4311      	orrs	r1, r2
 8004656:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800465a:	2000      	movs	r0, #0
}
 800465c:	e72a      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800465e:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004662:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 8004666:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 800466a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 800466e:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004678:	2000      	movs	r0, #0
}
 800467a:	e71b      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800467c:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004680:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 8004684:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8004688:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 800468c:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8004690:	430a      	orrs	r2, r1
 8004692:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004696:	2000      	movs	r0, #0
}
 8004698:	e70c      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
 800469a:	2000      	movs	r0, #0
 800469c:	e70a      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800469e:	2002      	movs	r0, #2
 80046a0:	e70b      	b.n	80044ba <HAL_ADC_ConfigChannel+0x36>
 80046a2:	bf00      	nop
 80046a4:	80000004 	.word	0x80000004
 80046a8:	40012000 	.word	0x40012000
 80046ac:	b0001000 	.word	0xb0001000
 80046b0:	b8004000 	.word	0xb8004000
 80046b4:	b4002000 	.word	0xb4002000
 80046b8:	2000009c 	.word	0x2000009c
 80046bc:	053e2d63 	.word	0x053e2d63

080046c0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80046c0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046c2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	f012 0f04 	tst.w	r2, #4
 80046ca:	d02a      	beq.n	8004722 <ADC_ConversionStop+0x62>
 80046cc:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	f012 0f02 	tst.w	r2, #2
 80046d4:	d107      	bne.n	80046e6 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046dc:	f022 0217 	bic.w	r2, r2, #23
 80046e0:	f042 0210 	orr.w	r2, r2, #16
 80046e4:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046e6:	f7fc ffbb 	bl	8001660 <HAL_GetTick>
 80046ea:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f013 0f04 	tst.w	r3, #4
 80046f4:	d013      	beq.n	800471e <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046f6:	f7fc ffb3 	bl	8001660 <HAL_GetTick>
 80046fa:	1b43      	subs	r3, r0, r5
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d9f5      	bls.n	80046ec <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f013 0f04 	tst.w	r3, #4
 8004708:	d0f0      	beq.n	80046ec <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800470c:	f043 0310 	orr.w	r3, r3, #16
 8004710:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004712:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 800471a:	2001      	movs	r0, #1
 800471c:	e002      	b.n	8004724 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800471e:	2000      	movs	r0, #0
 8004720:	e000      	b.n	8004724 <ADC_ConversionStop+0x64>
 8004722:	2000      	movs	r0, #0
}
 8004724:	bd38      	pop	{r3, r4, r5, pc}
	...

08004728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004728:	b530      	push	{r4, r5, lr}
 800472a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800472c:	2300      	movs	r3, #0
 800472e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004730:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	f012 0f01 	tst.w	r2, #1
 8004738:	d15b      	bne.n	80047f2 <ADC_Enable+0xca>
 800473a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800473c:	6899      	ldr	r1, [r3, #8]
 800473e:	4a2e      	ldr	r2, [pc, #184]	@ (80047f8 <ADC_Enable+0xd0>)
 8004740:	4211      	tst	r1, r2
 8004742:	d117      	bne.n	8004774 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800474a:	f022 0217 	bic.w	r2, r2, #23
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004754:	4b29      	ldr	r3, [pc, #164]	@ (80047fc <ADC_Enable+0xd4>)
 8004756:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800475a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800475e:	d019      	beq.n	8004794 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004760:	4b27      	ldr	r3, [pc, #156]	@ (8004800 <ADC_Enable+0xd8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	099b      	lsrs	r3, r3, #6
 8004766:	4a27      	ldr	r2, [pc, #156]	@ (8004804 <ADC_Enable+0xdc>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	099b      	lsrs	r3, r3, #6
 800476e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004770:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004772:	e00c      	b.n	800478e <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004774:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004776:	f043 0310 	orr.w	r3, r3, #16
 800477a:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8004784:	2001      	movs	r0, #1
 8004786:	e035      	b.n	80047f4 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800478e:	9b01      	ldr	r3, [sp, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f9      	bne.n	8004788 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004794:	7e63      	ldrb	r3, [r4, #25]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800479a:	2000      	movs	r0, #0
 800479c:	e02a      	b.n	80047f4 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800479e:	f7fc ff5f 	bl	8001660 <HAL_GetTick>
 80047a2:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	f012 0f01 	tst.w	r2, #1
 80047ac:	d11f      	bne.n	80047ee <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	f012 0f01 	tst.w	r2, #1
 80047b4:	d107      	bne.n	80047c6 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80047bc:	f022 0217 	bic.w	r2, r2, #23
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047c6:	f7fc ff4b 	bl	8001660 <HAL_GetTick>
 80047ca:	1b40      	subs	r0, r0, r5
 80047cc:	2802      	cmp	r0, #2
 80047ce:	d9e9      	bls.n	80047a4 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f013 0f01 	tst.w	r3, #1
 80047d8:	d1e4      	bne.n	80047a4 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047dc:	f043 0310 	orr.w	r3, r3, #16
 80047e0:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 80047ea:	2001      	movs	r0, #1
 80047ec:	e002      	b.n	80047f4 <ADC_Enable+0xcc>
  return HAL_OK;
 80047ee:	2000      	movs	r0, #0
 80047f0:	e000      	b.n	80047f4 <ADC_Enable+0xcc>
 80047f2:	2000      	movs	r0, #0
}
 80047f4:	b003      	add	sp, #12
 80047f6:	bd30      	pop	{r4, r5, pc}
 80047f8:	80000017 	.word	0x80000017
 80047fc:	40012000 	.word	0x40012000
 8004800:	2000009c 	.word	0x2000009c
 8004804:	053e2d63 	.word	0x053e2d63

08004808 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004808:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f013 0f04 	tst.w	r3, #4
 8004810:	d128      	bne.n	8004864 <HAL_ADC_Start+0x5c>
{
 8004812:	b510      	push	{r4, lr}
 8004814:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8004816:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800481a:	2b01      	cmp	r3, #1
 800481c:	d024      	beq.n	8004868 <HAL_ADC_Start+0x60>
 800481e:	2301      	movs	r3, #1
 8004820:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8004824:	f7ff ff80 	bl	8004728 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004828:	b9c0      	cbnz	r0, 800485c <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800482a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800482c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004838:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800483a:	2300      	movs	r3, #0
 800483c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	211c      	movs	r1, #28
 8004842:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004844:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004848:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800484a:	6893      	ldr	r3, [r2, #8]
 800484c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004850:	f023 0317 	bic.w	r3, r3, #23
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	6093      	str	r3, [r2, #8]
}
 800485a:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 800485c:	2300      	movs	r3, #0
 800485e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8004862:	e7fa      	b.n	800485a <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8004864:	2002      	movs	r0, #2
}
 8004866:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8004868:	2002      	movs	r0, #2
 800486a:	e7f6      	b.n	800485a <HAL_ADC_Start+0x52>

0800486c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004870:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004872:	6893      	ldr	r3, [r2, #8]
 8004874:	f013 0302 	ands.w	r3, r3, #2
 8004878:	d000      	beq.n	800487c <ADC_Disable+0x10>
 800487a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800487c:	6891      	ldr	r1, [r2, #8]
 800487e:	f011 0f01 	tst.w	r1, #1
 8004882:	d039      	beq.n	80048f8 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8004884:	2b00      	cmp	r3, #0
 8004886:	d139      	bne.n	80048fc <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004888:	6893      	ldr	r3, [r2, #8]
 800488a:	f003 0305 	and.w	r3, r3, #5
 800488e:	2b01      	cmp	r3, #1
 8004890:	d009      	beq.n	80048a6 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004892:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004894:	f043 0310 	orr.w	r3, r3, #16
 8004898:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 80048a2:	2001      	movs	r0, #1
 80048a4:	e029      	b.n	80048fa <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80048a6:	6893      	ldr	r3, [r2, #8]
 80048a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048ac:	f023 0317 	bic.w	r3, r3, #23
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	2203      	movs	r2, #3
 80048ba:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048bc:	f7fc fed0 	bl	8001660 <HAL_GetTick>
 80048c0:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f013 0f01 	tst.w	r3, #1
 80048ca:	d013      	beq.n	80048f4 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048cc:	f7fc fec8 	bl	8001660 <HAL_GetTick>
 80048d0:	1b40      	subs	r0, r0, r5
 80048d2:	2802      	cmp	r0, #2
 80048d4:	d9f5      	bls.n	80048c2 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f013 0f01 	tst.w	r3, #1
 80048de:	d0f0      	beq.n	80048c2 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048e2:	f043 0310 	orr.w	r3, r3, #16
 80048e6:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 80048f0:	2001      	movs	r0, #1
 80048f2:	e002      	b.n	80048fa <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048f4:	2000      	movs	r0, #0
 80048f6:	e000      	b.n	80048fa <ADC_Disable+0x8e>
 80048f8:	2000      	movs	r0, #0
}
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80048fc:	2000      	movs	r0, #0
 80048fe:	e7fc      	b.n	80048fa <ADC_Disable+0x8e>

08004900 <HAL_ADC_DeInit>:
{
 8004900:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8004902:	2800      	cmp	r0, #0
 8004904:	d056      	beq.n	80049b4 <HAL_ADC_DeInit+0xb4>
 8004906:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004908:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004910:	f7ff fed6 	bl	80046c0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004914:	4606      	mov	r6, r0
 8004916:	2800      	cmp	r0, #0
 8004918:	d03d      	beq.n	8004996 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	6853      	ldr	r3, [r2, #4]
 800491e:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	f240 329f 	movw	r2, #927	@ 0x39f
 800492e:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	68d1      	ldr	r1, [r2, #12]
 8004934:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <HAL_ADC_DeInit+0xb8>)
 8004936:	400b      	ands	r3, r1
 8004938:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	6913      	ldr	r3, [r2, #16]
 800493e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004942:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	6953      	ldr	r3, [r2, #20]
 8004948:	f023 0307 	bic.w	r3, r3, #7
 800494c:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	6a13      	ldr	r3, [r2, #32]
 8004952:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8004956:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800495c:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8004960:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004966:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800496a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004970:	2500      	movs	r5, #0
 8004972:	629d      	str	r5, [r3, #40]	@ 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004974:	4a11      	ldr	r2, [pc, #68]	@ (80049bc <HAL_ADC_DeInit+0xbc>)
 8004976:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 800497a:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800497e:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 8004982:	4620      	mov	r0, r4
 8004984:	f7fc f952 	bl	8000c2c <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004988:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800498a:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800498c:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800498e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8004992:	4630      	mov	r0, r6
 8004994:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff ff68 	bl	800486c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800499c:	4606      	mov	r6, r0
 800499e:	b908      	cbnz	r0, 80049a4 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80049a0:	2301      	movs	r3, #1
 80049a2:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80049a4:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80049a6:	6893      	ldr	r3, [r2, #8]
 80049a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80049ac:	f023 0317 	bic.w	r3, r3, #23
 80049b0:	6093      	str	r3, [r2, #8]
}
 80049b2:	e7b2      	b.n	800491a <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80049b4:	2601      	movs	r6, #1
 80049b6:	e7ec      	b.n	8004992 <HAL_ADC_DeInit+0x92>
 80049b8:	833e0200 	.word	0x833e0200
 80049bc:	40012000 	.word	0x40012000

080049c0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80049c0:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d019      	beq.n	80049fc <HAL_ADC_Stop+0x3c>
{
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80049cc:	2301      	movs	r3, #1
 80049ce:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80049d2:	f7ff fe75 	bl	80046c0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80049d6:	b118      	cbz	r0, 80049e0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80049d8:	2300      	movs	r3, #0
 80049da:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80049de:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff ff43 	bl	800486c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d1f6      	bne.n	80049d8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80049ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80049fa:	e7ed      	b.n	80049d8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80049fc:	2002      	movs	r0, #2
}
 80049fe:	4770      	bx	lr

08004a00 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a02:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004a08:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f000 8094 	beq.w	8004b3a <HAL_ADCEx_Calibration_Start+0x13a>
 8004a12:	4604      	mov	r4, r0
 8004a14:	2301      	movs	r3, #1
 8004a16:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a1a:	f7ff ff27 	bl	800486c <ADC_Disable>
 8004a1e:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a20:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	f012 0201 	ands.w	r2, r2, #1
 8004a28:	d009      	beq.n	8004a3e <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a2c:	f043 0310 	orr.w	r3, r3, #16
 8004a30:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a32:	2300      	movs	r3, #0
 8004a34:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 8004a38:	4628      	mov	r0, r5
 8004a3a:	b003      	add	sp, #12
 8004a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004a3e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004a40:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 8004a44:	f041 0102 	orr.w	r1, r1, #2
 8004a48:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004a4a:	68de      	ldr	r6, [r3, #12]
 8004a4c:	f426 46ff 	bic.w	r6, r6, #32640	@ 0x7f80
 8004a50:	f026 067c 	bic.w	r6, r6, #124	@ 0x7c
 8004a54:	0436      	lsls	r6, r6, #16
 8004a56:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8004a5e:	f021 0103 	bic.w	r1, r1, #3
 8004a62:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004a64:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004a66:	e005      	b.n	8004a74 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004a68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004a70:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004a72:	3201      	adds	r2, #1
 8004a74:	2a07      	cmp	r2, #7
 8004a76:	d81e      	bhi.n	8004ab6 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8004a78:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004a7a:	688b      	ldr	r3, [r1, #8]
 8004a7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a80:	f023 0317 	bic.w	r3, r3, #23
 8004a84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a88:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a8a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	daea      	bge.n	8004a68 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8004a92:	9b01      	ldr	r3, [sp, #4]
 8004a94:	3301      	adds	r3, #1
 8004a96:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a98:	9b01      	ldr	r3, [sp, #4]
 8004a9a:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004a9e:	d3f4      	bcc.n	8004a8a <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8004aa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004aa2:	f023 0312 	bic.w	r3, r3, #18
 8004aa6:	f043 0310 	orr.w	r3, r3, #16
 8004aaa:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8004aac:	2300      	movs	r3, #0
 8004aae:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 8004ab2:	2501      	movs	r5, #1
 8004ab4:	e7c0      	b.n	8004a38 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8004ab6:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8004aba:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004abc:	6893      	ldr	r3, [r2, #8]
 8004abe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ac2:	f023 0317 	bic.w	r3, r3, #23
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004acc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004ace:	f8d2 30b4 	ldr.w	r3, [r2, #180]	@ 0xb4
 8004ad2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004ad6:	4318      	orrs	r0, r3
 8004ad8:	f8c2 00b4 	str.w	r0, [r2, #180]	@ 0xb4
    LL_ADC_Disable(hadc->Instance);
 8004adc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004ade:	6893      	ldr	r3, [r2, #8]
 8004ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ae4:	f023 0317 	bic.w	r3, r3, #23
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004aee:	f7fc fdb7 	bl	8001660 <HAL_GetTick>
 8004af2:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004af4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	f012 0f01 	tst.w	r2, #1
 8004afc:	d109      	bne.n	8004b12 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	4332      	orrs	r2, r6
 8004b02:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004b04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004b10:	e78f      	b.n	8004a32 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b12:	f7fc fda5 	bl	8001660 <HAL_GetTick>
 8004b16:	1bc3      	subs	r3, r0, r7
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d9eb      	bls.n	8004af4 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f013 0f01 	tst.w	r3, #1
 8004b24:	d0e6      	beq.n	8004af4 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b28:	f043 0310 	orr.w	r3, r3, #16
 8004b2c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b2e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8004b36:	2501      	movs	r5, #1
 8004b38:	e77e      	b.n	8004a38 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8004b3a:	2502      	movs	r5, #2
 8004b3c:	e77c      	b.n	8004a38 <HAL_ADCEx_Calibration_Start+0x38>
	...

08004b40 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b40:	2800      	cmp	r0, #0
 8004b42:	db07      	blt.n	8004b54 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b44:	f000 021f 	and.w	r2, r0, #31
 8004b48:	0940      	lsrs	r0, r0, #5
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4093      	lsls	r3, r2
 8004b4e:	4a02      	ldr	r2, [pc, #8]	@ (8004b58 <__NVIC_EnableIRQ+0x18>)
 8004b50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	db0c      	blt.n	8004b7a <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b60:	f000 021f 	and.w	r2, r0, #31
 8004b64:	0940      	lsrs	r0, r0, #5
 8004b66:	2301      	movs	r3, #1
 8004b68:	4093      	lsls	r3, r2
 8004b6a:	3020      	adds	r0, #32
 8004b6c:	4a03      	ldr	r2, [pc, #12]	@ (8004b7c <__NVIC_DisableIRQ+0x20>)
 8004b6e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b76:	f3bf 8f6f 	isb	sy
}
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e100 	.word	0xe000e100

08004b80 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8004b80:	2800      	cmp	r0, #0
 8004b82:	db08      	blt.n	8004b96 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b84:	0109      	lsls	r1, r1, #4
 8004b86:	b2c9      	uxtb	r1, r1
 8004b88:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004b8c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004b90:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8004b94:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b96:	f000 000f 	and.w	r0, r0, #15
 8004b9a:	0109      	lsls	r1, r1, #4
 8004b9c:	b2c9      	uxtb	r1, r1
 8004b9e:	4b01      	ldr	r3, [pc, #4]	@ (8004ba4 <__NVIC_SetPriority+0x24>)
 8004ba0:	5419      	strb	r1, [r3, r0]
}
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed14 	.word	0xe000ed14

08004ba8 <NVIC_EncodePriority>:
{
 8004ba8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004baa:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bae:	f1c0 0c07 	rsb	ip, r0, #7
 8004bb2:	f1bc 0f04 	cmp.w	ip, #4
 8004bb6:	bf28      	it	cs
 8004bb8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bbc:	1d03      	adds	r3, r0, #4
 8004bbe:	2b06      	cmp	r3, #6
 8004bc0:	d90f      	bls.n	8004be2 <NVIC_EncodePriority+0x3a>
 8004bc2:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 3eff 	mov.w	lr, #4294967295
 8004bc8:	fa0e f00c 	lsl.w	r0, lr, ip
 8004bcc:	ea21 0100 	bic.w	r1, r1, r0
 8004bd0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd2:	fa0e fe03 	lsl.w	lr, lr, r3
 8004bd6:	ea22 020e 	bic.w	r2, r2, lr
}
 8004bda:	ea41 0002 	orr.w	r0, r1, r2
 8004bde:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be2:	2300      	movs	r3, #0
 8004be4:	e7ee      	b.n	8004bc4 <NVIC_EncodePriority+0x1c>
	...

08004be8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be8:	4a07      	ldr	r2, [pc, #28]	@ (8004c08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004bea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf4:	0200      	lsls	r0, r0, #8
 8004bf6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bfa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004c04:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c06:	4770      	bx	lr
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_NVIC_SetPriority+0x1c>)
 8004c12:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c14:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004c18:	f7ff ffc6 	bl	8004ba8 <NVIC_EncodePriority>
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7ff ffae 	bl	8004b80 <__NVIC_SetPriority>
}
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c2c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c2e:	f7ff ff87 	bl	8004b40 <__NVIC_EnableIRQ>
}
 8004c32:	bd08      	pop	{r3, pc}

08004c34 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c34:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c36:	f7ff ff91 	bl	8004b5c <__NVIC_DisableIRQ>
}
 8004c3a:	bd08      	pop	{r3, pc}

08004c3c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c3c:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c3e:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8004c40:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8004c44:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004c48:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004c4a:	b124      	cbz	r4, 8004c56 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c4c:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8004c4e:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8004c52:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c56:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004c58:	f004 0c1c 	and.w	ip, r4, #28
 8004c5c:	2401      	movs	r4, #1
 8004c5e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004c62:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8004c66:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c6a:	6804      	ldr	r4, [r0, #0]
 8004c6c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c6e:	6883      	ldr	r3, [r0, #8]
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d005      	beq.n	8004c80 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004c74:	6803      	ldr	r3, [r0, #0]
 8004c76:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004c78:	6803      	ldr	r3, [r0, #0]
 8004c7a:	60da      	str	r2, [r3, #12]
  }
}
 8004c7c:	bc10      	pop	{r4}
 8004c7e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004c80:	6803      	ldr	r3, [r0, #0]
 8004c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004c84:	6803      	ldr	r3, [r0, #0]
 8004c86:	60d9      	str	r1, [r3, #12]
 8004c88:	e7f8      	b.n	8004c7c <DMA_SetConfig+0x40>
	...

08004c8c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c8c:	6803      	ldr	r3, [r0, #0]
 8004c8e:	4a14      	ldr	r2, [pc, #80]	@ (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d816      	bhi.n	8004cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c94:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004c96:	f022 0203 	bic.w	r2, r2, #3
 8004c9a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004c9e:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8004ca2:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3b08      	subs	r3, #8
 8004ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004cb2:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	2201      	movs	r2, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8004cc0:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004cc2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004cc4:	f022 0103 	bic.w	r1, r2, #3
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004cca:	440a      	add	r2, r1
 8004ccc:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	3b08      	subs	r3, #8
 8004cd2:	4a04      	ldr	r2, [pc, #16]	@ (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	3307      	adds	r3, #7
 8004cdc:	e7e8      	b.n	8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004cde:	bf00      	nop
 8004ce0:	40020407 	.word	0x40020407
 8004ce4:	cccccccd 	.word	0xcccccccd
 8004ce8:	40020880 	.word	0x40020880
 8004cec:	4002081c 	.word	0x4002081c

08004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cf0:	6843      	ldr	r3, [r0, #4]
 8004cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cf6:	4a07      	ldr	r2, [pc, #28]	@ (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004cf8:	441a      	add	r2, r3
 8004cfa:	0092      	lsls	r2, r2, #2
 8004cfc:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cfe:	4a06      	ldr	r2, [pc, #24]	@ (8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004d00:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004d02:	3b01      	subs	r3, #1
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2201      	movs	r2, #1
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	1000823f 	.word	0x1000823f
 8004d18:	40020940 	.word	0x40020940

08004d1c <HAL_DMA_Init>:
  if (hdma == NULL)
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d05e      	beq.n	8004dde <HAL_DMA_Init+0xc2>
{
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d24:	6803      	ldr	r3, [r0, #0]
 8004d26:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <HAL_DMA_Init+0xc8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d840      	bhi.n	8004dae <HAL_DMA_Init+0x92>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004de8 <HAL_DMA_Init+0xcc>)
 8004d2e:	441a      	add	r2, r3
 8004d30:	492e      	ldr	r1, [pc, #184]	@ (8004dec <HAL_DMA_Init+0xd0>)
 8004d32:	fba1 1202 	umull	r1, r2, r1, r2
 8004d36:	0912      	lsrs	r2, r2, #4
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <HAL_DMA_Init+0xd4>)
 8004d3e:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d40:	2202      	movs	r2, #2
 8004d42:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	f36f 120e 	bfc	r2, #4, #11
 8004d4c:	601a      	str	r2, [r3, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004d4e:	6821      	ldr	r1, [r4, #0]
 8004d50:	680a      	ldr	r2, [r1, #0]
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	68e0      	ldr	r0, [r4, #12]
 8004d56:	4303      	orrs	r3, r0
 8004d58:	6920      	ldr	r0, [r4, #16]
 8004d5a:	4303      	orrs	r3, r0
 8004d5c:	6960      	ldr	r0, [r4, #20]
 8004d5e:	4303      	orrs	r3, r0
 8004d60:	69a0      	ldr	r0, [r4, #24]
 8004d62:	4303      	orrs	r3, r0
 8004d64:	69e0      	ldr	r0, [r4, #28]
 8004d66:	4303      	orrs	r3, r0
 8004d68:	6a20      	ldr	r0, [r4, #32]
 8004d6a:	4303      	orrs	r3, r0
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ff8b 	bl	8004c8c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d76:	68a3      	ldr	r3, [r4, #8]
 8004d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d7c:	d022      	beq.n	8004dc4 <HAL_DMA_Init+0xa8>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d7e:	6863      	ldr	r3, [r4, #4]
 8004d80:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d86:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d88:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004d8a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004d8c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d919      	bls.n	8004dca <HAL_DMA_Init+0xae>
    hdma->DMAmuxRequestGen = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004d9a:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d9c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9e:	2000      	movs	r0, #0
 8004da0:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8004da8:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004dac:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004dae:	4a11      	ldr	r2, [pc, #68]	@ (8004df4 <HAL_DMA_Init+0xd8>)
 8004db0:	441a      	add	r2, r3
 8004db2:	490e      	ldr	r1, [pc, #56]	@ (8004dec <HAL_DMA_Init+0xd0>)
 8004db4:	fba1 1202 	umull	r1, r2, r1, r2
 8004db8:	0912      	lsrs	r2, r2, #4
 8004dba:	0092      	lsls	r2, r2, #2
 8004dbc:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004df8 <HAL_DMA_Init+0xdc>)
 8004dc0:	6402      	str	r2, [r0, #64]	@ 0x40
 8004dc2:	e7bd      	b.n	8004d40 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6063      	str	r3, [r4, #4]
 8004dc8:	e7d9      	b.n	8004d7e <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f7ff ff90 	bl	8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dd0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dd8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	e7df      	b.n	8004d9e <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 8004dde:	2001      	movs	r0, #1
}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40020407 	.word	0x40020407
 8004de8:	bffdfff8 	.word	0xbffdfff8
 8004dec:	cccccccd 	.word	0xcccccccd
 8004df0:	40020000 	.word	0x40020000
 8004df4:	bffdfbf8 	.word	0xbffdfbf8
 8004df8:	40020400 	.word	0x40020400

08004dfc <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d04b      	beq.n	8004e98 <HAL_DMA_DeInit+0x9c>
{
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004e04:	6802      	ldr	r2, [r0, #0]
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e0e:	6802      	ldr	r2, [r0, #0]
 8004e10:	4b22      	ldr	r3, [pc, #136]	@ (8004e9c <HAL_DMA_DeInit+0xa0>)
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d82c      	bhi.n	8004e70 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e16:	4b22      	ldr	r3, [pc, #136]	@ (8004ea0 <HAL_DMA_DeInit+0xa4>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	4922      	ldr	r1, [pc, #136]	@ (8004ea4 <HAL_DMA_DeInit+0xa8>)
 8004e1c:	fba1 1303 	umull	r1, r3, r1, r3
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e26:	4b20      	ldr	r3, [pc, #128]	@ (8004ea8 <HAL_DMA_DeInit+0xac>)
 8004e28:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8004e2a:	2500      	movs	r5, #0
 8004e2c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e2e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e30:	f003 021c 	and.w	r2, r3, #28
 8004e34:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004e36:	2301      	movs	r3, #1
 8004e38:	4093      	lsls	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f7ff ff25 	bl	8004c8c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004e42:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004e44:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e46:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e48:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004e4a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d918      	bls.n	8004e86 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8004e54:	2000      	movs	r0, #0
 8004e56:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004e58:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e5a:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8004e5c:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004e5e:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004e60:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004e62:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e64:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004e66:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8004e6a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e70:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <HAL_DMA_DeInit+0xb0>)
 8004e72:	4413      	add	r3, r2
 8004e74:	490b      	ldr	r1, [pc, #44]	@ (8004ea4 <HAL_DMA_DeInit+0xa8>)
 8004e76:	fba1 1303 	umull	r1, r3, r1, r3
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <HAL_DMA_DeInit+0xb4>)
 8004e82:	6403      	str	r3, [r0, #64]	@ 0x40
 8004e84:	e7d1      	b.n	8004e2a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff ff32 	bl	8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e8c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004e8e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e92:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	e7dd      	b.n	8004e54 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004e98:	2001      	movs	r0, #1
}
 8004e9a:	4770      	bx	lr
 8004e9c:	40020407 	.word	0x40020407
 8004ea0:	bffdfff8 	.word	0xbffdfff8
 8004ea4:	cccccccd 	.word	0xcccccccd
 8004ea8:	40020000 	.word	0x40020000
 8004eac:	bffdfbf8 	.word	0xbffdfbf8
 8004eb0:	40020400 	.word	0x40020400

08004eb4 <HAL_DMA_Start_IT>:
{
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004eb8:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8004ebc:	2801      	cmp	r0, #1
 8004ebe:	d043      	beq.n	8004f48 <HAL_DMA_Start_IT+0x94>
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004ec6:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8004eca:	b2c0      	uxtb	r0, r0
 8004ecc:	2801      	cmp	r0, #1
 8004ece:	d006      	beq.n	8004ede <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ed0:	2380      	movs	r3, #128	@ 0x80
 8004ed2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 8004eda:	2001      	movs	r0, #1
}
 8004edc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ede:	2002      	movs	r0, #2
 8004ee0:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004ee8:	6825      	ldr	r5, [r4, #0]
 8004eea:	6828      	ldr	r0, [r5, #0]
 8004eec:	f020 0001 	bic.w	r0, r0, #1
 8004ef0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7ff fea2 	bl	8004c3c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004ef8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004efa:	b1d3      	cbz	r3, 8004f32 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	f043 030e 	orr.w	r3, r3, #14
 8004f04:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f06:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004f0e:	d003      	beq.n	8004f18 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f16:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004f18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f1a:	b11b      	cbz	r3, 8004f24 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f22:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e7d4      	b.n	8004edc <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	6813      	ldr	r3, [r2, #0]
 8004f36:	f023 0304 	bic.w	r3, r3, #4
 8004f3a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f3c:	6822      	ldr	r2, [r4, #0]
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	f043 030a 	orr.w	r3, r3, #10
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e7de      	b.n	8004f06 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004f48:	2002      	movs	r0, #2
 8004f4a:	e7c7      	b.n	8004edc <HAL_DMA_Start_IT+0x28>

08004f4c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d034      	beq.n	8004fbc <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f52:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	2a02      	cmp	r2, #2
 8004f5a:	d006      	beq.n	8004f6a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004f60:	2200      	movs	r2, #0
 8004f62:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8004f66:	2001      	movs	r0, #1
 8004f68:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f6a:	6801      	ldr	r1, [r0, #0]
 8004f6c:	680a      	ldr	r2, [r1, #0]
 8004f6e:	f022 020e 	bic.w	r2, r2, #14
 8004f72:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f74:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004f76:	680a      	ldr	r2, [r1, #0]
 8004f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f7c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004f7e:	6801      	ldr	r1, [r0, #0]
 8004f80:	680a      	ldr	r2, [r1, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f88:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004f8a:	f002 011c 	and.w	r1, r2, #28
 8004f8e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8004f90:	2201      	movs	r2, #1
 8004f92:	408a      	lsls	r2, r1
 8004f94:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f9a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004f9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f9e:	b132      	cbz	r2, 8004fae <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fa0:	6811      	ldr	r1, [r2, #0]
 8004fa2:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004fa6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004faa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8004fac:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 8004fba:	4770      	bx	lr
    return HAL_ERROR;
 8004fbc:	2001      	movs	r0, #1
}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_DMA_Abort_IT>:
{
 8004fc0:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004fc2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d003      	beq.n	8004fd4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fcc:	2304      	movs	r3, #4
 8004fce:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8004fd0:	2001      	movs	r0, #1
}
 8004fd2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd4:	6802      	ldr	r2, [r0, #0]
 8004fd6:	6813      	ldr	r3, [r2, #0]
 8004fd8:	f023 030e 	bic.w	r3, r3, #14
 8004fdc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004fde:	6802      	ldr	r2, [r0, #0]
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fe8:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ff2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004ff4:	f003 021c 	and.w	r2, r3, #28
 8004ff8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4093      	lsls	r3, r2
 8004ffe:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005000:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8005002:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005004:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8005006:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005008:	b133      	cbz	r3, 8005018 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005010:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005012:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005014:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005016:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005018:	2301      	movs	r3, #1
 800501a:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800501e:	2300      	movs	r3, #0
 8005020:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8005024:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005026:	b113      	cbz	r3, 800502e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8005028:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2000      	movs	r0, #0
 800502c:	e7d1      	b.n	8004fd2 <HAL_DMA_Abort_IT+0x12>
 800502e:	2000      	movs	r0, #0
 8005030:	e7cf      	b.n	8004fd2 <HAL_DMA_Abort_IT+0x12>
	...

08005034 <HAL_DMA_IRQHandler>:
{
 8005034:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005036:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005038:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800503a:	6804      	ldr	r4, [r0, #0]
 800503c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800503e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005040:	f003 031c 	and.w	r3, r3, #28
 8005044:	2204      	movs	r2, #4
 8005046:	409a      	lsls	r2, r3
 8005048:	420a      	tst	r2, r1
 800504a:	d015      	beq.n	8005078 <HAL_DMA_IRQHandler+0x44>
 800504c:	f015 0f04 	tst.w	r5, #4
 8005050:	d012      	beq.n	8005078 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f013 0f20 	tst.w	r3, #32
 8005058:	d103      	bne.n	8005062 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005062:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005064:	f003 021c 	and.w	r2, r3, #28
 8005068:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800506a:	2304      	movs	r3, #4
 800506c:	4093      	lsls	r3, r2
 800506e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8005070:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005072:	b103      	cbz	r3, 8005076 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8005074:	4798      	blx	r3
}
 8005076:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005078:	2202      	movs	r2, #2
 800507a:	409a      	lsls	r2, r3
 800507c:	420a      	tst	r2, r1
 800507e:	d028      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x9e>
 8005080:	f015 0f02 	tst.w	r5, #2
 8005084:	d025      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	f013 0f20 	tst.w	r3, #32
 800508c:	d106      	bne.n	800509c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8005096:	2301      	movs	r3, #1
 8005098:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800509c:	6802      	ldr	r2, [r0, #0]
 800509e:	4b1c      	ldr	r3, [pc, #112]	@ (8005110 <HAL_DMA_IRQHandler+0xdc>)
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d90e      	bls.n	80050c2 <HAL_DMA_IRQHandler+0x8e>
 80050a4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80050a6:	f003 021c 	and.w	r2, r3, #28
 80050aa:	2302      	movs	r3, #2
 80050ac:	4093      	lsls	r3, r2
 80050ae:	4a19      	ldr	r2, [pc, #100]	@ (8005114 <HAL_DMA_IRQHandler+0xe0>)
 80050b0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80050b2:	2300      	movs	r3, #0
 80050b4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 80050b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0db      	beq.n	8005076 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80050be:	4798      	blx	r3
 80050c0:	e7d9      	b.n	8005076 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80050c2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80050c4:	f003 021c 	and.w	r2, r3, #28
 80050c8:	2302      	movs	r3, #2
 80050ca:	4093      	lsls	r3, r2
 80050cc:	4a12      	ldr	r2, [pc, #72]	@ (8005118 <HAL_DMA_IRQHandler+0xe4>)
 80050ce:	6053      	str	r3, [r2, #4]
 80050d0:	e7ef      	b.n	80050b2 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80050d2:	2208      	movs	r2, #8
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	420b      	tst	r3, r1
 80050da:	d0cc      	beq.n	8005076 <HAL_DMA_IRQHandler+0x42>
 80050dc:	f015 0f08 	tst.w	r5, #8
 80050e0:	d0c9      	beq.n	8005076 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	f023 030e 	bic.w	r3, r3, #14
 80050e8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050ea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80050ec:	f003 031c 	and.w	r3, r3, #28
 80050f0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80050f2:	2201      	movs	r2, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050fa:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80050fc:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8005100:	2300      	movs	r3, #0
 8005102:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8005106:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0b4      	beq.n	8005076 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800510c:	4798      	blx	r3
  return;
 800510e:	e7b2      	b.n	8005076 <HAL_DMA_IRQHandler+0x42>
 8005110:	40020080 	.word	0x40020080
 8005114:	40020400 	.word	0x40020400
 8005118:	40020000 	.word	0x40020000

0800511c <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 800511c:	b178      	cbz	r0, 800513e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800511e:	6803      	ldr	r3, [r0, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8005122:	f011 0f10 	tst.w	r1, #16
 8005126:	d004      	beq.n	8005132 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8005128:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800512c:	d004      	beq.n	8005138 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 800512e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8005132:	601a      	str	r2, [r3, #0]
  return status;
 8005134:	2000      	movs	r0, #0
 8005136:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8005138:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800513c:	e7f9      	b.n	8005132 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 800513e:	2001      	movs	r0, #1
}
 8005140:	4770      	bx	lr
	...

08005144 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005144:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005146:	4c05      	ldr	r4, [pc, #20]	@ (800515c <FLASH_Program_DoubleWord+0x18>)
 8005148:	6961      	ldr	r1, [r4, #20]
 800514a:	f041 0101 	orr.w	r1, r1, #1
 800514e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005150:	6002      	str	r2, [r0, #0]
 8005152:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005156:	6043      	str	r3, [r0, #4]
}
 8005158:	bc10      	pop	{r4}
 800515a:	4770      	bx	lr
 800515c:	58004000 	.word	0x58004000

08005160 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005160:	4a0c      	ldr	r2, [pc, #48]	@ (8005194 <FLASH_Program_Fast+0x34>)
 8005162:	6953      	ldr	r3, [r2, #20]
 8005164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005168:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800516e:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005170:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005172:	f851 2b04 	ldr.w	r2, [r1], #4
 8005176:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800517a:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 800517c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8005180:	d1f7      	bne.n	8005172 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005182:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <FLASH_Program_Fast+0x34>)
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800518a:	d1fa      	bne.n	8005182 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518c:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	58004000 	.word	0x58004000

08005198 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_FLASH_Unlock+0x28>)
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db01      	blt.n	80051a4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2000      	movs	r0, #0
 80051a2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <HAL_FLASH_Unlock+0x28>)
 80051a6:	4a07      	ldr	r2, [pc, #28]	@ (80051c4 <HAL_FLASH_Unlock+0x2c>)
 80051a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051aa:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80051ae:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	db01      	blt.n	80051ba <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2000      	movs	r0, #0
 80051b8:	4770      	bx	lr
      status = HAL_ERROR;
 80051ba:	2001      	movs	r0, #1
}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	58004000 	.word	0x58004000
 80051c4:	45670123 	.word	0x45670123

080051c8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80051c8:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <HAL_FLASH_Lock+0x18>)
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80051d0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	db01      	blt.n	80051dc <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 80051d8:	2001      	movs	r0, #1
}
 80051da:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80051dc:	2000      	movs	r0, #0
 80051de:	4770      	bx	lr
 80051e0:	58004000 	.word	0x58004000

080051e4 <FLASH_WaitForLastOperation>:
{
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80051e8:	f7fc fa3a 	bl	8001660 <HAL_GetTick>
 80051ec:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80051ee:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <FLASH_WaitForLastOperation+0x78>)
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80051f6:	d006      	beq.n	8005206 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80051f8:	f7fc fa32 	bl	8001660 <HAL_GetTick>
 80051fc:	1b00      	subs	r0, r0, r4
 80051fe:	42a8      	cmp	r0, r5
 8005200:	d3f5      	bcc.n	80051ee <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8005202:	2003      	movs	r0, #3
}
 8005204:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <FLASH_WaitForLastOperation+0x78>)
 8005208:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800520a:	f013 0f01 	tst.w	r3, #1
 800520e:	d115      	bne.n	800523c <FLASH_WaitForLastOperation+0x58>
  error &= FLASH_FLAG_SR_ERRORS;
 8005210:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8005214:	f023 0305 	bic.w	r3, r3, #5
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 800521c:	b10b      	cbz	r3, 8005222 <FLASH_WaitForLastOperation+0x3e>
 800521e:	4a0f      	ldr	r2, [pc, #60]	@ (800525c <FLASH_WaitForLastOperation+0x78>)
 8005220:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8005222:	b9ab      	cbnz	r3, 8005250 <FLASH_WaitForLastOperation+0x6c>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005224:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <FLASH_WaitForLastOperation+0x78>)
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800522c:	d014      	beq.n	8005258 <FLASH_WaitForLastOperation+0x74>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800522e:	f7fc fa17 	bl	8001660 <HAL_GetTick>
 8005232:	1b00      	subs	r0, r0, r4
 8005234:	42a8      	cmp	r0, r5
 8005236:	d3f5      	bcc.n	8005224 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8005238:	2003      	movs	r0, #3
 800523a:	e7e3      	b.n	8005204 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800523c:	4a07      	ldr	r2, [pc, #28]	@ (800525c <FLASH_WaitForLastOperation+0x78>)
 800523e:	2101      	movs	r1, #1
 8005240:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8005242:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8005246:	f023 0305 	bic.w	r3, r3, #5
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 800524e:	e7e5      	b.n	800521c <FLASH_WaitForLastOperation+0x38>
    pFlash.ErrorCode = error;
 8005250:	4a03      	ldr	r2, [pc, #12]	@ (8005260 <FLASH_WaitForLastOperation+0x7c>)
 8005252:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8005254:	2001      	movs	r0, #1
 8005256:	e7d5      	b.n	8005204 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8005258:	2000      	movs	r0, #0
 800525a:	e7d3      	b.n	8005204 <FLASH_WaitForLastOperation+0x20>
 800525c:	58004000 	.word	0x58004000
 8005260:	200007dc 	.word	0x200007dc

08005264 <HAL_FLASH_Program>:
{
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8005268:	4b15      	ldr	r3, [pc, #84]	@ (80052c0 <HAL_FLASH_Program+0x5c>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d025      	beq.n	80052bc <HAL_FLASH_Program+0x58>
 8005270:	4604      	mov	r4, r0
 8005272:	460d      	mov	r5, r1
 8005274:	4616      	mov	r6, r2
 8005276:	4b12      	ldr	r3, [pc, #72]	@ (80052c0 <HAL_FLASH_Program+0x5c>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800527c:	2200      	movs	r2, #0
 800527e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005280:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005284:	f7ff ffae 	bl	80051e4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005288:	b970      	cbnz	r0, 80052a8 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800528a:	2c01      	cmp	r4, #1
 800528c:	d010      	beq.n	80052b0 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800528e:	4631      	mov	r1, r6
 8005290:	4628      	mov	r0, r5
 8005292:	f7ff ff65 	bl	8005160 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800529a:	f7ff ffa3 	bl	80051e4 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800529e:	4a09      	ldr	r2, [pc, #36]	@ (80052c4 <HAL_FLASH_Program+0x60>)
 80052a0:	6953      	ldr	r3, [r2, #20]
 80052a2:	ea23 0304 	bic.w	r3, r3, r4
 80052a6:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80052a8:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_FLASH_Program+0x5c>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
}
 80052ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80052b0:	4632      	mov	r2, r6
 80052b2:	463b      	mov	r3, r7
 80052b4:	4628      	mov	r0, r5
 80052b6:	f7ff ff45 	bl	8005144 <FLASH_Program_DoubleWord>
 80052ba:	e7ec      	b.n	8005296 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80052bc:	2002      	movs	r0, #2
 80052be:	e7f6      	b.n	80052ae <HAL_FLASH_Program+0x4a>
 80052c0:	200007dc 	.word	0x200007dc
 80052c4:	58004000 	.word	0x58004000

080052c8 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80052c8:	4a03      	ldr	r2, [pc, #12]	@ (80052d8 <FLASH_MassErase+0x10>)
 80052ca:	6953      	ldr	r3, [r2, #20]
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	6153      	str	r3, [r2, #20]
#endif
}
 80052d6:	4770      	bx	lr
 80052d8:	58004000 	.word	0x58004000

080052dc <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80052dc:	4b18      	ldr	r3, [pc, #96]	@ (8005340 <FLASH_FlushCaches+0x64>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d006      	beq.n	80052f6 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80052e8:	4b15      	ldr	r3, [pc, #84]	@ (8005340 <FLASH_FlushCaches+0x64>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d012      	beq.n	800531a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 80052f4:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80052f6:	4b12      	ldr	r3, [pc, #72]	@ (8005340 <FLASH_FlushCaches+0x64>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052fe:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800530e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e7e6      	b.n	80052e8 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800531a:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <FLASH_FlushCaches+0x64>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005322:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005332:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800533a:	601a      	str	r2, [r3, #0]
}
 800533c:	e7da      	b.n	80052f4 <FLASH_FlushCaches+0x18>
 800533e:	bf00      	nop
 8005340:	58004000 	.word	0x58004000

08005344 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005344:	4a03      	ldr	r2, [pc, #12]	@ (8005354 <FLASH_AcknowledgePageErase+0x10>)
 8005346:	6953      	ldr	r3, [r2, #20]
 8005348:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	6153      	str	r3, [r2, #20]
#endif
}
 8005352:	4770      	bx	lr
 8005354:	58004000 	.word	0x58004000

08005358 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005358:	4a05      	ldr	r2, [pc, #20]	@ (8005370 <FLASH_PageErase+0x18>)
 800535a:	6953      	ldr	r3, [r2, #20]
 800535c:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005360:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8005364:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8005368:	f040 0002 	orr.w	r0, r0, #2
 800536c:	6150      	str	r0, [r2, #20]
}
 800536e:	4770      	bx	lr
 8005370:	58004000 	.word	0x58004000

08005374 <HAL_FLASHEx_Erase>:
{
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005376:	4b1e      	ldr	r3, [pc, #120]	@ (80053f0 <HAL_FLASHEx_Erase+0x7c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d035      	beq.n	80053ea <HAL_FLASHEx_Erase+0x76>
 800537e:	4605      	mov	r5, r0
 8005380:	460f      	mov	r7, r1
 8005382:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <HAL_FLASHEx_Erase+0x7c>)
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005388:	2200      	movs	r2, #0
 800538a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800538c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005390:	f7ff ff28 	bl	80051e4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005394:	4606      	mov	r6, r0
 8005396:	bb18      	cbnz	r0, 80053e0 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d013      	beq.n	80053c6 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80053a4:	686c      	ldr	r4, [r5, #4]
 80053a6:	686b      	ldr	r3, [r5, #4]
 80053a8:	68aa      	ldr	r2, [r5, #8]
 80053aa:	4413      	add	r3, r2
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d913      	bls.n	80053d8 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80053b0:	4620      	mov	r0, r4
 80053b2:	f7ff ffd1 	bl	8005358 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053ba:	f7ff ff13 	bl	80051e4 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80053be:	4606      	mov	r6, r0
 80053c0:	b948      	cbnz	r0, 80053d6 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80053c2:	3401      	adds	r4, #1
 80053c4:	e7ef      	b.n	80053a6 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80053c6:	f7ff ff7f 	bl	80052c8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053ce:	f7ff ff09 	bl	80051e4 <FLASH_WaitForLastOperation>
 80053d2:	4606      	mov	r6, r0
 80053d4:	e002      	b.n	80053dc <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 80053d6:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 80053d8:	f7ff ffb4 	bl	8005344 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 80053dc:	f7ff ff7e 	bl	80052dc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80053e0:	4b03      	ldr	r3, [pc, #12]	@ (80053f0 <HAL_FLASHEx_Erase+0x7c>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
}
 80053e6:	4630      	mov	r0, r6
 80053e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80053ea:	2602      	movs	r6, #2
 80053ec:	e7fb      	b.n	80053e6 <HAL_FLASHEx_Erase+0x72>
 80053ee:	bf00      	nop
 80053f0:	200007dc 	.word	0x200007dc

080053f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80053f6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053f8:	e069      	b.n	80054ce <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053fa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053fc:	005e      	lsls	r6, r3, #1
 80053fe:	2403      	movs	r4, #3
 8005400:	40b4      	lsls	r4, r6
 8005402:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005406:	68cc      	ldr	r4, [r1, #12]
 8005408:	40b4      	lsls	r4, r6
 800540a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800540c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800540e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005410:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005414:	684c      	ldr	r4, [r1, #4]
 8005416:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800541a:	409c      	lsls	r4, r3
 800541c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800541e:	6044      	str	r4, [r0, #4]
 8005420:	e066      	b.n	80054f0 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005422:	08dd      	lsrs	r5, r3, #3
 8005424:	3508      	adds	r5, #8
 8005426:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800542a:	f003 0c07 	and.w	ip, r3, #7
 800542e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005432:	f04f 0e0f 	mov.w	lr, #15
 8005436:	fa0e fe0c 	lsl.w	lr, lr, ip
 800543a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800543e:	690c      	ldr	r4, [r1, #16]
 8005440:	fa04 f40c 	lsl.w	r4, r4, ip
 8005444:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8005448:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800544c:	e067      	b.n	800551e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800544e:	2402      	movs	r4, #2
 8005450:	e000      	b.n	8005454 <HAL_GPIO_Init+0x60>
 8005452:	2400      	movs	r4, #0
 8005454:	fa04 f40e 	lsl.w	r4, r4, lr
 8005458:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800545a:	f10c 0c02 	add.w	ip, ip, #2
 800545e:	4d4b      	ldr	r5, [pc, #300]	@ (800558c <HAL_GPIO_Init+0x198>)
 8005460:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005464:	4c4a      	ldr	r4, [pc, #296]	@ (8005590 <HAL_GPIO_Init+0x19c>)
 8005466:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005468:	43d4      	mvns	r4, r2
 800546a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800546e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005472:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 8005476:	d001      	beq.n	800547c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8005478:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800547c:	4d44      	ldr	r5, [pc, #272]	@ (8005590 <HAL_GPIO_Init+0x19c>)
 800547e:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8005480:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8005482:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005486:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800548a:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 800548e:	d001      	beq.n	8005494 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8005490:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005494:	4d3e      	ldr	r5, [pc, #248]	@ (8005590 <HAL_GPIO_Init+0x19c>)
 8005496:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005498:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800549c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054a0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80054a4:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 80054a8:	d001      	beq.n	80054ae <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80054aa:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80054ae:	4d38      	ldr	r5, [pc, #224]	@ (8005590 <HAL_GPIO_Init+0x19c>)
 80054b0:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80054b4:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80054b8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054ba:	684e      	ldr	r6, [r1, #4]
 80054bc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80054c0:	d001      	beq.n	80054c6 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80054c2:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80054c6:	4a32      	ldr	r2, [pc, #200]	@ (8005590 <HAL_GPIO_Init+0x19c>)
 80054c8:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80054cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ce:	680a      	ldr	r2, [r1, #0]
 80054d0:	fa32 f403 	lsrs.w	r4, r2, r3
 80054d4:	d058      	beq.n	8005588 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054d6:	f04f 0c01 	mov.w	ip, #1
 80054da:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80054de:	ea1c 0202 	ands.w	r2, ip, r2
 80054e2:	d0f3      	beq.n	80054cc <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054e4:	684c      	ldr	r4, [r1, #4]
 80054e6:	f004 0403 	and.w	r4, r4, #3
 80054ea:	3c01      	subs	r4, #1
 80054ec:	2c01      	cmp	r4, #1
 80054ee:	d984      	bls.n	80053fa <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054f0:	684c      	ldr	r4, [r1, #4]
 80054f2:	f004 0403 	and.w	r4, r4, #3
 80054f6:	2c03      	cmp	r4, #3
 80054f8:	d00c      	beq.n	8005514 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80054fa:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054fc:	005d      	lsls	r5, r3, #1
 80054fe:	f04f 0c03 	mov.w	ip, #3
 8005502:	fa0c fc05 	lsl.w	ip, ip, r5
 8005506:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800550a:	688c      	ldr	r4, [r1, #8]
 800550c:	40ac      	lsls	r4, r5
 800550e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8005512:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005514:	684c      	ldr	r4, [r1, #4]
 8005516:	f004 0403 	and.w	r4, r4, #3
 800551a:	2c02      	cmp	r4, #2
 800551c:	d081      	beq.n	8005422 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800551e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005520:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005524:	f04f 0c03 	mov.w	ip, #3
 8005528:	fa0c fc0e 	lsl.w	ip, ip, lr
 800552c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005530:	684c      	ldr	r4, [r1, #4]
 8005532:	f004 0403 	and.w	r4, r4, #3
 8005536:	fa04 f40e 	lsl.w	r4, r4, lr
 800553a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800553e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005540:	684c      	ldr	r4, [r1, #4]
 8005542:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8005546:	d0c1      	beq.n	80054cc <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8005548:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800554c:	f10c 0502 	add.w	r5, ip, #2
 8005550:	4c0e      	ldr	r4, [pc, #56]	@ (800558c <HAL_GPIO_Init+0x198>)
 8005552:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005556:	f003 0e03 	and.w	lr, r3, #3
 800555a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800555e:	2407      	movs	r4, #7
 8005560:	fa04 f40e 	lsl.w	r4, r4, lr
 8005564:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005568:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800556c:	f43f af71 	beq.w	8005452 <HAL_GPIO_Init+0x5e>
 8005570:	4c08      	ldr	r4, [pc, #32]	@ (8005594 <HAL_GPIO_Init+0x1a0>)
 8005572:	42a0      	cmp	r0, r4
 8005574:	d006      	beq.n	8005584 <HAL_GPIO_Init+0x190>
 8005576:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800557a:	42a0      	cmp	r0, r4
 800557c:	f43f af67 	beq.w	800544e <HAL_GPIO_Init+0x5a>
 8005580:	2407      	movs	r4, #7
 8005582:	e767      	b.n	8005454 <HAL_GPIO_Init+0x60>
 8005584:	2401      	movs	r4, #1
 8005586:	e765      	b.n	8005454 <HAL_GPIO_Init+0x60>
  }
}
 8005588:	bd70      	pop	{r4, r5, r6, pc}
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	58000800 	.word	0x58000800
 8005594:	48000400 	.word	0x48000400

08005598 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005598:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800559a:	fa31 f203 	lsrs.w	r2, r1, r3
 800559e:	d071      	beq.n	8005684 <HAL_GPIO_DeInit+0xec>
{
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a2:	e02e      	b.n	8005602 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80055a4:	2502      	movs	r5, #2
 80055a6:	e000      	b.n	80055aa <HAL_GPIO_DeInit+0x12>
 80055a8:	2500      	movs	r5, #0
 80055aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80055ae:	42a5      	cmp	r5, r4
 80055b0:	d049      	beq.n	8005646 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80055b2:	6804      	ldr	r4, [r0, #0]
 80055b4:	005d      	lsls	r5, r3, #1
 80055b6:	f04f 0c03 	mov.w	ip, #3
 80055ba:	fa0c fc05 	lsl.w	ip, ip, r5
 80055be:	ea44 040c 	orr.w	r4, r4, ip
 80055c2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80055c4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80055c8:	f10e 0e08 	add.w	lr, lr, #8
 80055cc:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80055d0:	f003 0607 	and.w	r6, r3, #7
 80055d4:	00b6      	lsls	r6, r6, #2
 80055d6:	250f      	movs	r5, #15
 80055d8:	40b5      	lsls	r5, r6
 80055da:	ea24 0405 	bic.w	r4, r4, r5
 80055de:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055e2:	6884      	ldr	r4, [r0, #8]
 80055e4:	ea24 040c 	bic.w	r4, r4, ip
 80055e8:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ea:	6844      	ldr	r4, [r0, #4]
 80055ec:	ea24 0202 	bic.w	r2, r4, r2
 80055f0:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055f2:	68c2      	ldr	r2, [r0, #12]
 80055f4:	ea22 020c 	bic.w	r2, r2, ip
 80055f8:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80055fa:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80055fc:	fa31 f203 	lsrs.w	r2, r1, r3
 8005600:	d03f      	beq.n	8005682 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005602:	2201      	movs	r2, #1
 8005604:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8005606:	ea12 0701 	ands.w	r7, r2, r1
 800560a:	d0f6      	beq.n	80055fa <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800560c:	089e      	lsrs	r6, r3, #2
 800560e:	1cb5      	adds	r5, r6, #2
 8005610:	4c1d      	ldr	r4, [pc, #116]	@ (8005688 <HAL_GPIO_DeInit+0xf0>)
 8005612:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005616:	f003 0c03 	and.w	ip, r3, #3
 800561a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800561e:	f04f 0e07 	mov.w	lr, #7
 8005622:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005626:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800562a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800562e:	d0bb      	beq.n	80055a8 <HAL_GPIO_DeInit+0x10>
 8005630:	4d16      	ldr	r5, [pc, #88]	@ (800568c <HAL_GPIO_DeInit+0xf4>)
 8005632:	42a8      	cmp	r0, r5
 8005634:	d005      	beq.n	8005642 <HAL_GPIO_DeInit+0xaa>
 8005636:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800563a:	42a8      	cmp	r0, r5
 800563c:	d0b2      	beq.n	80055a4 <HAL_GPIO_DeInit+0xc>
 800563e:	2507      	movs	r5, #7
 8005640:	e7b3      	b.n	80055aa <HAL_GPIO_DeInit+0x12>
 8005642:	2501      	movs	r5, #1
 8005644:	e7b1      	b.n	80055aa <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8005646:	4c12      	ldr	r4, [pc, #72]	@ (8005690 <HAL_GPIO_DeInit+0xf8>)
 8005648:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800564c:	ea25 0507 	bic.w	r5, r5, r7
 8005650:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005654:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8005658:	ea25 0507 	bic.w	r5, r5, r7
 800565c:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8005660:	6825      	ldr	r5, [r4, #0]
 8005662:	ea25 0507 	bic.w	r5, r5, r7
 8005666:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005668:	6865      	ldr	r5, [r4, #4]
 800566a:	ea25 0507 	bic.w	r5, r5, r7
 800566e:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005670:	4d05      	ldr	r5, [pc, #20]	@ (8005688 <HAL_GPIO_DeInit+0xf0>)
 8005672:	3602      	adds	r6, #2
 8005674:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8005678:	ea24 040e 	bic.w	r4, r4, lr
 800567c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8005680:	e797      	b.n	80055b2 <HAL_GPIO_DeInit+0x1a>
  }
}
 8005682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	48000400 	.word	0x48000400
 8005690:	58000800 	.word	0x58000800

08005694 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005694:	b10a      	cbz	r2, 800569a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005696:	6181      	str	r1, [r0, #24]
 8005698:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800569a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800569c:	4770      	bx	lr

0800569e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800569e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056a0:	ea01 0203 	and.w	r2, r1, r3
 80056a4:	ea21 0103 	bic.w	r1, r1, r3
 80056a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80056ac:	6181      	str	r1, [r0, #24]
}
 80056ae:	4770      	bx	lr

080056b0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056b0:	4a02      	ldr	r2, [pc, #8]	@ (80056bc <HAL_PWR_EnableBkUpAccess+0xc>)
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b8:	6013      	str	r3, [r2, #0]
}
 80056ba:	4770      	bx	lr
 80056bc:	58000400 	.word	0x58000400

080056c0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80056c0:	b510      	push	{r4, lr}
 80056c2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80056c4:	b9a0      	cbnz	r0, 80056f0 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005704 <HAL_PWR_EnterSLEEPMode+0x44>)
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80056ce:	d10a      	bne.n	80056e6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005708 <HAL_PWR_EnterSLEEPMode+0x48>)
 80056d2:	6913      	ldr	r3, [r2, #16]
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80056da:	2c01      	cmp	r4, #1
 80056dc:	d010      	beq.n	8005700 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80056de:	bf40      	sev
    __WFE();
 80056e0:	bf20      	wfe
    __WFE();
 80056e2:	bf20      	wfe
  }
}
 80056e4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80056e6:	f000 f821 	bl	800572c <HAL_PWREx_DisableLowPowerRunMode>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_PWR_EnterSLEEPMode+0x10>
 80056ee:	e7f9      	b.n	80056e4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <HAL_PWR_EnterSLEEPMode+0x44>)
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80056f8:	d1ea      	bne.n	80056d0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80056fa:	f000 f80f 	bl	800571c <HAL_PWREx_EnableLowPowerRunMode>
 80056fe:	e7e7      	b.n	80056d0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005700:	bf30      	wfi
 8005702:	e7ef      	b.n	80056e4 <HAL_PWR_EnterSLEEPMode+0x24>
 8005704:	58000400 	.word	0x58000400
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800570c:	4b02      	ldr	r3, [pc, #8]	@ (8005718 <HAL_PWREx_GetVoltageRange+0xc>)
 800570e:	6818      	ldr	r0, [r3, #0]
}
 8005710:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	58000400 	.word	0x58000400

0800571c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800571c:	4a02      	ldr	r2, [pc, #8]	@ (8005728 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	4770      	bx	lr
 8005728:	58000400 	.word	0x58000400

0800572c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800572c:	4a0f      	ldr	r2, [pc, #60]	@ (800576c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005734:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005736:	4b0e      	ldr	r3, [pc, #56]	@ (8005770 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2232      	movs	r2, #50	@ 0x32
 800573c:	fb02 f303 	mul.w	r3, r2, r3
 8005740:	4a0c      	ldr	r2, [pc, #48]	@ (8005774 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005748:	e000      	b.n	800574c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800574a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800574c:	4a07      	ldr	r2, [pc, #28]	@ (800576c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800574e:	6952      	ldr	r2, [r2, #20]
 8005750:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8005754:	d001      	beq.n	800575a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f7      	bne.n	800574a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800575a:	4b04      	ldr	r3, [pc, #16]	@ (800576c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8005762:	d101      	bne.n	8005768 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005764:	2000      	movs	r0, #0
 8005766:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005768:	2003      	movs	r0, #3
}
 800576a:	4770      	bx	lr
 800576c:	58000400 	.word	0x58000400
 8005770:	2000009c 	.word	0x2000009c
 8005774:	431bde83 	.word	0x431bde83

08005778 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005778:	4a0c      	ldr	r2, [pc, #48]	@ (80057ac <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	f023 0307 	bic.w	r3, r3, #7
 8005780:	f043 0302 	orr.w	r3, r3, #2
 8005784:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005786:	4a0a      	ldr	r2, [pc, #40]	@ (80057b0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005788:	6913      	ldr	r3, [r2, #16]
 800578a:	f043 0304 	orr.w	r3, r3, #4
 800578e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005790:	2801      	cmp	r0, #1
 8005792:	d008      	beq.n	80057a6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005794:	bf40      	sev
    __WFE();
 8005796:	bf20      	wfe
    __WFE();
 8005798:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800579a:	4a05      	ldr	r2, [pc, #20]	@ (80057b0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800579c:	6913      	ldr	r3, [r2, #16]
 800579e:	f023 0304 	bic.w	r3, r3, #4
 80057a2:	6113      	str	r3, [r2, #16]
}
 80057a4:	4770      	bx	lr
    __WFI();
 80057a6:	bf30      	wfi
 80057a8:	e7f7      	b.n	800579a <HAL_PWREx_EnterSTOP2Mode+0x22>
 80057aa:	bf00      	nop
 80057ac:	58000400 	.word	0x58000400
 80057b0:	e000ed00 	.word	0xe000ed00

080057b4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80057b4:	b530      	push	{r4, r5, lr}
 80057b6:	b089      	sub	sp, #36	@ 0x24
 80057b8:	4604      	mov	r4, r0
 80057ba:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80057bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005868 <RCC_SetFlashLatency+0xb4>)
 80057be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057c2:	9006      	str	r0, [sp, #24]
 80057c4:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80057c8:	f103 0208 	add.w	r2, r3, #8
 80057cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057d0:	9004      	str	r0, [sp, #16]
 80057d2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80057d6:	ad01      	add	r5, sp, #4
 80057d8:	3310      	adds	r3, #16
 80057da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057de:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057e2:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80057e6:	d007      	beq.n	80057f8 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	e014      	b.n	8005816 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80057ec:	aa08      	add	r2, sp, #32
 80057ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80057f2:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80057f6:	e01e      	b.n	8005836 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d808      	bhi.n	8005810 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80057fe:	aa08      	add	r2, sp, #32
 8005800:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005804:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005808:	42a2      	cmp	r2, r4
 800580a:	d2ef      	bcs.n	80057ec <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800580c:	3301      	adds	r3, #1
 800580e:	e7f4      	b.n	80057fa <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005810:	2500      	movs	r5, #0
 8005812:	e010      	b.n	8005836 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005814:	3301      	adds	r3, #1
 8005816:	2b02      	cmp	r3, #2
 8005818:	d80c      	bhi.n	8005834 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800581a:	aa08      	add	r2, sp, #32
 800581c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005820:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005824:	42a2      	cmp	r2, r4
 8005826:	d3f5      	bcc.n	8005814 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005828:	aa08      	add	r2, sp, #32
 800582a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800582e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005832:	e000      	b.n	8005836 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005834:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005836:	4a0d      	ldr	r2, [pc, #52]	@ (800586c <RCC_SetFlashLatency+0xb8>)
 8005838:	6813      	ldr	r3, [r2, #0]
 800583a:	f023 0307 	bic.w	r3, r3, #7
 800583e:	432b      	orrs	r3, r5
 8005840:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005842:	f7fb ff0d 	bl	8001660 <HAL_GetTick>
 8005846:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005848:	4b08      	ldr	r3, [pc, #32]	@ (800586c <RCC_SetFlashLatency+0xb8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	42ab      	cmp	r3, r5
 8005852:	d006      	beq.n	8005862 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005854:	f7fb ff04 	bl	8001660 <HAL_GetTick>
 8005858:	1b00      	subs	r0, r0, r4
 800585a:	2802      	cmp	r0, #2
 800585c:	d9f4      	bls.n	8005848 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800585e:	2003      	movs	r0, #3
 8005860:	e000      	b.n	8005864 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005862:	2000      	movs	r0, #0
}
 8005864:	b009      	add	sp, #36	@ 0x24
 8005866:	bd30      	pop	{r4, r5, pc}
 8005868:	0801484c 	.word	0x0801484c
 800586c:	58004000 	.word	0x58004000

08005870 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005870:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005872:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005878:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005880:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	4a08      	ldr	r2, [pc, #32]	@ (80058ac <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005892:	f7ff ff3b 	bl	800570c <HAL_PWREx_GetVoltageRange>
 8005896:	4601      	mov	r1, r0
 8005898:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800589a:	fba3 3404 	umull	r3, r4, r3, r4
 800589e:	0ca0      	lsrs	r0, r4, #18
 80058a0:	f7ff ff88 	bl	80057b4 <RCC_SetFlashLatency>
}
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	bf00      	nop
 80058a8:	08016a04 	.word	0x08016a04
 80058ac:	08016a64 	.word	0x08016a64
 80058b0:	431bde83 	.word	0x431bde83

080058b4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b8:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80058c0:	f011 010c 	ands.w	r1, r1, #12
 80058c4:	d00a      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x28>
 80058c6:	290c      	cmp	r1, #12
 80058c8:	d006      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ca:	2904      	cmp	r1, #4
 80058cc:	d047      	beq.n	800595e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058ce:	2908      	cmp	r1, #8
 80058d0:	d03b      	beq.n	800594a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80058d2:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80058d4:	4610      	mov	r0, r2
 80058d6:	e026      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d1f6      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f013 0308 	ands.w	r3, r3, #8
 80058e6:	d00d      	beq.n	8005904 <HAL_RCC_GetSysClockFreq+0x50>
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f013 0308 	ands.w	r3, r3, #8
 80058f2:	d124      	bne.n	800593e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80058f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058f8:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80058fc:	4a2e      	ldr	r2, [pc, #184]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80058fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005902:	e00e      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005904:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	f012 0f08 	tst.w	r2, #8
 800590e:	d112      	bne.n	8005936 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005918:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800591c:	4a26      	ldr	r2, [pc, #152]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800591e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005922:	b1d1      	cbz	r1, 800595a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005924:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005930:	2b0c      	cmp	r3, #12
 8005932:	d01a      	beq.n	800596a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005934:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005936:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	e7ee      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x68>
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005942:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005944:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005948:	e7d8      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8005954:	d106      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005956:	4819      	ldr	r0, [pc, #100]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005958:	e7e5      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800595a:	4610      	mov	r0, r2
 800595c:	e7e3      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800595e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005960:	4817      	ldr	r0, [pc, #92]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005962:	e7e0      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005964:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005966:	4816      	ldr	r0, [pc, #88]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005968:	e7dd      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005974:	2b02      	cmp	r3, #2
 8005976:	d009      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0xd8>
 8005978:	2b03      	cmp	r3, #3
 800597a:	d108      	bne.n	800598e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005986:	d115      	bne.n	80059b4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005988:	4a0c      	ldr	r2, [pc, #48]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 800598a:	e000      	b.n	800598e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 800598c:	4a0c      	ldr	r2, [pc, #48]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800598e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005992:	68cb      	ldr	r3, [r1, #12]
 8005994:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005998:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800599c:	68cb      	ldr	r3, [r1, #12]
 800599e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80059a2:	3301      	adds	r3, #1
 80059a4:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80059a8:	68c8      	ldr	r0, [r1, #12]
 80059aa:	0f40      	lsrs	r0, r0, #29
 80059ac:	3001      	adds	r0, #1
 80059ae:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80059b2:	e7bf      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80059b4:	4a02      	ldr	r2, [pc, #8]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059b6:	e7ea      	b.n	800598e <HAL_RCC_GetSysClockFreq+0xda>
 80059b8:	08016a04 	.word	0x08016a04
 80059bc:	01e84800 	.word	0x01e84800
 80059c0:	00f42400 	.word	0x00f42400

080059c4 <HAL_RCC_GetHCLKFreq>:
{
 80059c4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80059c6:	f7ff ff75 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80059d4:	4a02      	ldr	r2, [pc, #8]	@ (80059e0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80059d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80059da:	fbb0 f0f3 	udiv	r0, r0, r3
 80059de:	bd08      	pop	{r3, pc}
 80059e0:	08016a64 	.word	0x08016a64

080059e4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f000 8311 	beq.w	800600c <HAL_RCC_OscConfig+0x628>
{
 80059ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ec:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f2:	689d      	ldr	r5, [r3, #8]
 80059f4:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059f8:	68de      	ldr	r6, [r3, #12]
 80059fa:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059fe:	6803      	ldr	r3, [r0, #0]
 8005a00:	f013 0f20 	tst.w	r3, #32
 8005a04:	d02a      	beq.n	8005a5c <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	d065      	beq.n	8005ad6 <HAL_RCC_OscConfig+0xf2>
 8005a0a:	2d0c      	cmp	r5, #12
 8005a0c:	d061      	beq.n	8005ad2 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a0e:	6a23      	ldr	r3, [r4, #32]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80bf 	beq.w	8005b94 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a22:	f7fb fe1d 	bl	8001660 <HAL_GetTick>
 8005a26:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f013 0f02 	tst.w	r3, #2
 8005a32:	f000 80a7 	beq.w	8005b84 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	f042 0208 	orr.w	r2, r2, #8
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005a48:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a4e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005a56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a5a:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	f013 0f01 	tst.w	r3, #1
 8005a62:	f000 80b5 	beq.w	8005bd0 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005a66:	2d08      	cmp	r5, #8
 8005a68:	f000 80ae 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x1e4>
 8005a6c:	2d0c      	cmp	r5, #12
 8005a6e:	f000 80a8 	beq.w	8005bc2 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005a72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a76:	6813      	ldr	r3, [r2, #0]
 8005a78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a7c:	68a1      	ldr	r1, [r4, #8]
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a88:	f000 80c4 	beq.w	8005c14 <HAL_RCC_OscConfig+0x230>
 8005a8c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005a90:	f000 80c5 	beq.w	8005c1e <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005a9e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8005aa6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 80c2 	beq.w	8005c34 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8005ab0:	f7fb fdd6 	bl	8001660 <HAL_GetTick>
 8005ab4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005ac0:	f040 8086 	bne.w	8005bd0 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fb fdcc 	bl	8001660 <HAL_GetTick>
 8005ac8:	1bc0      	subs	r0, r0, r7
 8005aca:	2864      	cmp	r0, #100	@ 0x64
 8005acc:	d9f3      	bls.n	8005ab6 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005ace:	2003      	movs	r0, #3
 8005ad0:	e2a9      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ad2:	2e01      	cmp	r6, #1
 8005ad4:	d19b      	bne.n	8005a0e <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ad6:	6a23      	ldr	r3, [r4, #32]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8299 	beq.w	8006010 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ade:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f013 0f08 	tst.w	r3, #8
 8005aea:	d029      	beq.n	8005b40 <HAL_RCC_OscConfig+0x15c>
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005af6:	4298      	cmp	r0, r3
 8005af8:	d92a      	bls.n	8005b50 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005afa:	f7ff feb9 	bl	8005870 <RCC_SetFlashLatencyFromMSIRange>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f040 8288 	bne.w	8006014 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	f042 0208 	orr.w	r2, r2, #8
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005b16:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005b24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b28:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b2a:	f7ff ff4b 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
 8005b2e:	4bba      	ldr	r3, [pc, #744]	@ (8005e18 <HAL_RCC_OscConfig+0x434>)
 8005b30:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005b32:	4bba      	ldr	r3, [pc, #744]	@ (8005e1c <HAL_RCC_OscConfig+0x438>)
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f7fb fd91 	bl	800165c <HAL_InitTick>
        if (status != HAL_OK)
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d08e      	beq.n	8005a5c <HAL_RCC_OscConfig+0x78>
 8005b3e:	e272      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b4e:	e7d2      	b.n	8005af6 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	f042 0208 	orr.w	r2, r2, #8
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005b62:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005b70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b74:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b76:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005b78:	f7ff fe7a 	bl	8005870 <RCC_SetFlashLatencyFromMSIRange>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d0d4      	beq.n	8005b2a <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8005b80:	2001      	movs	r0, #1
 8005b82:	e250      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b84:	f7fb fd6c 	bl	8001660 <HAL_GetTick>
 8005b88:	1bc0      	subs	r0, r0, r7
 8005b8a:	2802      	cmp	r0, #2
 8005b8c:	f67f af4c 	bls.w	8005a28 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005b90:	2003      	movs	r0, #3
 8005b92:	e248      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b98:	6813      	ldr	r3, [r2, #0]
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ba0:	f7fb fd5e 	bl	8001660 <HAL_GetTick>
 8005ba4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f013 0f02 	tst.w	r3, #2
 8005bb0:	f43f af54 	beq.w	8005a5c <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bb4:	f7fb fd54 	bl	8001660 <HAL_GetTick>
 8005bb8:	1bc0      	subs	r0, r0, r7
 8005bba:	2802      	cmp	r0, #2
 8005bbc:	d9f3      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005bbe:	2003      	movs	r0, #3
 8005bc0:	e231      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bc2:	2e03      	cmp	r6, #3
 8005bc4:	f47f af55 	bne.w	8005a72 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8224 	beq.w	8006018 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	f013 0f02 	tst.w	r3, #2
 8005bd6:	d056      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005bd8:	2d04      	cmp	r5, #4
 8005bda:	d03d      	beq.n	8005c58 <HAL_RCC_OscConfig+0x274>
 8005bdc:	2d0c      	cmp	r5, #12
 8005bde:	d039      	beq.n	8005c54 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 808a 	beq.w	8005cfc <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bec:	6813      	ldr	r3, [r2, #0]
 8005bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005bf4:	f7fb fd34 	bl	8001660 <HAL_GetTick>
 8005bf8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005c04:	d136      	bne.n	8005c74 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c06:	f7fb fd2b 	bl	8001660 <HAL_GetTick>
 8005c0a:	1b80      	subs	r0, r0, r6
 8005c0c:	2802      	cmp	r0, #2
 8005c0e:	d9f4      	bls.n	8005bfa <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005c10:	2003      	movs	r0, #3
 8005c12:	e208      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c14:	6813      	ldr	r3, [r2, #0]
 8005c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1a:	6013      	str	r3, [r2, #0]
}
 8005c1c:	e744      	b.n	8005aa8 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8005c28:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	e739      	b.n	8005aa8 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005c34:	f7fb fd14 	bl	8001660 <HAL_GetTick>
 8005c38:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005c44:	d0c4      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c46:	f7fb fd0b 	bl	8001660 <HAL_GetTick>
 8005c4a:	1bc0      	subs	r0, r0, r7
 8005c4c:	2864      	cmp	r0, #100	@ 0x64
 8005c4e:	d9f4      	bls.n	8005c3a <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8005c50:	2003      	movs	r0, #3
 8005c52:	e1e8      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c54:	2e02      	cmp	r6, #2
 8005c56:	d1c3      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c58:	6923      	ldr	r3, [r4, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 81de 	beq.w	800601c <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c66:	6853      	ldr	r3, [r2, #4]
 8005c68:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005c6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c70:	6053      	str	r3, [r2, #4]
}
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c74:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c7a:	6853      	ldr	r3, [r2, #4]
 8005c7c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005c80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c84:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f013 0f08 	tst.w	r3, #8
 8005c8c:	d07e      	beq.n	8005d8c <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c8e:	69a3      	ldr	r3, [r4, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d062      	beq.n	8005d5a <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005c9c:	69e1      	ldr	r1, [r4, #28]
 8005c9e:	f003 0210 	and.w	r2, r3, #16
 8005ca2:	4291      	cmp	r1, r2
 8005ca4:	d011      	beq.n	8005cca <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ca6:	f003 0203 	and.w	r2, r3, #3
 8005caa:	2a02      	cmp	r2, #2
 8005cac:	f000 81b8 	beq.w	8006020 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005cb0:	f013 0f01 	tst.w	r3, #1
 8005cb4:	d138      	bne.n	8005d28 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005cb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cba:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	69e1      	ldr	r1, [r4, #28]
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cce:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005cda:	f7fb fcc1 	bl	8001660 <HAL_GetTick>
 8005cde:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ce8:	f013 0f02 	tst.w	r3, #2
 8005cec:	d14e      	bne.n	8005d8c <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cee:	f7fb fcb7 	bl	8001660 <HAL_GetTick>
 8005cf2:	1b80      	subs	r0, r0, r6
 8005cf4:	2811      	cmp	r0, #17
 8005cf6:	d9f3      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005cf8:	2003      	movs	r0, #3
 8005cfa:	e194      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d00:	6813      	ldr	r3, [r2, #0]
 8005d02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d06:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005d08:	f7fb fcaa 	bl	8001660 <HAL_GetTick>
 8005d0c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005d18:	d0b5      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d1a:	f7fb fca1 	bl	8001660 <HAL_GetTick>
 8005d1e:	1b80      	subs	r0, r0, r6
 8005d20:	2802      	cmp	r0, #2
 8005d22:	d9f4      	bls.n	8005d0e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005d24:	2003      	movs	r0, #3
 8005d26:	e17e      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d2c:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8005d38:	f7fb fc92 	bl	8001660 <HAL_GetTick>
 8005d3c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d46:	f013 0f02 	tst.w	r3, #2
 8005d4a:	d0b4      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d4c:	f7fb fc88 	bl	8001660 <HAL_GetTick>
 8005d50:	1b80      	subs	r0, r0, r6
 8005d52:	2811      	cmp	r0, #17
 8005d54:	d9f3      	bls.n	8005d3e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005d56:	2003      	movs	r0, #3
 8005d58:	e165      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d5e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005d6a:	f7fb fc79 	bl	8001660 <HAL_GetTick>
 8005d6e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d78:	f013 0f02 	tst.w	r3, #2
 8005d7c:	d006      	beq.n	8005d8c <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d7e:	f7fb fc6f 	bl	8001660 <HAL_GetTick>
 8005d82:	1b80      	subs	r0, r0, r6
 8005d84:	2811      	cmp	r0, #17
 8005d86:	d9f3      	bls.n	8005d70 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8005d88:	2003      	movs	r0, #3
 8005d8a:	e14c      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	f013 0f04 	tst.w	r3, #4
 8005d92:	f000 80b8 	beq.w	8005f06 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005d96:	4b22      	ldr	r3, [pc, #136]	@ (8005e20 <HAL_RCC_OscConfig+0x43c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005d9e:	d110      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8005da0:	f7ff fc86 	bl	80056b0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005da4:	f7fb fc5c 	bl	8001660 <HAL_GetTick>
 8005da8:	4606      	mov	r6, r0
 8005daa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <HAL_RCC_OscConfig+0x43c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005db2:	d106      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db4:	f7fb fc54 	bl	8001660 <HAL_GetTick>
 8005db8:	1b80      	subs	r0, r0, r6
 8005dba:	2802      	cmp	r0, #2
 8005dbc:	d9f5      	bls.n	8005daa <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8005dbe:	2003      	movs	r0, #3
 8005dc0:	e131      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d068      	beq.n	8005e9a <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005dc8:	2b85      	cmp	r3, #133	@ 0x85
 8005dca:	d001      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005dcc:	2b05      	cmp	r3, #5
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005dd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005dd8:	f043 0304 	orr.w	r3, r3, #4
 8005ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005de0:	f7fb fc3e 	bl	8001660 <HAL_GetTick>
 8005de4:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005de6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dea:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfe:	f013 0f02 	tst.w	r3, #2
 8005e02:	d10f      	bne.n	8005e24 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fb fc2c 	bl	8001660 <HAL_GetTick>
 8005e08:	1b80      	subs	r0, r0, r6
 8005e0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e0e:	4298      	cmp	r0, r3
 8005e10:	d9f1      	bls.n	8005df6 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8005e12:	2003      	movs	r0, #3
 8005e14:	e107      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
 8005e16:	bf00      	nop
 8005e18:	2000009c 	.word	0x2000009c
 8005e1c:	200000a0 	.word	0x200000a0
 8005e20:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e24:	68e3      	ldr	r3, [r4, #12]
 8005e26:	2b81      	cmp	r3, #129	@ 0x81
 8005e28:	d001      	beq.n	8005e2e <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e2a:	2b85      	cmp	r3, #133	@ 0x85
 8005e2c:	d11a      	bne.n	8005e64 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005e2e:	f7fb fc17 	bl	8001660 <HAL_GetTick>
 8005e32:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e38:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005e50:	d159      	bne.n	8005f06 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e52:	f7fb fc05 	bl	8001660 <HAL_GetTick>
 8005e56:	1b80      	subs	r0, r0, r6
 8005e58:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e5c:	4298      	cmp	r0, r3
 8005e5e:	d9f1      	bls.n	8005e44 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8005e60:	2003      	movs	r0, #3
 8005e62:	e0e0      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8005e64:	f7fb fbfc 	bl	8001660 <HAL_GetTick>
 8005e68:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e82:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005e86:	d03e      	beq.n	8005f06 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e88:	f7fb fbea 	bl	8001660 <HAL_GetTick>
 8005e8c:	1b80      	subs	r0, r0, r6
 8005e8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e92:	4298      	cmp	r0, r3
 8005e94:	d9f1      	bls.n	8005e7a <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8005e96:	2003      	movs	r0, #3
 8005e98:	e0c5      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005e9a:	f7fb fbe1 	bl	8001660 <HAL_GetTick>
 8005e9e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ea4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ea8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb8:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005ebc:	d008      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fb fbcf 	bl	8001660 <HAL_GetTick>
 8005ec2:	1b80      	subs	r0, r0, r6
 8005ec4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ec8:	4298      	cmp	r0, r3
 8005eca:	d9f1      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8005ecc:	2003      	movs	r0, #3
 8005ece:	e0aa      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005ed0:	f7fb fbc6 	bl	8001660 <HAL_GetTick>
 8005ed4:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eda:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eee:	f013 0f02 	tst.w	r3, #2
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef4:	f7fb fbb4 	bl	8001660 <HAL_GetTick>
 8005ef8:	1b80      	subs	r0, r0, r6
 8005efa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005efe:	4298      	cmp	r0, r3
 8005f00:	d9f1      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005f02:	2003      	movs	r0, #3
 8005f04:	e08f      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f06:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 808b 	beq.w	8006024 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f0e:	2d0c      	cmp	r5, #12
 8005f10:	d060      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d016      	beq.n	8005f44 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f1a:	6813      	ldr	r3, [r2, #0]
 8005f1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f22:	f7fb fb9d 	bl	8001660 <HAL_GetTick>
 8005f26:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005f32:	d148      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f38:	68d1      	ldr	r1, [r2, #12]
 8005f3a:	4b41      	ldr	r3, [pc, #260]	@ (8006040 <HAL_RCC_OscConfig+0x65c>)
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005f40:	2000      	movs	r0, #0
 8005f42:	e070      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f50:	f7fb fb86 	bl	8001660 <HAL_GetTick>
 8005f54:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005f60:	d12a      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f66:	68d3      	ldr	r3, [r2, #12]
 8005f68:	4936      	ldr	r1, [pc, #216]	@ (8006044 <HAL_RCC_OscConfig+0x660>)
 8005f6a:	4019      	ands	r1, r3
 8005f6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005f6e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005f70:	4303      	orrs	r3, r0
 8005f72:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005f74:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005f78:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005f7a:	4303      	orrs	r3, r0
 8005f7c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005f7e:	4303      	orrs	r3, r0
 8005f80:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005f82:	4303      	orrs	r3, r0
 8005f84:	4319      	orrs	r1, r3
 8005f86:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f88:	6813      	ldr	r3, [r2, #0]
 8005f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f8e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f90:	68d3      	ldr	r3, [r2, #12]
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f96:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005f98:	f7fb fb62 	bl	8001660 <HAL_GetTick>
 8005f9c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005fa8:	d13e      	bne.n	8006028 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005faa:	f7fb fb59 	bl	8001660 <HAL_GetTick>
 8005fae:	1b00      	subs	r0, r0, r4
 8005fb0:	280a      	cmp	r0, #10
 8005fb2:	d9f4      	bls.n	8005f9e <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005fb4:	2003      	movs	r0, #3
 8005fb6:	e036      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fb fb52 	bl	8001660 <HAL_GetTick>
 8005fbc:	1b40      	subs	r0, r0, r5
 8005fbe:	280a      	cmp	r0, #10
 8005fc0:	d9c9      	bls.n	8005f56 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8005fc2:	2003      	movs	r0, #3
 8005fc4:	e02f      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc6:	f7fb fb4b 	bl	8001660 <HAL_GetTick>
 8005fca:	1b00      	subs	r0, r0, r4
 8005fcc:	280a      	cmp	r0, #10
 8005fce:	d9ab      	bls.n	8005f28 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8005fd0:	2003      	movs	r0, #3
 8005fd2:	e028      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d029      	beq.n	800602c <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fdc:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005fde:	f003 0103 	and.w	r1, r3, #3
 8005fe2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005fe4:	4291      	cmp	r1, r2
 8005fe6:	d123      	bne.n	8006030 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005fe8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fee:	428a      	cmp	r2, r1
 8005ff0:	d120      	bne.n	8006034 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005ff2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ff6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005ff8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005ffc:	d11c      	bne.n	8006038 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005ffe:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8006002:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006004:	4293      	cmp	r3, r2
 8006006:	d119      	bne.n	800603c <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8006008:	2000      	movs	r0, #0
 800600a:	e00c      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 800600c:	2001      	movs	r0, #1
}
 800600e:	4770      	bx	lr
        return HAL_ERROR;
 8006010:	2001      	movs	r0, #1
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8006014:	2001      	movs	r0, #1
 8006016:	e006      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006018:	2001      	movs	r0, #1
 800601a:	e004      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800601c:	2001      	movs	r0, #1
 800601e:	e002      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006020:	2001      	movs	r0, #1
 8006022:	e000      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8006024:	2000      	movs	r0, #0
}
 8006026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8006028:	2000      	movs	r0, #0
 800602a:	e7fc      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800602c:	2001      	movs	r0, #1
 800602e:	e7fa      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006030:	2001      	movs	r0, #1
 8006032:	e7f8      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
 8006034:	2001      	movs	r0, #1
 8006036:	e7f6      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
 8006038:	2001      	movs	r0, #1
 800603a:	e7f4      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
 800603c:	2001      	movs	r0, #1
 800603e:	e7f2      	b.n	8006026 <HAL_RCC_OscConfig+0x642>
 8006040:	eefefffc 	.word	0xeefefffc
 8006044:	11c1808c 	.word	0x11c1808c

08006048 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006048:	2800      	cmp	r0, #0
 800604a:	f000 8127 	beq.w	800629c <HAL_RCC_ClockConfig+0x254>
{
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	460c      	mov	r4, r1
 8006052:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006054:	4b93      	ldr	r3, [pc, #588]	@ (80062a4 <HAL_RCC_ClockConfig+0x25c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	428b      	cmp	r3, r1
 800605e:	d32d      	bcc.n	80060bc <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	f013 0f02 	tst.w	r3, #2
 8006066:	d13f      	bne.n	80060e8 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	f013 0f20 	tst.w	r3, #32
 800606e:	d153      	bne.n	8006118 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006076:	d16a      	bne.n	800614e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	f013 0f04 	tst.w	r3, #4
 800607e:	f040 8083 	bne.w	8006188 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006082:	682b      	ldr	r3, [r5, #0]
 8006084:	f013 0f08 	tst.w	r3, #8
 8006088:	f040 8097 	bne.w	80061ba <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	f013 0f01 	tst.w	r3, #1
 8006092:	f000 80de 	beq.w	8006252 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006096:	686b      	ldr	r3, [r5, #4]
 8006098:	2b02      	cmp	r3, #2
 800609a:	f000 80a8 	beq.w	80061ee <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800609e:	2b03      	cmp	r3, #3
 80060a0:	f000 80ad 	beq.w	80061fe <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f040 80b2 	bne.w	800620e <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80060aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	f012 0f02 	tst.w	r2, #2
 80060b4:	f040 80b1 	bne.w	800621a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
 80060ba:	e0ee      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060bc:	4a79      	ldr	r2, [pc, #484]	@ (80062a4 <HAL_RCC_ClockConfig+0x25c>)
 80060be:	6813      	ldr	r3, [r2, #0]
 80060c0:	f023 0307 	bic.w	r3, r3, #7
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80060c8:	f7fb faca 	bl	8001660 <HAL_GetTick>
 80060cc:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b75      	ldr	r3, [pc, #468]	@ (80062a4 <HAL_RCC_ClockConfig+0x25c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	42a3      	cmp	r3, r4
 80060d8:	d0c2      	beq.n	8006060 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060da:	f7fb fac1 	bl	8001660 <HAL_GetTick>
 80060de:	1b80      	subs	r0, r0, r6
 80060e0:	2802      	cmp	r0, #2
 80060e2:	d9f4      	bls.n	80060ce <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80060e4:	2003      	movs	r0, #3
 80060e6:	e0d8      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80060e8:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80060ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060ee:	688a      	ldr	r2, [r1, #8]
 80060f0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80060f4:	4313      	orrs	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80060f8:	f7fb fab2 	bl	8001660 <HAL_GetTick>
 80060fc:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006108:	d1ae      	bne.n	8006068 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800610a:	f7fb faa9 	bl	8001660 <HAL_GetTick>
 800610e:	1b80      	subs	r0, r0, r6
 8006110:	2802      	cmp	r0, #2
 8006112:	d9f4      	bls.n	80060fe <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006114:	2003      	movs	r0, #3
 8006116:	e0c0      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006118:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800611a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800611e:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 8006122:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 800612c:	f7fb fa98 	bl	8001660 <HAL_GetTick>
 8006130:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006136:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800613a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800613e:	d197      	bne.n	8006070 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006140:	f7fb fa8e 	bl	8001660 <HAL_GetTick>
 8006144:	1b80      	subs	r0, r0, r6
 8006146:	2802      	cmp	r0, #2
 8006148:	d9f3      	bls.n	8006132 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800614a:	2003      	movs	r0, #3
 800614c:	e0a5      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800614e:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006154:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8006158:	f023 030f 	bic.w	r3, r3, #15
 800615c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006160:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8006164:	f7fb fa7c 	bl	8001660 <HAL_GetTick>
 8006168:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800616e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006172:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006176:	f47f af7f 	bne.w	8006078 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800617a:	f7fb fa71 	bl	8001660 <HAL_GetTick>
 800617e:	1b80      	subs	r0, r0, r6
 8006180:	2802      	cmp	r0, #2
 8006182:	d9f2      	bls.n	800616a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006184:	2003      	movs	r0, #3
 8006186:	e088      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006188:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800618a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800618e:	688a      	ldr	r2, [r1, #8]
 8006190:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006194:	4313      	orrs	r3, r2
 8006196:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006198:	f7fb fa62 	bl	8001660 <HAL_GetTick>
 800619c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80061a8:	f47f af6b 	bne.w	8006082 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061ac:	f7fb fa58 	bl	8001660 <HAL_GetTick>
 80061b0:	1b80      	subs	r0, r0, r6
 80061b2:	2802      	cmp	r0, #2
 80061b4:	d9f3      	bls.n	800619e <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80061b6:	2003      	movs	r0, #3
 80061b8:	e06f      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061ba:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80061bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061c0:	6893      	ldr	r3, [r2, #8]
 80061c2:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80061c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80061ca:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80061cc:	f7fb fa48 	bl	8001660 <HAL_GetTick>
 80061d0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80061dc:	f47f af56 	bne.w	800608c <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061e0:	f7fb fa3e 	bl	8001660 <HAL_GetTick>
 80061e4:	1b80      	subs	r0, r0, r6
 80061e6:	2802      	cmp	r0, #2
 80061e8:	d9f3      	bls.n	80061d2 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80061ea:	2003      	movs	r0, #3
 80061ec:	e055      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80061ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80061f8:	d10f      	bne.n	800621a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80061fa:	2001      	movs	r0, #1
 80061fc:	e04d      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80061fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8006208:	d107      	bne.n	800621a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800620a:	2001      	movs	r0, #1
 800620c:	e045      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800620e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8006218:	d042      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800621a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800621e:	688a      	ldr	r2, [r1, #8]
 8006220:	f022 0203 	bic.w	r2, r2, #3
 8006224:	4313      	orrs	r3, r2
 8006226:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006228:	f7fb fa1a 	bl	8001660 <HAL_GetTick>
 800622c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006238:	686a      	ldr	r2, [r5, #4]
 800623a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800623e:	d008      	beq.n	8006252 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006240:	f7fb fa0e 	bl	8001660 <HAL_GetTick>
 8006244:	1b80      	subs	r0, r0, r6
 8006246:	f241 3388 	movw	r3, #5000	@ 0x1388
 800624a:	4298      	cmp	r0, r3
 800624c:	d9ef      	bls.n	800622e <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800624e:	2003      	movs	r0, #3
 8006250:	e023      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006252:	4b14      	ldr	r3, [pc, #80]	@ (80062a4 <HAL_RCC_ClockConfig+0x25c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	42a3      	cmp	r3, r4
 800625c:	d915      	bls.n	800628a <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625e:	4a11      	ldr	r2, [pc, #68]	@ (80062a4 <HAL_RCC_ClockConfig+0x25c>)
 8006260:	6813      	ldr	r3, [r2, #0]
 8006262:	f023 0307 	bic.w	r3, r3, #7
 8006266:	4323      	orrs	r3, r4
 8006268:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800626a:	f7fb f9f9 	bl	8001660 <HAL_GetTick>
 800626e:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006270:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <HAL_RCC_ClockConfig+0x25c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	42a3      	cmp	r3, r4
 800627a:	d006      	beq.n	800628a <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800627c:	f7fb f9f0 	bl	8001660 <HAL_GetTick>
 8006280:	1b40      	subs	r0, r0, r5
 8006282:	2802      	cmp	r0, #2
 8006284:	d9f4      	bls.n	8006270 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8006286:	2003      	movs	r0, #3
 8006288:	e007      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800628a:	f7ff fb9b 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
 800628e:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <HAL_RCC_ClockConfig+0x260>)
 8006290:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006292:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <HAL_RCC_ClockConfig+0x264>)
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f7fb f9e1 	bl	800165c <HAL_InitTick>
}
 800629a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800629c:	2001      	movs	r0, #1
}
 800629e:	4770      	bx	lr
        return HAL_ERROR;
 80062a0:	2001      	movs	r0, #1
 80062a2:	e7fa      	b.n	800629a <HAL_RCC_ClockConfig+0x252>
 80062a4:	58004000 	.word	0x58004000
 80062a8:	2000009c 	.word	0x2000009c
 80062ac:	200000a0 	.word	0x200000a0

080062b0 <HAL_RCC_GetPCLK1Freq>:
{
 80062b0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80062b2:	f7ff fb87 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80062c0:	4a02      	ldr	r2, [pc, #8]	@ (80062cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80062c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80062c6:	40d8      	lsrs	r0, r3
 80062c8:	bd08      	pop	{r3, pc}
 80062ca:	bf00      	nop
 80062cc:	08016a44 	.word	0x08016a44

080062d0 <HAL_RCC_GetPCLK2Freq>:
{
 80062d0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80062d2:	f7ff fb77 	bl	80059c4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80062d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80062e0:	4a02      	ldr	r2, [pc, #8]	@ (80062ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80062e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80062e6:	40d8      	lsrs	r0, r3
 80062e8:	bd08      	pop	{r3, pc}
 80062ea:	bf00      	nop
 80062ec:	08016a44 	.word	0x08016a44

080062f0 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80062f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062f4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80062f8:	0902      	lsrs	r2, r0, #4
 80062fa:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 80062fe:	ea23 0302 	bic.w	r3, r3, r2
 8006302:	0100      	lsls	r0, r0, #4
 8006304:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8006308:	4303      	orrs	r3, r0
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800630e:	4770      	bx	lr

08006310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006314:	6803      	ldr	r3, [r0, #0]
 8006316:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800631a:	f040 80aa 	bne.w	8006472 <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800631e:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	f013 0f01 	tst.w	r3, #1
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006328:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800632a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800632e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006332:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006336:	b292      	uxth	r2, r2
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f013 0f02 	tst.w	r3, #2
 8006344:	d00a      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006346:	68a2      	ldr	r2, [r4, #8]
 8006348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800634c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006350:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006354:	b292      	uxth	r2, r2
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	f013 0f20 	tst.w	r3, #32
 8006362:	d009      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006364:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800636a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800636e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800637e:	d00c      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006380:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006386:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800638a:	0c08      	lsrs	r0, r1, #16
 800638c:	0400      	lsls	r0, r0, #16
 800638e:	ea23 0300 	bic.w	r3, r3, r0
 8006392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006396:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80063a0:	d00c      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80063a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80063ac:	0c08      	lsrs	r0, r1, #16
 80063ae:	0400      	lsls	r0, r0, #16
 80063b0:	ea23 0300 	bic.w	r3, r3, r0
 80063b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80063b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80063c2:	d00c      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80063c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80063c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80063ce:	0c08      	lsrs	r0, r1, #16
 80063d0:	0400      	lsls	r0, r0, #16
 80063d2:	ea23 0300 	bic.w	r3, r3, r0
 80063d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80063da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80063e4:	f040 809b 	bne.w	800651e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063ee:	f040 809a 	bne.w	8006526 <HAL_RCCEx_PeriphCLKConfig+0x216>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80063f8:	f040 8099 	bne.w	800652e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	f013 0f10 	tst.w	r3, #16
 8006402:	d00e      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006404:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800640a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800640e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006418:	68e3      	ldr	r3, [r4, #12]
 800641a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800641e:	f000 808a 	beq.w	8006536 <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006428:	d00f      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800642a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800642c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006430:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006434:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8006438:	4313      	orrs	r3, r2
 800643a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800643e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006440:	b91b      	cbnz	r3, 800644a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006442:	68cb      	ldr	r3, [r1, #12]
 8006444:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006448:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8006450:	d00d      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006452:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006454:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006458:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800645c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006466:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800646c:	d068      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 800646e:	4628      	mov	r0, r5
 8006470:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006472:	f7ff f91d 	bl	80056b0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006476:	f7fb f8f3 	bl	8001660 <HAL_GetTick>
 800647a:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800647c:	4b33      	ldr	r3, [pc, #204]	@ (800654c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006484:	d106      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006486:	f7fb f8eb 	bl	8001660 <HAL_GetTick>
 800648a:	1b40      	subs	r0, r0, r5
 800648c:	2802      	cmp	r0, #2
 800648e:	d9f5      	bls.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 8006490:	2503      	movs	r5, #3
 8006492:	e000      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006494:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006496:	2d00      	cmp	r5, #0
 8006498:	f47f af42 	bne.w	8006320 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80064a8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d016      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b2:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80064b6:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80064be:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80064c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80064ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80064ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80064d2:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80064d6:	f011 0f02 	tst.w	r1, #2
 80064da:	d10d      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      if (ret == HAL_OK)
 80064dc:	2d00      	cmp	r5, #0
 80064de:	f47f af1f 	bne.w	8006320 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80064e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80064ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80064f6:	e713      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x10>
        tickstart = HAL_GetTick();
 80064f8:	f7fb f8b2 	bl	8001660 <HAL_GetTick>
 80064fc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80064fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006506:	f013 0f02 	tst.w	r3, #2
 800650a:	d1e7      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fb f8a8 	bl	8001660 <HAL_GetTick>
 8006510:	1b83      	subs	r3, r0, r6
 8006512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006516:	4293      	cmp	r3, r2
 8006518:	d9f1      	bls.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            ret = HAL_TIMEOUT;
 800651a:	2503      	movs	r5, #3
 800651c:	e7de      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800651e:	6960      	ldr	r0, [r4, #20]
 8006520:	f7ff fee6 	bl	80062f0 <LL_RCC_SetI2CClockSource>
 8006524:	e760      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006526:	69a0      	ldr	r0, [r4, #24]
 8006528:	f7ff fee2 	bl	80062f0 <LL_RCC_SetI2CClockSource>
 800652c:	e761      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800652e:	69e0      	ldr	r0, [r4, #28]
 8006530:	f7ff fede 	bl	80062f0 <LL_RCC_SetI2CClockSource>
 8006534:	e762      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006536:	68cb      	ldr	r3, [r1, #12]
 8006538:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800653c:	60cb      	str	r3, [r1, #12]
 800653e:	e770      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006540:	68cb      	ldr	r3, [r1, #12]
 8006542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006546:	60cb      	str	r3, [r1, #12]
 8006548:	e791      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800654a:	bf00      	nop
 800654c:	58000400 	.word	0x58000400

08006550 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006550:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006552:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8006556:	2a01      	cmp	r2, #1
 8006558:	d035      	beq.n	80065c6 <HAL_RTC_DeactivateAlarm+0x76>
 800655a:	2201      	movs	r2, #1
 800655c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006560:	2202      	movs	r2, #2
 8006562:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006566:	4a19      	ldr	r2, [pc, #100]	@ (80065cc <HAL_RTC_DeactivateAlarm+0x7c>)
 8006568:	20ca      	movs	r0, #202	@ 0xca
 800656a:	6250      	str	r0, [r2, #36]	@ 0x24
 800656c:	2053      	movs	r0, #83	@ 0x53
 800656e:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006570:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006574:	d018      	beq.n	80065a8 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006576:	4a15      	ldr	r2, [pc, #84]	@ (80065cc <HAL_RTC_DeactivateAlarm+0x7c>)
 8006578:	6991      	ldr	r1, [r2, #24]
 800657a:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 800657e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006580:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8006582:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006586:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006588:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800658a:	f021 0102 	bic.w	r1, r1, #2
 800658e:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006590:	2102      	movs	r1, #2
 8006592:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006594:	4a0d      	ldr	r2, [pc, #52]	@ (80065cc <HAL_RTC_DeactivateAlarm+0x7c>)
 8006596:	21ff      	movs	r1, #255	@ 0xff
 8006598:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800659a:	2201      	movs	r2, #1
 800659c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065a0:	2000      	movs	r0, #0
 80065a2:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 80065a6:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80065a8:	6991      	ldr	r1, [r2, #24]
 80065aa:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 80065ae:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80065b0:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80065b2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80065b6:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80065b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80065ba:	f021 0101 	bic.w	r1, r1, #1
 80065be:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80065c0:	2101      	movs	r1, #1
 80065c2:	65d1      	str	r1, [r2, #92]	@ 0x5c
 80065c4:	e7e6      	b.n	8006594 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80065c6:	2002      	movs	r0, #2
}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40002800 	.word	0x40002800

080065d0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80065d4:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <HAL_RTC_AlarmIRQHandler+0x3c>)
 80065d6:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80065d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80065da:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80065dc:	f015 0f01 	tst.w	r5, #1
 80065e0:	d106      	bne.n	80065f0 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80065e2:	f015 0f02 	tst.w	r5, #2
 80065e6:	d109      	bne.n	80065fc <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80065f0:	4b06      	ldr	r3, [pc, #24]	@ (800660c <HAL_RTC_AlarmIRQHandler+0x3c>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80065f6:	f7fb f9bb 	bl	8001970 <HAL_RTC_AlarmAEventCallback>
 80065fa:	e7f2      	b.n	80065e2 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80065fc:	4b03      	ldr	r3, [pc, #12]	@ (800660c <HAL_RTC_AlarmIRQHandler+0x3c>)
 80065fe:	2202      	movs	r2, #2
 8006600:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006602:	4620      	mov	r0, r4
 8006604:	f000 f9ee 	bl	80069e4 <HAL_RTCEx_AlarmBEventCallback>
 8006608:	e7ee      	b.n	80065e8 <HAL_RTC_AlarmIRQHandler+0x18>
 800660a:	bf00      	nop
 800660c:	40002800 	.word	0x40002800

08006610 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006610:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006612:	4a0b      	ldr	r2, [pc, #44]	@ (8006640 <HAL_RTC_WaitForSynchro+0x30>)
 8006614:	68d3      	ldr	r3, [r2, #12]
 8006616:	f023 0320 	bic.w	r3, r3, #32
 800661a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800661c:	f7fb f820 	bl	8001660 <HAL_GetTick>
 8006620:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006622:	4b07      	ldr	r3, [pc, #28]	@ (8006640 <HAL_RTC_WaitForSynchro+0x30>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f013 0f20 	tst.w	r3, #32
 800662a:	d107      	bne.n	800663c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800662c:	f7fb f818 	bl	8001660 <HAL_GetTick>
 8006630:	1b00      	subs	r0, r0, r4
 8006632:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006636:	d9f4      	bls.n	8006622 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006638:	2003      	movs	r0, #3
 800663a:	e000      	b.n	800663e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800663c:	2000      	movs	r0, #0
}
 800663e:	bd10      	pop	{r4, pc}
 8006640:	40002800 	.word	0x40002800

08006644 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006644:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006646:	4b11      	ldr	r3, [pc, #68]	@ (800668c <RTC_EnterInitMode+0x48>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800664e:	d002      	beq.n	8006656 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006650:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006652:	4620      	mov	r0, r4
 8006654:	bd70      	pop	{r4, r5, r6, pc}
 8006656:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006658:	4a0c      	ldr	r2, [pc, #48]	@ (800668c <RTC_EnterInitMode+0x48>)
 800665a:	68d3      	ldr	r3, [r2, #12]
 800665c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006660:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006662:	f7fa fffd 	bl	8001660 <HAL_GetTick>
 8006666:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006668:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800666a:	4b08      	ldr	r3, [pc, #32]	@ (800668c <RTC_EnterInitMode+0x48>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006672:	d1ee      	bne.n	8006652 <RTC_EnterInitMode+0xe>
 8006674:	2c03      	cmp	r4, #3
 8006676:	d0ec      	beq.n	8006652 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006678:	f7fa fff2 	bl	8001660 <HAL_GetTick>
 800667c:	1b43      	subs	r3, r0, r5
 800667e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006682:	d9f2      	bls.n	800666a <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006684:	2403      	movs	r4, #3
 8006686:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 800668a:	e7ee      	b.n	800666a <RTC_EnterInitMode+0x26>
 800668c:	40002800 	.word	0x40002800

08006690 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006694:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <RTC_ExitInitMode+0x48>)
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800669c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	f013 0f20 	tst.w	r3, #32
 80066a4:	d106      	bne.n	80066b4 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066a6:	f7ff ffb3 	bl	8006610 <HAL_RTC_WaitForSynchro>
 80066aa:	b198      	cbz	r0, 80066d4 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066ac:	2003      	movs	r0, #3
 80066ae:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80066b2:	e00f      	b.n	80066d4 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066b4:	4a08      	ldr	r2, [pc, #32]	@ (80066d8 <RTC_ExitInitMode+0x48>)
 80066b6:	6993      	ldr	r3, [r2, #24]
 80066b8:	f023 0320 	bic.w	r3, r3, #32
 80066bc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066be:	f7ff ffa7 	bl	8006610 <HAL_RTC_WaitForSynchro>
 80066c2:	b110      	cbz	r0, 80066ca <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066c4:	2003      	movs	r0, #3
 80066c6:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066ca:	4a03      	ldr	r2, [pc, #12]	@ (80066d8 <RTC_ExitInitMode+0x48>)
 80066cc:	6993      	ldr	r3, [r2, #24]
 80066ce:	f043 0320 	orr.w	r3, r3, #32
 80066d2:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	40002800 	.word	0x40002800

080066dc <HAL_RTC_Init>:
  if (hrtc != NULL)
 80066dc:	2800      	cmp	r0, #0
 80066de:	d055      	beq.n	800678c <HAL_RTC_Init+0xb0>
{
 80066e0:	b510      	push	{r4, lr}
 80066e2:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80066e4:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80066e8:	b163      	cbz	r3, 8006704 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80066ea:	2302      	movs	r3, #2
 80066ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80066f0:	4b27      	ldr	r3, [pc, #156]	@ (8006790 <HAL_RTC_Init+0xb4>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f013 0f10 	tst.w	r3, #16
 80066f8:	d009      	beq.n	800670e <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8006700:	2000      	movs	r0, #0
}
 8006702:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006704:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8006708:	f7fa fe20 	bl	800134c <HAL_RTC_MspInit>
 800670c:	e7ed      	b.n	80066ea <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800670e:	4b20      	ldr	r3, [pc, #128]	@ (8006790 <HAL_RTC_Init+0xb4>)
 8006710:	22ca      	movs	r2, #202	@ 0xca
 8006712:	625a      	str	r2, [r3, #36]	@ 0x24
 8006714:	2253      	movs	r2, #83	@ 0x53
 8006716:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8006718:	4620      	mov	r0, r4
 800671a:	f7ff ff93 	bl	8006644 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800671e:	b118      	cbz	r0, 8006728 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006720:	4b1b      	ldr	r3, [pc, #108]	@ (8006790 <HAL_RTC_Init+0xb4>)
 8006722:	22ff      	movs	r2, #255	@ 0xff
 8006724:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006726:	e7ec      	b.n	8006702 <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006728:	4b19      	ldr	r3, [pc, #100]	@ (8006790 <HAL_RTC_Init+0xb4>)
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 8006730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006734:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006736:	6999      	ldr	r1, [r3, #24]
 8006738:	6862      	ldr	r2, [r4, #4]
 800673a:	6920      	ldr	r0, [r4, #16]
 800673c:	4302      	orrs	r2, r0
 800673e:	69a0      	ldr	r0, [r4, #24]
 8006740:	4302      	orrs	r2, r0
 8006742:	430a      	orrs	r2, r1
 8006744:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006746:	68e2      	ldr	r2, [r4, #12]
 8006748:	68a1      	ldr	r1, [r4, #8]
 800674a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800674e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8006756:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006758:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800675a:	4301      	orrs	r1, r0
 800675c:	430a      	orrs	r2, r1
 800675e:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff ff95 	bl	8006690 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8006766:	b118      	cbz	r0, 8006770 <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006768:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <HAL_RTC_Init+0xb4>)
 800676a:	22ff      	movs	r2, #255	@ 0xff
 800676c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800676e:	e7c8      	b.n	8006702 <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 8006770:	4907      	ldr	r1, [pc, #28]	@ (8006790 <HAL_RTC_Init+0xb4>)
 8006772:	698b      	ldr	r3, [r1, #24]
 8006774:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006778:	6a22      	ldr	r2, [r4, #32]
 800677a:	69e0      	ldr	r0, [r4, #28]
 800677c:	4302      	orrs	r2, r0
 800677e:	6960      	ldr	r0, [r4, #20]
 8006780:	4302      	orrs	r2, r0
 8006782:	4313      	orrs	r3, r2
 8006784:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006786:	23ff      	movs	r3, #255	@ 0xff
 8006788:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 800678a:	e7b6      	b.n	80066fa <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800678c:	2001      	movs	r0, #1
}
 800678e:	4770      	bx	lr
 8006790:	40002800 	.word	0x40002800

08006794 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006794:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006796:	e002      	b.n	800679e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006798:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800679a:	380a      	subs	r0, #10
 800679c:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800679e:	2809      	cmp	r0, #9
 80067a0:	d8fa      	bhi.n	8006798 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	b2db      	uxtb	r3, r3
}
 80067a6:	4318      	orrs	r0, r3
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80067ac:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f000 80b0 	beq.w	8006916 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80067b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80067be:	2301      	movs	r3, #1
 80067c0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067c4:	2302      	movs	r3, #2
 80067c6:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80067ca:	4b54      	ldr	r3, [pc, #336]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 80067cc:	68de      	ldr	r6, [r3, #12]
 80067ce:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80067d2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80067d6:	d043      	beq.n	8006860 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80067d8:	bb12      	cbnz	r2, 8006820 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80067e0:	d101      	bne.n	80067e6 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80067e6:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067ea:	7820      	ldrb	r0, [r4, #0]
 80067ec:	f7ff ffd2 	bl	8006794 <RTC_ByteToBcd2>
 80067f0:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067f2:	7860      	ldrb	r0, [r4, #1]
 80067f4:	f7ff ffce 	bl	8006794 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067f8:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067fc:	78a0      	ldrb	r0, [r4, #2]
 80067fe:	f7ff ffc9 	bl	8006794 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006802:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006804:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006806:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800680a:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800680e:	f7ff ffc1 	bl	8006794 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006812:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006816:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006818:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800681a:	ea48 0000 	orr.w	r0, r8, r0
 800681e:	e020      	b.n	8006862 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006820:	6948      	ldr	r0, [r1, #20]
 8006822:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8006826:	d009      	beq.n	800683c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006828:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800682c:	d006      	beq.n	800683c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800682e:	4b3b      	ldr	r3, [pc, #236]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006836:	d101      	bne.n	800683c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006838:	2300      	movs	r3, #0
 800683a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800683c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800683e:	7863      	ldrb	r3, [r4, #1]
 8006840:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006846:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006848:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800684a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800684c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006850:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006854:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006858:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800685a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800685c:	4318      	orrs	r0, r3
 800685e:	e000      	b.n	8006862 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006860:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006862:	4b2e      	ldr	r3, [pc, #184]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 8006864:	22ca      	movs	r2, #202	@ 0xca
 8006866:	625a      	str	r2, [r3, #36]	@ 0x24
 8006868:	2253      	movs	r2, #83	@ 0x53
 800686a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800686c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800686e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006872:	d02a      	beq.n	80068ca <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006874:	4b29      	ldr	r3, [pc, #164]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 8006876:	699a      	ldr	r2, [r3, #24]
 8006878:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 800687c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800687e:	2202      	movs	r2, #2
 8006880:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006882:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8006886:	d040      	beq.n	800690a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006888:	4b24      	ldr	r3, [pc, #144]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 800688a:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800688c:	69a2      	ldr	r2, [r4, #24]
 800688e:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006890:	6862      	ldr	r2, [r4, #4]
 8006892:	4b22      	ldr	r3, [pc, #136]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 8006894:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006896:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8006898:	f042 0202 	orr.w	r2, r2, #2
 800689c:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 80068a4:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80068a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006920 <HAL_RTC_SetAlarm_IT+0x174>)
 80068a8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80068ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b4:	4b19      	ldr	r3, [pc, #100]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 80068b6:	22ff      	movs	r2, #255	@ 0xff
 80068b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80068c0:	2000      	movs	r0, #0
 80068c2:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 80068c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068ca:	4b14      	ldr	r3, [pc, #80]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80068d2:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068d4:	2201      	movs	r2, #1
 80068d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80068d8:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80068dc:	d00f      	beq.n	80068fe <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80068de:	4b0f      	ldr	r3, [pc, #60]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 80068e0:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80068e2:	69a2      	ldr	r2, [r4, #24]
 80068e4:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 80068ea:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80068ec:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80068fa:	619a      	str	r2, [r3, #24]
 80068fc:	e7d3      	b.n	80068a6 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80068fe:	69a3      	ldr	r3, [r4, #24]
 8006900:	69e2      	ldr	r2, [r4, #28]
 8006902:	4313      	orrs	r3, r2
 8006904:	4a05      	ldr	r2, [pc, #20]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 8006906:	6453      	str	r3, [r2, #68]	@ 0x44
 8006908:	e7ed      	b.n	80068e6 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800690a:	69a3      	ldr	r3, [r4, #24]
 800690c:	69e2      	ldr	r2, [r4, #28]
 800690e:	4313      	orrs	r3, r2
 8006910:	4a02      	ldr	r2, [pc, #8]	@ (800691c <HAL_RTC_SetAlarm_IT+0x170>)
 8006912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006914:	e7bc      	b.n	8006890 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006916:	2002      	movs	r0, #2
}
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40002800 	.word	0x40002800
 8006920:	58000800 	.word	0x58000800

08006924 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006924:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d017      	beq.n	800695c <HAL_RTCEx_EnableBypassShadow+0x38>
 800692c:	2101      	movs	r1, #1
 800692e:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006932:	2302      	movs	r3, #2
 8006934:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006938:	4b09      	ldr	r3, [pc, #36]	@ (8006960 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800693a:	22ca      	movs	r2, #202	@ 0xca
 800693c:	625a      	str	r2, [r3, #36]	@ 0x24
 800693e:	2253      	movs	r2, #83	@ 0x53
 8006940:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	f042 0220 	orr.w	r2, r2, #32
 8006948:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800694a:	22ff      	movs	r2, #255	@ 0xff
 800694c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800694e:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006952:	2300      	movs	r3, #0
 8006954:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8006958:	4618      	mov	r0, r3
 800695a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800695c:	2002      	movs	r0, #2
}
 800695e:	4770      	bx	lr
 8006960:	40002800 	.word	0x40002800

08006964 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006964:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d020      	beq.n	80069ae <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800696c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800696e:	2101      	movs	r1, #1
 8006970:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006974:	2302      	movs	r3, #2
 8006976:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800697a:	4b0e      	ldr	r3, [pc, #56]	@ (80069b4 <HAL_RTCEx_SetSSRU_IT+0x50>)
 800697c:	22ca      	movs	r2, #202	@ 0xca
 800697e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006980:	2253      	movs	r2, #83	@ 0x53
 8006982:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800698a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800698c:	4c0a      	ldr	r4, [pc, #40]	@ (80069b8 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800698e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8006992:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006996:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800699a:	22ff      	movs	r2, #255	@ 0xff
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800699e:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069a2:	2300      	movs	r3, #0
 80069a4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 80069a8:	4618      	mov	r0, r3
}
 80069aa:	bc10      	pop	{r4}
 80069ac:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80069ae:	2002      	movs	r0, #2
}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40002800 	.word	0x40002800
 80069b8:	58000800 	.word	0x58000800

080069bc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80069bc:	b510      	push	{r4, lr}
 80069be:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80069c0:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80069c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80069c8:	d103      	bne.n	80069d2 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80069d0:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80069d2:	4b03      	ldr	r3, [pc, #12]	@ (80069e0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80069d4:	2240      	movs	r2, #64	@ 0x40
 80069d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80069d8:	f7fa ffce 	bl	8001978 <HAL_RTCEx_SSRUEventCallback>
 80069dc:	e7f5      	b.n	80069ca <HAL_RTCEx_SSRUIRQHandler+0xe>
 80069de:	bf00      	nop
 80069e0:	40002800 	.word	0x40002800

080069e4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80069e4:	4770      	bx	lr

080069e6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80069e6:	0089      	lsls	r1, r1, #2
 80069e8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80069ec:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80069f0:	600a      	str	r2, [r1, #0]
}
 80069f2:	4770      	bx	lr

080069f4 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80069f4:	0089      	lsls	r1, r1, #2
 80069f6:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80069fa:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80069fe:	6808      	ldr	r0, [r1, #0]
}
 8006a00:	4770      	bx	lr
	...

08006a04 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006a04:	4b07      	ldr	r3, [pc, #28]	@ (8006a24 <SUBGHZSPI_Init+0x20>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a0c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006a0e:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8006a12:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006a14:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8006a18:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a20:	601a      	str	r2, [r3, #0]
}
 8006a22:	4770      	bx	lr
 8006a24:	58010000 	.word	0x58010000

08006a28 <HAL_SUBGHZ_Init>:
{
 8006a28:	b530      	push	{r4, r5, lr}
 8006a2a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d05d      	beq.n	8006aec <HAL_SUBGHZ_Init+0xc4>
 8006a30:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006a32:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006a34:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8006a38:	b10b      	cbz	r3, 8006a3e <HAL_SUBGHZ_Init+0x16>
 8006a3a:	2d03      	cmp	r5, #3
 8006a3c:	d10b      	bne.n	8006a56 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006a42:	4620      	mov	r0, r4
 8006a44:	f7fa fd22 	bl	800148c <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006a48:	4a29      	ldr	r2, [pc, #164]	@ (8006af0 <HAL_SUBGHZ_Init+0xc8>)
 8006a4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006a4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006a56:	b185      	cbz	r5, 8006a7a <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006a58:	4b26      	ldr	r3, [pc, #152]	@ (8006af4 <HAL_SUBGHZ_Init+0xcc>)
 8006a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a5e:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8006a60:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006a62:	6820      	ldr	r0, [r4, #0]
 8006a64:	f7ff ffce 	bl	8006a04 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a70:	2301      	movs	r3, #1
 8006a72:	71a3      	strb	r3, [r4, #6]
}
 8006a74:	4628      	mov	r0, r5
 8006a76:	b003      	add	sp, #12
 8006a78:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a82:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8006a86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006af8 <HAL_SUBGHZ_Init+0xd0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a96:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006a9a:	2264      	movs	r2, #100	@ 0x64
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	e014      	b.n	8006ace <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006aa4:	2501      	movs	r5, #1
 8006aa6:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006aa8:	4b12      	ldr	r3, [pc, #72]	@ (8006af4 <HAL_SUBGHZ_Init+0xcc>)
 8006aaa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006abc:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ac2:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	d1d3      	bne.n	8006a70 <HAL_SUBGHZ_Init+0x48>
 8006ac8:	e7cb      	b.n	8006a62 <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0ec      	beq.n	8006aa8 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0e7      	beq.n	8006aa4 <HAL_SUBGHZ_Init+0x7c>
      count--;
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae2:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8006ae6:	d0f0      	beq.n	8006aca <HAL_SUBGHZ_Init+0xa2>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7ee      	b.n	8006aca <HAL_SUBGHZ_Init+0xa2>
    return status;
 8006aec:	2501      	movs	r5, #1
 8006aee:	e7c1      	b.n	8006a74 <HAL_SUBGHZ_Init+0x4c>
 8006af0:	58000800 	.word	0x58000800
 8006af4:	58000400 	.word	0x58000400
 8006af8:	2000009c 	.word	0x2000009c

08006afc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006afc:	b082      	sub	sp, #8
 8006afe:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b00:	4b1a      	ldr	r3, [pc, #104]	@ (8006b6c <SUBGHZSPI_Transmit+0x70>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b08:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b0c:	2064      	movs	r0, #100	@ 0x64
 8006b0e:	fb00 f303 	mul.w	r3, r0, r3
 8006b12:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	b14b      	cbz	r3, 8006b2c <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b1e:	4b14      	ldr	r3, [pc, #80]	@ (8006b70 <SUBGHZSPI_Transmit+0x74>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f013 0f02 	tst.w	r3, #2
 8006b26:	d0f5      	beq.n	8006b14 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2000      	movs	r0, #0
 8006b2a:	e001      	b.n	8006b30 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006b30:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <SUBGHZSPI_Transmit+0x74>)
 8006b32:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b34:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <SUBGHZSPI_Transmit+0x70>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b3c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b40:	2164      	movs	r1, #100	@ 0x64
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	b143      	cbz	r3, 8006b5e <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006b52:	4b07      	ldr	r3, [pc, #28]	@ (8006b70 <SUBGHZSPI_Transmit+0x74>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f013 0f01 	tst.w	r3, #1
 8006b5a:	d0f5      	beq.n	8006b48 <SUBGHZSPI_Transmit+0x4c>
 8006b5c:	e001      	b.n	8006b62 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b5e:	2001      	movs	r0, #1
 8006b60:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006b62:	4b03      	ldr	r3, [pc, #12]	@ (8006b70 <SUBGHZSPI_Transmit+0x74>)
 8006b64:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006b66:	b002      	add	sp, #8
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	2000009c 	.word	0x2000009c
 8006b70:	58010000 	.word	0x58010000

08006b74 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006b74:	b082      	sub	sp, #8
 8006b76:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b78:	4b1c      	ldr	r3, [pc, #112]	@ (8006bec <SUBGHZSPI_Receive+0x78>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b80:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b84:	2064      	movs	r0, #100	@ 0x64
 8006b86:	fb00 f303 	mul.w	r3, r0, r3
 8006b8a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	b14b      	cbz	r3, 8006ba4 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b96:	4b16      	ldr	r3, [pc, #88]	@ (8006bf0 <SUBGHZSPI_Receive+0x7c>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f013 0f02 	tst.w	r3, #2
 8006b9e:	d0f5      	beq.n	8006b8c <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e001      	b.n	8006ba8 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006ba8:	4b11      	ldr	r3, [pc, #68]	@ (8006bf0 <SUBGHZSPI_Receive+0x7c>)
 8006baa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8006bae:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006bec <SUBGHZSPI_Receive+0x78>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006bba:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006bbe:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8006bc2:	fb0c f303 	mul.w	r3, ip, r3
 8006bc6:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	b143      	cbz	r3, 8006bde <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006bd2:	4b07      	ldr	r3, [pc, #28]	@ (8006bf0 <SUBGHZSPI_Receive+0x7c>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f013 0f01 	tst.w	r3, #1
 8006bda:	d0f5      	beq.n	8006bc8 <SUBGHZSPI_Receive+0x54>
 8006bdc:	e001      	b.n	8006be2 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006bde:	2001      	movs	r0, #1
 8006be0:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006be2:	4b03      	ldr	r3, [pc, #12]	@ (8006bf0 <SUBGHZSPI_Receive+0x7c>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006be8:	b002      	add	sp, #8
 8006bea:	4770      	bx	lr
 8006bec:	2000009c 	.word	0x2000009c
 8006bf0:	58010000 	.word	0x58010000

08006bf4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006bf4:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006bf6:	4b13      	ldr	r3, [pc, #76]	@ (8006c44 <SUBGHZ_WaitOnBusy+0x50>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bfe:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006c02:	2264      	movs	r2, #100	@ 0x64
 8006c04:	fb02 f303 	mul.w	r3, r2, r3
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	e006      	b.n	8006c1a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006c10:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006c12:	b002      	add	sp, #8
 8006c14:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006c16:	4213      	tst	r3, r2
 8006c18:	d012      	beq.n	8006c40 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <SUBGHZ_WaitOnBusy+0x54>)
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f013 0304 	ands.w	r3, r3, #4
 8006c22:	d000      	beq.n	8006c26 <SUBGHZ_WaitOnBusy+0x32>
 8006c24:	2301      	movs	r3, #1
    if (count == 0U)
 8006c26:	9a01      	ldr	r2, [sp, #4]
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d0ef      	beq.n	8006c0c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006c2c:	9a01      	ldr	r2, [sp, #4]
 8006c2e:	3a01      	subs	r2, #1
 8006c30:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006c32:	4a05      	ldr	r2, [pc, #20]	@ (8006c48 <SUBGHZ_WaitOnBusy+0x54>)
 8006c34:	6952      	ldr	r2, [r2, #20]
 8006c36:	f012 0202 	ands.w	r2, r2, #2
 8006c3a:	d0ec      	beq.n	8006c16 <SUBGHZ_WaitOnBusy+0x22>
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	e7ea      	b.n	8006c16 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006c40:	2000      	movs	r0, #0
 8006c42:	e7e6      	b.n	8006c12 <SUBGHZ_WaitOnBusy+0x1e>
 8006c44:	2000009c 	.word	0x2000009c
 8006c48:	58000400 	.word	0x58000400

08006c4c <SUBGHZ_CheckDeviceReady>:
{
 8006c4c:	b500      	push	{lr}
 8006c4e:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006c50:	7903      	ldrb	r3, [r0, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d004      	beq.n	8006c60 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006c56:	f7ff ffcd 	bl	8006bf4 <SUBGHZ_WaitOnBusy>
}
 8006c5a:	b003      	add	sp, #12
 8006c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006c60:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c68:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006c6c:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8006c9c <SUBGHZ_CheckDeviceReady+0x50>)
 8006c70:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006c74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006c82:	9b01      	ldr	r3, [sp, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1f9      	bne.n	8006c7c <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c88:	4a04      	ldr	r2, [pc, #16]	@ (8006c9c <SUBGHZ_CheckDeviceReady+0x50>)
 8006c8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c96:	e7de      	b.n	8006c56 <SUBGHZ_CheckDeviceReady+0xa>
 8006c98:	2000009c 	.word	0x2000009c
 8006c9c:	58000400 	.word	0x58000400

08006ca0 <HAL_SUBGHZ_WriteRegisters>:
{
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ca6:	7980      	ldrb	r0, [r0, #6]
 8006ca8:	fa5f f880 	uxtb.w	r8, r0
 8006cac:	f1b8 0f01 	cmp.w	r8, #1
 8006cb0:	d13e      	bne.n	8006d30 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	4617      	mov	r7, r2
 8006cb6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006cb8:	796b      	ldrb	r3, [r5, #5]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d03b      	beq.n	8006d36 <HAL_SUBGHZ_WriteRegisters+0x96>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f7ff ffc0 	bl	8006c4c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d3c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006cce:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006cd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006cda:	210d      	movs	r1, #13
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f7ff ff0d 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006ce2:	0a21      	lsrs	r1, r4, #8
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7ff ff09 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006cea:	b2e1      	uxtb	r1, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f7ff ff05 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006cf2:	2400      	movs	r4, #0
 8006cf4:	e005      	b.n	8006d02 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006cf6:	5d39      	ldrb	r1, [r7, r4]
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f7ff feff 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006cfe:	3401      	adds	r4, #1
 8006d00:	b2a4      	uxth	r4, r4
 8006d02:	42b4      	cmp	r4, r6
 8006d04:	d3f7      	bcc.n	8006cf6 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d06:	4a0d      	ldr	r2, [pc, #52]	@ (8006d3c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006d08:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d14:	4628      	mov	r0, r5
 8006d16:	f7ff ff6d 	bl	8006bf4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d1a:	68ab      	ldr	r3, [r5, #8]
 8006d1c:	b90b      	cbnz	r3, 8006d22 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006d1e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d22:	2301      	movs	r3, #1
 8006d24:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006d26:	2300      	movs	r3, #0
 8006d28:	716b      	strb	r3, [r5, #5]
}
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006d30:	f04f 0802 	mov.w	r8, #2
 8006d34:	e7f9      	b.n	8006d2a <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006d36:	f04f 0802 	mov.w	r8, #2
 8006d3a:	e7f6      	b.n	8006d2a <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006d3c:	58000400 	.word	0x58000400

08006d40 <HAL_SUBGHZ_ReadRegisters>:
{
 8006d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d44:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d46:	7980      	ldrb	r0, [r0, #6]
 8006d48:	fa5f f880 	uxtb.w	r8, r0
 8006d4c:	f1b8 0f01 	cmp.w	r8, #1
 8006d50:	d141      	bne.n	8006dd6 <HAL_SUBGHZ_ReadRegisters+0x96>
 8006d52:	460c      	mov	r4, r1
 8006d54:	4615      	mov	r5, r2
 8006d56:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006d58:	7973      	ldrb	r3, [r6, #5]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d03e      	beq.n	8006ddc <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff ff72 	bl	8006c4c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d68:	4a1e      	ldr	r2, [pc, #120]	@ (8006de4 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006d6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006d6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006d76:	211d      	movs	r1, #29
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff febf 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006d7e:	0a21      	lsrs	r1, r4, #8
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7ff febb 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006d86:	b2e1      	uxtb	r1, r4
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7ff feb7 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff feb3 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d96:	2400      	movs	r4, #0
 8006d98:	e006      	b.n	8006da8 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff fee9 	bl	8006b74 <SUBGHZSPI_Receive>
      pData++;
 8006da2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006da4:	3401      	adds	r4, #1
 8006da6:	b2a4      	uxth	r4, r4
 8006da8:	42bc      	cmp	r4, r7
 8006daa:	d3f6      	bcc.n	8006d9a <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dac:	4a0d      	ldr	r2, [pc, #52]	@ (8006de4 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006dae:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ff1a 	bl	8006bf4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006dc0:	68b3      	ldr	r3, [r6, #8]
 8006dc2:	b90b      	cbnz	r3, 8006dc8 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006dc4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	7173      	strb	r3, [r6, #5]
}
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006dd6:	f04f 0802 	mov.w	r8, #2
 8006dda:	e7f9      	b.n	8006dd0 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006ddc:	f04f 0802 	mov.w	r8, #2
 8006de0:	e7f6      	b.n	8006dd0 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006de2:	bf00      	nop
 8006de4:	58000400 	.word	0x58000400

08006de8 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dec:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dee:	7980      	ldrb	r0, [r0, #6]
 8006df0:	fa5f f980 	uxtb.w	r9, r0
 8006df4:	f1b9 0f01 	cmp.w	r9, #1
 8006df8:	d143      	bne.n	8006e82 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006dfa:	4688      	mov	r8, r1
 8006dfc:	4617      	mov	r7, r2
 8006dfe:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006e00:	796b      	ldrb	r3, [r5, #5]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d040      	beq.n	8006e88 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006e06:	2301      	movs	r3, #1
 8006e08:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f7ff ff1e 	bl	8006c4c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006e10:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8006e14:	d005      	beq.n	8006e22 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006e16:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8006e1a:	d002      	beq.n	8006e22 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	712b      	strb	r3, [r5, #4]
 8006e20:	e001      	b.n	8006e26 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e22:	2301      	movs	r3, #1
 8006e24:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e26:	4a1a      	ldr	r2, [pc, #104]	@ (8006e90 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006e28:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006e2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e34:	4641      	mov	r1, r8
 8006e36:	4628      	mov	r0, r5
 8006e38:	f7ff fe60 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e3c:	2400      	movs	r4, #0
 8006e3e:	e005      	b.n	8006e4c <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e40:	5d39      	ldrb	r1, [r7, r4]
 8006e42:	4628      	mov	r0, r5
 8006e44:	f7ff fe5a 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e48:	3401      	adds	r4, #1
 8006e4a:	b2a4      	uxth	r4, r4
 8006e4c:	42b4      	cmp	r4, r6
 8006e4e:	d3f7      	bcc.n	8006e40 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e50:	4a0f      	ldr	r2, [pc, #60]	@ (8006e90 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006e52:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8006e5e:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8006e62:	d10a      	bne.n	8006e7a <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e64:	68ab      	ldr	r3, [r5, #8]
 8006e66:	b90b      	cbnz	r3, 8006e6c <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8006e68:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006e70:	2300      	movs	r3, #0
 8006e72:	716b      	strb	r3, [r5, #5]
}
 8006e74:	4648      	mov	r0, r9
 8006e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f7ff feba 	bl	8006bf4 <SUBGHZ_WaitOnBusy>
 8006e80:	e7f0      	b.n	8006e64 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006e82:	f04f 0902 	mov.w	r9, #2
 8006e86:	e7f5      	b.n	8006e74 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006e88:	f04f 0902 	mov.w	r9, #2
 8006e8c:	e7f2      	b.n	8006e74 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006e8e:	bf00      	nop
 8006e90:	58000400 	.word	0x58000400

08006e94 <HAL_SUBGHZ_ExecGetCmd>:
{
 8006e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e98:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e9a:	7980      	ldrb	r0, [r0, #6]
 8006e9c:	fa5f f880 	uxtb.w	r8, r0
 8006ea0:	f1b8 0f01 	cmp.w	r8, #1
 8006ea4:	d139      	bne.n	8006f1a <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006eac:	7973      	ldrb	r3, [r6, #5]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d036      	beq.n	8006f20 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff fec8 	bl	8006c4c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f28 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006ebe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006ec2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7ff fe15 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff fe11 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006eda:	2400      	movs	r4, #0
 8006edc:	e006      	b.n	8006eec <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7ff fe47 	bl	8006b74 <SUBGHZSPI_Receive>
      pData++;
 8006ee6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006ee8:	3401      	adds	r4, #1
 8006eea:	b2a4      	uxth	r4, r4
 8006eec:	42bc      	cmp	r4, r7
 8006eee:	d3f6      	bcc.n	8006ede <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8006f28 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006ef2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7ff fe78 	bl	8006bf4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f04:	68b3      	ldr	r3, [r6, #8]
 8006f06:	b90b      	cbnz	r3, 8006f0c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006f08:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006f10:	2300      	movs	r3, #0
 8006f12:	7173      	strb	r3, [r6, #5]
}
 8006f14:	4640      	mov	r0, r8
 8006f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006f1a:	f04f 0802 	mov.w	r8, #2
 8006f1e:	e7f9      	b.n	8006f14 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006f20:	f04f 0802 	mov.w	r8, #2
 8006f24:	e7f6      	b.n	8006f14 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006f26:	bf00      	nop
 8006f28:	58000400 	.word	0x58000400

08006f2c <HAL_SUBGHZ_IRQHandler>:
{
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006f32:	2300      	movs	r3, #0
 8006f34:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006f38:	2302      	movs	r3, #2
 8006f3a:	aa01      	add	r2, sp, #4
 8006f3c:	2112      	movs	r1, #18
 8006f3e:	f7ff ffa9 	bl	8006e94 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006f42:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006f46:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8006f4a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8006f4e:	b226      	sxth	r6, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006f50:	2302      	movs	r3, #2
 8006f52:	aa01      	add	r2, sp, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4628      	mov	r0, r5
 8006f58:	f7ff ff46 	bl	8006de8 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006f5c:	f016 0f01 	tst.w	r6, #1
 8006f60:	d123      	bne.n	8006faa <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006f62:	f014 0f02 	tst.w	r4, #2
 8006f66:	d124      	bne.n	8006fb2 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006f68:	f014 0f04 	tst.w	r4, #4
 8006f6c:	d125      	bne.n	8006fba <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006f6e:	f014 0f08 	tst.w	r4, #8
 8006f72:	d126      	bne.n	8006fc2 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006f74:	f014 0f10 	tst.w	r4, #16
 8006f78:	d127      	bne.n	8006fca <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006f7a:	f014 0f20 	tst.w	r4, #32
 8006f7e:	d128      	bne.n	8006fd2 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006f80:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8006f84:	d129      	bne.n	8006fda <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006f86:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8006f8a:	d006      	beq.n	8006f9a <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006f8c:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8006f90:	d027      	beq.n	8006fe2 <HAL_SUBGHZ_IRQHandler+0xb6>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006f92:	2101      	movs	r1, #1
 8006f94:	4628      	mov	r0, r5
 8006f96:	f00c f927 	bl	80131e8 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006f9a:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8006f9e:	d125      	bne.n	8006fec <HAL_SUBGHZ_IRQHandler+0xc0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006fa0:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 8006fa4:	d126      	bne.n	8006ff4 <HAL_SUBGHZ_IRQHandler+0xc8>
}
 8006fa6:	b002      	add	sp, #8
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006faa:	4628      	mov	r0, r5
 8006fac:	f00c f904 	bl	80131b8 <HAL_SUBGHZ_TxCpltCallback>
 8006fb0:	e7d7      	b.n	8006f62 <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f00c f908 	bl	80131c8 <HAL_SUBGHZ_RxCpltCallback>
 8006fb8:	e7d6      	b.n	8006f68 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f00c f938 	bl	8013230 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006fc0:	e7d5      	b.n	8006f6e <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f00c f93c 	bl	8013240 <HAL_SUBGHZ_SyncWordValidCallback>
 8006fc8:	e7d4      	b.n	8006f74 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f00c f940 	bl	8013250 <HAL_SUBGHZ_HeaderValidCallback>
 8006fd0:	e7d3      	b.n	8006f7a <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f00c f924 	bl	8013220 <HAL_SUBGHZ_HeaderErrorCallback>
 8006fd8:	e7d2      	b.n	8006f80 <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f00c f8fc 	bl	80131d8 <HAL_SUBGHZ_CRCErrorCallback>
 8006fe0:	e7d1      	b.n	8006f86 <HAL_SUBGHZ_IRQHandler+0x5a>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f00c f8ff 	bl	80131e8 <HAL_SUBGHZ_CADStatusCallback>
 8006fea:	e7d6      	b.n	8006f9a <HAL_SUBGHZ_IRQHandler+0x6e>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006fec:	4628      	mov	r0, r5
 8006fee:	f00c f90d 	bl	801320c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006ff2:	e7d5      	b.n	8006fa0 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f00c f933 	bl	8013260 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006ffa:	e7d4      	b.n	8006fa6 <HAL_SUBGHZ_IRQHandler+0x7a>

08006ffc <HAL_SUBGHZ_WriteBuffer>:
{
 8006ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007002:	7980      	ldrb	r0, [r0, #6]
 8007004:	fa5f f880 	uxtb.w	r8, r0
 8007008:	f1b8 0f01 	cmp.w	r8, #1
 800700c:	d138      	bne.n	8007080 <HAL_SUBGHZ_WriteBuffer+0x84>
 800700e:	460c      	mov	r4, r1
 8007010:	4617      	mov	r7, r2
 8007012:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007014:	796b      	ldrb	r3, [r5, #5]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d035      	beq.n	8007086 <HAL_SUBGHZ_WriteBuffer+0x8a>
 800701a:	2301      	movs	r3, #1
 800701c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800701e:	4628      	mov	r0, r5
 8007020:	f7ff fe14 	bl	8006c4c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007024:	4a19      	ldr	r2, [pc, #100]	@ (800708c <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007026:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800702a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800702e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007032:	210e      	movs	r1, #14
 8007034:	4628      	mov	r0, r5
 8007036:	f7ff fd61 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800703a:	4621      	mov	r1, r4
 800703c:	4628      	mov	r0, r5
 800703e:	f7ff fd5d 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007042:	2400      	movs	r4, #0
 8007044:	e005      	b.n	8007052 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007046:	5d39      	ldrb	r1, [r7, r4]
 8007048:	4628      	mov	r0, r5
 800704a:	f7ff fd57 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800704e:	3401      	adds	r4, #1
 8007050:	b2a4      	uxth	r4, r4
 8007052:	42b4      	cmp	r4, r6
 8007054:	d3f7      	bcc.n	8007046 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007056:	4a0d      	ldr	r2, [pc, #52]	@ (800708c <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007058:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800705c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007064:	4628      	mov	r0, r5
 8007066:	f7ff fdc5 	bl	8006bf4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800706a:	68ab      	ldr	r3, [r5, #8]
 800706c:	b90b      	cbnz	r3, 8007072 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800706e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007072:	2301      	movs	r3, #1
 8007074:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007076:	2300      	movs	r3, #0
 8007078:	716b      	strb	r3, [r5, #5]
}
 800707a:	4640      	mov	r0, r8
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007080:	f04f 0802 	mov.w	r8, #2
 8007084:	e7f9      	b.n	800707a <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8007086:	f04f 0802 	mov.w	r8, #2
 800708a:	e7f6      	b.n	800707a <HAL_SUBGHZ_WriteBuffer+0x7e>
 800708c:	58000400 	.word	0x58000400

08007090 <HAL_SUBGHZ_ReadBuffer>:
{
 8007090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007094:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007096:	7980      	ldrb	r0, [r0, #6]
 8007098:	fa5f f880 	uxtb.w	r8, r0
 800709c:	f1b8 0f01 	cmp.w	r8, #1
 80070a0:	d13d      	bne.n	800711e <HAL_SUBGHZ_ReadBuffer+0x8e>
 80070a2:	460c      	mov	r4, r1
 80070a4:	4615      	mov	r5, r2
 80070a6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80070a8:	7973      	ldrb	r3, [r6, #5]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d03a      	beq.n	8007124 <HAL_SUBGHZ_ReadBuffer+0x94>
 80070ae:	2301      	movs	r3, #1
 80070b0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7ff fdca 	bl	8006c4c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070b8:	4a1c      	ldr	r2, [pc, #112]	@ (800712c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80070ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80070be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80070c6:	211e      	movs	r1, #30
 80070c8:	4630      	mov	r0, r6
 80070ca:	f7ff fd17 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070ce:	4621      	mov	r1, r4
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7ff fd13 	bl	8006afc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80070d6:	2100      	movs	r1, #0
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff fd0f 	bl	8006afc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070de:	2400      	movs	r4, #0
 80070e0:	e006      	b.n	80070f0 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80070e2:	4629      	mov	r1, r5
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff fd45 	bl	8006b74 <SUBGHZSPI_Receive>
      pData++;
 80070ea:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80070ec:	3401      	adds	r4, #1
 80070ee:	b2a4      	uxth	r4, r4
 80070f0:	42bc      	cmp	r4, r7
 80070f2:	d3f6      	bcc.n	80070e2 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070f4:	4a0d      	ldr	r2, [pc, #52]	@ (800712c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80070f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80070fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007102:	4630      	mov	r0, r6
 8007104:	f7ff fd76 	bl	8006bf4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007108:	68b3      	ldr	r3, [r6, #8]
 800710a:	b90b      	cbnz	r3, 8007110 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 800710c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007110:	2301      	movs	r3, #1
 8007112:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007114:	2300      	movs	r3, #0
 8007116:	7173      	strb	r3, [r6, #5]
}
 8007118:	4640      	mov	r0, r8
 800711a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800711e:	f04f 0802 	mov.w	r8, #2
 8007122:	e7f9      	b.n	8007118 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8007124:	f04f 0802 	mov.w	r8, #2
 8007128:	e7f6      	b.n	8007118 <HAL_SUBGHZ_ReadBuffer+0x88>
 800712a:	bf00      	nop
 800712c:	58000400 	.word	0x58000400

08007130 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007130:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	e852 3f00 	ldrex	r3, [r2]
 8007136:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	e842 3100 	strex	r1, r3, [r2]
 800713e:	2900      	cmp	r1, #0
 8007140:	d1f6      	bne.n	8007130 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007142:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	f102 0308 	add.w	r3, r2, #8
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	3208      	adds	r2, #8
 8007152:	e842 3100 	strex	r1, r3, [r2]
 8007156:	2900      	cmp	r1, #0
 8007158:	d1f3      	bne.n	8007142 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800715a:	2320      	movs	r3, #32
 800715c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8007160:	4770      	bx	lr

08007162 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007162:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	e852 3f00 	ldrex	r3, [r2]
 8007168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	e842 3100 	strex	r1, r3, [r2]
 8007170:	2900      	cmp	r1, #0
 8007172:	d1f6      	bne.n	8007162 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007174:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	f102 0308 	add.w	r3, r2, #8
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007182:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	3208      	adds	r2, #8
 8007188:	e842 3100 	strex	r1, r3, [r2]
 800718c:	2900      	cmp	r1, #0
 800718e:	d1f1      	bne.n	8007174 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007190:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d006      	beq.n	80071a4 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007196:	2320      	movs	r3, #32
 8007198:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	2300      	movs	r3, #0
 800719e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071a0:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80071a2:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	e852 3f00 	ldrex	r3, [r2]
 80071aa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	e842 3100 	strex	r1, r3, [r2]
 80071b2:	2900      	cmp	r1, #0
 80071b4:	d1f6      	bne.n	80071a4 <UART_EndRxTransfer+0x42>
 80071b6:	e7ee      	b.n	8007196 <UART_EndRxTransfer+0x34>

080071b8 <HAL_UART_Transmit_DMA>:
{
 80071b8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80071ba:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80071be:	2a20      	cmp	r2, #32
 80071c0:	d13d      	bne.n	800723e <HAL_UART_Transmit_DMA+0x86>
{
 80071c2:	b510      	push	{r4, lr}
 80071c4:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80071c6:	2900      	cmp	r1, #0
 80071c8:	d03b      	beq.n	8007242 <HAL_UART_Transmit_DMA+0x8a>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d03b      	beq.n	8007246 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 80071ce:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80071d0:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071d4:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071de:	2221      	movs	r2, #33	@ 0x21
 80071e0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 80071e4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80071e6:	b1ca      	cbz	r2, 800721c <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80071e8:	4918      	ldr	r1, [pc, #96]	@ (800724c <HAL_UART_Transmit_DMA+0x94>)
 80071ea:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80071ec:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80071ee:	4918      	ldr	r1, [pc, #96]	@ (8007250 <HAL_UART_Transmit_DMA+0x98>)
 80071f0:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80071f2:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80071f4:	4917      	ldr	r1, [pc, #92]	@ (8007254 <HAL_UART_Transmit_DMA+0x9c>)
 80071f6:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80071f8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80071fa:	2100      	movs	r1, #0
 80071fc:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80071fe:	6802      	ldr	r2, [r0, #0]
 8007200:	3228      	adds	r2, #40	@ 0x28
 8007202:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007204:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8007206:	f7fd fe55 	bl	8004eb4 <HAL_DMA_Start_IT>
 800720a:	b138      	cbz	r0, 800721c <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800720c:	2310      	movs	r3, #16
 800720e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8007212:	2320      	movs	r3, #32
 8007214:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8007218:	2001      	movs	r0, #1
 800721a:	e00f      	b.n	800723c <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	2240      	movs	r2, #64	@ 0x40
 8007220:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007222:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	f102 0308 	add.w	r3, r2, #8
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	3208      	adds	r2, #8
 8007232:	e842 3100 	strex	r1, r3, [r2]
 8007236:	2900      	cmp	r1, #0
 8007238:	d1f3      	bne.n	8007222 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 800723a:	2000      	movs	r0, #0
}
 800723c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800723e:	2002      	movs	r0, #2
}
 8007240:	4770      	bx	lr
      return HAL_ERROR;
 8007242:	2001      	movs	r0, #1
 8007244:	e7fa      	b.n	800723c <HAL_UART_Transmit_DMA+0x84>
 8007246:	2001      	movs	r0, #1
 8007248:	e7f8      	b.n	800723c <HAL_UART_Transmit_DMA+0x84>
 800724a:	bf00      	nop
 800724c:	08007259 	.word	0x08007259
 8007250:	080072c7 	.word	0x080072c7
 8007254:	080072d3 	.word	0x080072d3

08007258 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007258:	b508      	push	{r3, lr}
 800725a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800725c:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f013 0f20 	tst.w	r3, #32
 8007266:	d118      	bne.n	800729a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800726e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	f102 0308 	add.w	r3, r2, #8
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	3208      	adds	r2, #8
 800727e:	e842 3100 	strex	r1, r3, [r2]
 8007282:	2900      	cmp	r1, #0
 8007284:	d1f3      	bne.n	800726e <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007286:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	e852 3f00 	ldrex	r3, [r2]
 800728c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	e842 3100 	strex	r1, r3, [r2]
 8007294:	2900      	cmp	r1, #0
 8007296:	d1f6      	bne.n	8007286 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007298:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800729a:	f7fa fca7 	bl	8001bec <HAL_UART_TxCpltCallback>
}
 800729e:	e7fb      	b.n	8007298 <UART_DMATransmitCplt+0x40>

080072a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072a0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	e852 3f00 	ldrex	r3, [r2]
 80072a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	e842 3100 	strex	r1, r3, [r2]
 80072b0:	2900      	cmp	r1, #0
 80072b2:	d1f6      	bne.n	80072a2 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072b4:	2320      	movs	r3, #32
 80072b6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072be:	f7fa fc95 	bl	8001bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c2:	bd08      	pop	{r3, pc}

080072c4 <HAL_UART_TxHalfCpltCallback>:
}
 80072c4:	4770      	bx	lr

080072c6 <UART_DMATxHalfCplt>:
{
 80072c6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80072c8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80072ca:	f7ff fffb 	bl	80072c4 <HAL_UART_TxHalfCpltCallback>
}
 80072ce:	bd08      	pop	{r3, pc}

080072d0 <HAL_UART_ErrorCallback>:
}
 80072d0:	4770      	bx	lr

080072d2 <UART_DMAError>:
{
 80072d2:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072d4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80072d6:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80072da:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072e6:	d001      	beq.n	80072ec <UART_DMAError+0x1a>
 80072e8:	2a21      	cmp	r2, #33	@ 0x21
 80072ea:	d010      	beq.n	800730e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80072f4:	d001      	beq.n	80072fa <UART_DMAError+0x28>
 80072f6:	2d22      	cmp	r5, #34	@ 0x22
 80072f8:	d010      	beq.n	800731c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80072fe:	f043 0310 	orr.w	r3, r3, #16
 8007302:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8007306:	4620      	mov	r0, r4
 8007308:	f7ff ffe2 	bl	80072d0 <HAL_UART_ErrorCallback>
}
 800730c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007314:	4620      	mov	r0, r4
 8007316:	f7ff ff0b 	bl	8007130 <UART_EndTxTransfer>
 800731a:	e7e7      	b.n	80072ec <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff ff1d 	bl	8007162 <UART_EndRxTransfer>
 8007328:	e7e7      	b.n	80072fa <UART_DMAError+0x28>

0800732a <UART_DMAAbortOnError>:
{
 800732a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800732c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007334:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8007338:	f7ff ffca 	bl	80072d0 <HAL_UART_ErrorCallback>
}
 800733c:	bd08      	pop	{r3, pc}

0800733e <HAL_UARTEx_RxEventCallback>:
}
 800733e:	4770      	bx	lr

08007340 <HAL_UART_IRQHandler>:
{
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007344:	6802      	ldr	r2, [r0, #0]
 8007346:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007348:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800734a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800734c:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8007350:	ea13 0f0c 	tst.w	r3, ip
 8007354:	d10d      	bne.n	8007372 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007356:	f013 0f20 	tst.w	r3, #32
 800735a:	d010      	beq.n	800737e <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800735c:	f010 0f20 	tst.w	r0, #32
 8007360:	d102      	bne.n	8007368 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007362:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8007366:	d00a      	beq.n	800737e <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8007368:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800736a:	b393      	cbz	r3, 80073d2 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800736c:	4620      	mov	r0, r4
 800736e:	4798      	blx	r3
      return;
 8007370:	e02f      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007372:	4db4      	ldr	r5, [pc, #720]	@ (8007644 <HAL_UART_IRQHandler+0x304>)
 8007374:	400d      	ands	r5, r1
 8007376:	d12d      	bne.n	80073d4 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007378:	4eb3      	ldr	r6, [pc, #716]	@ (8007648 <HAL_UART_IRQHandler+0x308>)
 800737a:	4230      	tst	r0, r6
 800737c:	d12a      	bne.n	80073d4 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8007380:	2d01      	cmp	r5, #1
 8007382:	f000 80c0 	beq.w	8007506 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007386:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800738a:	d003      	beq.n	8007394 <HAL_UART_IRQHandler+0x54>
 800738c:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8007390:	f040 815e 	bne.w	8007650 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007398:	d007      	beq.n	80073aa <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800739a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800739e:	f040 815e 	bne.w	800765e <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073a2:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 80073a6:	f040 815a 	bne.w	800765e <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073aa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80073ae:	d003      	beq.n	80073b8 <HAL_UART_IRQHandler+0x78>
 80073b0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80073b4:	f040 815a 	bne.w	800766c <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073b8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80073bc:	d003      	beq.n	80073c6 <HAL_UART_IRQHandler+0x86>
 80073be:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80073c2:	f040 8157 	bne.w	8007674 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073c6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80073ca:	d002      	beq.n	80073d2 <HAL_UART_IRQHandler+0x92>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f2c0 8155 	blt.w	800767c <HAL_UART_IRQHandler+0x33c>
}
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073d4:	f013 0f01 	tst.w	r3, #1
 80073d8:	d009      	beq.n	80073ee <HAL_UART_IRQHandler+0xae>
 80073da:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80073de:	d006      	beq.n	80073ee <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073e0:	2601      	movs	r6, #1
 80073e2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073e4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80073e8:	4332      	orrs	r2, r6
 80073ea:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073ee:	f013 0f02 	tst.w	r3, #2
 80073f2:	d00b      	beq.n	800740c <HAL_UART_IRQHandler+0xcc>
 80073f4:	f011 0f01 	tst.w	r1, #1
 80073f8:	d008      	beq.n	800740c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073fa:	6822      	ldr	r2, [r4, #0]
 80073fc:	2602      	movs	r6, #2
 80073fe:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007400:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007404:	f042 0204 	orr.w	r2, r2, #4
 8007408:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800740c:	f013 0f04 	tst.w	r3, #4
 8007410:	d00b      	beq.n	800742a <HAL_UART_IRQHandler+0xea>
 8007412:	f011 0f01 	tst.w	r1, #1
 8007416:	d008      	beq.n	800742a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	2604      	movs	r6, #4
 800741c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800741e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007422:	f042 0202 	orr.w	r2, r2, #2
 8007426:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800742a:	f013 0f08 	tst.w	r3, #8
 800742e:	d00b      	beq.n	8007448 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007430:	f010 0f20 	tst.w	r0, #32
 8007434:	d100      	bne.n	8007438 <HAL_UART_IRQHandler+0xf8>
 8007436:	b13d      	cbz	r5, 8007448 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007438:	6822      	ldr	r2, [r4, #0]
 800743a:	2508      	movs	r5, #8
 800743c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800743e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007442:	432a      	orrs	r2, r5
 8007444:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007448:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800744c:	d00c      	beq.n	8007468 <HAL_UART_IRQHandler+0x128>
 800744e:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8007452:	d009      	beq.n	8007468 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007454:	6822      	ldr	r2, [r4, #0]
 8007456:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800745a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800745c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007460:	f042 0220 	orr.w	r2, r2, #32
 8007464:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007468:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800746c:	2a00      	cmp	r2, #0
 800746e:	d0b0      	beq.n	80073d2 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007470:	f013 0f20 	tst.w	r3, #32
 8007474:	d009      	beq.n	800748a <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007476:	f010 0f20 	tst.w	r0, #32
 800747a:	d102      	bne.n	8007482 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800747c:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8007480:	d003      	beq.n	800748a <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8007482:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007484:	b10b      	cbz	r3, 800748a <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8007486:	4620      	mov	r0, r4
 8007488:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800748a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007496:	d102      	bne.n	800749e <HAL_UART_IRQHandler+0x15e>
 8007498:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800749c:	d02c      	beq.n	80074f8 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 800749e:	4620      	mov	r0, r4
 80074a0:	f7ff fe5f 	bl	8007162 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80074ac:	d020      	beq.n	80074f0 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	f102 0308 	add.w	r3, r2, #8
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	3208      	adds	r2, #8
 80074be:	e842 3100 	strex	r1, r3, [r2]
 80074c2:	2900      	cmp	r1, #0
 80074c4:	d1f3      	bne.n	80074ae <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 80074c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80074ca:	b16b      	cbz	r3, 80074e8 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074cc:	4a5f      	ldr	r2, [pc, #380]	@ (800764c <HAL_UART_IRQHandler+0x30c>)
 80074ce:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80074d4:	f7fd fd74 	bl	8004fc0 <HAL_DMA_Abort_IT>
 80074d8:	2800      	cmp	r0, #0
 80074da:	f43f af7a 	beq.w	80073d2 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074de:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80074e2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80074e4:	4798      	blx	r3
 80074e6:	e774      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff fef1 	bl	80072d0 <HAL_UART_ErrorCallback>
 80074ee:	e770      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7ff feed 	bl	80072d0 <HAL_UART_ErrorCallback>
 80074f6:	e76c      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 80074f8:	4620      	mov	r0, r4
 80074fa:	f7ff fee9 	bl	80072d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fe:	2300      	movs	r3, #0
 8007500:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8007504:	e765      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007506:	f013 0f10 	tst.w	r3, #16
 800750a:	f43f af3c 	beq.w	8007386 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800750e:	f010 0f10 	tst.w	r0, #16
 8007512:	f43f af38 	beq.w	8007386 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007516:	2310      	movs	r3, #16
 8007518:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007522:	d053      	beq.n	80075cc <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007524:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8007528:	6813      	ldr	r3, [r2, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800752e:	2b00      	cmp	r3, #0
 8007530:	f43f af4f 	beq.w	80073d2 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007534:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007538:	4299      	cmp	r1, r3
 800753a:	f67f af4a 	bls.w	80073d2 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800753e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f013 0f20 	tst.w	r3, #32
 800754a:	d132      	bne.n	80075b2 <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800754c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	e852 3f00 	ldrex	r3, [r2]
 8007552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	e842 3100 	strex	r1, r3, [r2]
 800755a:	2900      	cmp	r1, #0
 800755c:	d1f6      	bne.n	800754c <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	f102 0308 	add.w	r3, r2, #8
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	3208      	adds	r2, #8
 800756e:	e842 3100 	strex	r1, r3, [r2]
 8007572:	2900      	cmp	r1, #0
 8007574:	d1f3      	bne.n	800755e <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007576:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	f102 0308 	add.w	r3, r2, #8
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	3208      	adds	r2, #8
 8007586:	e842 3100 	strex	r1, r3, [r2]
 800758a:	2900      	cmp	r1, #0
 800758c:	d1f3      	bne.n	8007576 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 800758e:	2320      	movs	r3, #32
 8007590:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007594:	2300      	movs	r3, #0
 8007596:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007598:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	e852 3f00 	ldrex	r3, [r2]
 800759e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	e842 3100 	strex	r1, r3, [r2]
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d1f6      	bne.n	8007598 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075aa:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80075ae:	f7fd fccd 	bl	8004f4c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075b2:	2302      	movs	r3, #2
 80075b4:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075b6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80075ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	1ac9      	subs	r1, r1, r3
 80075c2:	b289      	uxth	r1, r1
 80075c4:	4620      	mov	r0, r4
 80075c6:	f7ff feba 	bl	800733e <HAL_UARTEx_RxEventCallback>
      return;
 80075ca:	e702      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80075d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	1ac9      	subs	r1, r1, r3
 80075d8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80075da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f43f aef6 	beq.w	80073d2 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 80075e6:	2900      	cmp	r1, #0
 80075e8:	f43f aef3 	beq.w	80073d2 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	e852 3f00 	ldrex	r3, [r2]
 80075f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	e842 3000 	strex	r0, r3, [r2]
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d1f6      	bne.n	80075ec <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	f102 0308 	add.w	r3, r2, #8
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800760c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	3208      	adds	r2, #8
 8007612:	e842 3000 	strex	r0, r3, [r2]
 8007616:	2800      	cmp	r0, #0
 8007618:	d1f1      	bne.n	80075fe <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800761a:	2320      	movs	r3, #32
 800761c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007620:	2300      	movs	r3, #0
 8007622:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8007624:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007626:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	e852 3f00 	ldrex	r3, [r2]
 800762c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	e842 3000 	strex	r0, r3, [r2]
 8007634:	2800      	cmp	r0, #0
 8007636:	d1f6      	bne.n	8007626 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007638:	2302      	movs	r3, #2
 800763a:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800763c:	4620      	mov	r0, r4
 800763e:	f7ff fe7e 	bl	800733e <HAL_UARTEx_RxEventCallback>
      return;
 8007642:	e6c6      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
 8007644:	10000001 	.word	0x10000001
 8007648:	04000120 	.word	0x04000120
 800764c:	0800732b 	.word	0x0800732b
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007650:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007654:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007656:	4620      	mov	r0, r4
 8007658:	f000 fe60 	bl	800831c <HAL_UARTEx_WakeupCallback>
    return;
 800765c:	e6b9      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800765e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007660:	2b00      	cmp	r3, #0
 8007662:	f43f aeb6 	beq.w	80073d2 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8007666:	4620      	mov	r0, r4
 8007668:	4798      	blx	r3
    return;
 800766a:	e6b2      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff fe17 	bl	80072a0 <UART_EndTransmit_IT>
    return;
 8007672:	e6ae      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007674:	4620      	mov	r0, r4
 8007676:	f000 fe53 	bl	8008320 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800767a:	e6aa      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fe4e 	bl	800831e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007682:	e6a6      	b.n	80073d2 <HAL_UART_IRQHandler+0x92>

08007684 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007684:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8007686:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800768e:	2a22      	cmp	r2, #34	@ 0x22
 8007690:	d005      	beq.n	800769e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007692:	6802      	ldr	r2, [r0, #0]
 8007694:	6993      	ldr	r3, [r2, #24]
 8007696:	f043 0308 	orr.w	r3, r3, #8
 800769a:	6193      	str	r3, [r2, #24]
  }
}
 800769c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800769e:	6802      	ldr	r2, [r0, #0]
 80076a0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80076a6:	400b      	ands	r3, r1
 80076a8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80076aa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80076ac:	3301      	adds	r3, #1
 80076ae:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80076b0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80076be:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e9      	bne.n	800769c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	e852 3f00 	ldrex	r3, [r2]
 80076ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	e842 3100 	strex	r1, r3, [r2]
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d1f6      	bne.n	80076c8 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	f102 0308 	add.w	r3, r2, #8
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	3208      	adds	r2, #8
 80076ea:	e842 3100 	strex	r1, r3, [r2]
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d1f3      	bne.n	80076da <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80076f2:	2320      	movs	r3, #32
 80076f4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076fc:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076fe:	6803      	ldr	r3, [r0, #0]
 8007700:	4a16      	ldr	r2, [pc, #88]	@ (800775c <UART_RxISR_8BIT+0xd8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00c      	beq.n	8007720 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800770c:	d008      	beq.n	8007720 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800770e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	e852 3f00 	ldrex	r3, [r2]
 8007714:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	e842 3100 	strex	r1, r3, [r2]
 800771c:	2900      	cmp	r1, #0
 800771e:	d1f6      	bne.n	800770e <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007720:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d116      	bne.n	8007754 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	2300      	movs	r3, #0
 8007728:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	e852 3f00 	ldrex	r3, [r2]
 8007730:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	e842 3100 	strex	r1, r3, [r2]
 8007738:	2900      	cmp	r1, #0
 800773a:	d1f6      	bne.n	800772a <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800773c:	6803      	ldr	r3, [r0, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	f012 0f10 	tst.w	r2, #16
 8007744:	d001      	beq.n	800774a <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007746:	2210      	movs	r2, #16
 8007748:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800774a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800774e:	f7ff fdf6 	bl	800733e <HAL_UARTEx_RxEventCallback>
 8007752:	e7a3      	b.n	800769c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007754:	f7fa fa5a 	bl	8001c0c <HAL_UART_RxCpltCallback>
 8007758:	e7a0      	b.n	800769c <UART_RxISR_8BIT+0x18>
 800775a:	bf00      	nop
 800775c:	40008000 	.word	0x40008000

08007760 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007760:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007762:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007766:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800776a:	2b22      	cmp	r3, #34	@ 0x22
 800776c:	d005      	beq.n	800777a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800776e:	6802      	ldr	r2, [r0, #0]
 8007770:	6993      	ldr	r3, [r2, #24]
 8007772:	f043 0308 	orr.w	r3, r3, #8
 8007776:	6193      	str	r3, [r2, #24]
  }
}
 8007778:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800777e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007780:	4013      	ands	r3, r2
 8007782:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007784:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007786:	3302      	adds	r3, #2
 8007788:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800778a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29b      	uxth	r3, r3
 8007794:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8007798:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1ea      	bne.n	8007778 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	e852 3f00 	ldrex	r3, [r2]
 80077a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	e842 3100 	strex	r1, r3, [r2]
 80077b0:	2900      	cmp	r1, #0
 80077b2:	d1f6      	bne.n	80077a2 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	f102 0308 	add.w	r3, r2, #8
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	3208      	adds	r2, #8
 80077c4:	e842 3100 	strex	r1, r3, [r2]
 80077c8:	2900      	cmp	r1, #0
 80077ca:	d1f3      	bne.n	80077b4 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80077cc:	2320      	movs	r3, #32
 80077ce:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d6:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077d8:	6803      	ldr	r3, [r0, #0]
 80077da:	4a16      	ldr	r2, [pc, #88]	@ (8007834 <UART_RxISR_16BIT+0xd4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00c      	beq.n	80077fa <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80077e6:	d008      	beq.n	80077fa <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	e852 3f00 	ldrex	r3, [r2]
 80077ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	e842 3100 	strex	r1, r3, [r2]
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d1f6      	bne.n	80077e8 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d116      	bne.n	800782e <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007800:	2300      	movs	r3, #0
 8007802:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007804:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	e852 3f00 	ldrex	r3, [r2]
 800780a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	e842 3100 	strex	r1, r3, [r2]
 8007812:	2900      	cmp	r1, #0
 8007814:	d1f6      	bne.n	8007804 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007816:	6803      	ldr	r3, [r0, #0]
 8007818:	69da      	ldr	r2, [r3, #28]
 800781a:	f012 0f10 	tst.w	r2, #16
 800781e:	d001      	beq.n	8007824 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007820:	2210      	movs	r2, #16
 8007822:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007824:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8007828:	f7ff fd89 	bl	800733e <HAL_UARTEx_RxEventCallback>
 800782c:	e7a4      	b.n	8007778 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800782e:	f7fa f9ed 	bl	8001c0c <HAL_UART_RxCpltCallback>
 8007832:	e7a1      	b.n	8007778 <UART_RxISR_16BIT+0x18>
 8007834:	40008000 	.word	0x40008000

08007838 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800783c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007840:	6803      	ldr	r3, [r0, #0]
 8007842:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007844:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007848:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800784c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8007850:	2a22      	cmp	r2, #34	@ 0x22
 8007852:	d005      	beq.n	8007860 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	f042 0208 	orr.w	r2, r2, #8
 800785a:	619a      	str	r2, [r3, #24]
  }
}
 800785c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007860:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007862:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007866:	e008      	b.n	800787a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007868:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800786c:	2b00      	cmp	r3, #0
 800786e:	d14c      	bne.n	800790a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007870:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d04e      	beq.n	8007918 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800787a:	2f00      	cmp	r7, #0
 800787c:	f000 809a 	beq.w	80079b4 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8007880:	f015 0f20 	tst.w	r5, #32
 8007884:	f000 8096 	beq.w	80079b4 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800788c:	b2f3      	uxtb	r3, r6
 800788e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8007890:	400b      	ands	r3, r1
 8007892:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007896:	3301      	adds	r3, #1
 8007898:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800789a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078ac:	f015 0f07 	tst.w	r5, #7
 80078b0:	d0de      	beq.n	8007870 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078b2:	f015 0f01 	tst.w	r5, #1
 80078b6:	d009      	beq.n	80078cc <UART_RxISR_8BIT_FIFOEN+0x94>
 80078b8:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80078bc:	d006      	beq.n	80078cc <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078be:	2201      	movs	r2, #1
 80078c0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078cc:	f015 0f02 	tst.w	r5, #2
 80078d0:	d00b      	beq.n	80078ea <UART_RxISR_8BIT_FIFOEN+0xb2>
 80078d2:	f018 0f01 	tst.w	r8, #1
 80078d6:	d008      	beq.n	80078ea <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	2202      	movs	r2, #2
 80078dc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078de:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80078e2:	f043 0304 	orr.w	r3, r3, #4
 80078e6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ea:	f015 0f04 	tst.w	r5, #4
 80078ee:	d0bb      	beq.n	8007868 <UART_RxISR_8BIT_FIFOEN+0x30>
 80078f0:	f018 0f01 	tst.w	r8, #1
 80078f4:	d0b8      	beq.n	8007868 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	2204      	movs	r2, #4
 80078fa:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007900:	f043 0302 	orr.w	r3, r3, #2
 8007904:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007908:	e7ae      	b.n	8007868 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800790a:	4620      	mov	r0, r4
 800790c:	f7ff fce0 	bl	80072d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	2300      	movs	r3, #0
 8007912:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007916:	e7ab      	b.n	8007870 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007918:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	e852 3f00 	ldrex	r3, [r2]
 800791e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	e842 3100 	strex	r1, r3, [r2]
 8007926:	2900      	cmp	r1, #0
 8007928:	d1f6      	bne.n	8007918 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800792a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	f102 0308 	add.w	r3, r2, #8
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007938:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	3208      	adds	r2, #8
 800793e:	e842 3100 	strex	r1, r3, [r2]
 8007942:	2900      	cmp	r1, #0
 8007944:	d1f1      	bne.n	800792a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007946:	2320      	movs	r3, #32
 8007948:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007950:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	4a29      	ldr	r2, [pc, #164]	@ (80079fc <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d003      	beq.n	8007962 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007960:	d106      	bne.n	8007970 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007962:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007964:	2b01      	cmp	r3, #1
 8007966:	d00d      	beq.n	8007984 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8007968:	4620      	mov	r0, r4
 800796a:	f7fa f94f 	bl	8001c0c <HAL_UART_RxCpltCallback>
 800796e:	e784      	b.n	800787a <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007970:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	e852 3f00 	ldrex	r3, [r2]
 8007976:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	e842 3100 	strex	r1, r3, [r2]
 800797e:	2900      	cmp	r1, #0
 8007980:	d1f6      	bne.n	8007970 <UART_RxISR_8BIT_FIFOEN+0x138>
 8007982:	e7ee      	b.n	8007962 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007984:	2300      	movs	r3, #0
 8007986:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007988:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	e852 3f00 	ldrex	r3, [r2]
 800798e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	e842 3100 	strex	r1, r3, [r2]
 8007996:	2900      	cmp	r1, #0
 8007998:	d1f6      	bne.n	8007988 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	69da      	ldr	r2, [r3, #28]
 800799e:	f012 0f10 	tst.w	r2, #16
 80079a2:	d001      	beq.n	80079a8 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079a4:	2210      	movs	r2, #16
 80079a6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff fcc6 	bl	800733e <HAL_UARTEx_RxEventCallback>
 80079b2:	e762      	b.n	800787a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80079b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80079b8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f43f af4e 	beq.w	800785c <UART_RxISR_8BIT_FIFOEN+0x24>
 80079c0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80079c4:	429a      	cmp	r2, r3
 80079c6:	f67f af49 	bls.w	800785c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	f102 0308 	add.w	r3, r2, #8
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	3208      	adds	r2, #8
 80079da:	e842 3100 	strex	r1, r3, [r2]
 80079de:	2900      	cmp	r1, #0
 80079e0:	d1f3      	bne.n	80079ca <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 80079e2:	4b07      	ldr	r3, [pc, #28]	@ (8007a00 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 80079e4:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	e852 3f00 	ldrex	r3, [r2]
 80079ec:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	e842 3100 	strex	r1, r3, [r2]
 80079f4:	2900      	cmp	r1, #0
 80079f6:	d1f6      	bne.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 80079f8:	e730      	b.n	800785c <UART_RxISR_8BIT_FIFOEN+0x24>
 80079fa:	bf00      	nop
 80079fc:	40008000 	.word	0x40008000
 8007a00:	08007685 	.word	0x08007685

08007a04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a08:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a0c:	6803      	ldr	r3, [r0, #0]
 8007a0e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a10:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a14:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a18:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8007a1c:	2a22      	cmp	r2, #34	@ 0x22
 8007a1e:	d005      	beq.n	8007a2c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	f042 0208 	orr.w	r2, r2, #8
 8007a26:	619a      	str	r2, [r3, #24]
  }
}
 8007a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a2c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007a2e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a32:	e008      	b.n	8007a46 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a34:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d14b      	bne.n	8007ad4 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007a3c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d04d      	beq.n	8007ae2 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	f000 8099 	beq.w	8007b7e <UART_RxISR_16BIT_FIFOEN+0x17a>
 8007a4c:	f015 0f20 	tst.w	r5, #32
 8007a50:	f000 8095 	beq.w	8007b7e <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a58:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a5a:	4033      	ands	r3, r6
 8007a5c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007a5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a60:	3302      	adds	r3, #2
 8007a62:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8007a64:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a76:	f015 0f07 	tst.w	r5, #7
 8007a7a:	d0df      	beq.n	8007a3c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a7c:	f015 0f01 	tst.w	r5, #1
 8007a80:	d009      	beq.n	8007a96 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007a82:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8007a86:	d006      	beq.n	8007a96 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a88:	2201      	movs	r2, #1
 8007a8a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a96:	f015 0f02 	tst.w	r5, #2
 8007a9a:	d00b      	beq.n	8007ab4 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007a9c:	f018 0f01 	tst.w	r8, #1
 8007aa0:	d008      	beq.n	8007ab4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aa8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ab4:	f015 0f04 	tst.w	r5, #4
 8007ab8:	d0bc      	beq.n	8007a34 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007aba:	f018 0f01 	tst.w	r8, #1
 8007abe:	d0b9      	beq.n	8007a34 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	2204      	movs	r2, #4
 8007ac4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ac6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007aca:	f043 0302 	orr.w	r3, r3, #2
 8007ace:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007ad2:	e7af      	b.n	8007a34 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f7ff fbfb 	bl	80072d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007ae0:	e7ac      	b.n	8007a3c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	e852 3f00 	ldrex	r3, [r2]
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	e842 3100 	strex	r1, r3, [r2]
 8007af0:	2900      	cmp	r1, #0
 8007af2:	d1f6      	bne.n	8007ae2 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007af4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	f102 0308 	add.w	r3, r2, #8
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b02:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	3208      	adds	r2, #8
 8007b08:	e842 3100 	strex	r1, r3, [r2]
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	d1f1      	bne.n	8007af4 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007b10:	2320      	movs	r3, #32
 8007b12:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b1a:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	4a29      	ldr	r2, [pc, #164]	@ (8007bc4 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007b2a:	d106      	bne.n	8007b3a <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d00d      	beq.n	8007b4e <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8007b32:	4620      	mov	r0, r4
 8007b34:	f7fa f86a 	bl	8001c0c <HAL_UART_RxCpltCallback>
 8007b38:	e785      	b.n	8007a46 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	e852 3f00 	ldrex	r3, [r2]
 8007b40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	e842 3100 	strex	r1, r3, [r2]
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	d1f6      	bne.n	8007b3a <UART_RxISR_16BIT_FIFOEN+0x136>
 8007b4c:	e7ee      	b.n	8007b2c <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	e852 3f00 	ldrex	r3, [r2]
 8007b58:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	e842 3100 	strex	r1, r3, [r2]
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d1f6      	bne.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	f012 0f10 	tst.w	r2, #16
 8007b6c:	d001      	beq.n	8007b72 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b6e:	2210      	movs	r2, #16
 8007b70:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b72:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007b76:	4620      	mov	r0, r4
 8007b78:	f7ff fbe1 	bl	800733e <HAL_UARTEx_RxEventCallback>
 8007b7c:	e763      	b.n	8007a46 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007b7e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007b82:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f43f af4f 	beq.w	8007a28 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007b8a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	f67f af4a 	bls.w	8007a28 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	f102 0308 	add.w	r3, r2, #8
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	3208      	adds	r2, #8
 8007ba4:	e842 3100 	strex	r1, r3, [r2]
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	d1f3      	bne.n	8007b94 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8007bac:	4b06      	ldr	r3, [pc, #24]	@ (8007bc8 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8007bae:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bb0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	e852 3f00 	ldrex	r3, [r2]
 8007bb6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	e842 3100 	strex	r1, r3, [r2]
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d1f6      	bne.n	8007bb0 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8007bc2:	e731      	b.n	8007a28 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007bc4:	40008000 	.word	0x40008000
 8007bc8:	08007761 	.word	0x08007761

08007bcc <UART_SetConfig>:
{
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bd0:	6883      	ldr	r3, [r0, #8]
 8007bd2:	6902      	ldr	r2, [r0, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	6942      	ldr	r2, [r0, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	69c2      	ldr	r2, [r0, #28]
 8007bdc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bde:	6801      	ldr	r1, [r0, #0]
 8007be0:	6808      	ldr	r0, [r1, #0]
 8007be2:	4a9d      	ldr	r2, [pc, #628]	@ (8007e58 <UART_SetConfig+0x28c>)
 8007be4:	4002      	ands	r2, r0
 8007be6:	431a      	orrs	r2, r3
 8007be8:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	6853      	ldr	r3, [r2, #4]
 8007bee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007bf2:	68e1      	ldr	r1, [r4, #12]
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bf8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	4b97      	ldr	r3, [pc, #604]	@ (8007e5c <UART_SetConfig+0x290>)
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d001      	beq.n	8007c06 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007c02:	6a23      	ldr	r3, [r4, #32]
 8007c04:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c06:	6893      	ldr	r3, [r2, #8]
 8007c08:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c0c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007c18:	f023 030f 	bic.w	r3, r3, #15
 8007c1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	4a8e      	ldr	r2, [pc, #568]	@ (8007e60 <UART_SetConfig+0x294>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01c      	beq.n	8007c64 <UART_SetConfig+0x98>
 8007c2a:	4a8e      	ldr	r2, [pc, #568]	@ (8007e64 <UART_SetConfig+0x298>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d031      	beq.n	8007c94 <UART_SetConfig+0xc8>
 8007c30:	4a8a      	ldr	r2, [pc, #552]	@ (8007e5c <UART_SetConfig+0x290>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d04b      	beq.n	8007cce <UART_SetConfig+0x102>
 8007c36:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c38:	4988      	ldr	r1, [pc, #544]	@ (8007e5c <UART_SetConfig+0x290>)
 8007c3a:	428b      	cmp	r3, r1
 8007c3c:	d068      	beq.n	8007d10 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3e:	69e0      	ldr	r0, [r4, #28]
 8007c40:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c44:	f000 80a5 	beq.w	8007d92 <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007c48:	2a08      	cmp	r2, #8
 8007c4a:	f200 811f 	bhi.w	8007e8c <UART_SetConfig+0x2c0>
 8007c4e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007c52:	00d3      	.short	0x00d3
 8007c54:	00d100f5 	.word	0x00d100f5
 8007c58:	00f8011d 	.word	0x00f8011d
 8007c5c:	011d011d 	.word	0x011d011d
 8007c60:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007c64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c68:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007c6c:	f002 0203 	and.w	r2, r2, #3
 8007c70:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c74:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8007c78:	2a03      	cmp	r2, #3
 8007c7a:	d809      	bhi.n	8007c90 <UART_SetConfig+0xc4>
 8007c7c:	e8df f002 	tbb	[pc, r2]
 8007c80:	063c0402 	.word	0x063c0402
 8007c84:	2201      	movs	r2, #1
 8007c86:	e7d7      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007c88:	2204      	movs	r2, #4
 8007c8a:	e7d5      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	e7d3      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007c90:	2210      	movs	r2, #16
 8007c92:	e7d1      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007c94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c98:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007c9c:	f002 020c 	and.w	r2, r2, #12
 8007ca0:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 8007ca4:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 8007ca8:	2a0c      	cmp	r2, #12
 8007caa:	d80e      	bhi.n	8007cca <UART_SetConfig+0xfe>
 8007cac:	e8df f002 	tbb	[pc, r2]
 8007cb0:	0d0d0d07 	.word	0x0d0d0d07
 8007cb4:	0d0d0d09 	.word	0x0d0d0d09
 8007cb8:	0d0d0d26 	.word	0x0d0d0d26
 8007cbc:	0b          	.byte	0x0b
 8007cbd:	00          	.byte	0x00
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	e7ba      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	e7b8      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007cc6:	2208      	movs	r2, #8
 8007cc8:	e7b6      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007cca:	2210      	movs	r2, #16
 8007ccc:	e7b4      	b.n	8007c38 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007cce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cd2:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007cd6:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8007cda:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8007cde:	d00f      	beq.n	8007d00 <UART_SetConfig+0x134>
 8007ce0:	d805      	bhi.n	8007cee <UART_SetConfig+0x122>
 8007ce2:	b17a      	cbz	r2, 8007d04 <UART_SetConfig+0x138>
 8007ce4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007ce8:	d10e      	bne.n	8007d08 <UART_SetConfig+0x13c>
 8007cea:	2204      	movs	r2, #4
 8007cec:	e7a4      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007cee:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8007cf2:	d10b      	bne.n	8007d0c <UART_SetConfig+0x140>
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	e79f      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	e79d      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	e79b      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007d00:	2202      	movs	r2, #2
 8007d02:	e799      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007d04:	2200      	movs	r2, #0
 8007d06:	e797      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007d08:	2210      	movs	r2, #16
 8007d0a:	e795      	b.n	8007c38 <UART_SetConfig+0x6c>
 8007d0c:	2210      	movs	r2, #16
 8007d0e:	e793      	b.n	8007c38 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007d10:	2a08      	cmp	r2, #8
 8007d12:	f200 809c 	bhi.w	8007e4e <UART_SetConfig+0x282>
 8007d16:	e8df f002 	tbb	[pc, r2]
 8007d1a:	9a08      	.short	0x9a08
 8007d1c:	9a379a3a 	.word	0x9a379a3a
 8007d20:	9a9a      	.short	0x9a9a
 8007d22:	05          	.byte	0x05
 8007d23:	00          	.byte	0x00
 8007d24:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007d28:	e004      	b.n	8007d34 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d2a:	f7fe fac1 	bl	80062b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f000 808f 	beq.w	8007e52 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d34:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007d36:	4b4c      	ldr	r3, [pc, #304]	@ (8007e68 <UART_SetConfig+0x29c>)
 8007d38:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007d3c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d40:	6865      	ldr	r5, [r4, #4]
 8007d42:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007d46:	4299      	cmp	r1, r3
 8007d48:	f200 8094 	bhi.w	8007e74 <UART_SetConfig+0x2a8>
 8007d4c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007d50:	f200 8092 	bhi.w	8007e78 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d54:	2600      	movs	r6, #0
 8007d56:	4633      	mov	r3, r6
 8007d58:	4631      	mov	r1, r6
 8007d5a:	f7f8 fd8f 	bl	800087c <__aeabi_uldivmod>
 8007d5e:	0209      	lsls	r1, r1, #8
 8007d60:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007d64:	0200      	lsls	r0, r0, #8
 8007d66:	086b      	lsrs	r3, r5, #1
 8007d68:	18c0      	adds	r0, r0, r3
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	4633      	mov	r3, r6
 8007d6e:	f141 0100 	adc.w	r1, r1, #0
 8007d72:	f7f8 fd83 	bl	800087c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d76:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007e6c <UART_SetConfig+0x2a0>)
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d87d      	bhi.n	8007e7c <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	60d8      	str	r0, [r3, #12]
 8007d84:	4630      	mov	r0, r6
 8007d86:	e050      	b.n	8007e2a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d88:	f7fd fd94 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
        break;
 8007d8c:	e7cf      	b.n	8007d2e <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007d8e:	4838      	ldr	r0, [pc, #224]	@ (8007e70 <UART_SetConfig+0x2a4>)
 8007d90:	e7d0      	b.n	8007d34 <UART_SetConfig+0x168>
    switch (clocksource)
 8007d92:	2a08      	cmp	r2, #8
 8007d94:	d874      	bhi.n	8007e80 <UART_SetConfig+0x2b4>
 8007d96:	e8df f002 	tbb	[pc, r2]
 8007d9a:	2707      	.short	0x2707
 8007d9c:	732a7305 	.word	0x732a7305
 8007da0:	7373      	.short	0x7373
 8007da2:	0b          	.byte	0x0b
 8007da3:	00          	.byte	0x00
 8007da4:	4832      	ldr	r0, [pc, #200]	@ (8007e70 <UART_SetConfig+0x2a4>)
 8007da6:	e003      	b.n	8007db0 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da8:	f7fe fa82 	bl	80062b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d069      	beq.n	8007e84 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007db0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007db2:	4b2d      	ldr	r3, [pc, #180]	@ (8007e68 <UART_SetConfig+0x29c>)
 8007db4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007db8:	fbb0 f0f3 	udiv	r0, r0, r3
 8007dbc:	6862      	ldr	r2, [r4, #4]
 8007dbe:	0853      	lsrs	r3, r2, #1
 8007dc0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007dc4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc8:	f1a3 0110 	sub.w	r1, r3, #16
 8007dcc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007dd0:	4291      	cmp	r1, r2
 8007dd2:	d859      	bhi.n	8007e88 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dda:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007dde:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	60d3      	str	r3, [r2, #12]
 8007de4:	2000      	movs	r0, #0
 8007de6:	e020      	b.n	8007e2a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de8:	f7fe fa72 	bl	80062d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007dec:	e7de      	b.n	8007dac <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007dee:	f7fd fd61 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
        break;
 8007df2:	e7db      	b.n	8007dac <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007df4:	481e      	ldr	r0, [pc, #120]	@ (8007e70 <UART_SetConfig+0x2a4>)
 8007df6:	e003      	b.n	8007e00 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df8:	f7fe fa5a 	bl	80062b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d047      	beq.n	8007e90 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e00:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007e02:	4b19      	ldr	r3, [pc, #100]	@ (8007e68 <UART_SetConfig+0x29c>)
 8007e04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007e08:	fbb0 f0f3 	udiv	r0, r0, r3
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007e12:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e16:	f1a0 0210 	sub.w	r2, r0, #16
 8007e1a:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d838      	bhi.n	8007e94 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	b280      	uxth	r0, r0
 8007e26:	60d8      	str	r0, [r3, #12]
 8007e28:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e30:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e38:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e3c:	f7fe fa48 	bl	80062d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007e40:	e7dc      	b.n	8007dfc <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fd fd37 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
        break;
 8007e46:	e7d9      	b.n	8007dfc <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007e48:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007e4c:	e7d8      	b.n	8007e00 <UART_SetConfig+0x234>
    switch (clocksource)
 8007e4e:	2001      	movs	r0, #1
 8007e50:	e7eb      	b.n	8007e2a <UART_SetConfig+0x25e>
 8007e52:	2000      	movs	r0, #0
 8007e54:	e7e9      	b.n	8007e2a <UART_SetConfig+0x25e>
 8007e56:	bf00      	nop
 8007e58:	cfff69f3 	.word	0xcfff69f3
 8007e5c:	40008000 	.word	0x40008000
 8007e60:	40013800 	.word	0x40013800
 8007e64:	40004400 	.word	0x40004400
 8007e68:	08016aa4 	.word	0x08016aa4
 8007e6c:	000ffcff 	.word	0x000ffcff
 8007e70:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007e74:	2001      	movs	r0, #1
 8007e76:	e7d8      	b.n	8007e2a <UART_SetConfig+0x25e>
 8007e78:	2001      	movs	r0, #1
 8007e7a:	e7d6      	b.n	8007e2a <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	e7d4      	b.n	8007e2a <UART_SetConfig+0x25e>
    switch (clocksource)
 8007e80:	2001      	movs	r0, #1
 8007e82:	e7d2      	b.n	8007e2a <UART_SetConfig+0x25e>
 8007e84:	2000      	movs	r0, #0
 8007e86:	e7d0      	b.n	8007e2a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007e88:	2001      	movs	r0, #1
 8007e8a:	e7ce      	b.n	8007e2a <UART_SetConfig+0x25e>
    switch (clocksource)
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	e7cc      	b.n	8007e2a <UART_SetConfig+0x25e>
 8007e90:	2000      	movs	r0, #0
 8007e92:	e7ca      	b.n	8007e2a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007e94:	2001      	movs	r0, #1
 8007e96:	e7c8      	b.n	8007e2a <UART_SetConfig+0x25e>

08007e98 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e98:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007e9a:	f013 0f01 	tst.w	r3, #1
 8007e9e:	d006      	beq.n	8007eae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ea0:	6802      	ldr	r2, [r0, #0]
 8007ea2:	6853      	ldr	r3, [r2, #4]
 8007ea4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ea8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007eb0:	f013 0f02 	tst.w	r3, #2
 8007eb4:	d006      	beq.n	8007ec4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007eb6:	6802      	ldr	r2, [r0, #0]
 8007eb8:	6853      	ldr	r3, [r2, #4]
 8007eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ebe:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ec4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007ec6:	f013 0f04 	tst.w	r3, #4
 8007eca:	d006      	beq.n	8007eda <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ecc:	6802      	ldr	r2, [r0, #0]
 8007ece:	6853      	ldr	r3, [r2, #4]
 8007ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ed4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007edc:	f013 0f08 	tst.w	r3, #8
 8007ee0:	d006      	beq.n	8007ef0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ee2:	6802      	ldr	r2, [r0, #0]
 8007ee4:	6853      	ldr	r3, [r2, #4]
 8007ee6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eea:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ef0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007ef2:	f013 0f10 	tst.w	r3, #16
 8007ef6:	d006      	beq.n	8007f06 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ef8:	6802      	ldr	r2, [r0, #0]
 8007efa:	6893      	ldr	r3, [r2, #8]
 8007efc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f00:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8007f02:	430b      	orrs	r3, r1
 8007f04:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f06:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f08:	f013 0f20 	tst.w	r3, #32
 8007f0c:	d006      	beq.n	8007f1c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f0e:	6802      	ldr	r2, [r0, #0]
 8007f10:	6893      	ldr	r3, [r2, #8]
 8007f12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f16:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f1e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f24:	6802      	ldr	r2, [r0, #0]
 8007f26:	6853      	ldr	r3, [r2, #4]
 8007f28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007f2c:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f32:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007f34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f38:	d00b      	beq.n	8007f52 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f3a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f40:	d006      	beq.n	8007f50 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f42:	6802      	ldr	r2, [r0, #0]
 8007f44:	6853      	ldr	r3, [r2, #4]
 8007f46:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007f4a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6053      	str	r3, [r2, #4]
}
 8007f50:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f52:	6802      	ldr	r2, [r0, #0]
 8007f54:	6853      	ldr	r3, [r2, #4]
 8007f56:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007f5a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	6053      	str	r3, [r2, #4]
 8007f60:	e7eb      	b.n	8007f3a <UART_AdvFeatureConfig+0xa2>

08007f62 <UART_WaitOnFlagUntilTimeout>:
{
 8007f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f66:	4605      	mov	r5, r0
 8007f68:	460f      	mov	r7, r1
 8007f6a:	4616      	mov	r6, r2
 8007f6c:	4699      	mov	r9, r3
 8007f6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	69dc      	ldr	r4, [r3, #28]
 8007f76:	ea37 0404 	bics.w	r4, r7, r4
 8007f7a:	bf0c      	ite	eq
 8007f7c:	2401      	moveq	r4, #1
 8007f7e:	2400      	movne	r4, #0
 8007f80:	42b4      	cmp	r4, r6
 8007f82:	d157      	bne.n	8008034 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007f84:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007f88:	d0f3      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f8a:	f7f9 fb69 	bl	8001660 <HAL_GetTick>
 8007f8e:	eba0 0009 	sub.w	r0, r0, r9
 8007f92:	4540      	cmp	r0, r8
 8007f94:	d82f      	bhi.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x94>
 8007f96:	f1b8 0f00 	cmp.w	r8, #0
 8007f9a:	d02c      	beq.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	f012 0f04 	tst.w	r2, #4
 8007fa4:	d0e5      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007fac:	d0e1      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fb2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fb4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	e852 3f00 	ldrex	r3, [r2]
 8007fba:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	e842 3100 	strex	r1, r3, [r2]
 8007fc2:	2900      	cmp	r1, #0
 8007fc4:	d1f6      	bne.n	8007fb4 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	f102 0308 	add.w	r3, r2, #8
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	3208      	adds	r2, #8
 8007fd6:	e842 3100 	strex	r1, r3, [r2]
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	d1f3      	bne.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007fde:	2320      	movs	r3, #32
 8007fe0:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fe8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8007fec:	2300      	movs	r3, #0
 8007fee:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007ff2:	2003      	movs	r0, #3
 8007ff4:	e01f      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ff6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	e852 3f00 	ldrex	r3, [r2]
 8007ffc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	e842 3100 	strex	r1, r3, [r2]
 8008004:	2900      	cmp	r1, #0
 8008006:	d1f6      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008008:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	f102 0308 	add.w	r3, r2, #8
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	3208      	adds	r2, #8
 8008018:	e842 3100 	strex	r1, r3, [r2]
 800801c:	2900      	cmp	r1, #0
 800801e:	d1f3      	bne.n	8008008 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8008020:	2320      	movs	r3, #32
 8008022:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008026:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800802a:	2300      	movs	r3, #0
 800802c:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8008030:	2003      	movs	r0, #3
 8008032:	e000      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8008034:	2000      	movs	r0, #0
}
 8008036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800803a <UART_CheckIdleState>:
{
 800803a:	b530      	push	{r4, r5, lr}
 800803c:	b083      	sub	sp, #12
 800803e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008040:	2300      	movs	r3, #0
 8008042:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8008046:	f7f9 fb0b 	bl	8001660 <HAL_GetTick>
 800804a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	f012 0f08 	tst.w	r2, #8
 8008054:	d110      	bne.n	8008078 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f013 0f04 	tst.w	r3, #4
 800805e:	d119      	bne.n	8008094 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8008060:	2320      	movs	r3, #32
 8008062:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008066:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806a:	2000      	movs	r0, #0
 800806c:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800806e:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8008070:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008074:	b003      	add	sp, #12
 8008076:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	4603      	mov	r3, r0
 8008080:	2200      	movs	r2, #0
 8008082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008086:	4620      	mov	r0, r4
 8008088:	f7ff ff6b 	bl	8007f62 <UART_WaitOnFlagUntilTimeout>
 800808c:	2800      	cmp	r0, #0
 800808e:	d0e2      	beq.n	8008056 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008090:	2003      	movs	r0, #3
 8008092:	e7ef      	b.n	8008074 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	462b      	mov	r3, r5
 800809c:	2200      	movs	r2, #0
 800809e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7ff ff5d 	bl	8007f62 <UART_WaitOnFlagUntilTimeout>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0d9      	beq.n	8008060 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80080ac:	2003      	movs	r0, #3
 80080ae:	e7e1      	b.n	8008074 <UART_CheckIdleState+0x3a>

080080b0 <HAL_UART_Init>:
  if (huart == NULL)
 80080b0:	b378      	cbz	r0, 8008112 <HAL_UART_Init+0x62>
{
 80080b2:	b510      	push	{r4, lr}
 80080b4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80080b6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80080ba:	b30b      	cbz	r3, 8008100 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80080bc:	2324      	movs	r3, #36	@ 0x24
 80080be:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	6813      	ldr	r3, [r2, #0]
 80080c6:	f023 0301 	bic.w	r3, r3, #1
 80080ca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080cc:	4620      	mov	r0, r4
 80080ce:	f7ff fd7d 	bl	8007bcc <UART_SetConfig>
 80080d2:	2801      	cmp	r0, #1
 80080d4:	d013      	beq.n	80080fe <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80080d8:	b9bb      	cbnz	r3, 800810a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	6853      	ldr	r3, [r2, #4]
 80080de:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80080e2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080e4:	6822      	ldr	r2, [r4, #0]
 80080e6:	6893      	ldr	r3, [r2, #8]
 80080e8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80080ec:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	6813      	ldr	r3, [r2, #0]
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7ff ff9e 	bl	800803a <UART_CheckIdleState>
}
 80080fe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008100:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8008104:	f7f9 fc76 	bl	80019f4 <HAL_UART_MspInit>
 8008108:	e7d8      	b.n	80080bc <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800810a:	4620      	mov	r0, r4
 800810c:	f7ff fec4 	bl	8007e98 <UART_AdvFeatureConfig>
 8008110:	e7e3      	b.n	80080da <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008112:	2001      	movs	r0, #1
}
 8008114:	4770      	bx	lr
	...

08008118 <UART_Start_Receive_IT>:
{
 8008118:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800811a:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800811c:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008120:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8008128:	6883      	ldr	r3, [r0, #8]
 800812a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800812e:	d006      	beq.n	800813e <UART_Start_Receive_IT+0x26>
 8008130:	b9a3      	cbnz	r3, 800815c <UART_Start_Receive_IT+0x44>
 8008132:	6903      	ldr	r3, [r0, #16]
 8008134:	b973      	cbnz	r3, 8008154 <UART_Start_Receive_IT+0x3c>
 8008136:	23ff      	movs	r3, #255	@ 0xff
 8008138:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800813c:	e014      	b.n	8008168 <UART_Start_Receive_IT+0x50>
 800813e:	6903      	ldr	r3, [r0, #16]
 8008140:	b923      	cbnz	r3, 800814c <UART_Start_Receive_IT+0x34>
 8008142:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8008146:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800814a:	e00d      	b.n	8008168 <UART_Start_Receive_IT+0x50>
 800814c:	23ff      	movs	r3, #255	@ 0xff
 800814e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008152:	e009      	b.n	8008168 <UART_Start_Receive_IT+0x50>
 8008154:	237f      	movs	r3, #127	@ 0x7f
 8008156:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800815a:	e005      	b.n	8008168 <UART_Start_Receive_IT+0x50>
 800815c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008160:	d02d      	beq.n	80081be <UART_Start_Receive_IT+0xa6>
 8008162:	2300      	movs	r3, #0
 8008164:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008168:	2300      	movs	r3, #0
 800816a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800816e:	2322      	movs	r3, #34	@ 0x22
 8008170:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008174:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	f101 0308 	add.w	r3, r1, #8
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	3108      	adds	r1, #8
 8008184:	e841 3400 	strex	r4, r3, [r1]
 8008188:	2c00      	cmp	r4, #0
 800818a:	d1f3      	bne.n	8008174 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800818c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800818e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008192:	d01e      	beq.n	80081d2 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008194:	6883      	ldr	r3, [r0, #8]
 8008196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800819a:	d042      	beq.n	8008222 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 800819c:	4b29      	ldr	r3, [pc, #164]	@ (8008244 <UART_Start_Receive_IT+0x12c>)
 800819e:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081a0:	6903      	ldr	r3, [r0, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d043      	beq.n	800822e <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80081a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	e852 3f00 	ldrex	r3, [r2]
 80081ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	e842 3100 	strex	r1, r3, [r2]
 80081b4:	2900      	cmp	r1, #0
 80081b6:	d1f6      	bne.n	80081a6 <UART_Start_Receive_IT+0x8e>
}
 80081b8:	2000      	movs	r0, #0
 80081ba:	bc10      	pop	{r4}
 80081bc:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80081be:	6903      	ldr	r3, [r0, #16]
 80081c0:	b91b      	cbnz	r3, 80081ca <UART_Start_Receive_IT+0xb2>
 80081c2:	237f      	movs	r3, #127	@ 0x7f
 80081c4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80081c8:	e7ce      	b.n	8008168 <UART_Start_Receive_IT+0x50>
 80081ca:	233f      	movs	r3, #63	@ 0x3f
 80081cc:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80081d0:	e7ca      	b.n	8008168 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081d2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d8dc      	bhi.n	8008194 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081da:	6883      	ldr	r3, [r0, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e0:	d019      	beq.n	8008216 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80081e2:	4b19      	ldr	r3, [pc, #100]	@ (8008248 <UART_Start_Receive_IT+0x130>)
 80081e4:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081e6:	6903      	ldr	r3, [r0, #16]
 80081e8:	b143      	cbz	r3, 80081fc <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	e852 3f00 	ldrex	r3, [r2]
 80081f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	e842 3100 	strex	r1, r3, [r2]
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d1f6      	bne.n	80081ea <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	f102 0308 	add.w	r3, r2, #8
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	3208      	adds	r2, #8
 800820c:	e842 3100 	strex	r1, r3, [r2]
 8008210:	2900      	cmp	r1, #0
 8008212:	d1f3      	bne.n	80081fc <UART_Start_Receive_IT+0xe4>
 8008214:	e7d0      	b.n	80081b8 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008216:	6903      	ldr	r3, [r0, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e2      	bne.n	80081e2 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800821c:	4b0b      	ldr	r3, [pc, #44]	@ (800824c <UART_Start_Receive_IT+0x134>)
 800821e:	6743      	str	r3, [r0, #116]	@ 0x74
 8008220:	e7e1      	b.n	80081e6 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008222:	6903      	ldr	r3, [r0, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1b9      	bne.n	800819c <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008228:	4b09      	ldr	r3, [pc, #36]	@ (8008250 <UART_Start_Receive_IT+0x138>)
 800822a:	6743      	str	r3, [r0, #116]	@ 0x74
 800822c:	e7b8      	b.n	80081a0 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800822e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	e852 3f00 	ldrex	r3, [r2]
 8008234:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	e842 3100 	strex	r1, r3, [r2]
 800823c:	2900      	cmp	r1, #0
 800823e:	d1f6      	bne.n	800822e <UART_Start_Receive_IT+0x116>
 8008240:	e7ba      	b.n	80081b8 <UART_Start_Receive_IT+0xa0>
 8008242:	bf00      	nop
 8008244:	08007685 	.word	0x08007685
 8008248:	08007839 	.word	0x08007839
 800824c:	08007a05 	.word	0x08007a05
 8008250:	08007761 	.word	0x08007761

08008254 <HAL_UART_Receive_IT>:
{
 8008254:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008256:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800825a:	2b20      	cmp	r3, #32
 800825c:	d117      	bne.n	800828e <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800825e:	b1c1      	cbz	r1, 8008292 <HAL_UART_Receive_IT+0x3e>
 8008260:	b1ca      	cbz	r2, 8008296 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	2300      	movs	r3, #0
 8008264:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008266:	6803      	ldr	r3, [r0, #0]
 8008268:	4c0c      	ldr	r4, [pc, #48]	@ (800829c <HAL_UART_Receive_IT+0x48>)
 800826a:	42a3      	cmp	r3, r4
 800826c:	d00c      	beq.n	8008288 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008274:	d008      	beq.n	8008288 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008276:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	e854 3f00 	ldrex	r3, [r4]
 800827c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	e844 3500 	strex	r5, r3, [r4]
 8008284:	2d00      	cmp	r5, #0
 8008286:	d1f6      	bne.n	8008276 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008288:	f7ff ff46 	bl	8008118 <UART_Start_Receive_IT>
 800828c:	e000      	b.n	8008290 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 800828e:	2002      	movs	r0, #2
}
 8008290:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008292:	2001      	movs	r0, #1
 8008294:	e7fc      	b.n	8008290 <HAL_UART_Receive_IT+0x3c>
 8008296:	2001      	movs	r0, #1
 8008298:	e7fa      	b.n	8008290 <HAL_UART_Receive_IT+0x3c>
 800829a:	bf00      	nop
 800829c:	40008000 	.word	0x40008000

080082a0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80082a0:	b082      	sub	sp, #8
 80082a2:	ab02      	add	r3, sp, #8
 80082a4:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80082a8:	6802      	ldr	r2, [r0, #0]
 80082aa:	6853      	ldr	r3, [r2, #4]
 80082ac:	f023 0310 	bic.w	r3, r3, #16
 80082b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80082b8:	6802      	ldr	r2, [r0, #0]
 80082ba:	6853      	ldr	r3, [r2, #4]
 80082bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80082c0:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80082c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80082c8:	6053      	str	r3, [r2, #4]
}
 80082ca:	b002      	add	sp, #8
 80082cc:	4770      	bx	lr
	...

080082d0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082d0:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80082d2:	b92b      	cbnz	r3, 80082e0 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082da:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 80082de:	4770      	bx	lr
{
 80082e0:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082e2:	6803      	ldr	r3, [r0, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082ea:	6899      	ldr	r1, [r3, #8]
 80082ec:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ee:	4d09      	ldr	r5, [pc, #36]	@ (8008314 <UARTEx_SetNbDataToProcess+0x44>)
 80082f0:	5c6b      	ldrb	r3, [r5, r1]
 80082f2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082f4:	4c08      	ldr	r4, [pc, #32]	@ (8008318 <UARTEx_SetNbDataToProcess+0x48>)
 80082f6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082f8:	fb93 f3f1 	sdiv	r3, r3, r1
 80082fc:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008300:	5cab      	ldrb	r3, [r5, r2]
 8008302:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008304:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008306:	fb93 f3f2 	sdiv	r3, r3, r2
 800830a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800830e:	bc30      	pop	{r4, r5}
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	08016ac4 	.word	0x08016ac4
 8008318:	08016abc 	.word	0x08016abc

0800831c <HAL_UARTEx_WakeupCallback>:
}
 800831c:	4770      	bx	lr

0800831e <HAL_UARTEx_RxFifoFullCallback>:
}
 800831e:	4770      	bx	lr

08008320 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8008320:	4770      	bx	lr

08008322 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8008322:	b510      	push	{r4, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	ab04      	add	r3, sp, #16
 8008328:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 800832c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008330:	2b01      	cmp	r3, #1
 8008332:	d035      	beq.n	80083a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008334:	4604      	mov	r4, r0
 8008336:	2301      	movs	r3, #1
 8008338:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800833c:	2324      	movs	r3, #36	@ 0x24
 800833e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008342:	6802      	ldr	r2, [r0, #0]
 8008344:	6813      	ldr	r3, [r2, #0]
 8008346:	f023 0301 	bic.w	r3, r3, #1
 800834a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800834c:	6801      	ldr	r1, [r0, #0]
 800834e:	688b      	ldr	r3, [r1, #8]
 8008350:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008354:	9a02      	ldr	r2, [sp, #8]
 8008356:	4313      	orrs	r3, r2
 8008358:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800835a:	b1aa      	cbz	r2, 8008388 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	6813      	ldr	r3, [r2, #0]
 8008360:	f043 0301 	orr.w	r3, r3, #1
 8008364:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8008366:	f7f9 f97b 	bl	8001660 <HAL_GetTick>
 800836a:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800836c:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8008370:	9200      	str	r2, [sp, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008378:	4620      	mov	r0, r4
 800837a:	f7ff fdf2 	bl	8007f62 <UART_WaitOnFlagUntilTimeout>
 800837e:	b948      	cbnz	r0, 8008394 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008380:	2320      	movs	r3, #32
 8008382:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8008386:	e006      	b.n	8008396 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008388:	ab04      	add	r3, sp, #16
 800838a:	e913 0006 	ldmdb	r3, {r1, r2}
 800838e:	f7ff ff87 	bl	80082a0 <UARTEx_Wakeup_AddressConfig>
 8008392:	e7e3      	b.n	800835c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008394:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008396:	2300      	movs	r3, #0
 8008398:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800839c:	b004      	add	sp, #16
 800839e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80083a0:	2002      	movs	r0, #2
 80083a2:	e7fb      	b.n	800839c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080083a4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80083a4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d010      	beq.n	80083ce <HAL_UARTEx_EnableStopMode+0x2a>
 80083ac:	2301      	movs	r3, #1
 80083ae:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80083b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	e852 3f00 	ldrex	r3, [r2]
 80083b8:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	e842 3100 	strex	r1, r3, [r2]
 80083c0:	2900      	cmp	r1, #0
 80083c2:	d1f6      	bne.n	80083b2 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 80083c4:	2300      	movs	r3, #0
 80083c6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 80083ca:	4618      	mov	r0, r3
 80083cc:	4770      	bx	lr
  __HAL_LOCK(huart);
 80083ce:	2002      	movs	r0, #2
}
 80083d0:	4770      	bx	lr

080083d2 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 80083d2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d01d      	beq.n	8008416 <HAL_UARTEx_EnableFifoMode+0x44>
{
 80083da:	b510      	push	{r4, lr}
 80083dc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80083de:	2301      	movs	r3, #1
 80083e0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80083e4:	2324      	movs	r3, #36	@ 0x24
 80083e6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ea:	6802      	ldr	r2, [r0, #0]
 80083ec:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80083ee:	6811      	ldr	r1, [r2, #0]
 80083f0:	f021 0101 	bic.w	r1, r1, #1
 80083f4:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80083fa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80083fe:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008400:	6802      	ldr	r2, [r0, #0]
 8008402:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008404:	f7ff ff64 	bl	80082d0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008408:	2320      	movs	r3, #32
 800840a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800840e:	2000      	movs	r0, #0
 8008410:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008414:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008416:	2002      	movs	r0, #2
}
 8008418:	4770      	bx	lr

0800841a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800841a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800841c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008420:	2b01      	cmp	r3, #1
 8008422:	d01d      	beq.n	8008460 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008424:	4604      	mov	r4, r0
 8008426:	2301      	movs	r3, #1
 8008428:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800842c:	2324      	movs	r3, #36	@ 0x24
 800842e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008432:	6803      	ldr	r3, [r0, #0]
 8008434:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800843e:	6802      	ldr	r2, [r0, #0]
 8008440:	6893      	ldr	r3, [r2, #8]
 8008442:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8008446:	4319      	orrs	r1, r3
 8008448:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800844a:	f7ff ff41 	bl	80082d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008452:	2320      	movs	r3, #32
 8008454:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008458:	2000      	movs	r0, #0
 800845a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800845e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008460:	2002      	movs	r0, #2
 8008462:	e7fc      	b.n	800845e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008464 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008464:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008466:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800846a:	2b01      	cmp	r3, #1
 800846c:	d01d      	beq.n	80084aa <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800846e:	4604      	mov	r4, r0
 8008470:	2301      	movs	r3, #1
 8008472:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008476:	2324      	movs	r3, #36	@ 0x24
 8008478:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800847c:	6803      	ldr	r3, [r0, #0]
 800847e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	f022 0201 	bic.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008488:	6802      	ldr	r2, [r0, #0]
 800848a:	6893      	ldr	r3, [r2, #8]
 800848c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8008490:	4319      	orrs	r1, r3
 8008492:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008494:	f7ff ff1c 	bl	80082d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800849c:	2320      	movs	r3, #32
 800849e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80084a2:	2000      	movs	r0, #0
 80084a4:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80084a8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80084aa:	2002      	movs	r0, #2
 80084ac:	e7fc      	b.n	80084a8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080084b0 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80084b0:	2804      	cmp	r0, #4
 80084b2:	d807      	bhi.n	80084c4 <LmHandlerPackageIsInitialized+0x14>
{
 80084b4:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80084b6:	4b05      	ldr	r3, [pc, #20]	@ (80084cc <LmHandlerPackageIsInitialized+0x1c>)
 80084b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	b11b      	cbz	r3, 80084c8 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80084c0:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 80084c2:	bd08      	pop	{r3, pc}
        return false;
 80084c4:	2000      	movs	r0, #0
}
 80084c6:	4770      	bx	lr
        return false;
 80084c8:	2000      	movs	r0, #0
 80084ca:	e7fa      	b.n	80084c2 <LmHandlerPackageIsInitialized+0x12>
 80084cc:	20000934 	.word	0x20000934

080084d0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4605      	mov	r5, r0
 80084d4:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80084d6:	2400      	movs	r4, #0
 80084d8:	e005      	b.n	80084e6 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	b10b      	cbz	r3, 80084e2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 80084de:	4630      	mov	r0, r6
 80084e0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80084e2:	3401      	adds	r4, #1
 80084e4:	b264      	sxtb	r4, r4
 80084e6:	2c04      	cmp	r4, #4
 80084e8:	dc24      	bgt.n	8008534 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 80084ea:	4b13      	ldr	r3, [pc, #76]	@ (8008538 <LmHandlerPackagesNotify+0x68>)
 80084ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0f6      	beq.n	80084e2 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 80084f4:	2d03      	cmp	r5, #3
 80084f6:	d8f4      	bhi.n	80084e2 <LmHandlerPackagesNotify+0x12>
 80084f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008500 <LmHandlerPackagesNotify+0x30>)
 80084fa:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80084fe:	bf00      	nop
 8008500:	080084db 	.word	0x080084db
 8008504:	08008511 	.word	0x08008511
 8008508:	0800851d 	.word	0x0800851d
 800850c:	08008529 	.word	0x08008529
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0e5      	beq.n	80084e2 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8008516:	4630      	mov	r0, r6
 8008518:	4798      	blx	r3
 800851a:	e7e2      	b.n	80084e2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0df      	beq.n	80084e2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8008522:	4630      	mov	r0, r6
 8008524:	4798      	blx	r3
 8008526:	e7dc      	b.n	80084e2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0d9      	beq.n	80084e2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800852e:	4630      	mov	r0, r6
 8008530:	4798      	blx	r3
 8008532:	e7d6      	b.n	80084e2 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8008534:	bd70      	pop	{r4, r5, r6, pc}
 8008536:	bf00      	nop
 8008538:	20000934 	.word	0x20000934

0800853c <MlmeIndication>:
{
 800853c:	b510      	push	{r4, lr}
 800853e:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8008540:	4b11      	ldr	r3, [pc, #68]	@ (8008588 <MlmeIndication+0x4c>)
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008546:	7842      	ldrb	r2, [r0, #1]
 8008548:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800854a:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800854e:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008550:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008554:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008556:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800855a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800855c:	78ca      	ldrb	r2, [r1, #3]
 800855e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8008560:	6842      	ldr	r2, [r0, #4]
 8008562:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8008564:	4b09      	ldr	r3, [pc, #36]	@ (800858c <MlmeIndication+0x50>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856a:	b13b      	cbz	r3, 800857c <MlmeIndication+0x40>
 800856c:	7802      	ldrb	r2, [r0, #0]
 800856e:	2a0a      	cmp	r2, #10
 8008570:	d004      	beq.n	800857c <MlmeIndication+0x40>
 8008572:	2a0e      	cmp	r2, #14
 8008574:	d002      	beq.n	800857c <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008576:	4904      	ldr	r1, [pc, #16]	@ (8008588 <MlmeIndication+0x4c>)
 8008578:	2000      	movs	r0, #0
 800857a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800857c:	4621      	mov	r1, r4
 800857e:	2003      	movs	r0, #3
 8008580:	f7ff ffa6 	bl	80084d0 <LmHandlerPackagesNotify>
}
 8008584:	bd10      	pop	{r4, pc}
 8008586:	bf00      	nop
 8008588:	200000a4 	.word	0x200000a4
 800858c:	20000918 	.word	0x20000918

08008590 <McpsConfirm>:
{
 8008590:	b510      	push	{r4, lr}
 8008592:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8008594:	4b0d      	ldr	r3, [pc, #52]	@ (80085cc <McpsConfirm+0x3c>)
 8008596:	2201      	movs	r2, #1
 8008598:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800859a:	7842      	ldrb	r2, [r0, #1]
 800859c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800859e:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80085a2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80085a4:	68c2      	ldr	r2, [r0, #12]
 80085a6:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80085a8:	f990 2003 	ldrsb.w	r2, [r0, #3]
 80085ac:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 80085ae:	6902      	ldr	r2, [r0, #16]
 80085b0:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80085b2:	7902      	ldrb	r2, [r0, #4]
 80085b4:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80085b6:	4b06      	ldr	r3, [pc, #24]	@ (80085d0 <McpsConfirm+0x40>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085bc:	b10b      	cbz	r3, 80085c2 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80085be:	4803      	ldr	r0, [pc, #12]	@ (80085cc <McpsConfirm+0x3c>)
 80085c0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80085c2:	4621      	mov	r1, r4
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7ff ff83 	bl	80084d0 <LmHandlerPackagesNotify>
}
 80085ca:	bd10      	pop	{r4, pc}
 80085cc:	200000b8 	.word	0x200000b8
 80085d0:	20000918 	.word	0x20000918

080085d4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 80085d4:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80085d6:	2400      	movs	r4, #0
 80085d8:	e001      	b.n	80085de <LmHandlerPackageIsTxPending+0xa>
 80085da:	3401      	adds	r4, #1
 80085dc:	b264      	sxtb	r4, r4
 80085de:	2c04      	cmp	r4, #4
 80085e0:	dc0a      	bgt.n	80085f8 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 80085e2:	4b07      	ldr	r3, [pc, #28]	@ (8008600 <LmHandlerPackageIsTxPending+0x2c>)
 80085e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0f6      	beq.n	80085da <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	4798      	blx	r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d0f1      	beq.n	80085da <LmHandlerPackageIsTxPending+0x6>
 80085f6:	e000      	b.n	80085fa <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	bf00      	nop
 8008600:	20000934 	.word	0x20000934

08008604 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8008604:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008606:	2400      	movs	r4, #0
 8008608:	e001      	b.n	800860e <LmHandlerPackagesProcess+0xa>
 800860a:	3401      	adds	r4, #1
 800860c:	b264      	sxtb	r4, r4
 800860e:	2c04      	cmp	r4, #4
 8008610:	dc12      	bgt.n	8008638 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008612:	4b0a      	ldr	r3, [pc, #40]	@ (800863c <LmHandlerPackagesProcess+0x38>)
 8008614:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0f6      	beq.n	800860a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800861c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0f3      	beq.n	800860a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008622:	b2e0      	uxtb	r0, r4
 8008624:	f7ff ff44 	bl	80084b0 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008628:	2800      	cmp	r0, #0
 800862a:	d0ee      	beq.n	800860a <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800862c:	4b03      	ldr	r3, [pc, #12]	@ (800863c <LmHandlerPackagesProcess+0x38>)
 800862e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	4798      	blx	r3
 8008636:	e7e8      	b.n	800860a <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8008638:	bd38      	pop	{r3, r4, r5, pc}
 800863a:	bf00      	nop
 800863c:	20000934 	.word	0x20000934

08008640 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8008640:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8008642:	4b04      	ldr	r3, [pc, #16]	@ (8008654 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8008644:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8008646:	4b04      	ldr	r3, [pc, #16]	@ (8008658 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864c:	b103      	cbz	r3, 8008650 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800864e:	4798      	blx	r3
    }
}
 8008650:	bd08      	pop	{r3, pc}
 8008652:	bf00      	nop
 8008654:	2000091c 	.word	0x2000091c
 8008658:	20000918 	.word	0x20000918

0800865c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800865c:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800865e:	4b04      	ldr	r3, [pc, #16]	@ (8008670 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 8008660:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8008662:	4b04      	ldr	r3, [pc, #16]	@ (8008674 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008668:	b103      	cbz	r3, 800866c <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800866a:	4798      	blx	r3
    }
}
 800866c:	bd08      	pop	{r3, pc}
 800866e:	bf00      	nop
 8008670:	2000091c 	.word	0x2000091c
 8008674:	20000918 	.word	0x20000918

08008678 <LmHandlerJoin>:
{
 8008678:	b530      	push	{r4, r5, lr}
 800867a:	b091      	sub	sp, #68	@ 0x44
 800867c:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800867e:	2301      	movs	r3, #1
 8008680:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008684:	4b33      	ldr	r3, [pc, #204]	@ (8008754 <LmHandlerJoin+0xdc>)
 8008686:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800868a:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800868e:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8008692:	f88d 1032 	strb.w	r1, [sp, #50]	@ 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8008696:	2802      	cmp	r0, #2
 8008698:	d022      	beq.n	80086e0 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800869a:	2001      	movs	r0, #1
 800869c:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80086a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008758 <LmHandlerJoin+0xe0>)
 80086a2:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80086a4:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 80086a6:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80086a8:	2100      	movs	r1, #0
 80086aa:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 80086ac:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 80086ae:	4b2b      	ldr	r3, [pc, #172]	@ (800875c <LmHandlerJoin+0xe4>)
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	b1f3      	cbz	r3, 80086f2 <LmHandlerJoin+0x7a>
        LoRaMacStart();
 80086b4:	f003 fd38 	bl	800c128 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80086b8:	2301      	movs	r3, #1
 80086ba:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80086be:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80086c2:	a801      	add	r0, sp, #4
 80086c4:	f003 ff6c 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 80086c8:	4b24      	ldr	r3, [pc, #144]	@ (800875c <LmHandlerJoin+0xe4>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b103      	cbz	r3, 80086d0 <LmHandlerJoin+0x58>
 80086ce:	b114      	cbz	r4, 80086d6 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 80086d0:	a80b      	add	r0, sp, #44	@ 0x2c
 80086d2:	f004 fa35 	bl	800cb40 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80086d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80086d8:	4b21      	ldr	r3, [pc, #132]	@ (8008760 <LmHandlerJoin+0xe8>)
 80086da:	601a      	str	r2, [r3, #0]
}
 80086dc:	b011      	add	sp, #68	@ 0x44
 80086de:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80086e0:	2202      	movs	r2, #2
 80086e2:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80086e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008758 <LmHandlerJoin+0xe0>)
 80086e8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 80086ea:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 80086ec:	f003 fd1c 	bl	800c128 <LoRaMacStart>
 80086f0:	e7ea      	b.n	80086c8 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80086f2:	231f      	movs	r3, #31
 80086f4:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 80086f8:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80086fc:	a801      	add	r0, sp, #4
 80086fe:	f003 ff4f 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8008702:	2320      	movs	r3, #32
 8008704:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8008708:	4d12      	ldr	r5, [pc, #72]	@ (8008754 <LmHandlerJoin+0xdc>)
 800870a:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800870e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008712:	a801      	add	r0, sp, #4
 8008714:	f003 ff44 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8008718:	2322      	movs	r3, #34	@ 0x22
 800871a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800871e:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008722:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008726:	a801      	add	r0, sp, #4
 8008728:	f003 ff3a 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800872c:	2321      	movs	r3, #33	@ 0x21
 800872e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8008732:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008736:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800873a:	a801      	add	r0, sp, #4
 800873c:	f003 ff30 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008740:	2329      	movs	r3, #41	@ 0x29
 8008742:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008746:	4b07      	ldr	r3, [pc, #28]	@ (8008764 <LmHandlerJoin+0xec>)
 8008748:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800874a:	a801      	add	r0, sp, #4
 800874c:	f003 ff28 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008750:	e7b0      	b.n	80086b4 <LmHandlerJoin+0x3c>
 8008752:	bf00      	nop
 8008754:	2000091c 	.word	0x2000091c
 8008758:	200000d4 	.word	0x200000d4
 800875c:	200007f4 	.word	0x200007f4
 8008760:	200008ec 	.word	0x200008ec
 8008764:	01000400 	.word	0x01000400

08008768 <LmHandlerDeviceTimeReq>:
{
 8008768:	b500      	push	{lr}
 800876a:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800876c:	2309      	movs	r3, #9
 800876e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8008772:	a801      	add	r0, sp, #4
 8008774:	f004 f9e4 	bl	800cb40 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	4b04      	ldr	r3, [pc, #16]	@ (800878c <LmHandlerDeviceTimeReq+0x24>)
 800877c:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800877e:	b910      	cbnz	r0, 8008786 <LmHandlerDeviceTimeReq+0x1e>
}
 8008780:	b007      	add	sp, #28
 8008782:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008786:	f04f 30ff 	mov.w	r0, #4294967295
 800878a:	e7f9      	b.n	8008780 <LmHandlerDeviceTimeReq+0x18>
 800878c:	200008ec 	.word	0x200008ec

08008790 <LmHandlerGetDutyCycleWaitTime>:
}
 8008790:	4b01      	ldr	r3, [pc, #4]	@ (8008798 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	200008ec 	.word	0x200008ec

0800879c <LmHandlerJoinStatus>:
{
 800879c:	b500      	push	{lr}
 800879e:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80087a6:	4668      	mov	r0, sp
 80087a8:	f003 fd86 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80087ac:	b920      	cbnz	r0, 80087b8 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80087ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80087b2:	b110      	cbz	r0, 80087ba <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80087b4:	2001      	movs	r0, #1
 80087b6:	e000      	b.n	80087ba <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80087b8:	2000      	movs	r0, #0
}
 80087ba:	b00b      	add	sp, #44	@ 0x2c
 80087bc:	f85d fb04 	ldr.w	pc, [sp], #4

080087c0 <LmHandlerSend>:
{
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	4604      	mov	r4, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 80087ca:	f003 fa5b 	bl	800bc84 <LoRaMacIsBusy>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d168      	bne.n	80088a4 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 80087d2:	f003 fa75 	bl	800bcc0 <LoRaMacIsStopped>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d167      	bne.n	80088aa <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80087da:	f7ff ffdf 	bl	800879c <LmHandlerJoinStatus>
 80087de:	2801      	cmp	r0, #1
 80087e0:	d137      	bne.n	8008852 <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 80087e2:	4b35      	ldr	r3, [pc, #212]	@ (80088b8 <LmHandlerSend+0xf8>)
 80087e4:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80087e6:	3d00      	subs	r5, #0
 80087e8:	bf18      	it	ne
 80087ea:	2501      	movne	r5, #1
 80087ec:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80087f0:	4b32      	ldr	r3, [pc, #200]	@ (80088bc <LmHandlerSend+0xfc>)
 80087f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80087f6:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80087fa:	4669      	mov	r1, sp
 80087fc:	7860      	ldrb	r0, [r4, #1]
 80087fe:	f003 fcf1 	bl	800c1e4 <LoRaMacQueryTxPossible>
 8008802:	b370      	cbz	r0, 8008862 <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008804:	2300      	movs	r3, #0
 8008806:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800880a:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800880c:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8008810:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8008814:	4b28      	ldr	r3, [pc, #160]	@ (80088b8 <LmHandlerSend+0xf8>)
 8008816:	f103 0c10 	add.w	ip, r3, #16
 800881a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800881e:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008822:	4a26      	ldr	r2, [pc, #152]	@ (80088bc <LmHandlerSend+0xfc>)
 8008824:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008828:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800882a:	4631      	mov	r1, r6
 800882c:	a801      	add	r0, sp, #4
 800882e:	f004 fa8b 	bl	800cd48 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008832:	9a05      	ldr	r2, [sp, #20]
 8008834:	4b22      	ldr	r3, [pc, #136]	@ (80088c0 <LmHandlerSend+0x100>)
 8008836:	601a      	str	r2, [r3, #0]
    switch( status )
 8008838:	2811      	cmp	r0, #17
 800883a:	d830      	bhi.n	800889e <LmHandlerSend+0xde>
 800883c:	e8df f000 	tbb	[pc, r0]
 8008840:	2f2f1c21 	.word	0x2f2f1c21
 8008844:	382f2f2f 	.word	0x382f2f2f
 8008848:	2c2f2f2f 	.word	0x2c2f2f2f
 800884c:	1c1c2f2f 	.word	0x1c1c2f2f
 8008850:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008852:	4b1c      	ldr	r3, [pc, #112]	@ (80088c4 <LmHandlerSend+0x104>)
 8008854:	7a19      	ldrb	r1, [r3, #8]
 8008856:	79d8      	ldrb	r0, [r3, #7]
 8008858:	f7ff ff0e 	bl	8008678 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800885c:	f06f 0502 	mvn.w	r5, #2
 8008860:	e00c      	b.n	800887c <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008862:	7823      	ldrb	r3, [r4, #0]
 8008864:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008868:	7863      	ldrb	r3, [r4, #1]
 800886a:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800886e:	6863      	ldr	r3, [r4, #4]
 8008870:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008872:	f04f 35ff 	mov.w	r5, #4294967295
 8008876:	e7cd      	b.n	8008814 <LmHandlerSend+0x54>
    switch( status )
 8008878:	f06f 0501 	mvn.w	r5, #1
}
 800887c:	4628      	mov	r0, r5
 800887e:	b006      	add	sp, #24
 8008880:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8008882:	4b11      	ldr	r3, [pc, #68]	@ (80088c8 <LmHandlerSend+0x108>)
 8008884:	2200      	movs	r2, #0
 8008886:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8008888:	f115 0f07 	cmn.w	r5, #7
 800888c:	d0f6      	beq.n	800887c <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800888e:	2500      	movs	r5, #0
 8008890:	e7f4      	b.n	800887c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008892:	f06f 0504 	mvn.w	r5, #4
            break;
 8008896:	e7f1      	b.n	800887c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008898:	f06f 0505 	mvn.w	r5, #5
            break;
 800889c:	e7ee      	b.n	800887c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800889e:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80088a2:	e7eb      	b.n	800887c <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80088a4:	f06f 0501 	mvn.w	r5, #1
 80088a8:	e7e8      	b.n	800887c <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80088aa:	f06f 0502 	mvn.w	r5, #2
 80088ae:	e7e5      	b.n	800887c <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80088b0:	f06f 0502 	mvn.w	r5, #2
 80088b4:	e7e2      	b.n	800887c <LmHandlerSend+0xbc>
 80088b6:	bf00      	nop
 80088b8:	200000b8 	.word	0x200000b8
 80088bc:	2000091c 	.word	0x2000091c
 80088c0:	200008ec 	.word	0x200008ec
 80088c4:	200000d4 	.word	0x200000d4
 80088c8:	200008ea 	.word	0x200008ea

080088cc <LmHandlerProcess>:
{
 80088cc:	b500      	push	{lr}
 80088ce:	b083      	sub	sp, #12
    LoRaMacProcess( );
 80088d0:	f003 fa02 	bl	800bcd8 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 80088d4:	f7ff fe96 	bl	8008604 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 80088d8:	f7ff fe7c 	bl	80085d4 <LmHandlerPackageIsTxPending>
 80088dc:	b910      	cbnz	r0, 80088e4 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 80088de:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <LmHandlerProcess+0x40>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b913      	cbnz	r3, 80088ea <LmHandlerProcess+0x1e>
}
 80088e4:	b003      	add	sp, #12
 80088e6:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 80088ea:	2200      	movs	r2, #0
 80088ec:	f88d 2000 	strb.w	r2, [sp]
 80088f0:	f88d 2001 	strb.w	r2, [sp, #1]
 80088f4:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 80088f6:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <LmHandlerProcess+0x44>)
 80088f8:	78d9      	ldrb	r1, [r3, #3]
 80088fa:	4668      	mov	r0, sp
 80088fc:	f7ff ff60 	bl	80087c0 <LmHandlerSend>
 8008900:	2800      	cmp	r0, #0
 8008902:	d1ef      	bne.n	80088e4 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8008904:	4b01      	ldr	r3, [pc, #4]	@ (800890c <LmHandlerProcess+0x40>)
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]
 800890a:	e7eb      	b.n	80088e4 <LmHandlerProcess+0x18>
 800890c:	200008ea 	.word	0x200008ea
 8008910:	2000091c 	.word	0x2000091c

08008914 <LmHandlerRequestClass>:
{
 8008914:	b510      	push	{r4, lr}
 8008916:	b08a      	sub	sp, #40	@ 0x28
 8008918:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800891a:	f003 f9b3 	bl	800bc84 <LoRaMacIsBusy>
 800891e:	bb98      	cbnz	r0, 8008988 <LmHandlerRequestClass+0x74>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008920:	f7ff ff3c 	bl	800879c <LmHandlerJoinStatus>
 8008924:	2801      	cmp	r0, #1
 8008926:	d132      	bne.n	800898e <LmHandlerRequestClass+0x7a>
    mibReq.Type = MIB_DEVICE_CLASS;
 8008928:	2300      	movs	r3, #0
 800892a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800892e:	4668      	mov	r0, sp
 8008930:	f003 fcc2 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 8008934:	bb70      	cbnz	r0, 8008994 <LmHandlerRequestClass+0x80>
    currentClass = mibReq.Param.Class;
 8008936:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800893a:	42a3      	cmp	r3, r4
 800893c:	d02d      	beq.n	800899a <LmHandlerRequestClass+0x86>
        switch( newClass )
 800893e:	2c01      	cmp	r4, #1
 8008940:	d02e      	beq.n	80089a0 <LmHandlerRequestClass+0x8c>
 8008942:	2c02      	cmp	r4, #2
 8008944:	d011      	beq.n	800896a <LmHandlerRequestClass+0x56>
 8008946:	bb74      	cbnz	r4, 80089a6 <LmHandlerRequestClass+0x92>
                    if( currentClass != CLASS_A )
 8008948:	b90b      	cbnz	r3, 800894e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800894a:	2000      	movs	r0, #0
 800894c:	e026      	b.n	800899c <LmHandlerRequestClass+0x88>
                        mibReq.Param.Class = newClass;
 800894e:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008952:	4668      	mov	r0, sp
 8008954:	f003 fe24 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008958:	bb38      	cbnz	r0, 80089aa <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800895a:	4b1a      	ldr	r3, [pc, #104]	@ (80089c4 <LmHandlerRequestClass+0xb0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008960:	b333      	cbz	r3, 80089b0 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008962:	4620      	mov	r0, r4
 8008964:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008966:	2000      	movs	r0, #0
 8008968:	e018      	b.n	800899c <LmHandlerRequestClass+0x88>
                    if( currentClass != CLASS_A )
 800896a:	bb1b      	cbnz	r3, 80089b4 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800896c:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008970:	4668      	mov	r0, sp
 8008972:	f003 fe15 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008976:	bb00      	cbnz	r0, 80089ba <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8008978:	4b12      	ldr	r3, [pc, #72]	@ (80089c4 <LmHandlerRequestClass+0xb0>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897e:	b1fb      	cbz	r3, 80089c0 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008980:	4620      	mov	r0, r4
 8008982:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008984:	2000      	movs	r0, #0
 8008986:	e009      	b.n	800899c <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008988:	f06f 0001 	mvn.w	r0, #1
 800898c:	e006      	b.n	800899c <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800898e:	f06f 0002 	mvn.w	r0, #2
 8008992:	e003      	b.n	800899c <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_ERROR;
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	e000      	b.n	800899c <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800899a:	2000      	movs	r0, #0
}
 800899c:	b00a      	add	sp, #40	@ 0x28
 800899e:	bd10      	pop	{r4, pc}
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	e7fa      	b.n	800899c <LmHandlerRequestClass+0x88>
        switch( newClass )
 80089a6:	2000      	movs	r0, #0
 80089a8:	e7f8      	b.n	800899c <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
 80089ae:	e7f5      	b.n	800899c <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80089b0:	2000      	movs	r0, #0
 80089b2:	e7f3      	b.n	800899c <LmHandlerRequestClass+0x88>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	e7f0      	b.n	800899c <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	e7ed      	b.n	800899c <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80089c0:	2000      	movs	r0, #0
 80089c2:	e7eb      	b.n	800899c <LmHandlerRequestClass+0x88>
 80089c4:	20000918 	.word	0x20000918

080089c8 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 80089c8:	b170      	cbz	r0, 80089e8 <LmHandlerGetCurrentClass+0x20>
{
 80089ca:	b510      	push	{r4, lr}
 80089cc:	b08a      	sub	sp, #40	@ 0x28
 80089ce:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80089d6:	4668      	mov	r0, sp
 80089d8:	f003 fc6e 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 80089dc:	b938      	cbnz	r0, 80089ee <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 80089de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80089e2:	7023      	strb	r3, [r4, #0]
}
 80089e4:	b00a      	add	sp, #40	@ 0x28
 80089e6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80089ec:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	e7f7      	b.n	80089e4 <LmHandlerGetCurrentClass+0x1c>

080089f4 <McpsIndication>:
{
 80089f4:	b510      	push	{r4, lr}
 80089f6:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 80089f8:	2300      	movs	r3, #0
 80089fa:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 80089fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008a74 <McpsIndication+0x80>)
 8008a00:	2301      	movs	r3, #1
 8008a02:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8008a04:	7843      	ldrb	r3, [r0, #1]
 8008a06:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d131      	bne.n	8008a70 <McpsIndication+0x7c>
 8008a0c:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008a0e:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8008a12:	4b18      	ldr	r3, [pc, #96]	@ (8008a74 <McpsIndication+0x80>)
 8008a14:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008a16:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008a1a:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008a1c:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8008a20:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008a22:	78ca      	ldrb	r2, [r1, #3]
 8008a24:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008a26:	6902      	ldr	r2, [r0, #16]
 8008a28:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8008a2a:	78c3      	ldrb	r3, [r0, #3]
 8008a2c:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8008a30:	7b03      	ldrb	r3, [r0, #12]
 8008a32:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8008a36:	6883      	ldr	r3, [r0, #8]
 8008a38:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a78 <McpsIndication+0x84>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a40:	b113      	cbz	r3, 8008a48 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8008a42:	490c      	ldr	r1, [pc, #48]	@ (8008a74 <McpsIndication+0x80>)
 8008a44:	a802      	add	r0, sp, #8
 8008a46:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8008a48:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <McpsIndication+0x84>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4e:	b113      	cbz	r3, 8008a56 <McpsIndication+0x62>
 8008a50:	7e22      	ldrb	r2, [r4, #24]
 8008a52:	b102      	cbz	r2, 8008a56 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008a54:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008a56:	4621      	mov	r1, r4
 8008a58:	2001      	movs	r0, #1
 8008a5a:	f7ff fd39 	bl	80084d0 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8008a5e:	f10d 0007 	add.w	r0, sp, #7
 8008a62:	f7ff ffb1 	bl	80089c8 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8008a66:	7963      	ldrb	r3, [r4, #5]
 8008a68:	b113      	cbz	r3, 8008a70 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 8008a6a:	4b04      	ldr	r3, [pc, #16]	@ (8008a7c <McpsIndication+0x88>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	701a      	strb	r2, [r3, #0]
}
 8008a70:	b004      	add	sp, #16
 8008a72:	bd10      	pop	{r4, pc}
 8008a74:	200000a4 	.word	0x200000a4
 8008a78:	20000918 	.word	0x20000918
 8008a7c:	200008ea 	.word	0x200008ea

08008a80 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8008a80:	b180      	cbz	r0, 8008aa4 <LmHandlerGetTxDatarate+0x24>
{
 8008a82:	b510      	push	{r4, lr}
 8008a84:	b08a      	sub	sp, #40	@ 0x28
 8008a86:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008a88:	2320      	movs	r3, #32
 8008a8a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8008a8e:	4668      	mov	r0, sp
 8008a90:	f003 fc12 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 8008a94:	b948      	cbnz	r0, 8008aaa <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008a96:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8008a9a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008a9c:	4a04      	ldr	r2, [pc, #16]	@ (8008ab0 <LmHandlerGetTxDatarate+0x30>)
 8008a9e:	7113      	strb	r3, [r2, #4]
}
 8008aa0:	b00a      	add	sp, #40	@ 0x28
 8008aa2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008aa8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008aae:	e7f7      	b.n	8008aa0 <LmHandlerGetTxDatarate+0x20>
 8008ab0:	2000091c 	.word	0x2000091c

08008ab4 <LmHandlerGetActiveRegion>:
    if( region == NULL )
 8008ab4:	b120      	cbz	r0, 8008ac0 <LmHandlerGetActiveRegion+0xc>
    *region = LmHandlerParams.ActiveRegion;
 8008ab6:	4a04      	ldr	r2, [pc, #16]	@ (8008ac8 <LmHandlerGetActiveRegion+0x14>)
 8008ab8:	7812      	ldrb	r2, [r2, #0]
 8008aba:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008abc:	2000      	movs	r0, #0
 8008abe:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	2000091c 	.word	0x2000091c

08008acc <LmHandlerSetSystemMaxRxError>:
{
 8008acc:	b500      	push	{lr}
 8008ace:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008ad0:	2323      	movs	r3, #35	@ 0x23
 8008ad2:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8008ad6:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008ad8:	4668      	mov	r0, sp
 8008ada:	f003 fd61 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008ade:	b910      	cbnz	r0, 8008ae6 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008ae0:	b00b      	add	sp, #44	@ 0x2c
 8008ae2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aea:	e7f9      	b.n	8008ae0 <LmHandlerSetSystemMaxRxError+0x14>

08008aec <LmHandlerConfigure>:
{
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	b08e      	sub	sp, #56	@ 0x38
 8008af0:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8008af2:	4c6d      	ldr	r4, [pc, #436]	@ (8008ca8 <LmHandlerConfigure+0x1bc>)
 8008af4:	2218      	movs	r2, #24
 8008af6:	4620      	mov	r0, r4
 8008af8:	f008 fb6b 	bl	80111d2 <memcpy1>
    IsUplinkTxPending = false;
 8008afc:	4b6b      	ldr	r3, [pc, #428]	@ (8008cac <LmHandlerConfigure+0x1c0>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8008b02:	f7fa fe43 	bl	800378c <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8008b06:	7822      	ldrb	r2, [r4, #0]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	4093      	lsls	r3, r2
 8008b0c:	6841      	ldr	r1, [r0, #4]
 8008b0e:	420b      	tst	r3, r1
 8008b10:	d106      	bne.n	8008b20 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8008b12:	4b67      	ldr	r3, [pc, #412]	@ (8008cb0 <LmHandlerConfigure+0x1c4>)
 8008b14:	2201      	movs	r2, #1
 8008b16:	2100      	movs	r1, #0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	f00a fd11 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8008b1e:	e7fe      	b.n	8008b1e <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8008b20:	4964      	ldr	r1, [pc, #400]	@ (8008cb4 <LmHandlerConfigure+0x1c8>)
 8008b22:	4865      	ldr	r0, [pc, #404]	@ (8008cb8 <LmHandlerConfigure+0x1cc>)
 8008b24:	f003 f920 	bl	800bd68 <LoRaMacInitialization>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f040 80b7 	bne.w	8008c9c <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 8008b2e:	2327      	movs	r3, #39	@ 0x27
 8008b30:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008b34:	a804      	add	r0, sp, #16
 8008b36:	f003 fd33 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d17c      	bne.n	8008c38 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 8008b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8008cbc <LmHandlerConfigure+0x1d0>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8008b44:	4b5d      	ldr	r3, [pc, #372]	@ (8008cbc <LmHandlerConfigure+0x1d0>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 809e 	beq.w	8008c8a <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8008b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8008cc0 <LmHandlerConfigure+0x1d4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	b10b      	cbz	r3, 8008b5a <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8008b56:	2000      	movs	r0, #0
 8008b58:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8008b5a:	2327      	movs	r3, #39	@ 0x27
 8008b5c:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008b60:	a804      	add	r0, sp, #16
 8008b62:	f003 fba9 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 8008b66:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8008b68:	f892 1048 	ldrb.w	r1, [r2, #72]	@ 0x48
 8008b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8008ca8 <LmHandlerConfigure+0x1bc>)
 8008b6e:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8008b70:	f892 1118 	ldrb.w	r1, [r2, #280]	@ 0x118
 8008b74:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8008b76:	f892 211a 	ldrb.w	r2, [r2, #282]	@ 0x11a
 8008b7a:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8008b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8008cb4 <LmHandlerConfigure+0x1c8>)
 8008b7e:	68d9      	ldr	r1, [r3, #12]
 8008b80:	6898      	ldr	r0, [r3, #8]
 8008b82:	f008 fa39 	bl	8010ff8 <SecureElementInitMcuID>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	f040 808b 	bne.w	8008ca2 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 8008b8c:	2306      	movs	r3, #6
 8008b8e:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008b92:	a804      	add	r0, sp, #16
 8008b94:	f003 fb90 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008b98:	4c4a      	ldr	r4, [pc, #296]	@ (8008cc4 <LmHandlerConfigure+0x1d8>)
 8008b9a:	9b05      	ldr	r3, [sp, #20]
 8008b9c:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008b9e:	a804      	add	r0, sp, #16
 8008ba0:	f003 fcfe 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8008baa:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008bac:	a804      	add	r0, sp, #16
 8008bae:	f003 fb83 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8008bb8:	3408      	adds	r4, #8
 8008bba:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008bbc:	a804      	add	r0, sp, #16
 8008bbe:	f003 fb7b 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8008bc2:	f008 fab3 	bl	801112c <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008bc6:	260f      	movs	r6, #15
 8008bc8:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008bd2:	a804      	add	r0, sp, #16
 8008bd4:	f003 fce4 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008bde:	2500      	movs	r5, #0
 8008be0:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008be4:	eb0d 0003 	add.w	r0, sp, r3
 8008be8:	f003 fcda 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008bec:	2304      	movs	r3, #4
 8008bee:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008bf2:	4c2d      	ldr	r4, [pc, #180]	@ (8008ca8 <LmHandlerConfigure+0x1bc>)
 8008bf4:	78a3      	ldrb	r3, [r4, #2]
 8008bf6:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008bfa:	a804      	add	r0, sp, #16
 8008bfc:	f003 fcd0 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8008c00:	233a      	movs	r3, #58	@ 0x3a
 8008c02:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8008c06:	6963      	ldr	r3, [r4, #20]
 8008c08:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008c0a:	a804      	add	r0, sp, #16
 8008c0c:	f003 fcc8 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008c10:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8008c14:	a902      	add	r1, sp, #8
 8008c16:	7820      	ldrb	r0, [r4, #0]
 8008c18:	f005 fa1a 	bl	800e050 <RegionGetPhyParam>
 8008c1c:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8008c1e:	1b43      	subs	r3, r0, r5
 8008c20:	bf18      	it	ne
 8008c22:	2301      	movne	r3, #1
 8008c24:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8008c26:	2014      	movs	r0, #20
 8008c28:	f7ff ff50 	bl	8008acc <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008c2c:	79e0      	ldrb	r0, [r4, #7]
 8008c2e:	f004 f977 	bl	800cf20 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8008c32:	4628      	mov	r0, r5
}
 8008c34:	b00e      	add	sp, #56	@ 0x38
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8008c38:	2328      	movs	r3, #40	@ 0x28
 8008c3a:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8008c3e:	4b20      	ldr	r3, [pc, #128]	@ (8008cc0 <LmHandlerConfigure+0x1d4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	b14b      	cbz	r3, 8008c5a <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008c46:	a804      	add	r0, sp, #16
 8008c48:	f003 fb36 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8008c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <LmHandlerConfigure+0x1d4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 8008c56:	9805      	ldr	r0, [sp, #20]
 8008c58:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8008c5a:	2327      	movs	r3, #39	@ 0x27
 8008c5c:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008c60:	a804      	add	r0, sp, #16
 8008c62:	f003 fc9d 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f47f af6c 	bne.w	8008b44 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008c72:	a804      	add	r0, sp, #16
 8008c74:	f003 fb20 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008c78:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f43f af61 	beq.w	8008b44 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 8008c82:	4b0e      	ldr	r3, [pc, #56]	@ (8008cbc <LmHandlerConfigure+0x1d0>)
 8008c84:	2201      	movs	r2, #1
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e75c      	b.n	8008b44 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 8008c8a:	2305      	movs	r3, #5
 8008c8c:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8008c90:	2300      	movs	r3, #0
 8008c92:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008c94:	a804      	add	r0, sp, #16
 8008c96:	f003 fc83 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008c9a:	e76f      	b.n	8008b7c <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca0:	e7c8      	b.n	8008c34 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 8008ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca6:	e7c5      	b.n	8008c34 <LmHandlerConfigure+0x148>
 8008ca8:	2000091c 	.word	0x2000091c
 8008cac:	200008ea 	.word	0x200008ea
 8008cb0:	08016290 	.word	0x08016290
 8008cb4:	200008f0 	.word	0x200008f0
 8008cb8:	20000908 	.word	0x20000908
 8008cbc:	200007f4 	.word	0x200007f4
 8008cc0:	20000918 	.word	0x20000918
 8008cc4:	20000958 	.word	0x20000958

08008cc8 <LmHandlerPackageRegister>:
{
 8008cc8:	b530      	push	{r4, r5, lr}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9301      	str	r3, [sp, #4]
    switch( id )
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	b9d8      	cbnz	r0, 8008d0e <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 8008cd6:	f000 fe55 	bl	8009984 <LmhpCompliancePackageFactory>
 8008cda:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8008cdc:	9b01      	ldr	r3, [sp, #4]
 8008cde:	b1f3      	cbz	r3, 8008d1e <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 8008ce0:	4a10      	ldr	r2, [pc, #64]	@ (8008d24 <LmHandlerPackageRegister+0x5c>)
 8008ce2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008ce6:	4a10      	ldr	r2, [pc, #64]	@ (8008d28 <LmHandlerPackageRegister+0x60>)
 8008ce8:	629a      	str	r2, [r3, #40]	@ 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8008cea:	4a10      	ldr	r2, [pc, #64]	@ (8008d2c <LmHandlerPackageRegister+0x64>)
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8008cf0:	6319      	str	r1, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8008cf2:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8008cf4:	6359      	str	r1, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008cf6:	490e      	ldr	r1, [pc, #56]	@ (8008d30 <LmHandlerPackageRegister+0x68>)
 8008cf8:	62d9      	str	r1, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008cfa:	6992      	ldr	r2, [r2, #24]
 8008cfc:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	22f2      	movs	r2, #242	@ 0xf2
 8008d02:	490c      	ldr	r1, [pc, #48]	@ (8008d34 <LmHandlerPackageRegister+0x6c>)
 8008d04:	4628      	mov	r0, r5
 8008d06:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8008d08:	2000      	movs	r0, #0
}
 8008d0a:	b003      	add	sp, #12
 8008d0c:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8008d0e:	a901      	add	r1, sp, #4
 8008d10:	f000 fe3e 	bl	8009990 <LmhpPackagesRegister>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d0e1      	beq.n	8008cdc <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	e7f5      	b.n	8008d0a <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 8008d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d22:	e7f2      	b.n	8008d0a <LmHandlerPackageRegister+0x42>
 8008d24:	20000934 	.word	0x20000934
 8008d28:	08008679 	.word	0x08008679
 8008d2c:	20000918 	.word	0x20000918
 8008d30:	08008769 	.word	0x08008769
 8008d34:	200007f8 	.word	0x200007f8

08008d38 <LmHandlerInit>:
{
 8008d38:	b500      	push	{lr}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 8008d3e:	4b19      	ldr	r3, [pc, #100]	@ (8008da4 <LmHandlerInit+0x6c>)
 8008d40:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008d42:	4b19      	ldr	r3, [pc, #100]	@ (8008da8 <LmHandlerInit+0x70>)
 8008d44:	4a19      	ldr	r2, [pc, #100]	@ (8008dac <LmHandlerInit+0x74>)
 8008d46:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008d48:	4a19      	ldr	r2, [pc, #100]	@ (8008db0 <LmHandlerInit+0x78>)
 8008d4a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008d4c:	4a19      	ldr	r2, [pc, #100]	@ (8008db4 <LmHandlerInit+0x7c>)
 8008d4e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008d50:	4a19      	ldr	r2, [pc, #100]	@ (8008db8 <LmHandlerInit+0x80>)
 8008d52:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8008d54:	6802      	ldr	r2, [r0, #0]
 8008d56:	4b19      	ldr	r3, [pc, #100]	@ (8008dbc <LmHandlerInit+0x84>)
 8008d58:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8008d5a:	6842      	ldr	r2, [r0, #4]
 8008d5c:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8008d5e:	6882      	ldr	r2, [r0, #8]
 8008d60:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8008d62:	68c2      	ldr	r2, [r0, #12]
 8008d64:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8008d66:	4a16      	ldr	r2, [pc, #88]	@ (8008dc0 <LmHandlerInit+0x88>)
 8008d68:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8008d6a:	6982      	ldr	r2, [r0, #24]
 8008d6c:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8008d6e:	4b15      	ldr	r3, [pc, #84]	@ (8008dc4 <LmHandlerInit+0x8c>)
 8008d70:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8008d72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d74:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8008d76:	4a14      	ldr	r2, [pc, #80]	@ (8008dc8 <LmHandlerInit+0x90>)
 8008d78:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 8008d7a:	4a14      	ldr	r2, [pc, #80]	@ (8008dcc <LmHandlerInit+0x94>)
 8008d7c:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8008d7e:	4619      	mov	r1, r3
 8008d80:	2000      	movs	r0, #0
 8008d82:	f7ff ffa1 	bl	8008cc8 <LmHandlerPackageRegister>
 8008d86:	b930      	cbnz	r0, 8008d96 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8008d88:	a801      	add	r0, sp, #4
 8008d8a:	f000 fdff 	bl	800998c <LmhpPackagesRegistrationInit>
 8008d8e:	b928      	cbnz	r0, 8008d9c <LmHandlerInit+0x64>
}
 8008d90:	b003      	add	sp, #12
 8008d92:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008d96:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9a:	e7f9      	b.n	8008d90 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	e7f6      	b.n	8008d90 <LmHandlerInit+0x58>
 8008da2:	bf00      	nop
 8008da4:	20000918 	.word	0x20000918
 8008da8:	20000908 	.word	0x20000908
 8008dac:	08008591 	.word	0x08008591
 8008db0:	080089f5 	.word	0x080089f5
 8008db4:	080090bd 	.word	0x080090bd
 8008db8:	0800853d 	.word	0x0800853d
 8008dbc:	200008f0 	.word	0x200008f0
 8008dc0:	0800dff9 	.word	0x0800dff9
 8008dc4:	20000948 	.word	0x20000948
 8008dc8:	08008641 	.word	0x08008641
 8008dcc:	0800865d 	.word	0x0800865d

08008dd0 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8008dd0:	b161      	cbz	r1, 8008dec <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 8008dd2:	b118      	cbz	r0, 8008ddc <LmHandlerGetVersion+0xc>
 8008dd4:	2801      	cmp	r0, #1
 8008dd6:	d005      	beq.n	8008de4 <LmHandlerGetVersion+0x14>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8008ddc:	4a05      	ldr	r2, [pc, #20]	@ (8008df4 <LmHandlerGetVersion+0x24>)
 8008dde:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8008de0:	2000      	movs	r0, #0
            break;
 8008de2:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8008de4:	4a04      	ldr	r2, [pc, #16]	@ (8008df8 <LmHandlerGetVersion+0x28>)
 8008de6:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008de8:	2000      	movs	r0, #0
            break;
 8008dea:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	01000400 	.word	0x01000400
 8008df8:	02010001 	.word	0x02010001

08008dfc <LmHandlerHalt>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8008dfc:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8008dfe:	f003 f9c1 	bl	800c184 <LoRaMacHalt>
 8008e02:	b900      	cbnz	r0, 8008e06 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8008e04:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008e06:	f06f 0001 	mvn.w	r0, #1
 8008e0a:	e7fb      	b.n	8008e04 <LmHandlerHalt+0x8>

08008e0c <LmHandlerLinkCheckReq>:

LmHandlerErrorStatus_t LmHandlerLinkCheckReq( void )
{
 8008e0c:	b500      	push	{lr}
 8008e0e:	b087      	sub	sp, #28
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_LINK_CHECK;
 8008e10:	2305      	movs	r3, #5
 8008e12:	f88d 3004 	strb.w	r3, [sp, #4]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8008e16:	a801      	add	r0, sp, #4
 8008e18:	f003 fe92 	bl	800cb40 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 8008e1c:	b910      	cbnz	r0, 8008e24 <LmHandlerLinkCheckReq+0x18>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 8008e1e:	b007      	add	sp, #28
 8008e20:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e7f9      	b.n	8008e1e <LmHandlerLinkCheckReq+0x12>

08008e2a <LmHandlerGetDevEUI>:

LmHandlerErrorStatus_t LmHandlerGetDevEUI( uint8_t *devEUI )
{
    MibRequestConfirm_t mibReq;
    if( devEUI == NULL )
 8008e2a:	b160      	cbz	r0, 8008e46 <LmHandlerGetDevEUI+0x1c>
{
 8008e2c:	b500      	push	{lr}
 8008e2e:	b08b      	sub	sp, #44	@ 0x2c
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_DEV_EUI;
 8008e30:	2202      	movs	r2, #2
 8008e32:	f88d 2000 	strb.w	r2, [sp]
    mibReq.Param.DevEui = devEUI;
 8008e36:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008e38:	4668      	mov	r0, sp
 8008e3a:	f003 fa3d 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 8008e3e:	b928      	cbnz	r0, 8008e4c <LmHandlerGetDevEUI+0x22>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    return LORAMAC_HANDLER_SUCCESS;
}
 8008e40:	b00b      	add	sp, #44	@ 0x2c
 8008e42:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e4a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	e7f6      	b.n	8008e40 <LmHandlerGetDevEUI+0x16>

08008e52 <LmHandlerSetDevEUI>:

LmHandlerErrorStatus_t LmHandlerSetDevEUI( uint8_t *devEUI )
{
 8008e52:	b510      	push	{r4, lr}
 8008e54:	b08a      	sub	sp, #40	@ 0x28
 8008e56:	4604      	mov	r4, r0
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008e58:	f7ff fca0 	bl	800879c <LmHandlerJoinStatus>
 8008e5c:	2801      	cmp	r0, #1
 8008e5e:	d00d      	beq.n	8008e7c <LmHandlerSetDevEUI+0x2a>
    {
        mibReq.Type = MIB_DEV_EUI;
 8008e60:	2302      	movs	r3, #2
 8008e62:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.DevEui = devEUI;
 8008e66:	9401      	str	r4, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008e68:	4668      	mov	r0, sp
 8008e6a:	f003 fb99 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008e6e:	b910      	cbnz	r0, 8008e76 <LmHandlerSetDevEUI+0x24>
        {
            return LORAMAC_HANDLER_ERROR;
        }
        return LORAMAC_HANDLER_SUCCESS;
 8008e70:	2000      	movs	r0, #0
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
    }
}
 8008e72:	b00a      	add	sp, #40	@ 0x28
 8008e74:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8008e76:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7a:	e7fa      	b.n	8008e72 <LmHandlerSetDevEUI+0x20>
        return LORAMAC_HANDLER_ERROR;
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	e7f7      	b.n	8008e72 <LmHandlerSetDevEUI+0x20>

08008e82 <LmHandlerGetAppEUI>:

LmHandlerErrorStatus_t LmHandlerGetAppEUI( uint8_t *appEUI )
{
    MibRequestConfirm_t mibReq;

    if( appEUI == NULL )
 8008e82:	b160      	cbz	r0, 8008e9e <LmHandlerGetAppEUI+0x1c>
{
 8008e84:	b500      	push	{lr}
 8008e86:	b08b      	sub	sp, #44	@ 0x2c
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_JOIN_EUI;
 8008e88:	2203      	movs	r2, #3
 8008e8a:	f88d 2000 	strb.w	r2, [sp]
    mibReq.Param.JoinEui = appEUI;
 8008e8e:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008e90:	4668      	mov	r0, sp
 8008e92:	f003 fa11 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 8008e96:	b928      	cbnz	r0, 8008ea4 <LmHandlerGetAppEUI+0x22>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    return LORAMAC_HANDLER_SUCCESS;
}
 8008e98:	b00b      	add	sp, #44	@ 0x2c
 8008e9a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ea2:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	e7f6      	b.n	8008e98 <LmHandlerGetAppEUI+0x16>

08008eaa <LmHandlerSetAppEUI>:

LmHandlerErrorStatus_t LmHandlerSetAppEUI( uint8_t *appEUI )
{
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	b08a      	sub	sp, #40	@ 0x28
 8008eae:	4604      	mov	r4, r0
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008eb0:	f7ff fc74 	bl	800879c <LmHandlerJoinStatus>
 8008eb4:	2801      	cmp	r0, #1
 8008eb6:	d00d      	beq.n	8008ed4 <LmHandlerSetAppEUI+0x2a>
    {
        mibReq.Type = MIB_JOIN_EUI;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.JoinEui = appEUI;
 8008ebe:	9401      	str	r4, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008ec0:	4668      	mov	r0, sp
 8008ec2:	f003 fb6d 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008ec6:	b910      	cbnz	r0, 8008ece <LmHandlerSetAppEUI+0x24>
        {
            return LORAMAC_HANDLER_ERROR;
        }
        return LORAMAC_HANDLER_SUCCESS;
 8008ec8:	2000      	movs	r0, #0
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
    }
}
 8008eca:	b00a      	add	sp, #40	@ 0x28
 8008ecc:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	e7fa      	b.n	8008eca <LmHandlerSetAppEUI+0x20>
        return LORAMAC_HANDLER_ERROR;
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e7f7      	b.n	8008eca <LmHandlerSetAppEUI+0x20>

08008eda <LmHandlerGetNetworkID>:

LmHandlerErrorStatus_t LmHandlerGetNetworkID( uint32_t *networkId )
{
    MibRequestConfirm_t mibReq;

    if( networkId == NULL )
 8008eda:	b168      	cbz	r0, 8008ef8 <LmHandlerGetNetworkID+0x1e>
{
 8008edc:	b510      	push	{r4, lr}
 8008ede:	b08a      	sub	sp, #40	@ 0x28
 8008ee0:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_NET_ID;
 8008ee2:	2305      	movs	r3, #5
 8008ee4:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008ee8:	4668      	mov	r0, sp
 8008eea:	f003 f9e5 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 8008eee:	b930      	cbnz	r0, 8008efe <LmHandlerGetNetworkID+0x24>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    *networkId = mibReq.Param.NetID;
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
}
 8008ef4:	b00a      	add	sp, #40	@ 0x28
 8008ef6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008efc:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	e7f7      	b.n	8008ef4 <LmHandlerGetNetworkID+0x1a>

08008f04 <LmHandlerSetNetworkID>:

LmHandlerErrorStatus_t LmHandlerSetNetworkID( uint32_t networkId )
{
 8008f04:	b510      	push	{r4, lr}
 8008f06:	b08a      	sub	sp, #40	@ 0x28
 8008f08:	4604      	mov	r4, r0
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008f0a:	f7ff fc47 	bl	800879c <LmHandlerJoinStatus>
 8008f0e:	2801      	cmp	r0, #1
 8008f10:	d00d      	beq.n	8008f2e <LmHandlerSetNetworkID+0x2a>
    {
        mibReq.Type = MIB_NET_ID;
 8008f12:	2305      	movs	r3, #5
 8008f14:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetID = networkId;
 8008f18:	9401      	str	r4, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008f1a:	4668      	mov	r0, sp
 8008f1c:	f003 fb40 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008f20:	b910      	cbnz	r0, 8008f28 <LmHandlerSetNetworkID+0x24>
        {
            return LORAMAC_HANDLER_ERROR;
        }
        return LORAMAC_HANDLER_SUCCESS;
 8008f22:	2000      	movs	r0, #0
    else
    {
        /* Cannot change NetworkID in running state */
        return LORAMAC_HANDLER_ERROR;
    }
}
 8008f24:	b00a      	add	sp, #40	@ 0x28
 8008f26:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8008f28:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2c:	e7fa      	b.n	8008f24 <LmHandlerSetNetworkID+0x20>
        return LORAMAC_HANDLER_ERROR;
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f32:	e7f7      	b.n	8008f24 <LmHandlerSetNetworkID+0x20>

08008f34 <LmHandlerGetDevAddr>:

LmHandlerErrorStatus_t LmHandlerGetDevAddr( uint32_t *devAddr )
{
    MibRequestConfirm_t mibReq;

    if( devAddr == NULL )
 8008f34:	b168      	cbz	r0, 8008f52 <LmHandlerGetDevAddr+0x1e>
{
 8008f36:	b510      	push	{r4, lr}
 8008f38:	b08a      	sub	sp, #40	@ 0x28
 8008f3a:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_DEV_ADDR;
 8008f3c:	2306      	movs	r3, #6
 8008f3e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008f42:	4668      	mov	r0, sp
 8008f44:	f003 f9b8 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 8008f48:	b930      	cbnz	r0, 8008f58 <LmHandlerGetDevAddr+0x24>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    *devAddr = mibReq.Param.DevAddr;
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
}
 8008f4e:	b00a      	add	sp, #40	@ 0x28
 8008f50:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008f52:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f56:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5c:	e7f7      	b.n	8008f4e <LmHandlerGetDevAddr+0x1a>

08008f5e <LmHandlerSetDevAddr>:

LmHandlerErrorStatus_t LmHandlerSetDevAddr( uint32_t devAddr )
{
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	b08a      	sub	sp, #40	@ 0x28
 8008f62:	4604      	mov	r4, r0
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008f64:	f7ff fc1a 	bl	800879c <LmHandlerJoinStatus>
 8008f68:	2801      	cmp	r0, #1
 8008f6a:	d00d      	beq.n	8008f88 <LmHandlerSetDevAddr+0x2a>
    {
        mibReq.Type = MIB_DEV_ADDR;
 8008f6c:	2306      	movs	r3, #6
 8008f6e:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.DevAddr = devAddr;
 8008f72:	9401      	str	r4, [sp, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008f74:	4668      	mov	r0, sp
 8008f76:	f003 fb13 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008f7a:	b910      	cbnz	r0, 8008f82 <LmHandlerSetDevAddr+0x24>
        {
            return LORAMAC_HANDLER_ERROR;
        }
        return LORAMAC_HANDLER_SUCCESS;
 8008f7c:	2000      	movs	r0, #0
    else
    {
        /* Cannot change DevAddr in running state */
        return LORAMAC_HANDLER_ERROR;
    }
}
 8008f7e:	b00a      	add	sp, #40	@ 0x28
 8008f80:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295
 8008f86:	e7fa      	b.n	8008f7e <LmHandlerSetDevAddr+0x20>
        return LORAMAC_HANDLER_ERROR;
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e7f7      	b.n	8008f7e <LmHandlerSetDevAddr+0x20>
	...

08008f90 <LmHandlerSetActiveRegion>:

LmHandlerErrorStatus_t LmHandlerSetActiveRegion( LoRaMacRegion_t region )
{
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4604      	mov	r4, r0
    /* Not yet joined */
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8008f94:	f7ff fc02 	bl	800879c <LmHandlerJoinStatus>
 8008f98:	2801      	cmp	r0, #1
 8008f9a:	d004      	beq.n	8008fa6 <LmHandlerSetActiveRegion+0x16>
    {
        LmHandlerParams.ActiveRegion = region;
 8008f9c:	4803      	ldr	r0, [pc, #12]	@ (8008fac <LmHandlerSetActiveRegion+0x1c>)
 8008f9e:	7004      	strb	r4, [r0, #0]
        return LmHandlerConfigure( &LmHandlerParams );
 8008fa0:	f7ff fda4 	bl	8008aec <LmHandlerConfigure>
    else
    {
        /* Cannot change Region in running state */
        return LORAMAC_HANDLER_ERROR;
    }
}
 8008fa4:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008faa:	e7fb      	b.n	8008fa4 <LmHandlerSetActiveRegion+0x14>
 8008fac:	2000091c 	.word	0x2000091c

08008fb0 <LmHandlerGetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerGetAdrEnable( bool *adrEnable )
{
    if( adrEnable == NULL )
 8008fb0:	b120      	cbz	r0, 8008fbc <LmHandlerGetAdrEnable+0xc>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *adrEnable = LmHandlerParams.AdrEnable;
 8008fb2:	4a04      	ldr	r2, [pc, #16]	@ (8008fc4 <LmHandlerGetAdrEnable+0x14>)
 8008fb4:	7892      	ldrb	r2, [r2, #2]
 8008fb6:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008fb8:	2000      	movs	r0, #0
 8008fba:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	2000091c 	.word	0x2000091c

08008fc8 <LmHandlerSetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerSetAdrEnable( bool adrEnable )
{
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	b08a      	sub	sp, #40	@ 0x28
 8008fcc:	4604      	mov	r4, r0
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_ADR;
 8008fce:	2304      	movs	r3, #4
 8008fd0:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.AdrEnable = adrEnable;
 8008fd4:	f88d 0004 	strb.w	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008fd8:	4668      	mov	r0, sp
 8008fda:	f003 fae1 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8008fde:	b918      	cbnz	r0, 8008fe8 <LmHandlerSetAdrEnable+0x20>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    LmHandlerParams.AdrEnable = adrEnable;
 8008fe0:	4b03      	ldr	r3, [pc, #12]	@ (8008ff0 <LmHandlerSetAdrEnable+0x28>)
 8008fe2:	709c      	strb	r4, [r3, #2]

    return LORAMAC_HANDLER_SUCCESS;
}
 8008fe4:	b00a      	add	sp, #40	@ 0x28
 8008fe6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e7fa      	b.n	8008fe4 <LmHandlerSetAdrEnable+0x1c>
 8008fee:	bf00      	nop
 8008ff0:	2000091c 	.word	0x2000091c

08008ff4 <LmHandlerSetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerSetTxDatarate( int8_t txDatarate )
{
    if( LmHandlerParams.AdrEnable == true )
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8009028 <LmHandlerSetTxDatarate+0x34>)
 8008ff6:	789b      	ldrb	r3, [r3, #2]
 8008ff8:	b97b      	cbnz	r3, 800901a <LmHandlerSetTxDatarate+0x26>
{
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	b08a      	sub	sp, #40	@ 0x28
 8008ffe:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8009000:	2320      	movs	r3, #32
 8009002:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.ChannelsDatarate = txDatarate;
 8009006:	f88d 0004 	strb.w	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800900a:	4668      	mov	r0, sp
 800900c:	f003 fac8 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8009010:	b930      	cbnz	r0, 8009020 <LmHandlerSetTxDatarate+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    LmHandlerParams.TxDatarate = txDatarate;
 8009012:	4b05      	ldr	r3, [pc, #20]	@ (8009028 <LmHandlerSetTxDatarate+0x34>)
 8009014:	711c      	strb	r4, [r3, #4]

    return LORAMAC_HANDLER_SUCCESS;
}
 8009016:	b00a      	add	sp, #40	@ 0x28
 8009018:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800901a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800901e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	e7f7      	b.n	8009016 <LmHandlerSetTxDatarate+0x22>
 8009026:	bf00      	nop
 8009028:	2000091c 	.word	0x2000091c

0800902c <LmHandlerGetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerGetDutyCycleEnable( bool *dutyCycleEnable )
{
    if( dutyCycleEnable == NULL )
 800902c:	b120      	cbz	r0, 8009038 <LmHandlerGetDutyCycleEnable+0xc>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 800902e:	4a04      	ldr	r2, [pc, #16]	@ (8009040 <LmHandlerGetDutyCycleEnable+0x14>)
 8009030:	79d2      	ldrb	r2, [r2, #7]
 8009032:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8009034:	2000      	movs	r0, #0
 8009036:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
}
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	2000091c 	.word	0x2000091c

08009044 <LmHandlerSetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable( bool dutyCycleEnable )
{
 8009044:	b508      	push	{r3, lr}
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 8009046:	4b03      	ldr	r3, [pc, #12]	@ (8009054 <LmHandlerSetDutyCycleEnable+0x10>)
 8009048:	71d8      	strb	r0, [r3, #7]
    LoRaMacTestSetDutyCycleOn( dutyCycleEnable );
 800904a:	f003 ff69 	bl	800cf20 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
}
 800904e:	2000      	movs	r0, #0
 8009050:	bd08      	pop	{r3, pc}
 8009052:	bf00      	nop
 8009054:	2000091c 	.word	0x2000091c

08009058 <LmHandlerGetRX2Params>:

LmHandlerErrorStatus_t LmHandlerGetRX2Params( RxChannelParams_t *rxParams )
{
    if( rxParams == NULL )
 8009058:	b180      	cbz	r0, 800907c <LmHandlerGetRX2Params+0x24>
{
 800905a:	b510      	push	{r4, lr}
 800905c:	b08a      	sub	sp, #40	@ 0x28
 800905e:	4604      	mov	r4, r0
        return LORAMAC_HANDLER_ERROR;
    }

    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 8009060:	2312      	movs	r3, #18
 8009062:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009066:	4668      	mov	r0, sp
 8009068:	f003 f926 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 800906c:	b948      	cbnz	r0, 8009082 <LmHandlerGetRX2Params+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    rxParams->Frequency = mibReq.Param.Rx2Channel.Frequency;
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	6023      	str	r3, [r4, #0]
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
 8009072:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009076:	7123      	strb	r3, [r4, #4]
    return LORAMAC_HANDLER_SUCCESS;
}
 8009078:	b00a      	add	sp, #40	@ 0x28
 800907a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009080:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009082:	f04f 30ff 	mov.w	r0, #4294967295
 8009086:	e7f7      	b.n	8009078 <LmHandlerGetRX2Params+0x20>

08009088 <LmHandlerGetTxPower>:

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8009088:	b180      	cbz	r0, 80090ac <LmHandlerGetTxPower+0x24>
{
 800908a:	b510      	push	{r4, lr}
 800908c:	b08a      	sub	sp, #40	@ 0x28
 800908e:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8009090:	2321      	movs	r3, #33	@ 0x21
 8009092:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009096:	4668      	mov	r0, sp
 8009098:	f003 f90e 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 800909c:	b948      	cbnz	r0, 80090b2 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800909e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80090a2:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 80090a4:	4a04      	ldr	r2, [pc, #16]	@ (80090b8 <LmHandlerGetTxPower+0x30>)
 80090a6:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 80090a8:	b00a      	add	sp, #40	@ 0x28
 80090aa:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80090b0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	e7f7      	b.n	80090a8 <LmHandlerGetTxPower+0x20>
 80090b8:	2000091c 	.word	0x2000091c

080090bc <MlmeConfirm>:
{
 80090bc:	b510      	push	{r4, lr}
 80090be:	b08a      	sub	sp, #40	@ 0x28
 80090c0:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80090c2:	4b2b      	ldr	r3, [pc, #172]	@ (8009170 <MlmeConfirm+0xb4>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 80090c8:	7842      	ldrb	r2, [r0, #1]
 80090ca:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80090cc:	4b29      	ldr	r3, [pc, #164]	@ (8009174 <MlmeConfirm+0xb8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d2:	b10b      	cbz	r3, 80090d8 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80090d4:	4826      	ldr	r0, [pc, #152]	@ (8009170 <MlmeConfirm+0xb4>)
 80090d6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80090d8:	4621      	mov	r1, r4
 80090da:	2002      	movs	r0, #2
 80090dc:	f7ff f9f8 	bl	80084d0 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80090e0:	7823      	ldrb	r3, [r4, #0]
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d035      	beq.n	8009152 <MlmeConfirm+0x96>
 80090e6:	2b0b      	cmp	r3, #11
 80090e8:	d03c      	beq.n	8009164 <MlmeConfirm+0xa8>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d138      	bne.n	8009160 <MlmeConfirm+0xa4>
                mibReq.Type = MIB_DEV_ADDR;
 80090ee:	2306      	movs	r3, #6
 80090f0:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80090f4:	4668      	mov	r0, sp
 80090f6:	f003 f8df 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80090fa:	9901      	ldr	r1, [sp, #4]
 80090fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009178 <MlmeConfirm+0xbc>)
 80090fe:	79d8      	ldrb	r0, [r3, #7]
 8009100:	f007 ff58 	bl	8010fb4 <SecureElementSetDevAddr>
 8009104:	b910      	cbnz	r0, 800910c <MlmeConfirm+0x50>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8009106:	9a01      	ldr	r2, [sp, #4]
 8009108:	4b1c      	ldr	r3, [pc, #112]	@ (800917c <MlmeConfirm+0xc0>)
 800910a:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800910c:	4c1c      	ldr	r4, [pc, #112]	@ (8009180 <MlmeConfirm+0xc4>)
 800910e:	4620      	mov	r0, r4
 8009110:	f7ff fcb6 	bl	8008a80 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8009114:	1c60      	adds	r0, r4, #1
 8009116:	f7ff ffb7 	bl	8009088 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800911a:	4b15      	ldr	r3, [pc, #84]	@ (8009170 <MlmeConfirm+0xb4>)
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	b183      	cbz	r3, 8009142 <MlmeConfirm+0x86>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8009120:	4b15      	ldr	r3, [pc, #84]	@ (8009178 <MlmeConfirm+0xbc>)
 8009122:	22ff      	movs	r2, #255	@ 0xff
 8009124:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8009126:	4b13      	ldr	r3, [pc, #76]	@ (8009174 <MlmeConfirm+0xb8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912c:	b10b      	cbz	r3, 8009132 <MlmeConfirm+0x76>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800912e:	4812      	ldr	r0, [pc, #72]	@ (8009178 <MlmeConfirm+0xbc>)
 8009130:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009132:	4b0f      	ldr	r3, [pc, #60]	@ (8009170 <MlmeConfirm+0xb4>)
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	b99b      	cbnz	r3, 8009160 <MlmeConfirm+0xa4>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8009138:	4b0f      	ldr	r3, [pc, #60]	@ (8009178 <MlmeConfirm+0xbc>)
 800913a:	79d8      	ldrb	r0, [r3, #7]
 800913c:	f008 f808 	bl	8011150 <SecureElementPrintSessionKeys>
            break;
 8009140:	e00e      	b.n	8009160 <MlmeConfirm+0xa4>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009142:	1f23      	subs	r3, r4, #4
 8009144:	2200      	movs	r2, #0
 8009146:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8009148:	4b0e      	ldr	r3, [pc, #56]	@ (8009184 <MlmeConfirm+0xc8>)
 800914a:	7858      	ldrb	r0, [r3, #1]
 800914c:	f7ff fbe2 	bl	8008914 <LmHandlerRequestClass>
 8009150:	e7e9      	b.n	8009126 <MlmeConfirm+0x6a>
                RxParams.LinkCheck = true;
 8009152:	4b0d      	ldr	r3, [pc, #52]	@ (8009188 <MlmeConfirm+0xcc>)
 8009154:	2201      	movs	r2, #1
 8009156:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8009158:	7a22      	ldrb	r2, [r4, #8]
 800915a:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800915c:	7a62      	ldrb	r2, [r4, #9]
 800915e:	74da      	strb	r2, [r3, #19]
}
 8009160:	b00a      	add	sp, #40	@ 0x28
 8009162:	bd10      	pop	{r4, pc}
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009164:	7863      	ldrb	r3, [r4, #1]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0fa      	beq.n	8009160 <MlmeConfirm+0xa4>
                    LmHandlerDeviceTimeReq( );
 800916a:	f7ff fafd 	bl	8008768 <LmHandlerDeviceTimeReq>
}
 800916e:	e7f7      	b.n	8009160 <MlmeConfirm+0xa4>
 8009170:	200000b8 	.word	0x200000b8
 8009174:	20000918 	.word	0x20000918
 8009178:	200000d4 	.word	0x200000d4
 800917c:	20000958 	.word	0x20000958
 8009180:	200000d8 	.word	0x200000d8
 8009184:	2000091c 	.word	0x2000091c
 8009188:	200000a4 	.word	0x200000a4

0800918c <LmHandlerGetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx1Delay( uint32_t *rxDelay )
{
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 800918c:	b168      	cbz	r0, 80091aa <LmHandlerGetRx1Delay+0x1e>
{
 800918e:	b510      	push	{r4, lr}
 8009190:	b08a      	sub	sp, #40	@ 0x28
 8009192:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_RECEIVE_DELAY_1;
 8009194:	231a      	movs	r3, #26
 8009196:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800919a:	4668      	mov	r0, sp
 800919c:	f003 f88c 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 80091a0:	b930      	cbnz	r0, 80091b0 <LmHandlerGetRx1Delay+0x24>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *rxDelay = mibReq.Param.ReceiveDelay1;
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
}
 80091a6:	b00a      	add	sp, #40	@ 0x28
 80091a8:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80091ae:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	e7f7      	b.n	80091a6 <LmHandlerGetRx1Delay+0x1a>

080091b6 <LmHandlerGetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx2Delay( uint32_t *rxDelay )
{
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 80091b6:	b168      	cbz	r0, 80091d4 <LmHandlerGetRx2Delay+0x1e>
{
 80091b8:	b510      	push	{r4, lr}
 80091ba:	b08a      	sub	sp, #40	@ 0x28
 80091bc:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_RECEIVE_DELAY_2;
 80091be:	231b      	movs	r3, #27
 80091c0:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80091c4:	4668      	mov	r0, sp
 80091c6:	f003 f877 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 80091ca:	b930      	cbnz	r0, 80091da <LmHandlerGetRx2Delay+0x24>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *rxDelay = mibReq.Param.ReceiveDelay2;
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
}
 80091d0:	b00a      	add	sp, #40	@ 0x28
 80091d2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80091d8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80091da:	f04f 30ff 	mov.w	r0, #4294967295
 80091de:	e7f7      	b.n	80091d0 <LmHandlerGetRx2Delay+0x1a>

080091e0 <LmHandlerGetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx1Delay( uint32_t *rxDelay )
{
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 80091e0:	b168      	cbz	r0, 80091fe <LmHandlerGetJoinRx1Delay+0x1e>
{
 80091e2:	b510      	push	{r4, lr}
 80091e4:	b08a      	sub	sp, #40	@ 0x28
 80091e6:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 80091e8:	231c      	movs	r3, #28
 80091ea:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80091ee:	4668      	mov	r0, sp
 80091f0:	f003 f862 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 80091f4:	b930      	cbnz	r0, 8009204 <LmHandlerGetJoinRx1Delay+0x24>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay1;
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
}
 80091fa:	b00a      	add	sp, #40	@ 0x28
 80091fc:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80091fe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009202:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	e7f7      	b.n	80091fa <LmHandlerGetJoinRx1Delay+0x1a>

0800920a <LmHandlerGetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx2Delay( uint32_t *rxDelay )
{
    MibRequestConfirm_t mibReq;
    if( rxDelay == NULL )
 800920a:	b168      	cbz	r0, 8009228 <LmHandlerGetJoinRx2Delay+0x1e>
{
 800920c:	b510      	push	{r4, lr}
 800920e:	b08a      	sub	sp, #40	@ 0x28
 8009210:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8009212:	231d      	movs	r3, #29
 8009214:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009218:	4668      	mov	r0, sp
 800921a:	f003 f84d 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
 800921e:	b930      	cbnz	r0, 800922e <LmHandlerGetJoinRx2Delay+0x24>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay2;
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
}
 8009224:	b00a      	add	sp, #40	@ 0x28
 8009226:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009228:	f04f 30ff 	mov.w	r0, #4294967295
}
 800922c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	e7f7      	b.n	8009224 <LmHandlerGetJoinRx2Delay+0x1a>

08009234 <LmHandlerSetTxPower>:

LmHandlerErrorStatus_t LmHandlerSetTxPower( int8_t txPower )
{
 8009234:	b510      	push	{r4, lr}
 8009236:	b08a      	sub	sp, #40	@ 0x28
 8009238:	4604      	mov	r4, r0
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800923a:	2321      	movs	r3, #33	@ 0x21
 800923c:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.ChannelsTxPower = txPower;
 8009240:	f88d 0004 	strb.w	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009244:	4668      	mov	r0, sp
 8009246:	f003 f9ab 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 800924a:	b918      	cbnz	r0, 8009254 <LmHandlerSetTxPower+0x20>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    LmHandlerParams.TxPower = txPower;
 800924c:	4b03      	ldr	r3, [pc, #12]	@ (800925c <LmHandlerSetTxPower+0x28>)
 800924e:	715c      	strb	r4, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8009250:	b00a      	add	sp, #40	@ 0x28
 8009252:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	e7fa      	b.n	8009250 <LmHandlerSetTxPower+0x1c>
 800925a:	bf00      	nop
 800925c:	2000091c 	.word	0x2000091c

08009260 <LmHandlerSetRX2Params>:

LmHandlerErrorStatus_t LmHandlerSetRX2Params( RxChannelParams_t *rxParams )
{
 8009260:	b500      	push	{lr}
 8009262:	b08b      	sub	sp, #44	@ 0x2c
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 8009264:	2312      	movs	r3, #18
 8009266:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.Rx2Channel.Frequency = rxParams->Frequency;
 800926a:	6803      	ldr	r3, [r0, #0]
 800926c:	9301      	str	r3, [sp, #4]
    mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 800926e:	7903      	ldrb	r3, [r0, #4]
 8009270:	f88d 3008 	strb.w	r3, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009274:	4668      	mov	r0, sp
 8009276:	f003 f993 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 800927a:	b910      	cbnz	r0, 8009282 <LmHandlerSetRX2Params+0x22>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    return LORAMAC_HANDLER_SUCCESS;
}
 800927c:	b00b      	add	sp, #44	@ 0x2c
 800927e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	e7f9      	b.n	800927c <LmHandlerSetRX2Params+0x1c>

08009288 <LmHandlerSetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx1Delay( uint32_t rxDelay )
{
 8009288:	b500      	push	{lr}
 800928a:	b08b      	sub	sp, #44	@ 0x2c
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 800928c:	231a      	movs	r3, #26
 800928e:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.ReceiveDelay1 = rxDelay;
 8009292:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009294:	4668      	mov	r0, sp
 8009296:	f003 f983 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 800929a:	b910      	cbnz	r0, 80092a2 <LmHandlerSetRx1Delay+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    return LORAMAC_HANDLER_SUCCESS;
}
 800929c:	b00b      	add	sp, #44	@ 0x2c
 800929e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80092a2:	f04f 30ff 	mov.w	r0, #4294967295
 80092a6:	e7f9      	b.n	800929c <LmHandlerSetRx1Delay+0x14>

080092a8 <LmHandlerSetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx2Delay( uint32_t rxDelay )
{
 80092a8:	b500      	push	{lr}
 80092aa:	b08b      	sub	sp, #44	@ 0x2c
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 80092ac:	231b      	movs	r3, #27
 80092ae:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.ReceiveDelay2 = rxDelay;
 80092b2:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80092b4:	4668      	mov	r0, sp
 80092b6:	f003 f973 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 80092ba:	b910      	cbnz	r0, 80092c2 <LmHandlerSetRx2Delay+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    return LORAMAC_HANDLER_SUCCESS;
}
 80092bc:	b00b      	add	sp, #44	@ 0x2c
 80092be:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80092c2:	f04f 30ff 	mov.w	r0, #4294967295
 80092c6:	e7f9      	b.n	80092bc <LmHandlerSetRx2Delay+0x14>

080092c8 <LmHandlerSetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx1Delay( uint32_t rxDelay )
{
 80092c8:	b500      	push	{lr}
 80092ca:	b08b      	sub	sp, #44	@ 0x2c
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 80092cc:	231c      	movs	r3, #28
 80092ce:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.JoinAcceptDelay1 = rxDelay;
 80092d2:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80092d4:	4668      	mov	r0, sp
 80092d6:	f003 f963 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 80092da:	b910      	cbnz	r0, 80092e2 <LmHandlerSetJoinRx1Delay+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    return LORAMAC_HANDLER_SUCCESS;
}
 80092dc:	b00b      	add	sp, #44	@ 0x2c
 80092de:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80092e2:	f04f 30ff 	mov.w	r0, #4294967295
 80092e6:	e7f9      	b.n	80092dc <LmHandlerSetJoinRx1Delay+0x14>

080092e8 <LmHandlerSetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx2Delay( uint32_t rxDelay )
{
 80092e8:	b500      	push	{lr}
 80092ea:	b08b      	sub	sp, #44	@ 0x2c
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 80092ec:	231d      	movs	r3, #29
 80092ee:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.JoinAcceptDelay2 = rxDelay;
 80092f2:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80092f4:	4668      	mov	r0, sp
 80092f6:	f003 f953 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 80092fa:	b910      	cbnz	r0, 8009302 <LmHandlerSetJoinRx2Delay+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    return LORAMAC_HANDLER_SUCCESS;
}
 80092fc:	b00b      	add	sp, #44	@ 0x2c
 80092fe:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8009302:	f04f 30ff 	mov.w	r0, #4294967295
 8009306:	e7f9      	b.n	80092fc <LmHandlerSetJoinRx2Delay+0x14>

08009308 <LmHandlerGetPingPeriodicity>:
    *pingPeriodicity = LmHandlerParams.PingSlotPeriodicity;
    return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	4770      	bx	lr

0800930e <LmHandlerSetPingPeriodicity>:
        return LmHandlerPingSlotReq( pingPeriodicity );
    }
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800930e:	f04f 30ff 	mov.w	r0, #4294967295
 8009312:	4770      	bx	lr

08009314 <LmHandlerGetBeaconState>:
    *beaconState =  mibReq.Param.BeaconState;
    return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	4770      	bx	lr

0800931a <LmHandlerGetKey>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
#endif /* LORAWAN_KMS */

    if( key == NULL )
 800931a:	b179      	cbz	r1, 800933c <LmHandlerGetKey+0x22>
{
 800931c:	b510      	push	{r4, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	460c      	mov	r4, r1
    {
        return LORAMAC_HANDLER_ERROR;
    }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID( keyID, &keyItem ) )
 8009322:	a901      	add	r1, sp, #4
 8009324:	f007 fc94 	bl	8010c50 <SecureElementGetKeyByID>
 8009328:	b958      	cbnz	r0, 8009342 <LmHandlerGetKey+0x28>
    {
        return LORAMAC_HANDLER_ERROR;
    }
    memcpy1( key, keyItem->KeyValue, 16 );
 800932a:	2210      	movs	r2, #16
 800932c:	9901      	ldr	r1, [sp, #4]
 800932e:	3101      	adds	r1, #1
 8009330:	4620      	mov	r0, r4
 8009332:	f007 ff4e 	bl	80111d2 <memcpy1>
        return LORAMAC_HANDLER_ERROR;
    }

#endif /* LORAWAN_KMS */

    return LORAMAC_HANDLER_SUCCESS;
 8009336:	2000      	movs	r0, #0
}
 8009338:	b002      	add	sp, #8
 800933a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009340:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009342:	f04f 30ff 	mov.w	r0, #4294967295
 8009346:	e7f7      	b.n	8009338 <LmHandlerGetKey+0x1e>

08009348 <LmHandlerSetKey>:

LmHandlerErrorStatus_t LmHandlerSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8009348:	b530      	push	{r4, r5, lr}
 800934a:	b08b      	sub	sp, #44	@ 0x2c
 800934c:	4604      	mov	r4, r0
 800934e:	460d      	mov	r5, r1
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8009350:	f7ff fa24 	bl	800879c <LmHandlerJoinStatus>
 8009354:	2801      	cmp	r0, #1
 8009356:	d014      	beq.n	8009382 <LmHandlerSetKey+0x3a>
    {
        if( keyID == APP_KEY ) /* Specific usage because APP_KEY is used to derive other keys */
 8009358:	b964      	cbnz	r4, 8009374 <LmHandlerSetKey+0x2c>
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_APP_KEY;
 800935a:	2307      	movs	r3, #7
 800935c:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AppKey = key;
 8009360:	9501      	str	r5, [sp, #4]
            if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8009362:	4668      	mov	r0, sp
 8009364:	f003 f91c 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
 8009368:	b110      	cbz	r0, 8009370 <LmHandlerSetKey+0x28>
            {
                return LORAMAC_HANDLER_ERROR;
 800936a:	f04f 30ff 	mov.w	r0, #4294967295
 800936e:	e006      	b.n	800937e <LmHandlerSetKey+0x36>
            }
            return LORAMAC_HANDLER_SUCCESS;
 8009370:	2000      	movs	r0, #0
 8009372:	e004      	b.n	800937e <LmHandlerSetKey+0x36>
        }
        else if( SECURE_ELEMENT_SUCCESS != SecureElementSetKey( keyID, key ) )
 8009374:	4629      	mov	r1, r5
 8009376:	4620      	mov	r0, r4
 8009378:	f007 fd42 	bl	8010e00 <SecureElementSetKey>
 800937c:	b920      	cbnz	r0, 8009388 <LmHandlerSetKey+0x40>
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
    }

    return LORAMAC_HANDLER_SUCCESS;
}
 800937e:	b00b      	add	sp, #44	@ 0x2c
 8009380:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8009382:	f04f 30ff 	mov.w	r0, #4294967295
 8009386:	e7fa      	b.n	800937e <LmHandlerSetKey+0x36>
            return LORAMAC_HANDLER_ERROR;
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	e7f7      	b.n	800937e <LmHandlerSetKey+0x36>
	...

08009390 <LmHandlerNvmDataStore>:

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8009390:	b510      	push	{r4, lr}
 8009392:	b08a      	sub	sp, #40	@ 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8009394:	f7ff fd32 	bl	8008dfc <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8009398:	4604      	mov	r4, r0
 800939a:	b110      	cbz	r0, 80093a2 <LmHandlerNvmDataStore+0x12>

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800939c:	4620      	mov	r0, r4
 800939e:	b00a      	add	sp, #40	@ 0x28
 80093a0:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 80093a2:	f004 fe31 	bl	800e008 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 80093a6:	f110 0f02 	cmn.w	r0, #2
 80093aa:	d012      	beq.n	80093d2 <LmHandlerNvmDataStore+0x42>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 80093ac:	bb00      	cbnz	r0, 80093f0 <LmHandlerNvmDataStore+0x60>
 80093ae:	4b15      	ldr	r3, [pc, #84]	@ (8009404 <LmHandlerNvmDataStore+0x74>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	b1fb      	cbz	r3, 80093f6 <LmHandlerNvmDataStore+0x66>
            mibReq.Type = MIB_NVM_CTXS;
 80093b6:	2327      	movs	r3, #39	@ 0x27
 80093b8:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80093bc:	4668      	mov	r0, sp
 80093be:	f002 ff7b 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 80093c2:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <LmHandlerNvmDataStore+0x74>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	f44f 61ba 	mov.w	r1, #1488	@ 0x5d0
 80093cc:	9801      	ldr	r0, [sp, #4]
 80093ce:	4798      	blx	r3
 80093d0:	e001      	b.n	80093d6 <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80093d2:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80093d6:	f004 fe27 	bl	800e028 <NvmDataMgmtStoreEnd>
 80093da:	b978      	cbnz	r0, 80093fc <LmHandlerNvmDataStore+0x6c>
    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 80093dc:	2c00      	cmp	r4, #0
 80093de:	d1dd      	bne.n	800939c <LmHandlerNvmDataStore+0xc>
 80093e0:	4b08      	ldr	r3, [pc, #32]	@ (8009404 <LmHandlerNvmDataStore+0x74>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0d8      	beq.n	800939c <LmHandlerNvmDataStore+0xc>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80093ea:	2001      	movs	r0, #1
 80093ec:	4798      	blx	r3
 80093ee:	e7d5      	b.n	800939c <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80093f0:	f04f 34ff 	mov.w	r4, #4294967295
 80093f4:	e7ef      	b.n	80093d6 <LmHandlerNvmDataStore+0x46>
 80093f6:	f04f 34ff 	mov.w	r4, #4294967295
 80093fa:	e7ec      	b.n	80093d6 <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80093fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009400:	e7cc      	b.n	800939c <LmHandlerNvmDataStore+0xc>
 8009402:	bf00      	nop
 8009404:	20000918 	.word	0x20000918

08009408 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8009408:	4b01      	ldr	r3, [pc, #4]	@ (8009410 <LmhpComplianceIsInitialized+0x8>)
 800940a:	7818      	ldrb	r0, [r3, #0]
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	2000098c 	.word	0x2000098c

08009414 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8009414:	4b01      	ldr	r3, [pc, #4]	@ (800941c <LmhpComplianceIsTxPending+0x8>)
 8009416:	7858      	ldrb	r0, [r3, #1]
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	2000098c 	.word	0x2000098c

08009420 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8009420:	4770      	bx	lr

08009422 <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8009422:	4770      	bx	lr

08009424 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8009424:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 8009426:	4b05      	ldr	r3, [pc, #20]	@ (800943c <OnProcessTimer+0x18>)
 8009428:	7a9b      	ldrb	r3, [r3, #10]
 800942a:	b113      	cbz	r3, 8009432 <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 800942c:	4b03      	ldr	r3, [pc, #12]	@ (800943c <OnProcessTimer+0x18>)
 800942e:	2201      	movs	r2, #1
 8009430:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8009432:	4b03      	ldr	r3, [pc, #12]	@ (8009440 <OnProcessTimer+0x1c>)
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	b103      	cbz	r3, 800943a <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8009438:	4798      	blx	r3
    }
}
 800943a:	bd08      	pop	{r3, pc}
 800943c:	2000098c 	.word	0x2000098c
 8009440:	200000e0 	.word	0x200000e0

08009444 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8009444:	4b8c      	ldr	r3, [pc, #560]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 8205 	beq.w	8009858 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800944e:	78c3      	ldrb	r3, [r0, #3]
 8009450:	b90b      	cbnz	r3, 8009456 <LmhpComplianceOnMcpsIndication+0x12>
 8009452:	7b83      	ldrb	r3, [r0, #14]
 8009454:	b11b      	cbz	r3, 800945e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8009456:	4a88      	ldr	r2, [pc, #544]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 8009458:	8a13      	ldrh	r3, [r2, #16]
 800945a:	3301      	adds	r3, #1
 800945c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800945e:	7b43      	ldrb	r3, [r0, #13]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 81f9 	beq.w	8009858 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8009466:	78c3      	ldrb	r3, [r0, #3]
 8009468:	2be0      	cmp	r3, #224	@ 0xe0
 800946a:	f040 81f5 	bne.w	8009858 <LmhpComplianceOnMcpsIndication+0x414>
{
 800946e:	b570      	push	{r4, r5, r6, lr}
 8009470:	b096      	sub	sp, #88	@ 0x58
    ComplianceTestState.DataBufferSize = 0;
 8009472:	4b81      	ldr	r3, [pc, #516]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 8009474:	2200      	movs	r2, #0
 8009476:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8009478:	6884      	ldr	r4, [r0, #8]
 800947a:	7823      	ldrb	r3, [r4, #0]
 800947c:	2b7f      	cmp	r3, #127	@ 0x7f
 800947e:	f200 8093 	bhi.w	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
 8009482:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009486:	0080      	.short	0x0080
 8009488:	00a2009d 	.word	0x00a2009d
 800948c:	00b200aa 	.word	0x00b200aa
 8009490:	00c600bf 	.word	0x00c600bf
 8009494:	00f000df 	.word	0x00f000df
 8009498:	0131011d 	.word	0x0131011d
 800949c:	00910091 	.word	0x00910091
 80094a0:	00910091 	.word	0x00910091
 80094a4:	00910091 	.word	0x00910091
 80094a8:	00910091 	.word	0x00910091
 80094ac:	00910091 	.word	0x00910091
 80094b0:	00910091 	.word	0x00910091
 80094b4:	00910091 	.word	0x00910091
 80094b8:	00910091 	.word	0x00910091
 80094bc:	00910091 	.word	0x00910091
 80094c0:	00910091 	.word	0x00910091
 80094c4:	01350091 	.word	0x01350091
 80094c8:	0140013c 	.word	0x0140013c
 80094cc:	00910091 	.word	0x00910091
 80094d0:	00910091 	.word	0x00910091
 80094d4:	00910091 	.word	0x00910091
 80094d8:	00910091 	.word	0x00910091
 80094dc:	00910091 	.word	0x00910091
 80094e0:	00910091 	.word	0x00910091
 80094e4:	00910091 	.word	0x00910091
 80094e8:	00910091 	.word	0x00910091
 80094ec:	00910091 	.word	0x00910091
 80094f0:	00910091 	.word	0x00910091
 80094f4:	00910091 	.word	0x00910091
 80094f8:	00910091 	.word	0x00910091
 80094fc:	00910091 	.word	0x00910091
 8009500:	00910091 	.word	0x00910091
 8009504:	00910091 	.word	0x00910091
 8009508:	00910091 	.word	0x00910091
 800950c:	00910091 	.word	0x00910091
 8009510:	00910091 	.word	0x00910091
 8009514:	00910091 	.word	0x00910091
 8009518:	00910091 	.word	0x00910091
 800951c:	00910091 	.word	0x00910091
 8009520:	00910091 	.word	0x00910091
 8009524:	00910091 	.word	0x00910091
 8009528:	00910091 	.word	0x00910091
 800952c:	00910091 	.word	0x00910091
 8009530:	00910091 	.word	0x00910091
 8009534:	00910091 	.word	0x00910091
 8009538:	00910091 	.word	0x00910091
 800953c:	00910091 	.word	0x00910091
 8009540:	00910091 	.word	0x00910091
 8009544:	00910091 	.word	0x00910091
 8009548:	00910091 	.word	0x00910091
 800954c:	00910091 	.word	0x00910091
 8009550:	00910091 	.word	0x00910091
 8009554:	00910091 	.word	0x00910091
 8009558:	00910091 	.word	0x00910091
 800955c:	00910091 	.word	0x00910091
 8009560:	00910091 	.word	0x00910091
 8009564:	00910091 	.word	0x00910091
 8009568:	00910091 	.word	0x00910091
 800956c:	00910091 	.word	0x00910091
 8009570:	00910091 	.word	0x00910091
 8009574:	00910091 	.word	0x00910091
 8009578:	00910091 	.word	0x00910091
 800957c:	00910091 	.word	0x00910091
 8009580:	016c014b 	.word	0x016c014b
 8009584:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8009586:	4b3c      	ldr	r3, [pc, #240]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	2101      	movs	r1, #1
 800958c:	7299      	strb	r1, [r3, #10]
 800958e:	2000      	movs	r0, #0
 8009590:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8009592:	68d8      	ldr	r0, [r3, #12]
 8009594:	7a9a      	ldrb	r2, [r3, #10]
 8009596:	1854      	adds	r4, r2, r1
 8009598:	729c      	strb	r4, [r3, #10]
 800959a:	2406      	movs	r4, #6
 800959c:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800959e:	68d8      	ldr	r0, [r3, #12]
 80095a0:	7a9a      	ldrb	r2, [r3, #10]
 80095a2:	1854      	adds	r4, r2, r1
 80095a4:	729c      	strb	r4, [r3, #10]
 80095a6:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 80095a8:	4b33      	ldr	r3, [pc, #204]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 80095aa:	7a9b      	ldrb	r3, [r3, #10]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 814c 	beq.w	800984a <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 80095b2:	4b32      	ldr	r3, [pc, #200]	@ (800967c <LmhpComplianceOnMcpsIndication+0x238>)
 80095b4:	7a5b      	ldrb	r3, [r3, #9]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 813d 	beq.w	8009836 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 80095bc:	b016      	add	sp, #88	@ 0x58
 80095be:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 80095c0:	4b2d      	ldr	r3, [pc, #180]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 80095c8:	e7ee      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 80095ca:	4b2d      	ldr	r3, [pc, #180]	@ (8009680 <LmhpComplianceOnMcpsIndication+0x23c>)
 80095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0ea      	beq.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80095d2:	2101      	movs	r1, #1
 80095d4:	2002      	movs	r0, #2
 80095d6:	4798      	blx	r3
 80095d8:	e7e6      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 80095da:	7862      	ldrb	r2, [r4, #1]
 80095dc:	4b26      	ldr	r3, [pc, #152]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 80095de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 80095e8:	e7de      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 80095ea:	2304      	movs	r3, #4
 80095ec:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80095f0:	7863      	ldrb	r3, [r4, #1]
 80095f2:	3b00      	subs	r3, #0
 80095f4:	bf18      	it	ne
 80095f6:	2301      	movne	r3, #1
 80095f8:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80095fc:	a801      	add	r0, sp, #4
 80095fe:	f002 ffcf 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
                break;
 8009602:	e7d1      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8009604:	7860      	ldrb	r0, [r4, #1]
 8009606:	3800      	subs	r0, #0
 8009608:	bf18      	it	ne
 800960a:	2001      	movne	r0, #1
 800960c:	f003 fc88 	bl	800cf20 <LoRaMacTestSetDutyCycleOn>
                break;
 8009610:	e7ca      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8009612:	ad01      	add	r5, sp, #4
 8009614:	4e1b      	ldr	r6, [pc, #108]	@ (8009684 <LmhpComplianceOnMcpsIndication+0x240>)
 8009616:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800961a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800961c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800961e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009622:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8009626:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8009628:	2b0a      	cmp	r3, #10
 800962a:	d8bd      	bhi.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800962c:	4a16      	ldr	r2, [pc, #88]	@ (8009688 <LmhpComplianceOnMcpsIndication+0x244>)
 800962e:	6812      	ldr	r2, [r2, #0]
 8009630:	6852      	ldr	r2, [r2, #4]
 8009632:	2a00      	cmp	r2, #0
 8009634:	d0b8      	beq.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8009636:	a916      	add	r1, sp, #88	@ 0x58
 8009638:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800963c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8009640:	4790      	blx	r2
                break;
 8009642:	e7b1      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8009644:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8009646:	1e53      	subs	r3, r2, #1
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b01      	cmp	r3, #1
 800964c:	d8ac      	bhi.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800964e:	1e50      	subs	r0, r2, #1
 8009650:	bf18      	it	ne
 8009652:	2001      	movne	r0, #1
 8009654:	4b08      	ldr	r3, [pc, #32]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 8009656:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8009658:	4b0b      	ldr	r3, [pc, #44]	@ (8009688 <LmhpComplianceOnMcpsIndication+0x244>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0a2      	beq.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8009662:	4798      	blx	r3
 8009664:	e7a0      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8009666:	4b04      	ldr	r3, [pc, #16]	@ (8009678 <LmhpComplianceOnMcpsIndication+0x234>)
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	2101      	movs	r1, #1
 800966c:	7299      	strb	r1, [r3, #10]
 800966e:	2308      	movs	r3, #8
 8009670:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8009672:	460b      	mov	r3, r1
 8009674:	e01b      	b.n	80096ae <LmhpComplianceOnMcpsIndication+0x26a>
 8009676:	bf00      	nop
 8009678:	2000098c 	.word	0x2000098c
 800967c:	20000970 	.word	0x20000970
 8009680:	200000e0 	.word	0x200000e0
 8009684:	08014868 	.word	0x08014868
 8009688:	20000988 	.word	0x20000988
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800968c:	6882      	ldr	r2, [r0, #8]
 800968e:	f101 0c01 	add.w	ip, r1, #1
 8009692:	5c52      	ldrb	r2, [r2, r1]
 8009694:	4971      	ldr	r1, [pc, #452]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 8009696:	68cd      	ldr	r5, [r1, #12]
 8009698:	7a8c      	ldrb	r4, [r1, #10]
 800969a:	f104 0e01 	add.w	lr, r4, #1
 800969e:	f881 e00a 	strb.w	lr, [r1, #10]
 80096a2:	3201      	adds	r2, #1
 80096a4:	552a      	strb	r2, [r5, r4]
                     i++ )
 80096a6:	3301      	adds	r3, #1
 80096a8:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80096aa:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80096ae:	4a6b      	ldr	r2, [pc, #428]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 80096b0:	7a52      	ldrb	r2, [r2, #9]
 80096b2:	7b04      	ldrb	r4, [r0, #12]
 80096b4:	42a2      	cmp	r2, r4
 80096b6:	bf28      	it	cs
 80096b8:	4622      	movcs	r2, r4
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d8e6      	bhi.n	800968c <LmhpComplianceOnMcpsIndication+0x248>
 80096be:	e773      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80096c0:	4b66      	ldr	r3, [pc, #408]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 80096c2:	68da      	ldr	r2, [r3, #12]
 80096c4:	2101      	movs	r1, #1
 80096c6:	7299      	strb	r1, [r3, #10]
 80096c8:	2109      	movs	r1, #9
 80096ca:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80096cc:	8a18      	ldrh	r0, [r3, #16]
 80096ce:	68d9      	ldr	r1, [r3, #12]
 80096d0:	7a9a      	ldrb	r2, [r3, #10]
 80096d2:	1c54      	adds	r4, r2, #1
 80096d4:	729c      	strb	r4, [r3, #10]
 80096d6:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 80096d8:	8a1a      	ldrh	r2, [r3, #16]
 80096da:	68d8      	ldr	r0, [r3, #12]
 80096dc:	7a99      	ldrb	r1, [r3, #10]
 80096de:	1c4c      	adds	r4, r1, #1
 80096e0:	729c      	strb	r4, [r3, #10]
 80096e2:	0a13      	lsrs	r3, r2, #8
 80096e4:	5443      	strb	r3, [r0, r1]
                break;
 80096e6:	e75f      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 80096e8:	4b5c      	ldr	r3, [pc, #368]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	821a      	strh	r2, [r3, #16]
                break;
 80096ee:	e75b      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 80096f0:	2305      	movs	r3, #5
 80096f2:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 80096f6:	a801      	add	r0, sp, #4
 80096f8:	f003 fa22 	bl	800cb40 <LoRaMacMlmeRequest>
                break;
 80096fc:	e754      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 80096fe:	4b58      	ldr	r3, [pc, #352]	@ (8009860 <LmhpComplianceOnMcpsIndication+0x41c>)
 8009700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009702:	4798      	blx	r3
                break;
 8009704:	e750      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8009706:	7860      	ldrb	r0, [r4, #1]
 8009708:	4b54      	ldr	r3, [pc, #336]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 800970a:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800970c:	4b55      	ldr	r3, [pc, #340]	@ (8009864 <LmhpComplianceOnMcpsIndication+0x420>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f43f af48 	beq.w	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8009718:	4798      	blx	r3
 800971a:	e745      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 800971c:	7b03      	ldrb	r3, [r0, #12]
 800971e:	2b07      	cmp	r3, #7
 8009720:	f47f af42 	bne.w	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8009724:	2306      	movs	r3, #6
 8009726:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800972a:	7863      	ldrb	r3, [r4, #1]
 800972c:	78a2      	ldrb	r2, [r4, #2]
 800972e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8009732:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009736:	78e3      	ldrb	r3, [r4, #3]
 8009738:	7922      	ldrb	r2, [r4, #4]
 800973a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800973e:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009744:	2264      	movs	r2, #100	@ 0x64
 8009746:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800974a:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800974c:	6883      	ldr	r3, [r0, #8]
 800974e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8009752:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8009756:	a801      	add	r0, sp, #4
 8009758:	f003 f9f2 	bl	800cb40 <LoRaMacMlmeRequest>
                break;
 800975c:	e724      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800975e:	233b      	movs	r3, #59	@ 0x3b
 8009760:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                mibReq.Param.IsCertPortOn = false;
 8009764:	2300      	movs	r3, #0
 8009766:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 800976a:	a80c      	add	r0, sp, #48	@ 0x30
 800976c:	f002 ff18 	bl	800c5a0 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8009770:	4b3a      	ldr	r3, [pc, #232]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 8009778:	e716      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 800977a:	232a      	movs	r3, #42	@ 0x2a
 800977c:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8009780:	a801      	add	r0, sp, #4
 8009782:	f002 fd99 	bl	800c2b8 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8009786:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8009788:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800978a:	4b34      	ldr	r3, [pc, #208]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 800978c:	68dc      	ldr	r4, [r3, #12]
 800978e:	7a98      	ldrb	r0, [r3, #10]
 8009790:	1c45      	adds	r5, r0, #1
 8009792:	729d      	strb	r5, [r3, #10]
 8009794:	257f      	movs	r5, #127	@ 0x7f
 8009796:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8009798:	4832      	ldr	r0, [pc, #200]	@ (8009864 <LmhpComplianceOnMcpsIndication+0x420>)
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	68dd      	ldr	r5, [r3, #12]
 800979e:	7a9c      	ldrb	r4, [r3, #10]
 80097a0:	1c66      	adds	r6, r4, #1
 80097a2:	729e      	strb	r6, [r3, #10]
 80097a4:	78c6      	ldrb	r6, [r0, #3]
 80097a6:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80097a8:	68dd      	ldr	r5, [r3, #12]
 80097aa:	7a9c      	ldrb	r4, [r3, #10]
 80097ac:	1c66      	adds	r6, r4, #1
 80097ae:	729e      	strb	r6, [r3, #10]
 80097b0:	7886      	ldrb	r6, [r0, #2]
 80097b2:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80097b4:	68dd      	ldr	r5, [r3, #12]
 80097b6:	7a9c      	ldrb	r4, [r3, #10]
 80097b8:	1c66      	adds	r6, r4, #1
 80097ba:	729e      	strb	r6, [r3, #10]
 80097bc:	7846      	ldrb	r6, [r0, #1]
 80097be:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 80097c0:	68dd      	ldr	r5, [r3, #12]
 80097c2:	7a9c      	ldrb	r4, [r3, #10]
 80097c4:	1c66      	adds	r6, r4, #1
 80097c6:	729e      	strb	r6, [r3, #10]
 80097c8:	7800      	ldrb	r0, [r0, #0]
 80097ca:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 80097cc:	68dc      	ldr	r4, [r3, #12]
 80097ce:	7a98      	ldrb	r0, [r3, #10]
 80097d0:	1c45      	adds	r5, r0, #1
 80097d2:	729d      	strb	r5, [r3, #10]
 80097d4:	f3c1 6507 	ubfx	r5, r1, #24, #8
 80097d8:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 80097da:	68dc      	ldr	r4, [r3, #12]
 80097dc:	7a98      	ldrb	r0, [r3, #10]
 80097de:	1c45      	adds	r5, r0, #1
 80097e0:	729d      	strb	r5, [r3, #10]
 80097e2:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80097e6:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 80097e8:	68dc      	ldr	r4, [r3, #12]
 80097ea:	7a98      	ldrb	r0, [r3, #10]
 80097ec:	1c45      	adds	r5, r0, #1
 80097ee:	729d      	strb	r5, [r3, #10]
 80097f0:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80097f4:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 80097f6:	68dc      	ldr	r4, [r3, #12]
 80097f8:	7a98      	ldrb	r0, [r3, #10]
 80097fa:	1c45      	adds	r5, r0, #1
 80097fc:	729d      	strb	r5, [r3, #10]
 80097fe:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8009800:	68d8      	ldr	r0, [r3, #12]
 8009802:	7a99      	ldrb	r1, [r3, #10]
 8009804:	1c4c      	adds	r4, r1, #1
 8009806:	729c      	strb	r4, [r3, #10]
 8009808:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800980c:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800980e:	68d8      	ldr	r0, [r3, #12]
 8009810:	7a99      	ldrb	r1, [r3, #10]
 8009812:	1c4c      	adds	r4, r1, #1
 8009814:	729c      	strb	r4, [r3, #10]
 8009816:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800981a:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800981c:	68d8      	ldr	r0, [r3, #12]
 800981e:	7a99      	ldrb	r1, [r3, #10]
 8009820:	1c4c      	adds	r4, r1, #1
 8009822:	729c      	strb	r4, [r3, #10]
 8009824:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009828:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800982a:	68d8      	ldr	r0, [r3, #12]
 800982c:	7a99      	ldrb	r1, [r3, #10]
 800982e:	1c4c      	adds	r4, r1, #1
 8009830:	729c      	strb	r4, [r3, #10]
 8009832:	5442      	strb	r2, [r0, r1]
                break;
 8009834:	e6b8      	b.n	80095a8 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8009836:	4c0c      	ldr	r4, [pc, #48]	@ (8009868 <LmhpComplianceOnMcpsIndication+0x424>)
 8009838:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800983c:	4620      	mov	r0, r4
 800983e:	f00a fba3 	bl	8013f88 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8009842:	4620      	mov	r0, r4
 8009844:	f00a fb5a 	bl	8013efc <UTIL_TIMER_Start>
 8009848:	e6b8      	b.n	80095bc <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 800984a:	4807      	ldr	r0, [pc, #28]	@ (8009868 <LmhpComplianceOnMcpsIndication+0x424>)
 800984c:	f00a fafc 	bl	8013e48 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8009850:	4b02      	ldr	r3, [pc, #8]	@ (800985c <LmhpComplianceOnMcpsIndication+0x418>)
 8009852:	2200      	movs	r2, #0
 8009854:	705a      	strb	r2, [r3, #1]
 8009856:	e6b1      	b.n	80095bc <LmhpComplianceOnMcpsIndication+0x178>
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	2000098c 	.word	0x2000098c
 8009860:	200000e0 	.word	0x200000e0
 8009864:	20000988 	.word	0x20000988
 8009868:	20000970 	.word	0x20000970

0800986c <LmhpComplianceProcess>:
{
 800986c:	b530      	push	{r4, r5, lr}
 800986e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8009870:	4b27      	ldr	r3, [pc, #156]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	b993      	cbnz	r3, 800989c <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8009876:	4b26      	ldr	r3, [pc, #152]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 8009878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800987c:	2b00      	cmp	r3, #0
 800987e:	d13d      	bne.n	80098fc <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8009880:	4b23      	ldr	r3, [pc, #140]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 8009882:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009886:	b13b      	cbz	r3, 8009898 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8009888:	4b21      	ldr	r3, [pc, #132]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8009890:	4b20      	ldr	r3, [pc, #128]	@ (8009914 <LmhpComplianceProcess+0xa8>)
 8009892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009894:	b103      	cbz	r3, 8009898 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8009896:	4798      	blx	r3
}
 8009898:	b003      	add	sp, #12
 800989a:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800989c:	f00a fa94 	bl	8013dc8 <UTIL_TIMER_GetCurrentTime>
 80098a0:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 80098a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 80098a4:	685d      	ldr	r5, [r3, #4]
 80098a6:	f7fe ff73 	bl	8008790 <LmHandlerGetDutyCycleWaitTime>
 80098aa:	4405      	add	r5, r0
 80098ac:	42a5      	cmp	r5, r4
 80098ae:	d2e7      	bcs.n	8009880 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 80098b0:	4b17      	ldr	r3, [pc, #92]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 80098b2:	7a9b      	ldrb	r3, [r3, #10]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0e3      	beq.n	8009880 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 80098b8:	22e0      	movs	r2, #224	@ 0xe0
 80098ba:	f88d 2000 	strb.w	r2, [sp]
 80098be:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80098c2:	4b13      	ldr	r3, [pc, #76]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 80098c4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 80098c6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 80098c8:	2201      	movs	r2, #1
 80098ca:	7a19      	ldrb	r1, [r3, #8]
 80098cc:	4668      	mov	r0, sp
 80098ce:	f7fe ff77 	bl	80087c0 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 80098d2:	b110      	cbz	r0, 80098da <LmhpComplianceProcess+0x6e>
 80098d4:	f110 0f07 	cmn.w	r0, #7
 80098d8:	d106      	bne.n	80098e8 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 80098da:	4b0d      	ldr	r3, [pc, #52]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 80098dc:	2200      	movs	r2, #0
 80098de:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 80098e0:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 80098e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 80098e4:	605c      	str	r4, [r3, #4]
 80098e6:	e7cb      	b.n	8009880 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 80098e8:	4d0b      	ldr	r5, [pc, #44]	@ (8009918 <LmhpComplianceProcess+0xac>)
 80098ea:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80098ee:	4628      	mov	r0, r5
 80098f0:	f00a fb4a 	bl	8013f88 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 80098f4:	4628      	mov	r0, r5
 80098f6:	f00a fb01 	bl	8013efc <UTIL_TIMER_Start>
 80098fa:	e7f2      	b.n	80098e2 <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 80098fc:	4b04      	ldr	r3, [pc, #16]	@ (8009910 <LmhpComplianceProcess+0xa4>)
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8009904:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8009908:	f7ff f804 	bl	8008914 <LmHandlerRequestClass>
 800990c:	e7b8      	b.n	8009880 <LmhpComplianceProcess+0x14>
 800990e:	bf00      	nop
 8009910:	2000098c 	.word	0x2000098c
 8009914:	200000e0 	.word	0x200000e0
 8009918:	20000970 	.word	0x20000970

0800991c <LmhpComplianceInit>:
{
 800991c:	b530      	push	{r4, r5, lr}
 800991e:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8009920:	b188      	cbz	r0, 8009946 <LmhpComplianceInit+0x2a>
 8009922:	4603      	mov	r3, r0
 8009924:	b179      	cbz	r1, 8009946 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8009926:	4813      	ldr	r0, [pc, #76]	@ (8009974 <LmhpComplianceInit+0x58>)
 8009928:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800992a:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <LmhpComplianceInit+0x5c>)
 800992c:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800992e:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8009930:	2201      	movs	r2, #1
 8009932:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8009934:	2200      	movs	r2, #0
 8009936:	9200      	str	r2, [sp, #0]
 8009938:	4b10      	ldr	r3, [pc, #64]	@ (800997c <LmhpComplianceInit+0x60>)
 800993a:	f04f 31ff 	mov.w	r1, #4294967295
 800993e:	4810      	ldr	r0, [pc, #64]	@ (8009980 <LmhpComplianceInit+0x64>)
 8009940:	f00a fa24 	bl	8013d8c <UTIL_TIMER_Create>
 8009944:	e004      	b.n	8009950 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	4a0a      	ldr	r2, [pc, #40]	@ (8009974 <LmhpComplianceInit+0x58>)
 800994a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800994c:	4a0a      	ldr	r2, [pc, #40]	@ (8009978 <LmhpComplianceInit+0x5c>)
 800994e:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8009950:	4c09      	ldr	r4, [pc, #36]	@ (8009978 <LmhpComplianceInit+0x5c>)
 8009952:	2500      	movs	r5, #0
 8009954:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8009956:	2220      	movs	r2, #32
 8009958:	4629      	mov	r1, r5
 800995a:	f104 0014 	add.w	r0, r4, #20
 800995e:	f007 fc50 	bl	8011202 <memset1>
    ComplianceTestState.IsTxPending = false;
 8009962:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8009964:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8009966:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800996a:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 800996e:	b003      	add	sp, #12
 8009970:	bd30      	pop	{r4, r5, pc}
 8009972:	bf00      	nop
 8009974:	20000988 	.word	0x20000988
 8009978:	2000098c 	.word	0x2000098c
 800997c:	08009425 	.word	0x08009425
 8009980:	20000970 	.word	0x20000970

08009984 <LmhpCompliancePackageFactory>:
}
 8009984:	4800      	ldr	r0, [pc, #0]	@ (8009988 <LmhpCompliancePackageFactory+0x4>)
 8009986:	4770      	bx	lr
 8009988:	200000e0 	.word	0x200000e0

0800998c <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800998c:	2000      	movs	r0, #0
 800998e:	4770      	bx	lr

08009990 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8009990:	f04f 30ff 	mov.w	r0, #4294967295
 8009994:	4770      	bx	lr
	...

08009998 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009998:	4b07      	ldr	r3, [pc, #28]	@ (80099b8 <UpdateRxSlotIdleState+0x20>)
 800999a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d004      	beq.n	80099ac <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80099a2:	4b06      	ldr	r3, [pc, #24]	@ (80099bc <UpdateRxSlotIdleState+0x24>)
 80099a4:	2206      	movs	r2, #6
 80099a6:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
 80099aa:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80099ac:	4b03      	ldr	r3, [pc, #12]	@ (80099bc <UpdateRxSlotIdleState+0x24>)
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20008000 	.word	0x20008000
 80099bc:	20000a6c 	.word	0x20000a6c

080099c0 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80099c0:	4b01      	ldr	r3, [pc, #4]	@ (80099c8 <LoRaMacEnableRequests+0x8>)
 80099c2:	f883 0492 	strb.w	r0, [r3, #1170]	@ 0x492
}
 80099c6:	4770      	bx	lr
 80099c8:	20000a6c 	.word	0x20000a6c

080099cc <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80099cc:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80099ce:	4b15      	ldr	r3, [pc, #84]	@ (8009a24 <LoRaMacHandleIndicationEvents+0x58>)
 80099d0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80099d4:	f013 0f08 	tst.w	r3, #8
 80099d8:	d00e      	beq.n	80099f8 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80099da:	4812      	ldr	r0, [pc, #72]	@ (8009a24 <LoRaMacHandleIndicationEvents+0x58>)
 80099dc:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 80099e0:	f023 0308 	bic.w	r3, r3, #8
 80099e4:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80099e8:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 80099f2:	f500 608d 	add.w	r0, r0, #1128	@ 0x468
 80099f6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80099f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a24 <LoRaMacHandleIndicationEvents+0x58>)
 80099fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80099fe:	f013 0f02 	tst.w	r3, #2
 8009a02:	d00e      	beq.n	8009a22 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009a04:	4807      	ldr	r0, [pc, #28]	@ (8009a24 <LoRaMacHandleIndicationEvents+0x58>)
 8009a06:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 8009a0a:	f023 0302 	bic.w	r3, r3, #2
 8009a0e:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8009a12:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8009a1c:	f500 6084 	add.w	r0, r0, #1056	@ 0x420
 8009a20:	4798      	blx	r3
    }
}
 8009a22:	bd08      	pop	{r3, pc}
 8009a24:	20000a6c 	.word	0x20000a6c

08009a28 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8009a28:	b110      	cbz	r0, 8009a30 <CheckForMinimumAbpDatarate+0x8>
 8009a2a:	2901      	cmp	r1, #1
 8009a2c:	d001      	beq.n	8009a32 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8009a2e:	2000      	movs	r0, #0
}
 8009a30:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	d0fc      	beq.n	8009a30 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8009a36:	2000      	movs	r0, #0
 8009a38:	4770      	bx	lr
	...

08009a3c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009a3c:	4b07      	ldr	r3, [pc, #28]	@ (8009a5c <LoRaMacCheckForRxAbort+0x20>)
 8009a3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009a42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a46:	d008      	beq.n	8009a5a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009a48:	4a04      	ldr	r2, [pc, #16]	@ (8009a5c <LoRaMacCheckForRxAbort+0x20>)
 8009a4a:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8009a4e:	f8c2 1340 	str.w	r1, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009a52:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 8009a56:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 8009a5a:	4770      	bx	lr
 8009a5c:	20000a6c 	.word	0x20000a6c

08009a60 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8009a60:	4b06      	ldr	r3, [pc, #24]	@ (8009a7c <CalculateBackOff+0x1c>)
 8009a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a64:	b94b      	cbnz	r3, 8009a7a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009a66:	4a05      	ldr	r2, [pc, #20]	@ (8009a7c <CalculateBackOff+0x1c>)
 8009a68:	f8b2 3120 	ldrh.w	r3, [r2, #288]	@ 0x120
 8009a6c:	4904      	ldr	r1, [pc, #16]	@ (8009a80 <CalculateBackOff+0x20>)
 8009a6e:	f8d1 141c 	ldr.w	r1, [r1, #1052]	@ 0x41c
 8009a72:	3b01      	subs	r3, #1
 8009a74:	fb01 f303 	mul.w	r3, r1, r3
 8009a78:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8009a7a:	4770      	bx	lr
 8009a7c:	20008000 	.word	0x20008000
 8009a80:	20000a6c 	.word	0x20000a6c

08009a84 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8009a84:	b508      	push	{r3, lr}
 8009a86:	4684      	mov	ip, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009a8c:	4b06      	ldr	r3, [pc, #24]	@ (8009aa8 <SetTxContinuousWave+0x24>)
 8009a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a90:	4662      	mov	r2, ip
 8009a92:	b249      	sxtb	r1, r1
 8009a94:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009a96:	4a05      	ldr	r2, [pc, #20]	@ (8009aac <SetTxContinuousWave+0x28>)
 8009a98:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8009a9c:	f043 0302 	orr.w	r3, r3, #2
 8009aa0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
}
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	bd08      	pop	{r3, pc}
 8009aa8:	08016f38 	.word	0x08016f38
 8009aac:	20000a6c 	.word	0x20000a6c

08009ab0 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	b1f8      	cbz	r0, 8009af4 <DetermineFrameType+0x44>
 8009ab4:	b301      	cbz	r1, 8009af8 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009ab6:	7b03      	ldrb	r3, [r0, #12]
 8009ab8:	f013 030f 	ands.w	r3, r3, #15
 8009abc:	d005      	beq.n	8009aca <DetermineFrameType+0x1a>
 8009abe:	f890 0020 	ldrb.w	r0, [r0, #32]
 8009ac2:	b110      	cbz	r0, 8009aca <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	7008      	strb	r0, [r1, #0]
 8009ac8:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8009aca:	f892 0028 	ldrb.w	r0, [r2, #40]	@ 0x28
 8009ace:	b910      	cbnz	r0, 8009ad6 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	700b      	strb	r3, [r1, #0]
 8009ad4:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009ad6:	b92b      	cbnz	r3, 8009ae4 <DetermineFrameType+0x34>
 8009ad8:	f892 0020 	ldrb.w	r0, [r2, #32]
 8009adc:	b910      	cbnz	r0, 8009ae4 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	700b      	strb	r3, [r1, #0]
 8009ae2:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8009ae4:	b953      	cbnz	r3, 8009afc <DetermineFrameType+0x4c>
 8009ae6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009aea:	b14a      	cbz	r2, 8009b00 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8009aec:	2203      	movs	r2, #3
 8009aee:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8009af0:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8009af2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009af4:	2003      	movs	r0, #3
 8009af6:	4770      	bx	lr
 8009af8:	2003      	movs	r0, #3
 8009afa:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8009afc:	2018      	movs	r0, #24
 8009afe:	4770      	bx	lr
 8009b00:	2018      	movs	r0, #24
}
 8009b02:	4770      	bx	lr

08009b04 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8009b04:	4288      	cmp	r0, r1
 8009b06:	d201      	bcs.n	8009b0c <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8009b08:	2000      	movs	r0, #0
 8009b0a:	4770      	bx	lr
        return true;
 8009b0c:	2001      	movs	r0, #1
}
 8009b0e:	4770      	bx	lr

08009b10 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8009b10:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8009b12:	4b0b      	ldr	r3, [pc, #44]	@ (8009b40 <CheckRetransUnconfirmedUplink+0x30>)
 8009b14:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8009b18:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <CheckRetransUnconfirmedUplink+0x34>)
 8009b1a:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 8009b1e:	f7ff fff1 	bl	8009b04 <CheckRetrans>
 8009b22:	b950      	cbnz	r0, 8009b3a <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009b24:	4b07      	ldr	r3, [pc, #28]	@ (8009b44 <CheckRetransUnconfirmedUplink+0x34>)
 8009b26:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009b2a:	f013 0f02 	tst.w	r3, #2
 8009b2e:	d004      	beq.n	8009b3a <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009b30:	4b04      	ldr	r3, [pc, #16]	@ (8009b44 <CheckRetransUnconfirmedUplink+0x34>)
 8009b32:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d900      	bls.n	8009b3c <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8009b3a:	bd08      	pop	{r3, pc}
            return true;
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	e7fc      	b.n	8009b3a <CheckRetransUnconfirmedUplink+0x2a>
 8009b40:	20008000 	.word	0x20008000
 8009b44:	20000a6c 	.word	0x20000a6c

08009b48 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8009b48:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8009b4a:	4b09      	ldr	r3, [pc, #36]	@ (8009b70 <CheckRetransConfirmedUplink+0x28>)
 8009b4c:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8009b50:	4b08      	ldr	r3, [pc, #32]	@ (8009b74 <CheckRetransConfirmedUplink+0x2c>)
 8009b52:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 8009b56:	f7ff ffd5 	bl	8009b04 <CheckRetrans>
 8009b5a:	b940      	cbnz	r0, 8009b6e <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009b5c:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <CheckRetransConfirmedUplink+0x2c>)
 8009b5e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009b62:	f013 0f02 	tst.w	r3, #2
 8009b66:	d002      	beq.n	8009b6e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009b68:	4b02      	ldr	r3, [pc, #8]	@ (8009b74 <CheckRetransConfirmedUplink+0x2c>)
 8009b6a:	f893 0444 	ldrb.w	r0, [r3, #1092]	@ 0x444
        {
            return true;
        }
    }
    return false;
}
 8009b6e:	bd08      	pop	{r3, pc}
 8009b70:	20008000 	.word	0x20008000
 8009b74:	20000a6c 	.word	0x20000a6c

08009b78 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8009b78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009b7c:	d000      	beq.n	8009b80 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8009b7e:	3001      	adds	r0, #1
    }
    return counter;
}
 8009b80:	4770      	bx	lr
	...

08009b84 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8009b84:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009b86:	4b12      	ldr	r3, [pc, #72]	@ (8009bd0 <StopRetransmission+0x4c>)
 8009b88:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009b8c:	f013 0f02 	tst.w	r3, #2
 8009b90:	d004      	beq.n	8009b9c <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009b92:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd0 <StopRetransmission+0x4c>)
 8009b94:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d908      	bls.n	8009bae <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd4 <StopRetransmission+0x50>)
 8009b9e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8009ba2:	b123      	cbz	r3, 8009bae <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8009ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8009bd4 <StopRetransmission+0x50>)
 8009ba6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009ba8:	f7ff ffe6 	bl	8009b78 <IncreaseAdrAckCounter>
 8009bac:	62a0      	str	r0, [r4, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8009bae:	4b08      	ldr	r3, [pc, #32]	@ (8009bd0 <StopRetransmission+0x4c>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8009bb6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8009bba:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009bbe:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8009bc2:	f022 0202 	bic.w	r2, r2, #2
 8009bc6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return true;
}
 8009bca:	2001      	movs	r0, #1
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	20000a6c 	.word	0x20000a6c
 8009bd4:	20008000 	.word	0x20008000

08009bd8 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8009bd8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009bda:	4b04      	ldr	r3, [pc, #16]	@ (8009bec <OnMacProcessNotify+0x14>)
 8009bdc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8009be0:	b113      	cbz	r3, 8009be8 <OnMacProcessNotify+0x10>
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	b103      	cbz	r3, 8009be8 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009be6:	4798      	blx	r3
    }
}
 8009be8:	bd08      	pop	{r3, pc}
 8009bea:	bf00      	nop
 8009bec:	20000a6c 	.word	0x20000a6c

08009bf0 <OnRadioRxError>:
{
 8009bf0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8009bf2:	4a04      	ldr	r2, [pc, #16]	@ (8009c04 <OnRadioRxError+0x14>)
 8009bf4:	7813      	ldrb	r3, [r2, #0]
 8009bf6:	f043 0304 	orr.w	r3, r3, #4
 8009bfa:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009bfc:	f7ff ffec 	bl	8009bd8 <OnMacProcessNotify>
}
 8009c00:	bd08      	pop	{r3, pc}
 8009c02:	bf00      	nop
 8009c04:	200009d8 	.word	0x200009d8

08009c08 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8009c08:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8009c0a:	4b04      	ldr	r3, [pc, #16]	@ (8009c1c <CallNvmDataChangeCallback+0x14>)
 8009c0c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8009c10:	b113      	cbz	r3, 8009c18 <CallNvmDataChangeCallback+0x10>
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	b103      	cbz	r3, 8009c18 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8009c16:	4798      	blx	r3
    }
}
 8009c18:	bd08      	pop	{r3, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000a6c 	.word	0x20000a6c

08009c20 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8009c20:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <IsRequestPending+0x14>)
 8009c22:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
 8009c26:	f010 0005 	ands.w	r0, r0, #5
 8009c2a:	d100      	bne.n	8009c2e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8009c2c:	4770      	bx	lr
        return 1;
 8009c2e:	2001      	movs	r0, #1
 8009c30:	e7fc      	b.n	8009c2c <IsRequestPending+0xc>
 8009c32:	bf00      	nop
 8009c34:	20000a6c 	.word	0x20000a6c

08009c38 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009c38:	b500      	push	{lr}
 8009c3a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c74 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009c3e:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009c42:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8009c46:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009c4a:	220d      	movs	r2, #13
 8009c4c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009c50:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8009c54:	b113      	cbz	r3, 8009c5c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009c56:	230e      	movs	r3, #14
 8009c58:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009c5c:	a902      	add	r1, sp, #8
 8009c5e:	4b05      	ldr	r3, [pc, #20]	@ (8009c74 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009c60:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009c64:	f004 f9f4 	bl	800e050 <RegionGetPhyParam>
 8009c68:	9001      	str	r0, [sp, #4]
}
 8009c6a:	b2c0      	uxtb	r0, r0
 8009c6c:	b005      	add	sp, #20
 8009c6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c72:	bf00      	nop
 8009c74:	20008000 	.word	0x20008000

08009c78 <ValidatePayloadLength>:
{
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4615      	mov	r5, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009c7e:	4608      	mov	r0, r1
 8009c80:	f7ff ffda 	bl	8009c38 <GetMaxAppPayloadWithoutFOptsLength>
    payloadSize = ( lenN + fOptsLen );
 8009c84:	442c      	add	r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009c86:	42a0      	cmp	r0, r4
 8009c88:	d201      	bcs.n	8009c8e <ValidatePayloadLength+0x16>
    return false;
 8009c8a:	2000      	movs	r0, #0
}
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8009c8e:	2001      	movs	r0, #1
 8009c90:	e7fc      	b.n	8009c8c <ValidatePayloadLength+0x14>
	...

08009c94 <ProcessRadioTxDone>:
{
 8009c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c96:	b08f      	sub	sp, #60	@ 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009c98:	4b3b      	ldr	r3, [pc, #236]	@ (8009d88 <ProcessRadioTxDone+0xf4>)
 8009c9a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d002      	beq.n	8009ca8 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8009ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8009d8c <ProcessRadioTxDone+0xf8>)
 8009ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ca8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009cac:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8009cae:	f00a f88b 	bl	8013dc8 <UTIL_TIMER_GetCurrentTime>
 8009cb2:	4b37      	ldr	r3, [pc, #220]	@ (8009d90 <ProcessRadioTxDone+0xfc>)
 8009cb4:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8009cb6:	4c37      	ldr	r4, [pc, #220]	@ (8009d94 <ProcessRadioTxDone+0x100>)
 8009cb8:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 8009cbc:	1a2d      	subs	r5, r5, r0
 8009cbe:	f504 7660 	add.w	r6, r4, #896	@ 0x380
 8009cc2:	4429      	add	r1, r5
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f00a f95f 	bl	8013f88 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f00a f916 	bl	8013efc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8009cd0:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8009cd4:	f504 7666 	add.w	r6, r4, #920	@ 0x398
 8009cd8:	4429      	add	r1, r5
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f00a f954 	bl	8013f88 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	f00a f90b 	bl	8013efc <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ce6:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 8009cea:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d134      	bne.n	8009d5c <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009cf2:	4b28      	ldr	r3, [pc, #160]	@ (8009d94 <ProcessRadioTxDone+0x100>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009cfa:	4b25      	ldr	r3, [pc, #148]	@ (8009d90 <ProcessRadioTxDone+0xfc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4c22      	ldr	r4, [pc, #136]	@ (8009d88 <ProcessRadioTxDone+0xf4>)
 8009d00:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 8009d02:	4f24      	ldr	r7, [pc, #144]	@ (8009d94 <ProcessRadioTxDone+0x100>)
 8009d04:	f897 241b 	ldrb.w	r2, [r7, #1051]	@ 0x41b
 8009d08:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009d0c:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009d0e:	ae0c      	add	r6, sp, #48	@ 0x30
 8009d10:	4630      	mov	r0, r6
 8009d12:	f009 ff5b 	bl	8013bcc <SysTimeGetMcuTime>
 8009d16:	ad02      	add	r5, sp, #8
 8009d18:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 8009d22:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009d26:	4628      	mov	r0, r5
 8009d28:	f009 feed 	bl	8013b06 <SysTimeSub>
 8009d2c:	ab07      	add	r3, sp, #28
 8009d2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009d32:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009d36:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8009d3a:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009d42:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8009d46:	b90b      	cbnz	r3, 8009d4c <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 8009d48:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009d4c:	a904      	add	r1, sp, #16
 8009d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d88 <ProcessRadioTxDone+0xf4>)
 8009d50:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009d54:	f004 f994 	bl	800e080 <RegionSetBandTxDone>
}
 8009d58:	b00f      	add	sp, #60	@ 0x3c
 8009d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8009d5c:	2315      	movs	r3, #21
 8009d5e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d62:	a90a      	add	r1, sp, #40	@ 0x28
 8009d64:	4b08      	ldr	r3, [pc, #32]	@ (8009d88 <ProcessRadioTxDone+0xf4>)
 8009d66:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009d6a:	f004 f971 	bl	800e050 <RegionGetPhyParam>
 8009d6e:	9009      	str	r0, [sp, #36]	@ 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009d70:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8009d74:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009d78:	4401      	add	r1, r0
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f00a f904 	bl	8013f88 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8009d80:	4620      	mov	r0, r4
 8009d82:	f00a f8bb 	bl	8013efc <UTIL_TIMER_Start>
 8009d86:	e7b8      	b.n	8009cfa <ProcessRadioTxDone+0x66>
 8009d88:	20008000 	.word	0x20008000
 8009d8c:	08016f38 	.word	0x08016f38
 8009d90:	200009d4 	.word	0x200009d4
 8009d94:	20000a6c 	.word	0x20000a6c

08009d98 <OnRetransmitTimeoutTimerEvent>:
{
 8009d98:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8009d9a:	4c07      	ldr	r4, [pc, #28]	@ (8009db8 <OnRetransmitTimeoutTimerEvent+0x20>)
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f00a f853 	bl	8013e48 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8009da2:	7ea3      	ldrb	r3, [r4, #26]
 8009da4:	b123      	cbz	r3, 8009db0 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8009da6:	f5a4 6380 	sub.w	r3, r4, #1024	@ 0x400
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    OnMacProcessNotify( );
 8009db0:	f7ff ff12 	bl	8009bd8 <OnMacProcessNotify>
}
 8009db4:	bd10      	pop	{r4, pc}
 8009db6:	bf00      	nop
 8009db8:	20000e6c 	.word	0x20000e6c

08009dbc <PrepareRxDoneAbort>:
{
 8009dbc:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009df8 <PrepareRxDoneAbort+0x3c>)
 8009dc0:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8009dc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009dc8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == true )
 8009dcc:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009dd0:	b973      	cbnz	r3, 8009df0 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009dd2:	4b09      	ldr	r3, [pc, #36]	@ (8009df8 <PrepareRxDoneAbort+0x3c>)
 8009dd4:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 8009dd8:	f042 0202 	orr.w	r2, r2, #2
 8009ddc:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009de0:	b2d2      	uxtb	r2, r2
 8009de2:	f042 0210 	orr.w	r2, r2, #16
 8009de6:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 8009dea:	f7ff fdd5 	bl	8009998 <UpdateRxSlotIdleState>
}
 8009dee:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8009df0:	2000      	movs	r0, #0
 8009df2:	f7ff ffd1 	bl	8009d98 <OnRetransmitTimeoutTimerEvent>
 8009df6:	e7ec      	b.n	8009dd2 <PrepareRxDoneAbort+0x16>
 8009df8:	20000a6c 	.word	0x20000a6c

08009dfc <LoRaMacCheckForBeaconAcquisition>:
{
 8009dfc:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009dfe:	200b      	movs	r0, #11
 8009e00:	f003 fba8 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 8009e04:	b188      	cbz	r0, 8009e2a <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009e06:	4b0b      	ldr	r3, [pc, #44]	@ (8009e34 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009e08:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009e0c:	f010 0f01 	tst.w	r0, #1
 8009e10:	d10d      	bne.n	8009e2e <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e12:	f010 0004 	ands.w	r0, r0, #4
 8009e16:	d009      	beq.n	8009e2c <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009e1e:	f023 0302 	bic.w	r3, r3, #2
 8009e22:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8009e26:	2001      	movs	r0, #1
 8009e28:	e000      	b.n	8009e2c <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009e2a:	2000      	movs	r0, #0
}
 8009e2c:	bd08      	pop	{r3, pc}
    return 0x00;
 8009e2e:	2000      	movs	r0, #0
 8009e30:	e7fc      	b.n	8009e2c <LoRaMacCheckForBeaconAcquisition+0x30>
 8009e32:	bf00      	nop
 8009e34:	20000a6c 	.word	0x20000a6c

08009e38 <GetFCntDown>:
{
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	9c04      	ldr	r4, [sp, #16]
 8009e3c:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009e3e:	b1f2      	cbz	r2, 8009e7e <GetFCntDown+0x46>
 8009e40:	4694      	mov	ip, r2
 8009e42:	b1f4      	cbz	r4, 8009e82 <GetFCntDown+0x4a>
 8009e44:	b1fd      	cbz	r5, 8009e86 <GetFCntDown+0x4e>
    switch( addrID )
 8009e46:	b188      	cbz	r0, 8009e6c <GetFCntDown+0x34>
 8009e48:	2801      	cmp	r0, #1
 8009e4a:	d11e      	bne.n	8009e8a <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8009e4c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d002      	beq.n	8009e5a <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009e54:	2303      	movs	r3, #3
 8009e56:	7023      	strb	r3, [r4, #0]
 8009e58:	e00a      	b.n	8009e70 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009e5a:	b121      	cbz	r1, 8009e66 <GetFCntDown+0x2e>
 8009e5c:	2903      	cmp	r1, #3
 8009e5e:	d002      	beq.n	8009e66 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009e60:	2301      	movs	r3, #1
 8009e62:	7023      	strb	r3, [r4, #0]
 8009e64:	e004      	b.n	8009e70 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8009e66:	2302      	movs	r3, #2
 8009e68:	7023      	strb	r3, [r4, #0]
 8009e6a:	e001      	b.n	8009e70 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8009e70:	462a      	mov	r2, r5
 8009e72:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8009e76:	7820      	ldrb	r0, [r4, #0]
 8009e78:	f003 fd96 	bl	800d9a8 <LoRaMacCryptoGetFCntDown>
}
 8009e7c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009e7e:	2009      	movs	r0, #9
 8009e80:	e7fc      	b.n	8009e7c <GetFCntDown+0x44>
 8009e82:	2009      	movs	r0, #9
 8009e84:	e7fa      	b.n	8009e7c <GetFCntDown+0x44>
 8009e86:	2009      	movs	r0, #9
 8009e88:	e7f8      	b.n	8009e7c <GetFCntDown+0x44>
    switch( addrID )
 8009e8a:	2005      	movs	r0, #5
 8009e8c:	e7f6      	b.n	8009e7c <GetFCntDown+0x44>

08009e8e <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009e8e:	2801      	cmp	r0, #1
 8009e90:	d900      	bls.n	8009e94 <RemoveMacCommands+0x6>
 8009e92:	4770      	bx	lr
{
 8009e94:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8009e96:	2a01      	cmp	r2, #1
 8009e98:	d105      	bne.n	8009ea6 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8009e9a:	f011 0f20 	tst.w	r1, #32
 8009e9e:	d004      	beq.n	8009eaa <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009ea0:	f003 fa04 	bl	800d2ac <LoRaMacCommandsRemoveStickyAnsCmds>
 8009ea4:	e001      	b.n	8009eaa <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8009ea6:	f003 fa01 	bl	800d2ac <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009eaa:	bd08      	pop	{r3, pc}

08009eac <ProcessMacCommands>:
{
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	b08f      	sub	sp, #60	@ 0x3c
 8009eb2:	4698      	mov	r8, r3
    uint8_t status = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009eba:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8009ebe:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	f200 82d8 	bhi.w	800a478 <ProcessMacCommands+0x5cc>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8009ece:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8009ed2:	42bc      	cmp	r4, r7
 8009ed4:	f080 82d0 	bcs.w	800a478 <ProcessMacCommands+0x5cc>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009ed8:	5d28      	ldrb	r0, [r5, r4]
 8009eda:	f003 fa3f 	bl	800d35c <LoRaMacCommandsGetCmdSize>
 8009ede:	4420      	add	r0, r4
 8009ee0:	42b8      	cmp	r0, r7
 8009ee2:	f300 82c9 	bgt.w	800a478 <ProcessMacCommands+0x5cc>
        switch( payload[macIndex++] )
 8009ee6:	1c66      	adds	r6, r4, #1
 8009ee8:	b2f6      	uxtb	r6, r6
 8009eea:	5d2b      	ldrb	r3, [r5, r4]
 8009eec:	3b02      	subs	r3, #2
 8009eee:	2b11      	cmp	r3, #17
 8009ef0:	f200 82c2 	bhi.w	800a478 <ProcessMacCommands+0x5cc>
 8009ef4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ef8:	00280012 	.word	0x00280012
 8009efc:	00c000ad 	.word	0x00c000ad
 8009f00:	011d0105 	.word	0x011d0105
 8009f04:	01720156 	.word	0x01720156
 8009f08:	02c001be 	.word	0x02c001be
 8009f0c:	01ee02c0 	.word	0x01ee02c0
 8009f10:	02c002c0 	.word	0x02c002c0
 8009f14:	02670250 	.word	0x02670250
 8009f18:	02a00286 	.word	0x02a00286
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009f1c:	2005      	movs	r0, #5
 8009f1e:	f003 fb19 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 8009f22:	b908      	cbnz	r0, 8009f28 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8009f24:	4634      	mov	r4, r6
 8009f26:	e7d4      	b.n	8009ed2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009f28:	2105      	movs	r1, #5
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	f003 fac6 	bl	800d4bc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009f30:	1ca3      	adds	r3, r4, #2
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	5da9      	ldrb	r1, [r5, r6]
 8009f36:	4aa6      	ldr	r2, [pc, #664]	@ (800a1d0 <ProcessMacCommands+0x324>)
 8009f38:	f882 145c 	strb.w	r1, [r2, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009f3c:	3403      	adds	r4, #3
 8009f3e:	b2e4      	uxtb	r4, r4
 8009f40:	5ceb      	ldrb	r3, [r5, r3]
 8009f42:	f882 345d 	strb.w	r3, [r2, #1117]	@ 0x45d
 8009f46:	e7c4      	b.n	8009ed2 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8009f4e:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8009f52:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8009f56:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8009f5a:	f1b9 0f00 	cmp.w	r9, #0
 8009f5e:	d036      	beq.n	8009fce <ProcessMacCommands+0x122>
                    macIndex += 4;
 8009f60:	3405      	adds	r4, #5
 8009f62:	b2e4      	uxtb	r4, r4
 8009f64:	e7b5      	b.n	8009ed2 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8009f66:	2305      	movs	r3, #5
 8009f68:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009f6c:	e050      	b.n	800a010 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8009f6e:	4b99      	ldr	r3, [pc, #612]	@ (800a1d4 <ProcessMacCommands+0x328>)
 8009f70:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8009f74:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	da03      	bge.n	8009f84 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8009f7c:	4b95      	ldr	r3, [pc, #596]	@ (800a1d4 <ProcessMacCommands+0x328>)
 8009f7e:	2101      	movs	r1, #1
 8009f80:	f883 111d 	strb.w	r1, [r3, #285]	@ 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8009f84:	4b93      	ldr	r3, [pc, #588]	@ (800a1d4 <ProcessMacCommands+0x328>)
 8009f86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8009f8a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009f8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009f92:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009f96:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8009f9a:	e04d      	b.n	800a038 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
 8009fa2:	2003      	movs	r0, #3
 8009fa4:	f003 f90e 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009fa8:	3401      	adds	r4, #1
 8009faa:	b2e4      	uxtb	r4, r4
 8009fac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009fb0:	4989      	ldr	r1, [pc, #548]	@ (800a1d8 <ProcessMacCommands+0x32c>)
 8009fb2:	fba1 2103 	umull	r2, r1, r1, r3
 8009fb6:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 8009fba:	d3ef      	bcc.n	8009f9c <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8009fbc:	4433      	add	r3, r6
 8009fbe:	b2de      	uxtb	r6, r3
 8009fc0:	1e74      	subs	r4, r6, #1
 8009fc2:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8009fc4:	42a7      	cmp	r7, r4
 8009fc6:	d93a      	bls.n	800a03e <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009fc8:	5d2b      	ldrb	r3, [r5, r4]
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d136      	bne.n	800a03c <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8009fce:	1e73      	subs	r3, r6, #1
 8009fd0:	442b      	add	r3, r5
 8009fd2:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009fd4:	4b7f      	ldr	r3, [pc, #508]	@ (800a1d4 <ProcessMacCommands+0x328>)
 8009fd6:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8009fda:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009fde:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8009fe2:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009fe6:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 8009fea:	f88d 1027 	strb.w	r1, [sp, #39]	@ 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009fee:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 8009ff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009ff6:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8009ffa:	f88d 1029 	strb.w	r1, [sp, #41]	@ 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8009ffe:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800a002:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800a004:	2a00      	cmp	r2, #0
 800a006:	d0ae      	beq.n	8009f66 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a008:	1bbb      	subs	r3, r7, r6
 800a00a:	3301      	adds	r3, #1
 800a00c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800a010:	ab05      	add	r3, sp, #20
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	ab03      	add	r3, sp, #12
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	f10d 030b 	add.w	r3, sp, #11
 800a01c:	f10d 020a 	add.w	r2, sp, #10
 800a020:	a907      	add	r1, sp, #28
 800a022:	486c      	ldr	r0, [pc, #432]	@ (800a1d4 <ProcessMacCommands+0x328>)
 800a024:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 800a028:	f004 f8a6 	bl	800e178 <RegionLinkAdrReq>
 800a02c:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800a030:	f000 0007 	and.w	r0, r0, #7
 800a034:	2807      	cmp	r0, #7
 800a036:	d09a      	beq.n	8009f6e <ProcessMacCommands+0xc2>
{
 800a038:	2400      	movs	r4, #0
 800a03a:	e7b7      	b.n	8009fac <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800a03c:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800a03e:	42bc      	cmp	r4, r7
 800a040:	d204      	bcs.n	800a04c <ProcessMacCommands+0x1a0>
                        macIndex--;
 800a042:	3c01      	subs	r4, #1
 800a044:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800a046:	f04f 0901 	mov.w	r9, #1
 800a04a:	e742      	b.n	8009ed2 <ProcessMacCommands+0x26>
 800a04c:	f04f 0901 	mov.w	r9, #1
                break;
 800a050:	e73f      	b.n	8009ed2 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800a052:	3402      	adds	r4, #2
 800a054:	b2e4      	uxtb	r4, r4
 800a056:	5dab      	ldrb	r3, [r5, r6]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	495d      	ldr	r1, [pc, #372]	@ (800a1d4 <ProcessMacCommands+0x328>)
 800a05e:	f881 311b 	strb.w	r3, [r1, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800a062:	2201      	movs	r2, #1
 800a064:	fa02 f303 	lsl.w	r3, r2, r3
 800a068:	f8a1 3120 	strh.w	r3, [r1, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a06c:	2200      	movs	r2, #0
 800a06e:	a90b      	add	r1, sp, #44	@ 0x2c
 800a070:	2004      	movs	r0, #4
 800a072:	f003 f8a7 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a076:	e72c      	b.n	8009ed2 <ProcessMacCommands+0x26>
                status = 0x07;
 800a078:	2307      	movs	r3, #7
 800a07a:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800a07e:	5dab      	ldrb	r3, [r5, r6]
 800a080:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800a084:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800a090:	1ca3      	adds	r3, r4, #2
 800a092:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a094:	1ce1      	adds	r1, r4, #3
 800a096:	b2c9      	uxtb	r1, r1
 800a098:	5ceb      	ldrb	r3, [r5, r3]
 800a09a:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a09c:	1d22      	adds	r2, r4, #4
 800a09e:	b2d2      	uxtb	r2, r2
 800a0a0:	5c69      	ldrb	r1, [r5, r1]
 800a0a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a0a6:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a0a8:	3405      	adds	r4, #5
 800a0aa:	b2e4      	uxtb	r4, r4
 800a0ac:	5caa      	ldrb	r2, [r5, r2]
 800a0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b2:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800a0b4:	2264      	movs	r2, #100	@ 0x64
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ba:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800a0bc:	a907      	add	r1, sp, #28
 800a0be:	4b45      	ldr	r3, [pc, #276]	@ (800a1d4 <ProcessMacCommands+0x328>)
 800a0c0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800a0c4:	f004 f874 	bl	800e1b0 <RegionRxParamSetupReq>
 800a0c8:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800a0cc:	f000 0307 	and.w	r3, r0, #7
 800a0d0:	2b07      	cmp	r3, #7
 800a0d2:	d007      	beq.n	800a0e4 <ProcessMacCommands+0x238>
                macCmdPayload[0] = status;
 800a0d4:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800a0d8:	2201      	movs	r2, #1
 800a0da:	a90b      	add	r1, sp, #44	@ 0x2c
 800a0dc:	2005      	movs	r0, #5
 800a0de:	f003 f871 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a0e2:	e6f6      	b.n	8009ed2 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800a0e4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a0e8:	4b3a      	ldr	r3, [pc, #232]	@ (800a1d4 <ProcessMacCommands+0x328>)
 800a0ea:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800a0ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800a0f2:	9a08      	ldr	r2, [sp, #32]
 800a0f4:	66da      	str	r2, [r3, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800a0f6:	675a      	str	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800a0f8:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800a0fc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 800a100:	e7e8      	b.n	800a0d4 <ProcessMacCommands+0x228>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800a102:	4b33      	ldr	r3, [pc, #204]	@ (800a1d0 <ProcessMacCommands+0x324>)
 800a104:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800a108:	b17b      	cbz	r3, 800a12a <ProcessMacCommands+0x27e>
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	b17b      	cbz	r3, 800a12e <ProcessMacCommands+0x282>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800a10e:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800a110:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800a114:	f008 033f 	and.w	r3, r8, #63	@ 0x3f
 800a118:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800a11c:	2202      	movs	r2, #2
 800a11e:	a90b      	add	r1, sp, #44	@ 0x2c
 800a120:	2006      	movs	r0, #6
 800a122:	f003 f84f 	bl	800d1c4 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800a126:	4634      	mov	r4, r6
                break;
 800a128:	e6d3      	b.n	8009ed2 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800a12a:	20ff      	movs	r0, #255	@ 0xff
 800a12c:	e7f0      	b.n	800a110 <ProcessMacCommands+0x264>
 800a12e:	20ff      	movs	r0, #255	@ 0xff
 800a130:	e7ee      	b.n	800a110 <ProcessMacCommands+0x264>
                status = 0x03;
 800a132:	2303      	movs	r3, #3
 800a134:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800a138:	1ca3      	adds	r3, r4, #2
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	57aa      	ldrsb	r2, [r5, r6]
 800a13e:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800a142:	aa07      	add	r2, sp, #28
 800a144:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800a146:	1ce2      	adds	r2, r4, #3
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	5ceb      	ldrb	r3, [r5, r3]
 800a14c:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a14e:	1d21      	adds	r1, r4, #4
 800a150:	b2c9      	uxtb	r1, r1
 800a152:	5caa      	ldrb	r2, [r5, r2]
 800a154:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a158:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a15a:	1d62      	adds	r2, r4, #5
 800a15c:	b2d2      	uxtb	r2, r2
 800a15e:	5c69      	ldrb	r1, [r5, r1]
 800a160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a164:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800a166:	2164      	movs	r1, #100	@ 0x64
 800a168:	fb01 f303 	mul.w	r3, r1, r3
 800a16c:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800a172:	3406      	adds	r4, #6
 800a174:	b2e4      	uxtb	r4, r4
 800a176:	56ab      	ldrsb	r3, [r5, r2]
 800a178:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800a17c:	a905      	add	r1, sp, #20
 800a17e:	4b15      	ldr	r3, [pc, #84]	@ (800a1d4 <ProcessMacCommands+0x328>)
 800a180:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800a184:	f004 f823 	bl	800e1ce <RegionNewChannelReq>
 800a188:	b2c3      	uxtb	r3, r0
 800a18a:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800a18e:	2800      	cmp	r0, #0
 800a190:	f6ff ae9f 	blt.w	8009ed2 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800a194:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800a198:	2201      	movs	r2, #1
 800a19a:	a90b      	add	r1, sp, #44	@ 0x2c
 800a19c:	2007      	movs	r0, #7
 800a19e:	f003 f811 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a1a2:	e696      	b.n	8009ed2 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a1a4:	3402      	adds	r4, #2
 800a1a6:	b2e4      	uxtb	r4, r4
 800a1a8:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800a1aa:	f013 030f 	ands.w	r3, r3, #15
 800a1ae:	d100      	bne.n	800a1b2 <ProcessMacCommands+0x306>
                    delay++;
 800a1b0:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800a1b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1b6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ba:	4a06      	ldr	r2, [pc, #24]	@ (800a1d4 <ProcessMacCommands+0x328>)
 800a1bc:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a1be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800a1c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	a90b      	add	r1, sp, #44	@ 0x2c
 800a1c8:	2008      	movs	r0, #8
 800a1ca:	f002 fffb 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a1ce:	e680      	b.n	8009ed2 <ProcessMacCommands+0x26>
 800a1d0:	20000a6c 	.word	0x20000a6c
 800a1d4:	20008000 	.word	0x20008000
 800a1d8:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800a1dc:	3402      	adds	r4, #2
 800a1de:	b2e4      	uxtb	r4, r4
 800a1e0:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800a1e8:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800a1ec:	f013 0f20 	tst.w	r3, #32
 800a1f0:	d002      	beq.n	800a1f8 <ProcessMacCommands+0x34c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800a1f8:	f013 0f10 	tst.w	r3, #16
 800a1fc:	d002      	beq.n	800a204 <ProcessMacCommands+0x358>
                    txParamSetupReq.UplinkDwellTime = 1;
 800a1fe:	2201      	movs	r2, #1
 800a200:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800a20c:	a903      	add	r1, sp, #12
 800a20e:	4b9c      	ldr	r3, [pc, #624]	@ (800a480 <ProcessMacCommands+0x5d4>)
 800a210:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800a214:	f003 ffea 	bl	800e1ec <RegionTxParamSetupReq>
 800a218:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a21c:	f43f ae59 	beq.w	8009ed2 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800a220:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800a224:	4e96      	ldr	r6, [pc, #600]	@ (800a480 <ProcessMacCommands+0x5d4>)
 800a226:	f886 a07c 	strb.w	sl, [r6, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800a22a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800a22e:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800a232:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a236:	4a93      	ldr	r2, [pc, #588]	@ (800a484 <ProcessMacCommands+0x5d8>)
 800a238:	5cd0      	ldrb	r0, [r2, r3]
 800a23a:	f7f6 fac7 	bl	80007cc <__aeabi_ui2f>
 800a23e:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800a242:	2302      	movs	r3, #2
 800a244:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a248:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a24c:	a907      	add	r1, sp, #28
 800a24e:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800a252:	f003 fefd 	bl	800e050 <RegionGetPhyParam>
 800a256:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a258:	b240      	sxtb	r0, r0
 800a25a:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 800a25e:	4298      	cmp	r0, r3
 800a260:	bfb8      	it	lt
 800a262:	4618      	movlt	r0, r3
 800a264:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800a268:	2200      	movs	r2, #0
 800a26a:	a90b      	add	r1, sp, #44	@ 0x2c
 800a26c:	2009      	movs	r0, #9
 800a26e:	f002 ffa9 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a272:	e62e      	b.n	8009ed2 <ProcessMacCommands+0x26>
                status = 0x03;
 800a274:	2303      	movs	r3, #3
 800a276:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800a27a:	1ca3      	adds	r3, r4, #2
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	5daa      	ldrb	r2, [r5, r6]
 800a280:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a284:	1ce1      	adds	r1, r4, #3
 800a286:	b2c9      	uxtb	r1, r1
 800a288:	5ceb      	ldrb	r3, [r5, r3]
 800a28a:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a28c:	1d22      	adds	r2, r4, #4
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	5c69      	ldrb	r1, [r5, r1]
 800a292:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a296:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a298:	3405      	adds	r4, #5
 800a29a:	b2e4      	uxtb	r4, r4
 800a29c:	5caa      	ldrb	r2, [r5, r2]
 800a29e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2a2:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800a2a4:	2264      	movs	r2, #100	@ 0x64
 800a2a6:	fb02 f303 	mul.w	r3, r2, r3
 800a2aa:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800a2ac:	a907      	add	r1, sp, #28
 800a2ae:	4b74      	ldr	r3, [pc, #464]	@ (800a480 <ProcessMacCommands+0x5d4>)
 800a2b0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800a2b4:	f003 ffa9 	bl	800e20a <RegionDlChannelReq>
 800a2b8:	b2c3      	uxtb	r3, r0
 800a2ba:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f6ff ae07 	blt.w	8009ed2 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800a2c4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	a90b      	add	r1, sp, #44	@ 0x2c
 800a2cc:	200a      	movs	r0, #10
 800a2ce:	f002 ff79 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a2d2:	e5fe      	b.n	8009ed2 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800a2d4:	2009      	movs	r0, #9
 800a2d6:	f003 f93d 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 800a2da:	b928      	cbnz	r0, 800a2e8 <ProcessMacCommands+0x43c>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a2dc:	4b6a      	ldr	r3, [pc, #424]	@ (800a488 <ProcessMacCommands+0x5dc>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
        switch( payload[macIndex++] )
 800a2e4:	4634      	mov	r4, r6
 800a2e6:	e5f4      	b.n	8009ed2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800a2e8:	2109      	movs	r1, #9
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f003 f8e6 	bl	800d4bc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800a2f0:	a903      	add	r1, sp, #12
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9303      	str	r3, [sp, #12]
 800a2f6:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800a2f8:	f10d 0a14 	add.w	sl, sp, #20
 800a2fc:	9305      	str	r3, [sp, #20]
 800a2fe:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800a300:	f10d 0b1c 	add.w	fp, sp, #28
 800a304:	9307      	str	r3, [sp, #28]
 800a306:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a308:	1ca0      	adds	r0, r4, #2
 800a30a:	b2c0      	uxtb	r0, r0
 800a30c:	5dab      	ldrb	r3, [r5, r6]
 800a30e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a310:	1ce2      	adds	r2, r4, #3
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	5c28      	ldrb	r0, [r5, r0]
 800a316:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a31a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a31c:	1d20      	adds	r0, r4, #4
 800a31e:	b2c0      	uxtb	r0, r0
 800a320:	5caa      	ldrb	r2, [r5, r2]
 800a322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a326:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a328:	1d62      	adds	r2, r4, #5
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	5c28      	ldrb	r0, [r5, r0]
 800a32e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a332:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a334:	3406      	adds	r4, #6
 800a336:	b2e4      	uxtb	r4, r4
 800a338:	5caa      	ldrb	r2, [r5, r2]
 800a33a:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a33e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a342:	fb00 f202 	mul.w	r2, r0, r2
 800a346:	0a12      	lsrs	r2, r2, #8
 800a348:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800a34c:	c903      	ldmia	r1, {r0, r1}
 800a34e:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a352:	4a4e      	ldr	r2, [pc, #312]	@ (800a48c <ProcessMacCommands+0x5e0>)
 800a354:	441a      	add	r2, r3
 800a356:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800a358:	4658      	mov	r0, fp
 800a35a:	f009 fc15 	bl	8013b88 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800a35e:	4e4a      	ldr	r6, [pc, #296]	@ (800a488 <ProcessMacCommands+0x5dc>)
 800a360:	f8d6 333c 	ldr.w	r3, [r6, #828]	@ 0x33c
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	f8d6 3338 	ldr.w	r3, [r6, #824]	@ 0x338
 800a36a:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800a36e:	a80c      	add	r0, sp, #48	@ 0x30
 800a370:	f009 fbc9 	bl	8013b06 <SysTimeSub>
 800a374:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a37a:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800a37e:	4650      	mov	r0, sl
 800a380:	f009 fba2 	bl	8013ac8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800a384:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a388:	f009 fbdc 	bl	8013b44 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800a38c:	f002 fe80 	bl	800d090 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800a390:	2301      	movs	r3, #1
 800a392:	f886 3438 	strb.w	r3, [r6, #1080]	@ 0x438
 800a396:	e59c      	b.n	8009ed2 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800a398:	200c      	movs	r0, #12
 800a39a:	f003 f8db 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 800a39e:	b908      	cbnz	r0, 800a3a4 <ProcessMacCommands+0x4f8>
        switch( payload[macIndex++] )
 800a3a0:	4634      	mov	r4, r6
 800a3a2:	e596      	b.n	8009ed2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800a3a4:	210c      	movs	r1, #12
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f003 f888 	bl	800d4bc <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800a3ac:	4b36      	ldr	r3, [pc, #216]	@ (800a488 <ProcessMacCommands+0x5dc>)
 800a3ae:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a3b2:	3b04      	subs	r3, #4
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d801      	bhi.n	800a3be <ProcessMacCommands+0x512>
        switch( payload[macIndex++] )
 800a3ba:	4634      	mov	r4, r6
 800a3bc:	e589      	b.n	8009ed2 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800a3be:	f002 fe63 	bl	800d088 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800a3c2:	4634      	mov	r4, r6
 800a3c4:	e585      	b.n	8009ed2 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800a3c6:	1ca2      	adds	r2, r4, #2
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a3cc:	1ce1      	adds	r1, r4, #3
 800a3ce:	b2c9      	uxtb	r1, r1
 800a3d0:	5caa      	ldrb	r2, [r5, r2]
 800a3d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a3d6:	1d22      	adds	r2, r4, #4
 800a3d8:	b2d2      	uxtb	r2, r2
 800a3da:	5c69      	ldrb	r1, [r5, r1]
 800a3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800a3e0:	3405      	adds	r4, #5
 800a3e2:	b2e4      	uxtb	r4, r4
 800a3e4:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800a3e6:	2164      	movs	r1, #100	@ 0x64
 800a3e8:	fb03 f101 	mul.w	r1, r3, r1
 800a3ec:	f000 000f 	and.w	r0, r0, #15
 800a3f0:	f002 fe4b 	bl	800d08a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800a3f4:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	a90b      	add	r1, sp, #44	@ 0x2c
 800a3fc:	2011      	movs	r0, #17
 800a3fe:	f002 fee1 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a402:	e566      	b.n	8009ed2 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800a404:	200d      	movs	r0, #13
 800a406:	f003 f8a5 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 800a40a:	b908      	cbnz	r0, 800a410 <ProcessMacCommands+0x564>
        switch( payload[macIndex++] )
 800a40c:	4634      	mov	r4, r6
 800a40e:	e560      	b.n	8009ed2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800a410:	210d      	movs	r1, #13
 800a412:	2000      	movs	r0, #0
 800a414:	f003 f852 	bl	800d4bc <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800a418:	1ca2      	adds	r2, r4, #2
 800a41a:	b2d2      	uxtb	r2, r2
 800a41c:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800a41e:	1ce3      	adds	r3, r4, #3
 800a420:	b2db      	uxtb	r3, r3
 800a422:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800a424:	3404      	adds	r4, #4
 800a426:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a428:	4a19      	ldr	r2, [pc, #100]	@ (800a490 <ProcessMacCommands+0x5e4>)
 800a42a:	6812      	ldr	r2, [r2, #0]
 800a42c:	5ce9      	ldrb	r1, [r5, r3]
 800a42e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800a432:	f002 fe2c 	bl	800d08e <LoRaMacClassBBeaconTimingAns>
 800a436:	e54c      	b.n	8009ed2 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800a438:	1ca1      	adds	r1, r4, #2
 800a43a:	b2c9      	uxtb	r1, r1
 800a43c:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a43e:	1ce2      	adds	r2, r4, #3
 800a440:	b2d2      	uxtb	r2, r2
 800a442:	5c69      	ldrb	r1, [r5, r1]
 800a444:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a448:	3404      	adds	r4, #4
 800a44a:	b2e4      	uxtb	r4, r4
 800a44c:	5caa      	ldrb	r2, [r5, r2]
 800a44e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800a452:	2064      	movs	r0, #100	@ 0x64
 800a454:	fb03 f000 	mul.w	r0, r3, r0
 800a458:	f002 fe1b 	bl	800d092 <LoRaMacClassBBeaconFreqReq>
 800a45c:	b140      	cbz	r0, 800a470 <ProcessMacCommands+0x5c4>
                        macCmdPayload[0] = 1;
 800a45e:	2301      	movs	r3, #1
 800a460:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a464:	2201      	movs	r2, #1
 800a466:	a90b      	add	r1, sp, #44	@ 0x2c
 800a468:	2013      	movs	r0, #19
 800a46a:	f002 feab 	bl	800d1c4 <LoRaMacCommandsAddCmd>
                break;
 800a46e:	e530      	b.n	8009ed2 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800a476:	e7f5      	b.n	800a464 <ProcessMacCommands+0x5b8>
}
 800a478:	b00f      	add	sp, #60	@ 0x3c
 800a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47e:	bf00      	nop
 800a480:	20008000 	.word	0x20008000
 800a484:	08016acc 	.word	0x08016acc
 800a488:	20000a6c 	.word	0x20000a6c
 800a48c:	12d53d80 	.word	0x12d53d80
 800a490:	200009c4 	.word	0x200009c4

0800a494 <ProcessRadioRxDone>:
{
 800a494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a498:	b0a5      	sub	sp, #148	@ 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800a49a:	4ba5      	ldr	r3, [pc, #660]	@ (800a730 <ProcessRadioRxDone+0x29c>)
 800a49c:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800a49e:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800a4a0:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800a4a4:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800a4ac:	4aa1      	ldr	r2, [pc, #644]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a4ae:	f8d2 90e4 	ldr.w	r9, [r2, #228]	@ 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800a4b2:	4aa1      	ldr	r2, [pc, #644]	@ (800a738 <ProcessRadioRxDone+0x2a4>)
 800a4b4:	7811      	ldrb	r1, [r2, #0]
 800a4b6:	f363 0100 	bfi	r1, r3, #0, #1
 800a4ba:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800a4bc:	4c9f      	ldr	r4, [pc, #636]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a4be:	f884 3444 	strb.w	r3, [r4, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800a4c2:	f8a4 848c 	strh.w	r8, [r4, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800a4c6:	f884 748e 	strb.w	r7, [r4, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800a4ca:	f894 2490 	ldrb.w	r2, [r4, #1168]	@ 0x490
 800a4ce:	f884 248f 	strb.w	r2, [r4, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800a4d2:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800a4d6:	f884 3422 	strb.w	r3, [r4, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800a4da:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800a4de:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800a4e2:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800a4e6:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800a4ea:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a4ee:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a4f2:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800a4f6:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a4fa:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800a4fe:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    Radio.Sleep( );
 800a502:	4b8f      	ldr	r3, [pc, #572]	@ (800a740 <ProcessRadioRxDone+0x2ac>)
 800a504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a506:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800a508:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800a50c:	b1d3      	cbz	r3, 800a544 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a50e:	4629      	mov	r1, r5
 800a510:	4630      	mov	r0, r6
 800a512:	f002 fda6 	bl	800d062 <LoRaMacClassBRxBeacon>
 800a516:	b9d0      	cbnz	r0, 800a54e <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a518:	4b86      	ldr	r3, [pc, #536]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a51a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d01d      	beq.n	800a55e <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800a522:	2d00      	cmp	r5, #0
 800a524:	d038      	beq.n	800a598 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800a526:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a528:	0963      	lsrs	r3, r4, #5
 800a52a:	3b01      	subs	r3, #1
 800a52c:	2b06      	cmp	r3, #6
 800a52e:	f200 82f6 	bhi.w	800ab1e <ProcessRadioRxDone+0x68a>
 800a532:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a536:	0038      	.short	0x0038
 800a538:	00d102f4 	.word	0x00d102f4
 800a53c:	00cd02f4 	.word	0x00cd02f4
 800a540:	02c802f4 	.word	0x02c802f4
        TimerStop( &MacCtx.RxWindowTimer2 );
 800a544:	f504 7066 	add.w	r0, r4, #920	@ 0x398
 800a548:	f009 fc7e 	bl	8013e48 <UTIL_TIMER_Stop>
 800a54c:	e7df      	b.n	800a50e <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a54e:	4b7b      	ldr	r3, [pc, #492]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a550:	f8a3 847e 	strh.w	r8, [r3, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a554:	f883 7480 	strb.w	r7, [r3, #1152]	@ 0x480
}
 800a558:	b025      	add	sp, #148	@ 0x94
 800a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a55e:	f002 fd84 	bl	800d06a <LoRaMacClassBIsPingExpected>
 800a562:	b150      	cbz	r0, 800a57a <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a564:	2000      	movs	r0, #0
 800a566:	f002 fd75 	bl	800d054 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a56a:	2000      	movs	r0, #0
 800a56c:	f002 fd77 	bl	800d05e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a570:	4b72      	ldr	r3, [pc, #456]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a572:	2204      	movs	r2, #4
 800a574:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800a578:	e7d3      	b.n	800a522 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a57a:	f002 fd78 	bl	800d06e <LoRaMacClassBIsMulticastExpected>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0cf      	beq.n	800a522 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a582:	2000      	movs	r0, #0
 800a584:	f002 fd67 	bl	800d056 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a588:	2000      	movs	r0, #0
 800a58a:	f002 fd69 	bl	800d060 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a58e:	4b6b      	ldr	r3, [pc, #428]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a590:	2205      	movs	r2, #5
 800a592:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800a596:	e7c4      	b.n	800a522 <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a598:	4b68      	ldr	r3, [pc, #416]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800a5a0:	f7ff fc0c 	bl	8009dbc <PrepareRxDoneAbort>
        return;
 800a5a4:	e7d8      	b.n	800a558 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a5a6:	2d10      	cmp	r5, #16
 800a5a8:	d92e      	bls.n	800a608 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800a5aa:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800a5ac:	b2ed      	uxtb	r5, r5
 800a5ae:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a5b2:	4b60      	ldr	r3, [pc, #384]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a5b4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a5b8:	bb6b      	cbnz	r3, 800a616 <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800a5ba:	a804      	add	r0, sp, #16
 800a5bc:	f006 fcec 	bl	8010f98 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800a5c0:	aa08      	add	r2, sp, #32
 800a5c2:	a904      	add	r1, sp, #16
 800a5c4:	20ff      	movs	r0, #255	@ 0xff
 800a5c6:	f003 fb41 	bl	800dc4c <LoRaMacCryptoHandleJoinAccept>
 800a5ca:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a5cc:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800a5d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a5d4:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a5d8:	4b56      	ldr	r3, [pc, #344]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a5da:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800a5de:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	a903      	add	r1, sp, #12
 800a5e6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800a5ea:	f003 fd63 	bl	800e0b4 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800a5ee:	b904      	cbnz	r4, 800a5f2 <ProcessRadioRxDone+0x15e>
 800a5f0:	b9c0      	cbnz	r0, 800a624 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	f002 ffae 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f000 827c 	beq.w	800aaf6 <ProcessRadioRxDone+0x662>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a5fe:	2101      	movs	r1, #1
 800a600:	2007      	movs	r0, #7
 800a602:	f002 ff5b 	bl	800d4bc <LoRaMacConfirmQueueSetStatus>
 800a606:	e276      	b.n	800aaf6 <ProcessRadioRxDone+0x662>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a608:	4b4c      	ldr	r3, [pc, #304]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a610:	f7ff fbd4 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a614:	e7a0      	b.n	800a558 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a616:	4b49      	ldr	r3, [pc, #292]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a61e:	f7ff fbcd 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a622:	e799      	b.n	800a558 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a624:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 800a628:	4c42      	ldr	r4, [pc, #264]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a62a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a62e:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 800a632:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a636:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a63a:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
 800a63e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a642:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a646:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a648:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800a64c:	2002      	movs	r0, #2
 800a64e:	f006 fcb1 	bl	8010fb4 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a652:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800a656:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800a65a:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a65e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a662:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a666:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a66a:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 800a66e:	65a3      	str	r3, [r4, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a670:	b90b      	cbnz	r3, 800a676 <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a672:	2201      	movs	r2, #1
 800a674:	65a2      	str	r2, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a676:	4c2f      	ldr	r4, [pc, #188]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a678:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a67a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a67e:	fb02 f303 	mul.w	r3, r2, r3
 800a682:	65a3      	str	r3, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a684:	4413      	add	r3, r2
 800a686:	65e3      	str	r3, [r4, #92]	@ 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800a688:	2601      	movs	r6, #1
 800a68a:	f884 6068 	strb.w	r6, [r4, #104]	@ 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	f884 312e 	strb.w	r3, [r4, #302]	@ 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a694:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800a698:	9322      	str	r3, [sp, #136]	@ 0x88
                applyCFList.Size = size - 17;
 800a69a:	3d11      	subs	r5, #17
 800a69c:	f88d 508c 	strb.w	r5, [sp, #140]	@ 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800a6a0:	4b26      	ldr	r3, [pc, #152]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a6a2:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800a6a6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a6aa:	a921      	add	r1, sp, #132	@ 0x84
 800a6ac:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a6b0:	f003 fd10 	bl	800e0d4 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f002 ff4a 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f000 8218 	beq.w	800aaf6 <ProcessRadioRxDone+0x662>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f002 fef7 	bl	800d4bc <LoRaMacConfirmQueueSetStatus>
 800a6ce:	e212      	b.n	800aaf6 <ProcessRadioRxDone+0x662>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a6d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a6d8:	4b16      	ldr	r3, [pc, #88]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a6da:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800a6de:	f88d 207e 	strb.w	r2, [sp, #126]	@ 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a6e2:	4a16      	ldr	r2, [pc, #88]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a6e4:	f992 2424 	ldrsb.w	r2, [r2, #1060]	@ 0x424
 800a6e8:	f88d 207d 	strb.w	r2, [sp, #125]	@ 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a6ec:	220d      	movs	r2, #13
 800a6ee:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a6f2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800a6f6:	b113      	cbz	r3, 800a6fe <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a6f8:	230e      	movs	r3, #14
 800a6fa:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6fe:	a91f      	add	r1, sp, #124	@ 0x7c
 800a700:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <ProcessRadioRxDone+0x2a0>)
 800a702:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800a706:	f003 fca3 	bl	800e050 <RegionGetPhyParam>
 800a70a:	901e      	str	r0, [sp, #120]	@ 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a70c:	f1a5 030d 	sub.w	r3, r5, #13
 800a710:	b21b      	sxth	r3, r3
 800a712:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a716:	b200      	sxth	r0, r0
 800a718:	4283      	cmp	r3, r0
 800a71a:	dc01      	bgt.n	800a720 <ProcessRadioRxDone+0x28c>
 800a71c:	2d0b      	cmp	r5, #11
 800a71e:	d811      	bhi.n	800a744 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a720:	4b06      	ldr	r3, [pc, #24]	@ (800a73c <ProcessRadioRxDone+0x2a8>)
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a728:	f7ff fb48 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a72c:	e714      	b.n	800a558 <ProcessRadioRxDone+0xc4>
 800a72e:	bf00      	nop
 800a730:	200009c4 	.word	0x200009c4
 800a734:	20008000 	.word	0x20008000
 800a738:	200009d8 	.word	0x200009d8
 800a73c:	20000a6c 	.word	0x20000a6c
 800a740:	08016f38 	.word	0x08016f38
            macMsgData.Buffer = payload;
 800a744:	9612      	str	r6, [sp, #72]	@ 0x48
            macMsgData.BufSize = size;
 800a746:	f88d 504c 	strb.w	r5, [sp, #76]	@ 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a74a:	4bb6      	ldr	r3, [pc, #728]	@ (800aa24 <ProcessRadioRxDone+0x590>)
 800a74c:	931b      	str	r3, [sp, #108]	@ 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a74e:	23ff      	movs	r3, #255	@ 0xff
 800a750:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a754:	a812      	add	r0, sp, #72	@ 0x48
 800a756:	f003 fb4b 	bl	800ddf0 <LoRaMacParserData>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d136      	bne.n	800a7cc <ProcessRadioRxDone+0x338>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a75e:	4bb2      	ldr	r3, [pc, #712]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a760:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a764:	2b01      	cmp	r3, #1
 800a766:	d038      	beq.n	800a7da <ProcessRadioRxDone+0x346>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a768:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a76a:	4bb0      	ldr	r3, [pc, #704]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a76c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a770:	a904      	add	r1, sp, #16
 800a772:	a812      	add	r0, sp, #72	@ 0x48
 800a774:	f7ff f99c 	bl	8009ab0 <DetermineFrameType>
 800a778:	4605      	mov	r5, r0
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d158      	bne.n	800a830 <ProcessRadioRxDone+0x39c>
            downLinkCounter = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d05a      	beq.n	800a83e <ProcessRadioRxDone+0x3aa>
 800a788:	2601      	movs	r6, #1
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800a78a:	ab07      	add	r3, sp, #28
 800a78c:	9301      	str	r3, [sp, #4]
 800a78e:	f10d 031b 	add.w	r3, sp, #27
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	4ba4      	ldr	r3, [pc, #656]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a796:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800a79a:	aa12      	add	r2, sp, #72	@ 0x48
 800a79c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff fb49 	bl	8009e38 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f000 808b 	beq.w	800a8c2 <ProcessRadioRxDone+0x42e>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a7ac:	2807      	cmp	r0, #7
 800a7ae:	f000 8083 	beq.w	800a8b8 <ProcessRadioRxDone+0x424>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7b2:	4b9e      	ldr	r3, [pc, #632]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a7ba:	9a07      	ldr	r2, [sp, #28]
 800a7bc:	4b9b      	ldr	r3, [pc, #620]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a7be:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a7c2:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800a7c6:	f7ff faf9 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a7ca:	e6c5      	b.n	800a558 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7cc:	4b97      	ldr	r3, [pc, #604]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a7d4:	f7ff faf2 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a7d8:	e6be      	b.n	800a558 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800a7da:	f002 fc46 	bl	800d06a <LoRaMacClassBIsPingExpected>
 800a7de:	b188      	cbz	r0, 800a804 <ProcessRadioRxDone+0x370>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	f002 fc37 	bl	800d054 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	f002 fc39 	bl	800d05e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a7ec:	4b8f      	ldr	r3, [pc, #572]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a7ee:	2204      	movs	r2, #4
 800a7f0:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a7f4:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 800a7f8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a7fc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800a7fe:	f002 fc4d 	bl	800d09c <LoRaMacClassBSetFPendingBit>
 800a802:	e7b1      	b.n	800a768 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a804:	f002 fc33 	bl	800d06e <LoRaMacClassBIsMulticastExpected>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0ad      	beq.n	800a768 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a80c:	2000      	movs	r0, #0
 800a80e:	f002 fc22 	bl	800d056 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a812:	2000      	movs	r0, #0
 800a814:	f002 fc24 	bl	800d060 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a818:	4b84      	ldr	r3, [pc, #528]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a81a:	2205      	movs	r2, #5
 800a81c:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a820:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 800a824:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a828:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800a82a:	f002 fc37 	bl	800d09c <LoRaMacClassBSetFPendingBit>
 800a82e:	e79b      	b.n	800a768 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a830:	4b7e      	ldr	r3, [pc, #504]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a838:	f7ff fac0 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a83c:	e68c      	b.n	800a558 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a83e:	4618      	mov	r0, r3
 800a840:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800a844:	4a78      	ldr	r2, [pc, #480]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a846:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a84a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 800a84e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800a850:	428a      	cmp	r2, r1
 800a852:	d002      	beq.n	800a85a <ProcessRadioRxDone+0x3c6>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a854:	3301      	adds	r3, #1
 800a856:	b2db      	uxtb	r3, r3
 800a858:	e794      	b.n	800a784 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a85a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800a85e:	4972      	ldr	r1, [pc, #456]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a860:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800a864:	f891 10e9 	ldrb.w	r1, [r1, #233]	@ 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a868:	2900      	cmp	r1, #0
 800a86a:	d0f3      	beq.n	800a854 <ProcessRadioRxDone+0x3c0>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a86c:	4b6e      	ldr	r3, [pc, #440]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a86e:	2130      	movs	r1, #48	@ 0x30
 800a870:	fb01 3000 	mla	r0, r1, r0, r3
 800a874:	f890 60ea 	ldrb.w	r6, [r0, #234]	@ 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a878:	f8d0 110c 	ldr.w	r1, [r0, #268]	@ 0x10c
 800a87c:	6809      	ldr	r1, [r1, #0]
 800a87e:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a880:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a884:	2b02      	cmp	r3, #2
 800a886:	d00b      	beq.n	800a8a0 <ProcessRadioRxDone+0x40c>
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a888:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d10c      	bne.n	800a8aa <ProcessRadioRxDone+0x416>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a890:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a894:	f013 0f60 	tst.w	r3, #96	@ 0x60
 800a898:	d107      	bne.n	800a8aa <ProcessRadioRxDone+0x416>
 800a89a:	4691      	mov	r9, r2
 800a89c:	2501      	movs	r5, #1
 800a89e:	e774      	b.n	800a78a <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a8a0:	4b62      	ldr	r3, [pc, #392]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a8a2:	2103      	movs	r1, #3
 800a8a4:	f883 148f 	strb.w	r1, [r3, #1167]	@ 0x48f
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a8a8:	e7ee      	b.n	800a888 <ProcessRadioRxDone+0x3f4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8aa:	4b60      	ldr	r3, [pc, #384]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a8b2:	f7ff fa83 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a8b6:	e64f      	b.n	800a558 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a8b8:	4b5c      	ldr	r3, [pc, #368]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800a8c0:	e77b      	b.n	800a7ba <ProcessRadioRxDone+0x326>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a8c2:	ab12      	add	r3, sp, #72	@ 0x48
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	9b07      	ldr	r3, [sp, #28]
 800a8c8:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f003 f914 	bl	800dafc <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d14a      	bne.n	800a96e <ProcessRadioRxDone+0x4da>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a8d8:	4b54      	ldr	r3, [pc, #336]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a8da:	2100      	movs	r1, #0
 800a8dc:	f883 1421 	strb.w	r1, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800a8e0:	f883 5422 	strb.w	r5, [r3, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800a8e4:	f8c3 1428 	str.w	r1, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800a8e8:	f883 142c 	strb.w	r1, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a8ec:	9a07      	ldr	r2, [sp, #28]
 800a8ee:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a8f2:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a8f6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 800a8fa:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a8fe:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a902:	f883 1441 	strb.w	r1, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a906:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a90a:	f893 048f 	ldrb.w	r0, [r3, #1167]	@ 0x48f
 800a90e:	2801      	cmp	r0, #1
 800a910:	d93b      	bls.n	800a98a <ProcessRadioRxDone+0x4f6>
            if( multicast == 1 )
 800a912:	2d01      	cmp	r5, #1
 800a914:	d03f      	beq.n	800a996 <ProcessRadioRxDone+0x502>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a916:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 800a91a:	2ca0      	cmp	r4, #160	@ 0xa0
 800a91c:	d040      	beq.n	800a9a0 <ProcessRadioRxDone+0x50c>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a91e:	2300      	movs	r3, #0
 800a920:	4a41      	ldr	r2, [pc, #260]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a922:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a926:	4a41      	ldr	r2, [pc, #260]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a928:	f882 3420 	strb.w	r3, [r2, #1056]	@ 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800a92c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a92e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a932:	b923      	cbnz	r3, 800a93e <ProcessRadioRxDone+0x4aa>
 800a934:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a938:	f013 0f10 	tst.w	r3, #16
 800a93c:	d007      	beq.n	800a94e <ProcessRadioRxDone+0x4ba>
 800a93e:	4b3a      	ldr	r3, [pc, #232]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a940:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a944:	b91b      	cbnz	r3, 800a94e <ProcessRadioRxDone+0x4ba>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800a946:	4b39      	ldr	r3, [pc, #228]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a94e:	4b37      	ldr	r3, [pc, #220]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a950:	f893 2440 	ldrb.w	r2, [r3, #1088]	@ 0x440
 800a954:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 800a958:	f7ff fa99 	bl	8009e8e <RemoveMacCommands>
            switch( fType )
 800a95c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a960:	2b03      	cmp	r3, #3
 800a962:	f200 8099 	bhi.w	800aa98 <ProcessRadioRxDone+0x604>
 800a966:	e8df f003 	tbb	[pc, r3]
 800a96a:	6536      	.short	0x6536
 800a96c:	8777      	.short	0x8777
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a96e:	2802      	cmp	r0, #2
 800a970:	d006      	beq.n	800a980 <ProcessRadioRxDone+0x4ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a972:	4b2e      	ldr	r3, [pc, #184]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a974:	220b      	movs	r2, #11
 800a976:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800a97a:	f7ff fa1f 	bl	8009dbc <PrepareRxDoneAbort>
                return;
 800a97e:	e5eb      	b.n	800a558 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a980:	4b2a      	ldr	r3, [pc, #168]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a982:	220a      	movs	r2, #10
 800a984:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800a988:	e7f7      	b.n	800a97a <ProcessRadioRxDone+0x4e6>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800a98a:	4b27      	ldr	r3, [pc, #156]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a98c:	6299      	str	r1, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
 800a994:	e7bd      	b.n	800a912 <ProcessRadioRxDone+0x47e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a996:	4b25      	ldr	r3, [pc, #148]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a998:	2202      	movs	r2, #2
 800a99a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800a99e:	e7c5      	b.n	800a92c <ProcessRadioRxDone+0x498>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800a9a0:	4b21      	ldr	r3, [pc, #132]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a9a8:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800a9ac:	b913      	cbnz	r3, 800a9b4 <ProcessRadioRxDone+0x520>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800a9ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a9b2:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a9b4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800a9bc:	4290      	cmp	r0, r2
 800a9be:	d9b5      	bls.n	800a92c <ProcessRadioRxDone+0x498>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a9c0:	4b19      	ldr	r3, [pc, #100]	@ (800aa28 <ProcessRadioRxDone+0x594>)
 800a9c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800a9c6:	4b19      	ldr	r3, [pc, #100]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a9c8:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800a9cc:	4a18      	ldr	r2, [pc, #96]	@ (800aa30 <ProcessRadioRxDone+0x59c>)
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
 800a9d4:	e7aa      	b.n	800a92c <ProcessRadioRxDone+0x498>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a9d6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 800a9da:	4c14      	ldr	r4, [pc, #80]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800a9dc:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	f002 020f 	and.w	r2, r2, #15
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	a816      	add	r0, sp, #88	@ 0x58
 800a9ec:	f7ff fa5e 	bl	8009eac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a9f0:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800a9f4:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a9f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a9fa:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a9fe:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 800aa02:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800aa06:	2301      	movs	r3, #1
 800aa08:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800aa0c:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800aa10:	2be0      	cmp	r3, #224	@ 0xe0
 800aa12:	d048      	beq.n	800aaa6 <ProcessRadioRxDone+0x612>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800aa14:	4a05      	ldr	r2, [pc, #20]	@ (800aa2c <ProcessRadioRxDone+0x598>)
 800aa16:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800aa1a:	f043 0302 	orr.w	r3, r3, #2
 800aa1e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800aa22:	e068      	b.n	800aaf6 <ProcessRadioRxDone+0x662>
 800aa24:	20000ca4 	.word	0x20000ca4
 800aa28:	20008000 	.word	0x20008000
 800aa2c:	20000a6c 	.word	0x20000a6c
 800aa30:	200009c4 	.word	0x200009c4
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800aa34:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 800aa38:	4c43      	ldr	r4, [pc, #268]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800aa3a:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	463b      	mov	r3, r7
 800aa42:	f002 020f 	and.w	r2, r2, #15
 800aa46:	2100      	movs	r1, #0
 800aa48:	a816      	add	r0, sp, #88	@ 0x58
 800aa4a:	f7ff fa2f 	bl	8009eac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aa4e:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800aa52:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 800aa56:	e7d9      	b.n	800aa0c <ProcessRadioRxDone+0x578>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800aa58:	4c3b      	ldr	r4, [pc, #236]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800aa5a:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	463b      	mov	r3, r7
 800aa62:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 800aa66:	2100      	movs	r1, #0
 800aa68:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800aa6a:	f7ff fa1f 	bl	8009eac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aa6e:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800aa72:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 800aa76:	e7c9      	b.n	800aa0c <ProcessRadioRxDone+0x578>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aa78:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 800aa7c:	4b32      	ldr	r3, [pc, #200]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800aa7e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800aa82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa84:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800aa88:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 800aa8c:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800aa96:	e7b9      	b.n	800aa0c <ProcessRadioRxDone+0x578>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa98:	4b2b      	ldr	r3, [pc, #172]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800aaa0:	f7ff f98c 	bl	8009dbc <PrepareRxDoneAbort>
                    break;
 800aaa4:	e7b2      	b.n	800aa0c <ProcessRadioRxDone+0x578>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800aaa6:	4a29      	ldr	r2, [pc, #164]	@ (800ab4c <ProcessRadioRxDone+0x6b8>)
 800aaa8:	f892 211f 	ldrb.w	r2, [r2, #287]	@ 0x11f
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	d1b1      	bne.n	800aa14 <ProcessRadioRxDone+0x580>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aab0:	4a25      	ldr	r2, [pc, #148]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800aab2:	f882 3423 	strb.w	r3, [r2, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800aabc:	f882 342c 	strb.w	r3, [r2, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800aac0:	f882 342d 	strb.w	r3, [r2, #1069]	@ 0x42d
 800aac4:	e7a6      	b.n	800aa14 <ProcessRadioRxDone+0x580>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800aac6:	1e6a      	subs	r2, r5, #1
 800aac8:	4c21      	ldr	r4, [pc, #132]	@ (800ab50 <ProcessRadioRxDone+0x6bc>)
 800aaca:	b292      	uxth	r2, r2
 800aacc:	1c71      	adds	r1, r6, #1
 800aace:	4620      	mov	r0, r4
 800aad0:	f006 fb7f 	bl	80111d2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800aad4:	2203      	movs	r2, #3
 800aad6:	f884 21e8 	strb.w	r2, [r4, #488]	@ 0x1e8
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800aada:	2200      	movs	r2, #0
 800aadc:	f884 21e9 	strb.w	r2, [r4, #489]	@ 0x1e9
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800aae0:	f8c4 41f0 	str.w	r4, [r4, #496]	@ 0x1f0
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800aae4:	3d01      	subs	r5, #1
 800aae6:	f884 51f4 	strb.w	r5, [r4, #500]	@ 0x1f4
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800aaea:	f894 2259 	ldrb.w	r2, [r4, #601]	@ 0x259
 800aaee:	f042 0202 	orr.w	r2, r2, #2
 800aaf2:	f884 2259 	strb.w	r2, [r4, #601]	@ 0x259
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800aaf6:	4b14      	ldr	r3, [pc, #80]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800aaf8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d915      	bls.n	800ab2c <ProcessRadioRxDone+0x698>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800ab00:	4b11      	ldr	r3, [pc, #68]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800ab02:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d006      	beq.n	800ab18 <ProcessRadioRxDone+0x684>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ab0a:	4a0f      	ldr	r2, [pc, #60]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800ab0c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ab10:	f043 0310 	orr.w	r3, r3, #16
 800ab14:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 800ab18:	f7fe ff3e 	bl	8009998 <UpdateRxSlotIdleState>
 800ab1c:	e51c      	b.n	800a558 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800ab26:	f7ff f949 	bl	8009dbc <PrepareRxDoneAbort>
            break;
 800ab2a:	e7e4      	b.n	800aaf6 <ProcessRadioRxDone+0x662>
        if( MacCtx.NodeAckRequested == true )
 800ab2c:	4b06      	ldr	r3, [pc, #24]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800ab2e:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0e4      	beq.n	800ab00 <ProcessRadioRxDone+0x66c>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800ab36:	4b04      	ldr	r3, [pc, #16]	@ (800ab48 <ProcessRadioRxDone+0x6b4>)
 800ab38:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0df      	beq.n	800ab00 <ProcessRadioRxDone+0x66c>
                OnRetransmitTimeoutTimerEvent( NULL );
 800ab40:	2000      	movs	r0, #0
 800ab42:	f7ff f929 	bl	8009d98 <OnRetransmitTimeoutTimerEvent>
 800ab46:	e7db      	b.n	800ab00 <ProcessRadioRxDone+0x66c>
 800ab48:	20000a6c 	.word	0x20000a6c
 800ab4c:	20008000 	.word	0x20008000
 800ab50:	20000ca4 	.word	0x20000ca4

0800ab54 <ProcessRadioTxTimeout>:
{
 800ab54:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ab56:	4b0f      	ldr	r3, [pc, #60]	@ (800ab94 <ProcessRadioTxTimeout+0x40>)
 800ab58:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d002      	beq.n	800ab66 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800ab60:	4b0d      	ldr	r3, [pc, #52]	@ (800ab98 <ProcessRadioTxTimeout+0x44>)
 800ab62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab64:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800ab66:	f7fe ff17 	bl	8009998 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ab6a:	4c0c      	ldr	r4, [pc, #48]	@ (800ab9c <ProcessRadioTxTimeout+0x48>)
 800ab6c:	2002      	movs	r0, #2
 800ab6e:	f884 0441 	strb.w	r0, [r4, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ab72:	f002 fcd1 	bl	800d518 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ab76:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 800ab7a:	b113      	cbz	r3, 800ab82 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ab82:	4a06      	ldr	r2, [pc, #24]	@ (800ab9c <ProcessRadioTxTimeout+0x48>)
 800ab84:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ab88:	f043 0310 	orr.w	r3, r3, #16
 800ab8c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	bf00      	nop
 800ab94:	20008000 	.word	0x20008000
 800ab98:	08016f38 	.word	0x08016f38
 800ab9c:	20000a6c 	.word	0x20000a6c

0800aba0 <CheckForClassBCollision>:
{
 800aba0:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800aba2:	f002 fa60 	bl	800d066 <LoRaMacClassBIsBeaconExpected>
 800aba6:	b978      	cbnz	r0, 800abc8 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800aba8:	4b09      	ldr	r3, [pc, #36]	@ (800abd0 <CheckForClassBCollision+0x30>)
 800abaa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d001      	beq.n	800abb6 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800abb2:	2000      	movs	r0, #0
}
 800abb4:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800abb6:	f002 fa58 	bl	800d06a <LoRaMacClassBIsPingExpected>
 800abba:	b938      	cbnz	r0, 800abcc <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800abbc:	f002 fa57 	bl	800d06e <LoRaMacClassBIsMulticastExpected>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d0f7      	beq.n	800abb4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800abc4:	200f      	movs	r0, #15
 800abc6:	e7f5      	b.n	800abb4 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800abc8:	200e      	movs	r0, #14
 800abca:	e7f3      	b.n	800abb4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800abcc:	200f      	movs	r0, #15
 800abce:	e7f1      	b.n	800abb4 <CheckForClassBCollision+0x14>
 800abd0:	20008000 	.word	0x20008000

0800abd4 <HandleRadioRxErrorTimeout>:
{
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	4605      	mov	r5, r0
 800abd8:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800abda:	4b34      	ldr	r3, [pc, #208]	@ (800acac <HandleRadioRxErrorTimeout+0xd8>)
 800abdc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d002      	beq.n	800abea <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800abe4:	4b32      	ldr	r3, [pc, #200]	@ (800acb0 <HandleRadioRxErrorTimeout+0xdc>)
 800abe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe8:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800abea:	f002 fa3c 	bl	800d066 <LoRaMacClassBIsBeaconExpected>
 800abee:	4606      	mov	r6, r0
 800abf0:	bb48      	cbnz	r0, 800ac46 <HandleRadioRxErrorTimeout+0x72>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800abf2:	4b2e      	ldr	r3, [pc, #184]	@ (800acac <HandleRadioRxErrorTimeout+0xd8>)
 800abf4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d02b      	beq.n	800ac54 <HandleRadioRxErrorTimeout+0x80>
    if( classBRx == false )
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	d151      	bne.n	800aca4 <HandleRadioRxErrorTimeout+0xd0>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ac00:	4b2c      	ldr	r3, [pc, #176]	@ (800acb4 <HandleRadioRxErrorTimeout+0xe0>)
 800ac02:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d13b      	bne.n	800ac82 <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 800ac0a:	4b2a      	ldr	r3, [pc, #168]	@ (800acb4 <HandleRadioRxErrorTimeout+0xe0>)
 800ac0c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ac10:	b113      	cbz	r3, 800ac18 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ac12:	4b28      	ldr	r3, [pc, #160]	@ (800acb4 <HandleRadioRxErrorTimeout+0xe0>)
 800ac14:	f883 5441 	strb.w	r5, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f002 fc7d 	bl	800d518 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ac1e:	4b23      	ldr	r3, [pc, #140]	@ (800acac <HandleRadioRxErrorTimeout+0xd8>)
 800ac20:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ac22:	f009 f8db 	bl	8013ddc <UTIL_TIMER_GetElapsedTime>
 800ac26:	4b23      	ldr	r3, [pc, #140]	@ (800acb4 <HandleRadioRxErrorTimeout+0xe0>)
 800ac28:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800ac2c:	4298      	cmp	r0, r3
 800ac2e:	d339      	bcc.n	800aca4 <HandleRadioRxErrorTimeout+0xd0>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ac30:	4c21      	ldr	r4, [pc, #132]	@ (800acb8 <HandleRadioRxErrorTimeout+0xe4>)
 800ac32:	4620      	mov	r0, r4
 800ac34:	f009 f908 	bl	8013e48 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ac38:	f894 30f9 	ldrb.w	r3, [r4, #249]	@ 0xf9
 800ac3c:	f043 0310 	orr.w	r3, r3, #16
 800ac40:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 800ac44:	e02e      	b.n	800aca4 <HandleRadioRxErrorTimeout+0xd0>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ac46:	2002      	movs	r0, #2
 800ac48:	f002 fa03 	bl	800d052 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f002 fa05 	bl	800d05c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ac52:	e7ce      	b.n	800abf2 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ac54:	f002 fa09 	bl	800d06a <LoRaMacClassBIsPingExpected>
 800ac58:	4607      	mov	r7, r0
 800ac5a:	b950      	cbnz	r0, 800ac72 <HandleRadioRxErrorTimeout+0x9e>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ac5c:	f002 fa07 	bl	800d06e <LoRaMacClassBIsMulticastExpected>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d0cb      	beq.n	800abfc <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ac64:	2000      	movs	r0, #0
 800ac66:	f002 f9f6 	bl	800d056 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f002 f9f8 	bl	800d060 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800ac70:	e018      	b.n	800aca4 <HandleRadioRxErrorTimeout+0xd0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ac72:	2000      	movs	r0, #0
 800ac74:	f002 f9ee 	bl	800d054 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ac78:	2000      	movs	r0, #0
 800ac7a:	f002 f9f0 	bl	800d05e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ac7e:	463e      	mov	r6, r7
 800ac80:	e7ec      	b.n	800ac5c <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 800ac82:	4b0c      	ldr	r3, [pc, #48]	@ (800acb4 <HandleRadioRxErrorTimeout+0xe0>)
 800ac84:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ac88:	b113      	cbz	r3, 800ac90 <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ac8a:	4b0a      	ldr	r3, [pc, #40]	@ (800acb4 <HandleRadioRxErrorTimeout+0xe0>)
 800ac8c:	f883 4441 	strb.w	r4, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ac90:	4620      	mov	r0, r4
 800ac92:	f002 fc41 	bl	800d518 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800ac96:	4a07      	ldr	r2, [pc, #28]	@ (800acb4 <HandleRadioRxErrorTimeout+0xe0>)
 800ac98:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ac9c:	f043 0310 	orr.w	r3, r3, #16
 800aca0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 800aca4:	f7fe fe78 	bl	8009998 <UpdateRxSlotIdleState>
}
 800aca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acaa:	bf00      	nop
 800acac:	20008000 	.word	0x20008000
 800acb0:	08016f38 	.word	0x08016f38
 800acb4:	20000a6c 	.word	0x20000a6c
 800acb8:	20000e04 	.word	0x20000e04

0800acbc <ProcessRadioRxError>:
{
 800acbc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800acbe:	2106      	movs	r1, #6
 800acc0:	2005      	movs	r0, #5
 800acc2:	f7ff ff87 	bl	800abd4 <HandleRadioRxErrorTimeout>
}
 800acc6:	bd08      	pop	{r3, pc}

0800acc8 <ProcessRadioRxTimeout>:
{
 800acc8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800acca:	2104      	movs	r1, #4
 800accc:	2003      	movs	r0, #3
 800acce:	f7ff ff81 	bl	800abd4 <HandleRadioRxErrorTimeout>
}
 800acd2:	bd08      	pop	{r3, pc}

0800acd4 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acd4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800acd8:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800acda:	4a14      	ldr	r2, [pc, #80]	@ (800ad2c <LoRaMacHandleIrqEvents+0x58>)
 800acdc:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800acde:	2000      	movs	r0, #0
 800ace0:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ace2:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800ace6:	b303      	cbz	r3, 800ad2a <LoRaMacHandleIrqEvents+0x56>
{
 800ace8:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800acea:	b2dc      	uxtb	r4, r3
 800acec:	f013 0f20 	tst.w	r3, #32
 800acf0:	d10c      	bne.n	800ad0c <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800acf2:	f014 0f10 	tst.w	r4, #16
 800acf6:	d10c      	bne.n	800ad12 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800acf8:	f014 0f08 	tst.w	r4, #8
 800acfc:	d10c      	bne.n	800ad18 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800acfe:	f014 0f04 	tst.w	r4, #4
 800ad02:	d10c      	bne.n	800ad1e <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800ad04:	f014 0f02 	tst.w	r4, #2
 800ad08:	d10c      	bne.n	800ad24 <LoRaMacHandleIrqEvents+0x50>
}
 800ad0a:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800ad0c:	f7fe ffc2 	bl	8009c94 <ProcessRadioTxDone>
 800ad10:	e7ef      	b.n	800acf2 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800ad12:	f7ff fbbf 	bl	800a494 <ProcessRadioRxDone>
 800ad16:	e7ef      	b.n	800acf8 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800ad18:	f7ff ff1c 	bl	800ab54 <ProcessRadioTxTimeout>
 800ad1c:	e7ef      	b.n	800acfe <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800ad1e:	f7ff ffcd 	bl	800acbc <ProcessRadioRxError>
 800ad22:	e7ef      	b.n	800ad04 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800ad24:	f7ff ffd0 	bl	800acc8 <ProcessRadioRxTimeout>
}
 800ad28:	e7ef      	b.n	800ad0a <LoRaMacHandleIrqEvents+0x36>
 800ad2a:	4770      	bx	lr
 800ad2c:	200009d8 	.word	0x200009d8

0800ad30 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800ad30:	b909      	cbnz	r1, 800ad36 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800ad32:	2000      	movs	r0, #0
}
 800ad34:	4770      	bx	lr
{
 800ad36:	b510      	push	{r4, lr}
 800ad38:	4604      	mov	r4, r0
 800ad3a:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ad3c:	f009 f84e 	bl	8013ddc <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800ad40:	42a0      	cmp	r0, r4
 800ad42:	d801      	bhi.n	800ad48 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800ad44:	2000      	movs	r0, #0
}
 800ad46:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800ad48:	4b02      	ldr	r3, [pc, #8]	@ (800ad54 <LoRaMacHandleResponseTimeout+0x24>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800ad50:	2001      	movs	r0, #1
 800ad52:	e7f8      	b.n	800ad46 <LoRaMacHandleResponseTimeout+0x16>
 800ad54:	20008000 	.word	0x20008000

0800ad58 <LoRaMacHandleMlmeRequest>:
{
 800ad58:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ad5a:	4b14      	ldr	r3, [pc, #80]	@ (800adac <LoRaMacHandleMlmeRequest+0x54>)
 800ad5c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ad60:	f013 0f04 	tst.w	r3, #4
 800ad64:	d100      	bne.n	800ad68 <LoRaMacHandleMlmeRequest+0x10>
}
 800ad66:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ad68:	2001      	movs	r0, #1
 800ad6a:	f002 fbf3 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 800ad6e:	b178      	cbz	r0, 800ad90 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ad70:	2001      	movs	r0, #1
 800ad72:	f002 fbb9 	bl	800d4e8 <LoRaMacConfirmQueueGetStatus>
 800ad76:	b918      	cbnz	r0, 800ad80 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800ad78:	4b0c      	ldr	r3, [pc, #48]	@ (800adac <LoRaMacHandleMlmeRequest+0x54>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ad80:	4a0a      	ldr	r2, [pc, #40]	@ (800adac <LoRaMacHandleMlmeRequest+0x54>)
 800ad82:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800ad86:	f023 0302 	bic.w	r3, r3, #2
 800ad8a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
 800ad8e:	e7ea      	b.n	800ad66 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800ad90:	2006      	movs	r0, #6
 800ad92:	f002 fbdf 	bl	800d554 <LoRaMacConfirmQueueIsCmdActive>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d0e5      	beq.n	800ad66 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ad9a:	4a04      	ldr	r2, [pc, #16]	@ (800adac <LoRaMacHandleMlmeRequest+0x54>)
 800ad9c:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800ada0:	f023 0302 	bic.w	r3, r3, #2
 800ada4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800ada8:	e7dd      	b.n	800ad66 <LoRaMacHandleMlmeRequest+0xe>
 800adaa:	bf00      	nop
 800adac:	20000a6c 	.word	0x20000a6c

0800adb0 <SerializeTxFrame>:
{
 800adb0:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800adb2:	4b0f      	ldr	r3, [pc, #60]	@ (800adf0 <SerializeTxFrame+0x40>)
 800adb4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800adb8:	b11b      	cbz	r3, 800adc2 <SerializeTxFrame+0x12>
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d00a      	beq.n	800add4 <SerializeTxFrame+0x24>
 800adbe:	2003      	movs	r0, #3
}
 800adc0:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800adc2:	480c      	ldr	r0, [pc, #48]	@ (800adf4 <SerializeTxFrame+0x44>)
 800adc4:	f003 f873 	bl	800deae <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800adc8:	b968      	cbnz	r0, 800ade6 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800adca:	4b09      	ldr	r3, [pc, #36]	@ (800adf0 <SerializeTxFrame+0x40>)
 800adcc:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800add0:	801a      	strh	r2, [r3, #0]
            break;
 800add2:	e7f5      	b.n	800adc0 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800add4:	4807      	ldr	r0, [pc, #28]	@ (800adf4 <SerializeTxFrame+0x44>)
 800add6:	f003 f8a0 	bl	800df1a <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800adda:	b930      	cbnz	r0, 800adea <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <SerializeTxFrame+0x40>)
 800adde:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800ade2:	801a      	strh	r2, [r3, #0]
            break;
 800ade4:	e7ec      	b.n	800adc0 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ade6:	2011      	movs	r0, #17
 800ade8:	e7ea      	b.n	800adc0 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800adea:	2011      	movs	r0, #17
 800adec:	e7e8      	b.n	800adc0 <SerializeTxFrame+0x10>
 800adee:	bf00      	nop
 800adf0:	20000a6c 	.word	0x20000a6c
 800adf4:	20000b74 	.word	0x20000b74

0800adf8 <ComputeRxWindowParameters>:
{
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800adfc:	4c1e      	ldr	r4, [pc, #120]	@ (800ae78 <ComputeRxWindowParameters+0x80>)
 800adfe:	f894 6048 	ldrb.w	r6, [r4, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ae02:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 800ae06:	f994 2039 	ldrsb.w	r2, [r4, #57]	@ 0x39
 800ae0a:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f003 fa2f 	bl	800e272 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ae14:	4d19      	ldr	r5, [pc, #100]	@ (800ae7c <ComputeRxWindowParameters+0x84>)
 800ae16:	9500      	str	r5, [sp, #0]
 800ae18:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ae1a:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800ae1e:	b241      	sxtb	r1, r0
 800ae20:	4630      	mov	r0, r6
 800ae22:	f003 f973 	bl	800e10c <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ae26:	f105 0318 	add.w	r3, r5, #24
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ae2e:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800ae32:	f994 1070 	ldrsb.w	r1, [r4, #112]	@ 0x70
 800ae36:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ae3a:	f003 f967 	bl	800e10c <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ae3e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ae40:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800ae44:	68e8      	ldr	r0, [r5, #12]
 800ae46:	4402      	add	r2, r0
 800ae48:	f845 2c08 	str.w	r2, [r5, #-8]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ae4c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800ae4e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800ae50:	440a      	add	r2, r1
 800ae52:	f845 2c04 	str.w	r2, [r5, #-4]
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800ae56:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d009      	beq.n	800ae72 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ae5e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800ae60:	4418      	add	r0, r3
 800ae62:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800ae66:	f8c3 03b0 	str.w	r0, [r3, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ae6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae6c:	4411      	add	r1, r2
 800ae6e:	f8c3 13b4 	str.w	r1, [r3, #948]	@ 0x3b4
}
 800ae72:	b002      	add	sp, #8
 800ae74:	bd70      	pop	{r4, r5, r6, pc}
 800ae76:	bf00      	nop
 800ae78:	20008000 	.word	0x20008000
 800ae7c:	20000e24 	.word	0x20000e24

0800ae80 <VerifyTxFrame>:
{
 800ae80:	b510      	push	{r4, lr}
 800ae82:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ae88:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <VerifyTxFrame+0x40>)
 800ae8a:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 800ae8e:	b914      	cbnz	r4, 800ae96 <VerifyTxFrame+0x16>
}
 800ae90:	4620      	mov	r0, r4
 800ae92:	b002      	add	sp, #8
 800ae94:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ae96:	a801      	add	r0, sp, #4
 800ae98:	f002 fa22 	bl	800d2e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	b968      	cbnz	r0, 800aebc <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800aea0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aea4:	4b06      	ldr	r3, [pc, #24]	@ (800aec0 <VerifyTxFrame+0x40>)
 800aea6:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800aeaa:	4b06      	ldr	r3, [pc, #24]	@ (800aec4 <VerifyTxFrame+0x44>)
 800aeac:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 800aeb0:	f7fe fee2 	bl	8009c78 <ValidatePayloadLength>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d1eb      	bne.n	800ae90 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800aeb8:	2408      	movs	r4, #8
 800aeba:	e7e9      	b.n	800ae90 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aebc:	2413      	movs	r4, #19
 800aebe:	e7e7      	b.n	800ae90 <VerifyTxFrame+0x10>
 800aec0:	20008000 	.word	0x20008000
 800aec4:	20000a6c 	.word	0x20000a6c

0800aec8 <SecureFrame>:
{
 800aec8:	b530      	push	{r4, r5, lr}
 800aeca:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800aed0:	4b18      	ldr	r3, [pc, #96]	@ (800af34 <SecureFrame+0x6c>)
 800aed2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800aed6:	b133      	cbz	r3, 800aee6 <SecureFrame+0x1e>
 800aed8:	4605      	mov	r5, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	2b04      	cmp	r3, #4
 800aede:	d00b      	beq.n	800aef8 <SecureFrame+0x30>
 800aee0:	2003      	movs	r0, #3
}
 800aee2:	b003      	add	sp, #12
 800aee4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800aee6:	4814      	ldr	r0, [pc, #80]	@ (800af38 <SecureFrame+0x70>)
 800aee8:	f002 fd9e 	bl	800da28 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800aeec:	b9d8      	cbnz	r0, 800af26 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800aeee:	4b11      	ldr	r3, [pc, #68]	@ (800af34 <SecureFrame+0x6c>)
 800aef0:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800aef4:	801a      	strh	r2, [r3, #0]
            break;
 800aef6:	e7f4      	b.n	800aee2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800aef8:	a801      	add	r0, sp, #4
 800aefa:	f002 fd49 	bl	800d990 <LoRaMacCryptoGetFCntUp>
 800aefe:	b9a0      	cbnz	r0, 800af2a <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800af00:	4b0c      	ldr	r3, [pc, #48]	@ (800af34 <SecureFrame+0x6c>)
 800af02:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800af06:	b113      	cbz	r3, 800af0e <SecureFrame+0x46>
                fCntUp -= 1;
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800af0e:	4b0a      	ldr	r3, [pc, #40]	@ (800af38 <SecureFrame+0x70>)
 800af10:	4622      	mov	r2, r4
 800af12:	4629      	mov	r1, r5
 800af14:	9801      	ldr	r0, [sp, #4]
 800af16:	f002 fdad 	bl	800da74 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800af1a:	b940      	cbnz	r0, 800af2e <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800af1c:	4b05      	ldr	r3, [pc, #20]	@ (800af34 <SecureFrame+0x6c>)
 800af1e:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800af22:	801a      	strh	r2, [r3, #0]
            break;
 800af24:	e7dd      	b.n	800aee2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800af26:	2011      	movs	r0, #17
 800af28:	e7db      	b.n	800aee2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800af2a:	2012      	movs	r0, #18
 800af2c:	e7d9      	b.n	800aee2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800af2e:	2011      	movs	r0, #17
 800af30:	e7d7      	b.n	800aee2 <SecureFrame+0x1a>
 800af32:	bf00      	nop
 800af34:	20000a6c 	.word	0x20000a6c
 800af38:	20000b74 	.word	0x20000b74

0800af3c <SendFrameOnChannel>:
{
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800af48:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800af4c:	4d36      	ldr	r5, [pc, #216]	@ (800b028 <SendFrameOnChannel+0xec>)
 800af4e:	f995 3039 	ldrsb.w	r3, [r5, #57]	@ 0x39
 800af52:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800af56:	f995 3038 	ldrsb.w	r3, [r5, #56]	@ 0x38
 800af5a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800af5e:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800af62:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800af64:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800af68:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800af6a:	4c30      	ldr	r4, [pc, #192]	@ (800b02c <SendFrameOnChannel+0xf0>)
 800af6c:	8823      	ldrh	r3, [r4, #0]
 800af6e:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800af72:	f895 3130 	ldrb.w	r3, [r5, #304]	@ 0x130
 800af76:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800af7a:	f204 431c 	addw	r3, r4, #1052	@ 0x41c
 800af7e:	f10d 0207 	add.w	r2, sp, #7
 800af82:	a902      	add	r1, sp, #8
 800af84:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 800af88:	f003 f8e3 	bl	800e152 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800af92:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 800af96:	f884 3442 	strb.w	r3, [r4, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800af9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af9e:	f884 3443 	strb.w	r3, [r4, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800afa2:	f8c4 6450 	str.w	r6, [r4, #1104]	@ 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800afa6:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
 800afaa:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800afae:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800afb2:	f002 f85e 	bl	800d072 <LoRaMacClassBIsBeaconModeActive>
 800afb6:	bb60      	cbnz	r0, 800b012 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800afb8:	4b1b      	ldr	r3, [pc, #108]	@ (800b028 <SendFrameOnChannel+0xec>)
 800afba:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d02f      	beq.n	800b022 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800afc2:	f002 f859 	bl	800d078 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800afc6:	4b18      	ldr	r3, [pc, #96]	@ (800b028 <SendFrameOnChannel+0xec>)
 800afc8:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800afcc:	4b17      	ldr	r3, [pc, #92]	@ (800b02c <SendFrameOnChannel+0xf0>)
 800afce:	f893 141b 	ldrb.w	r1, [r3, #1051]	@ 0x41b
 800afd2:	b2c0      	uxtb	r0, r0
 800afd4:	f7ff ff78 	bl	800aec8 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800afd8:	4604      	mov	r4, r0
 800afda:	b9b8      	cbnz	r0, 800b00c <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800afdc:	4813      	ldr	r0, [pc, #76]	@ (800b02c <SendFrameOnChannel+0xf0>)
 800afde:	f8d0 3340 	ldr.w	r3, [r0, #832]	@ 0x340
 800afe2:	f043 0302 	orr.w	r3, r3, #2
 800afe6:	f8c0 3340 	str.w	r3, [r0, #832]	@ 0x340
    MacCtx.ChannelsNbTransCounter++;
 800afea:	f890 3418 	ldrb.w	r3, [r0, #1048]	@ 0x418
 800afee:	3301      	adds	r3, #1
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	f880 3418 	strb.w	r3, [r0, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800aff6:	f880 3445 	strb.w	r3, [r0, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	f8c0 3498 	str.w	r3, [r0, #1176]	@ 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b000:	4b0b      	ldr	r3, [pc, #44]	@ (800b030 <SendFrameOnChannel+0xf4>)
 800b002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b004:	f830 1b02 	ldrh.w	r1, [r0], #2
 800b008:	b2c9      	uxtb	r1, r1
 800b00a:	4798      	blx	r3
}
 800b00c:	4620      	mov	r0, r4
 800b00e:	b006      	add	sp, #24
 800b010:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b012:	f8d4 041c 	ldr.w	r0, [r4, #1052]	@ 0x41c
 800b016:	f002 f83e 	bl	800d096 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d0cc      	beq.n	800afb8 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b01e:	2410      	movs	r4, #16
 800b020:	e7f4      	b.n	800b00c <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800b022:	f002 f83a 	bl	800d09a <LoRaMacClassBStopRxSlots>
 800b026:	e7cc      	b.n	800afc2 <SendFrameOnChannel+0x86>
 800b028:	20008000 	.word	0x20008000
 800b02c:	20000a6c 	.word	0x20000a6c
 800b030:	08016f38 	.word	0x08016f38

0800b034 <ScheduleTx>:
{
 800b034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b038:	b08c      	sub	sp, #48	@ 0x30
 800b03a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800b03c:	f7ff fdb0 	bl	800aba0 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800b040:	4604      	mov	r4, r0
 800b042:	b118      	cbz	r0, 800b04c <ScheduleTx+0x18>
}
 800b044:	4620      	mov	r0, r4
 800b046:	b00c      	add	sp, #48	@ 0x30
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800b04c:	f7fe fd08 	bl	8009a60 <CalculateBackOff>
    status = SerializeTxFrame( );
 800b050:	f7ff feae 	bl	800adb0 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800b054:	4604      	mov	r4, r0
 800b056:	2800      	cmp	r0, #0
 800b058:	d1f4      	bne.n	800b044 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800b05a:	4e35      	ldr	r6, [pc, #212]	@ (800b130 <ScheduleTx+0xfc>)
 800b05c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b05e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b060:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 800b064:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800b068:	f896 311c 	ldrb.w	r3, [r6, #284]	@ 0x11c
 800b06c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b070:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800b074:	4640      	mov	r0, r8
 800b076:	f008 fda9 	bl	8013bcc <SysTimeGetMcuTime>
 800b07a:	af02      	add	r7, sp, #8
 800b07c:	f8d6 3128 	ldr.w	r3, [r6, #296]	@ 0x128
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	f8d6 3124 	ldr.w	r3, [r6, #292]	@ 0x124
 800b086:	e898 0006 	ldmia.w	r8, {r1, r2}
 800b08a:	4638      	mov	r0, r7
 800b08c:	f008 fd3b 	bl	8013b06 <SysTimeSub>
 800b090:	ab07      	add	r3, sp, #28
 800b092:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b096:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800b09a:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800b09c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    nextChan.Joined = true;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800b0aa:	4b22      	ldr	r3, [pc, #136]	@ (800b134 <ScheduleTx+0x100>)
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b0b2:	f896 3130 	ldrb.w	r3, [r6, #304]	@ 0x130
 800b0b6:	b92b      	cbnz	r3, 800b0c4 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
        nextChan.Joined = false;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800b0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800b138 <ScheduleTx+0x104>)
 800b0c6:	481a      	ldr	r0, [pc, #104]	@ (800b130 <ScheduleTx+0xfc>)
 800b0c8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800b0cc:	9200      	str	r2, [sp, #0]
 800b0ce:	f1a3 0279 	sub.w	r2, r3, #121	@ 0x79
 800b0d2:	a904      	add	r1, sp, #16
 800b0d4:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 800b0d8:	f003 f8b6 	bl	800e248 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800b0dc:	b1c0      	cbz	r0, 800b110 <ScheduleTx+0xdc>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800b0de:	280b      	cmp	r0, #11
 800b0e0:	d124      	bne.n	800b12c <ScheduleTx+0xf8>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800b0e2:	4a14      	ldr	r2, [pc, #80]	@ (800b134 <ScheduleTx+0x100>)
 800b0e4:	f8d2 1494 	ldr.w	r1, [r2, #1172]	@ 0x494
 800b0e8:	b191      	cbz	r1, 800b110 <ScheduleTx+0xdc>
                if( allowDelayedTx == true )
 800b0ea:	b90d      	cbnz	r5, 800b0f0 <ScheduleTx+0xbc>
                return status;
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	e7a9      	b.n	800b044 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b0f0:	4615      	mov	r5, r2
 800b0f2:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 800b0f6:	f042 0220 	orr.w	r2, r2, #32
 800b0fa:	f8c5 2340 	str.w	r2, [r5, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800b0fe:	f505 755a 	add.w	r5, r5, #872	@ 0x368
 800b102:	4628      	mov	r0, r5
 800b104:	f008 ff40 	bl	8013f88 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800b108:	4628      	mov	r0, r5
 800b10a:	f008 fef7 	bl	8013efc <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800b10e:	e799      	b.n	800b044 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800b110:	f7ff fe72 	bl	800adf8 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800b114:	f7ff feb4 	bl	800ae80 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800b118:	4604      	mov	r4, r0
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d192      	bne.n	800b044 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800b11e:	4b05      	ldr	r3, [pc, #20]	@ (800b134 <ScheduleTx+0x100>)
 800b120:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 800b124:	f7ff ff0a 	bl	800af3c <SendFrameOnChannel>
 800b128:	4604      	mov	r4, r0
 800b12a:	e78b      	b.n	800b044 <ScheduleTx+0x10>
            return status;
 800b12c:	4604      	mov	r4, r0
 800b12e:	e789      	b.n	800b044 <ScheduleTx+0x10>
 800b130:	20008000 	.word	0x20008000
 800b134:	20000a6c 	.word	0x20000a6c
 800b138:	20000f00 	.word	0x20000f00

0800b13c <OnTxDelayedTimerEvent>:
{
 800b13c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800b13e:	4c16      	ldr	r4, [pc, #88]	@ (800b198 <OnTxDelayedTimerEvent+0x5c>)
 800b140:	4620      	mov	r0, r4
 800b142:	f008 fe81 	bl	8013e48 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b146:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800b14a:	f023 0320 	bic.w	r3, r3, #32
 800b14e:	f844 3c28 	str.w	r3, [r4, #-40]
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b152:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 800b156:	4b11      	ldr	r3, [pc, #68]	@ (800b19c <OnTxDelayedTimerEvent+0x60>)
 800b158:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800b15c:	f7ff fde8 	bl	800ad30 <LoRaMacHandleResponseTimeout>
 800b160:	b100      	cbz	r0, 800b164 <OnTxDelayedTimerEvent+0x28>
}
 800b162:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800b164:	2001      	movs	r0, #1
 800b166:	f7ff ff65 	bl	800b034 <ScheduleTx>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d0f9      	beq.n	800b162 <OnTxDelayedTimerEvent+0x26>
 800b16e:	280b      	cmp	r0, #11
 800b170:	d0f7      	beq.n	800b162 <OnTxDelayedTimerEvent+0x26>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b172:	4b0a      	ldr	r3, [pc, #40]	@ (800b19c <OnTxDelayedTimerEvent+0x60>)
 800b174:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800b178:	f5a4 735a 	sub.w	r3, r4, #872	@ 0x368
 800b17c:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800b180:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800b184:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800b188:	2009      	movs	r0, #9
 800b18a:	f883 0441 	strb.w	r0, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800b18e:	f002 f9c3 	bl	800d518 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800b192:	f7fe fcf7 	bl	8009b84 <StopRetransmission>
            break;
 800b196:	e7e4      	b.n	800b162 <OnTxDelayedTimerEvent+0x26>
 800b198:	20000dd4 	.word	0x20000dd4
 800b19c:	20008000 	.word	0x20008000

0800b1a0 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <LoRaMacHandleMcpsRequest+0x74>)
 800b1a2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b1a6:	f013 0f01 	tst.w	r3, #1
 800b1aa:	d031      	beq.n	800b210 <LoRaMacHandleMcpsRequest+0x70>
{
 800b1ac:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b1ae:	4b19      	ldr	r3, [pc, #100]	@ (800b214 <LoRaMacHandleMcpsRequest+0x74>)
 800b1b0:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800b1b4:	b12b      	cbz	r3, 800b1c2 <LoRaMacHandleMcpsRequest+0x22>
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d003      	beq.n	800b1c2 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d006      	beq.n	800b1cc <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800b1be:	2000      	movs	r0, #0
 800b1c0:	e002      	b.n	800b1c8 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b1c2:	f7fe fca5 	bl	8009b10 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800b1c6:	b940      	cbnz	r0, 800b1da <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800b1c8:	b1b0      	cbz	r0, 800b1f8 <LoRaMacHandleMcpsRequest+0x58>
}
 800b1ca:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800b1cc:	4b11      	ldr	r3, [pc, #68]	@ (800b214 <LoRaMacHandleMcpsRequest+0x74>)
 800b1ce:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800b1d2:	b17b      	cbz	r3, 800b1f4 <LoRaMacHandleMcpsRequest+0x54>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b1d4:	f7fe fcb8 	bl	8009b48 <CheckRetransConfirmedUplink>
 800b1d8:	e7f5      	b.n	800b1c6 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800b1da:	4c0f      	ldr	r4, [pc, #60]	@ (800b218 <LoRaMacHandleMcpsRequest+0x78>)
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f008 fe33 	bl	8013e48 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b1e2:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800b1e6:	f023 0320 	bic.w	r3, r3, #32
 800b1ea:	f844 3c28 	str.w	r3, [r4, #-40]
            StopRetransmission( );
 800b1ee:	f7fe fcc9 	bl	8009b84 <StopRetransmission>
 800b1f2:	e7ea      	b.n	800b1ca <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800b1f4:	2001      	movs	r0, #1
 800b1f6:	e7e7      	b.n	800b1c8 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b1f8:	4b06      	ldr	r3, [pc, #24]	@ (800b214 <LoRaMacHandleMcpsRequest+0x74>)
 800b1fa:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b1fe:	f022 0210 	bic.w	r2, r2, #16
 800b202:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800b206:	f883 0419 	strb.w	r0, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800b20a:	f7ff ff97 	bl	800b13c <OnTxDelayedTimerEvent>
}
 800b20e:	e7dc      	b.n	800b1ca <LoRaMacHandleMcpsRequest+0x2a>
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	20000a6c 	.word	0x20000a6c
 800b218:	20000dd4 	.word	0x20000dd4

0800b21c <LoRaMacHandleRequestEvents>:
{
 800b21c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b21e:	4b22      	ldr	r3, [pc, #136]	@ (800b2a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b220:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b224:	bb83      	cbnz	r3, 800b288 <LoRaMacHandleRequestEvents+0x6c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b226:	4b20      	ldr	r3, [pc, #128]	@ (800b2a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b228:	f893 4491 	ldrb.w	r4, [r3, #1169]	@ 0x491
 800b22c:	f014 0501 	ands.w	r5, r4, #1
 800b230:	d006      	beq.n	800b240 <LoRaMacHandleRequestEvents+0x24>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b232:	461a      	mov	r2, r3
 800b234:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b238:	f023 0301 	bic.w	r3, r3, #1
 800b23c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b240:	4b19      	ldr	r3, [pc, #100]	@ (800b2a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b242:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b246:	f013 0f04 	tst.w	r3, #4
 800b24a:	d006      	beq.n	800b25a <LoRaMacHandleRequestEvents+0x3e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b24c:	4a16      	ldr	r2, [pc, #88]	@ (800b2a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b24e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b252:	f023 0304 	bic.w	r3, r3, #4
 800b256:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b25a:	2001      	movs	r0, #1
 800b25c:	f7fe fbb0 	bl	80099c0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800b260:	b135      	cbz	r5, 800b270 <LoRaMacHandleRequestEvents+0x54>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b262:	4811      	ldr	r0, [pc, #68]	@ (800b2a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b264:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 800b26e:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800b270:	f014 0f04 	tst.w	r4, #4
 800b274:	d109      	bne.n	800b28a <LoRaMacHandleRequestEvents+0x6e>
        LoRaMacClassBResumeBeaconing( );
 800b276:	f001 ff00 	bl	800d07a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b27a:	4a0b      	ldr	r2, [pc, #44]	@ (800b2a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b27c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b280:	f023 0310 	bic.w	r3, r3, #16
 800b284:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800b288:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b28a:	4808      	ldr	r0, [pc, #32]	@ (800b2ac <LoRaMacHandleRequestEvents+0x90>)
 800b28c:	f002 f96e 	bl	800d56c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b290:	f002 f9a4 	bl	800d5dc <LoRaMacConfirmQueueGetCnt>
 800b294:	2800      	cmp	r0, #0
 800b296:	d0ee      	beq.n	800b276 <LoRaMacHandleRequestEvents+0x5a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b298:	4a03      	ldr	r2, [pc, #12]	@ (800b2a8 <LoRaMacHandleRequestEvents+0x8c>)
 800b29a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b29e:	f043 0304 	orr.w	r3, r3, #4
 800b2a2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800b2a6:	e7e6      	b.n	800b276 <LoRaMacHandleRequestEvents+0x5a>
 800b2a8:	20000a6c 	.word	0x20000a6c
 800b2ac:	20000ec0 	.word	0x20000ec0

0800b2b0 <OpenContinuousRxCWindow>:
{
 800b2b0:	b530      	push	{r4, r5, lr}
 800b2b2:	b083      	sub	sp, #12
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800b2b4:	4c15      	ldr	r4, [pc, #84]	@ (800b30c <OpenContinuousRxCWindow+0x5c>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b2b6:	4d16      	ldr	r5, [pc, #88]	@ (800b310 <OpenContinuousRxCWindow+0x60>)
 800b2b8:	9500      	str	r5, [sp, #0]
 800b2ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b2bc:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800b2c0:	f994 1078 	ldrsb.w	r1, [r4, #120]	@ 0x78
 800b2c4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b2c8:	f002 ff20 	bl	800e10c <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	74eb      	strb	r3, [r5, #19]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b2d0:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800b2d4:	752b      	strb	r3, [r5, #20]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	74ab      	strb	r3, [r5, #18]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b2da:	f105 023c 	add.w	r2, r5, #60	@ 0x3c
 800b2de:	4629      	mov	r1, r5
 800b2e0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b2e4:	f002 ff25 	bl	800e132 <RegionRxConfig>
 800b2e8:	b168      	cbz	r0, 800b306 <OpenContinuousRxCWindow+0x56>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b2ea:	f5a5 747a 	sub.w	r4, r5, #1000	@ 0x3e8
 800b2ee:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 800b2f2:	f884 346a 	strb.w	r3, [r4, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800b2f6:	4b07      	ldr	r3, [pc, #28]	@ (800b314 <OpenContinuousRxCWindow+0x64>)
 800b2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800b2fe:	f894 33fb 	ldrb.w	r3, [r4, #1019]	@ 0x3fb
 800b302:	f884 3490 	strb.w	r3, [r4, #1168]	@ 0x490
}
 800b306:	b003      	add	sp, #12
 800b308:	bd30      	pop	{r4, r5, pc}
 800b30a:	bf00      	nop
 800b30c:	20008000 	.word	0x20008000
 800b310:	20000e54 	.word	0x20000e54
 800b314:	08016f38 	.word	0x08016f38

0800b318 <RxWindowSetup>:
{
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800b31c:	f008 fd94 	bl	8013e48 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800b320:	4b0c      	ldr	r3, [pc, #48]	@ (800b354 <RxWindowSetup+0x3c>)
 800b322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b324:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b326:	4a0c      	ldr	r2, [pc, #48]	@ (800b358 <RxWindowSetup+0x40>)
 800b328:	4621      	mov	r1, r4
 800b32a:	4b0c      	ldr	r3, [pc, #48]	@ (800b35c <RxWindowSetup+0x44>)
 800b32c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b330:	f002 feff 	bl	800e132 <RegionRxConfig>
 800b334:	b160      	cbz	r0, 800b350 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b336:	4d0a      	ldr	r5, [pc, #40]	@ (800b360 <RxWindowSetup+0x48>)
 800b338:	f895 3424 	ldrb.w	r3, [r5, #1060]	@ 0x424
 800b33c:	f885 346a 	strb.w	r3, [r5, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800b340:	4b04      	ldr	r3, [pc, #16]	@ (800b354 <RxWindowSetup+0x3c>)
 800b342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b344:	4a05      	ldr	r2, [pc, #20]	@ (800b35c <RxWindowSetup+0x44>)
 800b346:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 800b348:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800b34a:	7ce3      	ldrb	r3, [r4, #19]
 800b34c:	f885 3490 	strb.w	r3, [r5, #1168]	@ 0x490
}
 800b350:	bd38      	pop	{r3, r4, r5, pc}
 800b352:	bf00      	nop
 800b354:	08016f38 	.word	0x08016f38
 800b358:	20000e90 	.word	0x20000e90
 800b35c:	20008000 	.word	0x20008000
 800b360:	20000a6c 	.word	0x20000a6c

0800b364 <OnRxWindow2TimerEvent>:
{
 800b364:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b366:	4b13      	ldr	r3, [pc, #76]	@ (800b3b4 <OnRxWindow2TimerEvent+0x50>)
 800b368:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800b36c:	b903      	cbnz	r3, 800b370 <OnRxWindow2TimerEvent+0xc>
}
 800b36e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b370:	4810      	ldr	r0, [pc, #64]	@ (800b3b4 <OnRxWindow2TimerEvent+0x50>)
 800b372:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 800b376:	f880 33d0 	strb.w	r3, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b37a:	4b0f      	ldr	r3, [pc, #60]	@ (800b3b8 <OnRxWindow2TimerEvent+0x54>)
 800b37c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b37e:	f8c0 23d4 	str.w	r2, [r0, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b382:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b386:	f880 23e0 	strb.w	r2, [r0, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b38a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800b38e:	f880 23e1 	strb.w	r2, [r0, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b392:	2200      	movs	r2, #0
 800b394:	f880 23e2 	strb.w	r2, [r0, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b398:	2201      	movs	r2, #1
 800b39a:	f880 23e3 	strb.w	r2, [r0, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b39e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b3a2:	f880 33e4 	strb.w	r3, [r0, #996]	@ 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800b3a6:	f500 7174 	add.w	r1, r0, #976	@ 0x3d0
 800b3aa:	f500 7066 	add.w	r0, r0, #920	@ 0x398
 800b3ae:	f7ff ffb3 	bl	800b318 <RxWindowSetup>
 800b3b2:	e7dc      	b.n	800b36e <OnRxWindow2TimerEvent+0xa>
 800b3b4:	20000a6c 	.word	0x20000a6c
 800b3b8:	20008000 	.word	0x20008000

0800b3bc <OnRxWindow1TimerEvent>:
{
 800b3bc:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800b3be:	4811      	ldr	r0, [pc, #68]	@ (800b404 <OnRxWindow1TimerEvent+0x48>)
 800b3c0:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 800b3c4:	f880 33b8 	strb.w	r3, [r0, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800b3c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b408 <OnRxWindow1TimerEvent+0x4c>)
 800b3ca:	f993 2069 	ldrsb.w	r2, [r3, #105]	@ 0x69
 800b3ce:	f880 23bb 	strb.w	r2, [r0, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b3d2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b3d6:	f880 23c8 	strb.w	r2, [r0, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b3da:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800b3de:	f880 23c9 	strb.w	r2, [r0, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f880 23ca 	strb.w	r2, [r0, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800b3e8:	f880 23cb 	strb.w	r2, [r0, #971]	@ 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b3ec:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b3f0:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800b3f4:	f500 716e 	add.w	r1, r0, #952	@ 0x3b8
 800b3f8:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 800b3fc:	f7ff ff8c 	bl	800b318 <RxWindowSetup>
}
 800b400:	bd08      	pop	{r3, pc}
 800b402:	bf00      	nop
 800b404:	20000a6c 	.word	0x20000a6c
 800b408:	20008000 	.word	0x20008000

0800b40c <LoRaMacHandleNvm>:
{
 800b40c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800b40e:	4b31      	ldr	r3, [pc, #196]	@ (800b4d4 <LoRaMacHandleNvm+0xc8>)
 800b410:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b414:	b103      	cbz	r3, 800b418 <LoRaMacHandleNvm+0xc>
}
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800b41a:	2124      	movs	r1, #36	@ 0x24
 800b41c:	f005 fefa 	bl	8011214 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800b420:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b422:	4283      	cmp	r3, r0
 800b424:	d053      	beq.n	800b4ce <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800b426:	6260      	str	r0, [r4, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800b428:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800b42a:	211c      	movs	r1, #28
 800b42c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b430:	f005 fef0 	bl	8011214 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800b434:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b436:	4283      	cmp	r3, r0
 800b438:	d002      	beq.n	800b440 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800b43a:	6460      	str	r0, [r4, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800b43c:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800b440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b444:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800b448:	f005 fee4 	bl	8011214 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800b44c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800b450:	4283      	cmp	r3, r0
 800b452:	d003      	beq.n	800b45c <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800b454:	f8c4 0148 	str.w	r0, [r4, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800b458:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800b45c:	21d4      	movs	r1, #212	@ 0xd4
 800b45e:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800b462:	f005 fed7 	bl	8011214 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800b466:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 800b46a:	4283      	cmp	r3, r0
 800b46c:	d003      	beq.n	800b476 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800b46e:	f8c4 0220 	str.w	r0, [r4, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800b472:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800b476:	2110      	movs	r1, #16
 800b478:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 800b47c:	f005 feca 	bl	8011214 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800b480:	f8d4 3234 	ldr.w	r3, [r4, #564]	@ 0x234
 800b484:	4283      	cmp	r3, r0
 800b486:	d003      	beq.n	800b490 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800b488:	f8c4 0234 	str.w	r0, [r4, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800b48c:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800b490:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800b494:	f504 700e 	add.w	r0, r4, #568	@ 0x238
 800b498:	f005 febc 	bl	8011214 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800b49c:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	@ 0x5b0
 800b4a0:	4283      	cmp	r3, r0
 800b4a2:	d003      	beq.n	800b4ac <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800b4a4:	f8c4 05b0 	str.w	r0, [r4, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800b4a8:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800b4ac:	2114      	movs	r1, #20
 800b4ae:	f204 50b4 	addw	r0, r4, #1460	@ 0x5b4
 800b4b2:	f005 feaf 	bl	8011214 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800b4b6:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	@ 0x5c8
 800b4ba:	4283      	cmp	r3, r0
 800b4bc:	d003      	beq.n	800b4c6 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800b4be:	f8c4 05c8 	str.w	r0, [r4, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800b4c2:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f7fe fb9e 	bl	8009c08 <CallNvmDataChangeCallback>
 800b4cc:	e7a3      	b.n	800b416 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	e7ab      	b.n	800b42a <LoRaMacHandleNvm+0x1e>
 800b4d2:	bf00      	nop
 800b4d4:	20000a6c 	.word	0x20000a6c

0800b4d8 <RestoreNvmData>:
{
 800b4d8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b4da:	4b3e      	ldr	r3, [pc, #248]	@ (800b5d4 <RestoreNvmData+0xfc>)
 800b4dc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d001      	beq.n	800b4e8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800b4e4:	2001      	movs	r0, #1
}
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800b4e8:	4c3b      	ldr	r4, [pc, #236]	@ (800b5d8 <RestoreNvmData+0x100>)
 800b4ea:	2124      	movs	r1, #36	@ 0x24
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f005 fe91 	bl	8011214 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800b4f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b4f4:	4283      	cmp	r3, r0
 800b4f6:	d001      	beq.n	800b4fc <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b4f8:	2017      	movs	r0, #23
 800b4fa:	e7f4      	b.n	800b4e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800b4fc:	3428      	adds	r4, #40	@ 0x28
 800b4fe:	211c      	movs	r1, #28
 800b500:	4620      	mov	r0, r4
 800b502:	f005 fe87 	bl	8011214 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800b506:	69e3      	ldr	r3, [r4, #28]
 800b508:	4283      	cmp	r3, r0
 800b50a:	d001      	beq.n	800b510 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b50c:	2017      	movs	r0, #23
 800b50e:	e7ea      	b.n	800b4e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800b510:	3420      	adds	r4, #32
 800b512:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b516:	4620      	mov	r0, r4
 800b518:	f005 fe7c 	bl	8011214 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800b51c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 800b520:	4283      	cmp	r3, r0
 800b522:	d001      	beq.n	800b528 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b524:	2017      	movs	r0, #23
 800b526:	e7de      	b.n	800b4e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800b528:	f504 7482 	add.w	r4, r4, #260	@ 0x104
 800b52c:	21d4      	movs	r1, #212	@ 0xd4
 800b52e:	4620      	mov	r0, r4
 800b530:	f005 fe70 	bl	8011214 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800b534:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800b538:	4283      	cmp	r3, r0
 800b53a:	d001      	beq.n	800b540 <RestoreNvmData+0x68>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b53c:	2017      	movs	r0, #23
 800b53e:	e7d2      	b.n	800b4e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800b540:	34d8      	adds	r4, #216	@ 0xd8
 800b542:	2110      	movs	r1, #16
 800b544:	4620      	mov	r0, r4
 800b546:	f005 fe65 	bl	8011214 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800b54a:	6923      	ldr	r3, [r4, #16]
 800b54c:	4283      	cmp	r3, r0
 800b54e:	d001      	beq.n	800b554 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b550:	2017      	movs	r0, #23
 800b552:	e7c8      	b.n	800b4e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800b554:	3414      	adds	r4, #20
 800b556:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800b55a:	4620      	mov	r0, r4
 800b55c:	f005 fe5a 	bl	8011214 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800b560:	f8d4 3378 	ldr.w	r3, [r4, #888]	@ 0x378
 800b564:	4283      	cmp	r3, r0
 800b566:	d001      	beq.n	800b56c <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b568:	2017      	movs	r0, #23
 800b56a:	e7bc      	b.n	800b4e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800b56c:	f504 745f 	add.w	r4, r4, #892	@ 0x37c
 800b570:	2114      	movs	r1, #20
 800b572:	4620      	mov	r0, r4
 800b574:	f005 fe4e 	bl	8011214 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800b578:	6963      	ldr	r3, [r4, #20]
 800b57a:	4283      	cmp	r3, r0
 800b57c:	d001      	beq.n	800b582 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b57e:	2017      	movs	r0, #23
 800b580:	e7b1      	b.n	800b4e6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800b582:	f2a4 55b4 	subw	r5, r4, #1460	@ 0x5b4
 800b586:	4c15      	ldr	r4, [pc, #84]	@ (800b5dc <RestoreNvmData+0x104>)
 800b588:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800b58c:	4629      	mov	r1, r5
 800b58e:	4620      	mov	r0, r4
 800b590:	f005 fe1f 	bl	80111d2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800b594:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800b598:	2100      	movs	r1, #0
 800b59a:	4628      	mov	r0, r5
 800b59c:	f005 fe31 	bl	8011202 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d4 <RestoreNvmData+0xfc>)
 800b5a2:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800b5a6:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b5aa:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800b5ac:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b5b0:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800b5b4:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b5c4:	4b06      	ldr	r3, [pc, #24]	@ (800b5e0 <RestoreNvmData+0x108>)
 800b5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5c8:	f894 0119 	ldrb.w	r0, [r4, #281]	@ 0x119
 800b5cc:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e789      	b.n	800b4e6 <RestoreNvmData+0xe>
 800b5d2:	bf00      	nop
 800b5d4:	20000a6c 	.word	0x20000a6c
 800b5d8:	200085cc 	.word	0x200085cc
 800b5dc:	20008000 	.word	0x20008000
 800b5e0:	08016f38 	.word	0x08016f38

0800b5e4 <OnRadioRxTimeout>:
{
 800b5e4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b5e6:	4a07      	ldr	r2, [pc, #28]	@ (800b604 <OnRadioRxTimeout+0x20>)
 800b5e8:	7813      	ldrb	r3, [r2, #0]
 800b5ea:	f043 0302 	orr.w	r3, r3, #2
 800b5ee:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b5f0:	f7fe faf2 	bl	8009bd8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b5f4:	4b04      	ldr	r3, [pc, #16]	@ (800b608 <OnRadioRxTimeout+0x24>)
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2002      	movs	r0, #2
 800b5fc:	f007 ffa0 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800b600:	bd08      	pop	{r3, pc}
 800b602:	bf00      	nop
 800b604:	200009d8 	.word	0x200009d8
 800b608:	080162dc 	.word	0x080162dc

0800b60c <OnRadioTxTimeout>:
{
 800b60c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b60e:	4a07      	ldr	r2, [pc, #28]	@ (800b62c <OnRadioTxTimeout+0x20>)
 800b610:	7813      	ldrb	r3, [r2, #0]
 800b612:	f043 0308 	orr.w	r3, r3, #8
 800b616:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b618:	f7fe fade 	bl	8009bd8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b61c:	4b04      	ldr	r3, [pc, #16]	@ (800b630 <OnRadioTxTimeout+0x24>)
 800b61e:	2201      	movs	r2, #1
 800b620:	2100      	movs	r1, #0
 800b622:	2002      	movs	r0, #2
 800b624:	f007 ff8c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800b628:	bd08      	pop	{r3, pc}
 800b62a:	bf00      	nop
 800b62c:	200009d8 	.word	0x200009d8
 800b630:	080162ec 	.word	0x080162ec

0800b634 <OnRadioRxDone>:
{
 800b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b638:	4680      	mov	r8, r0
 800b63a:	460f      	mov	r7, r1
 800b63c:	4616      	mov	r6, r2
 800b63e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b640:	f008 fbc2 	bl	8013dc8 <UTIL_TIMER_GetCurrentTime>
 800b644:	4c0c      	ldr	r4, [pc, #48]	@ (800b678 <OnRadioRxDone+0x44>)
 800b646:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b648:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b64c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b64e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b650:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b652:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <OnRadioRxDone+0x48>)
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	f042 0210 	orr.w	r2, r2, #16
 800b65a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800b65c:	b2d2      	uxtb	r2, r2
 800b65e:	f042 0201 	orr.w	r2, r2, #1
 800b662:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800b664:	f7fe fab8 	bl	8009bd8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b668:	4b05      	ldr	r3, [pc, #20]	@ (800b680 <OnRadioRxDone+0x4c>)
 800b66a:	2201      	movs	r2, #1
 800b66c:	2100      	movs	r1, #0
 800b66e:	2002      	movs	r0, #2
 800b670:	f007 ff66 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b678:	200009c4 	.word	0x200009c4
 800b67c:	200009d8 	.word	0x200009d8
 800b680:	080162fc 	.word	0x080162fc

0800b684 <OnRadioTxDone>:
{
 800b684:	b510      	push	{r4, lr}
 800b686:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b688:	f008 fb9e 	bl	8013dc8 <UTIL_TIMER_GetCurrentTime>
 800b68c:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c0 <OnRadioTxDone+0x3c>)
 800b68e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b690:	466c      	mov	r4, sp
 800b692:	4620      	mov	r0, r4
 800b694:	f008 fa78 	bl	8013b88 <SysTimeGet>
 800b698:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c4 <OnRadioTxDone+0x40>)
 800b69a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b69e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b6a2:	4a09      	ldr	r2, [pc, #36]	@ (800b6c8 <OnRadioTxDone+0x44>)
 800b6a4:	7813      	ldrb	r3, [r2, #0]
 800b6a6:	f043 0320 	orr.w	r3, r3, #32
 800b6aa:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b6ac:	f7fe fa94 	bl	8009bd8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b6b0:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <OnRadioTxDone+0x48>)
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	2002      	movs	r0, #2
 800b6b8:	f007 ff42 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800b6bc:	b002      	add	sp, #8
 800b6be:	bd10      	pop	{r4, pc}
 800b6c0:	200009d4 	.word	0x200009d4
 800b6c4:	20000da4 	.word	0x20000da4
 800b6c8:	200009d8 	.word	0x200009d8
 800b6cc:	0801630c 	.word	0x0801630c

0800b6d0 <ResetMacParameters>:
{
 800b6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6d2:	b091      	sub	sp, #68	@ 0x44
    if( isRejoin == false )
 800b6d4:	b918      	cbnz	r0, 800b6de <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b6d6:	4b5e      	ldr	r3, [pc, #376]	@ (800b850 <ResetMacParameters+0x180>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b6de:	4c5c      	ldr	r4, [pc, #368]	@ (800b850 <ResetMacParameters+0x180>)
 800b6e0:	2500      	movs	r5, #0
 800b6e2:	62a5      	str	r5, [r4, #40]	@ 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b6e4:	4e5b      	ldr	r6, [pc, #364]	@ (800b854 <ResetMacParameters+0x184>)
 800b6e6:	f886 5418 	strb.w	r5, [r6, #1048]	@ 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800b6ea:	f886 5419 	strb.w	r5, [r6, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800b6ee:	f8c6 5498 	str.w	r5, [r6, #1176]	@ 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800b6f2:	f884 511b 	strb.w	r5, [r4, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b6f6:	2701      	movs	r7, #1
 800b6f8:	f8a4 7120 	strh.w	r7, [r4, #288]	@ 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b6fc:	f994 30dc 	ldrsb.w	r3, [r4, #220]	@ 0xdc
 800b700:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b704:	f994 30dd 	ldrsb.w	r3, [r4, #221]	@ 0xdd
 800b708:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b70c:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 800b710:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b714:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 800b718:	f104 02b4 	add.w	r2, r4, #180	@ 0xb4
 800b71c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b720:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b724:	f104 0374 	add.w	r3, r4, #116	@ 0x74
 800b728:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 800b72c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b730:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b734:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 800b738:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b73c:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 800b740:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b744:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800b748:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b74c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 800b750:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800b754:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	@ 0xd0
 800b758:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800b75c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
 800b760:	f8a4 308a 	strh.w	r3, [r4, #138]	@ 0x8a
    MacCtx.NodeAckRequested = false;
 800b764:	f886 541a 	strb.w	r5, [r6, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800b768:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b76c:	f884 511d 	strb.w	r5, [r4, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800b770:	f884 511e 	strb.w	r5, [r4, #286]	@ 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800b774:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800b778:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800b77c:	f884 5139 	strb.w	r5, [r4, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800b780:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800b784:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800b788:	f884 5145 	strb.w	r5, [r4, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800b78c:	f884 5146 	strb.w	r5, [r4, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800b790:	f884 5147 	strb.w	r5, [r4, #327]	@ 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b794:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b798:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800b79c:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b79e:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 800b7a2:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800b7a4:	4b2c      	ldr	r3, [pc, #176]	@ (800b858 <ResetMacParameters+0x188>)
 800b7a6:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b7a8:	a901      	add	r1, sp, #4
 800b7aa:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b7ae:	f002 fc74 	bl	800e09a <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b7b2:	f886 541b 	strb.w	r5, [r6, #1051]	@ 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b7b6:	f886 53d0 	strb.w	r5, [r6, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b7ba:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b7bc:	f8c6 33d4 	str.w	r3, [r6, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b7c0:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800b7c4:	f886 33e0 	strb.w	r3, [r6, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b7c8:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 800b7cc:	f886 33e1 	strb.w	r3, [r6, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b7d0:	f886 53e2 	strb.w	r5, [r6, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b7d4:	f886 73e3 	strb.w	r7, [r6, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b7d8:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800b7dc:	f886 33e4 	strb.w	r3, [r6, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b7e0:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800b7e4:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800b7e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b7ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7ee:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b7f2:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b7f6:	f886 73fa 	strb.w	r7, [r6, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800b800:	950e      	str	r5, [sp, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800b802:	950f      	str	r5, [sp, #60]	@ 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800b804:	f8d6 3348 	ldr.w	r3, [r6, #840]	@ 0x348
 800b808:	b11b      	cbz	r3, 800b812 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	920e      	str	r2, [sp, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b80e:	695b      	ldr	r3, [r3, #20]
 800b810:	930f      	str	r3, [sp, #60]	@ 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b812:	4b12      	ldr	r3, [pc, #72]	@ (800b85c <ResetMacParameters+0x18c>)
 800b814:	9305      	str	r3, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b816:	f1a3 0248 	sub.w	r2, r3, #72	@ 0x48
 800b81a:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b81c:	f1a3 0214 	sub.w	r2, r3, #20
 800b820:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b822:	3329      	adds	r3, #41	@ 0x29
 800b824:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b826:	4a0e      	ldr	r2, [pc, #56]	@ (800b860 <ResetMacParameters+0x190>)
 800b828:	9209      	str	r2, [sp, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b82a:	f1a2 039c 	sub.w	r3, r2, #156	@ 0x9c
 800b82e:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b830:	f1a2 0398 	sub.w	r3, r2, #152	@ 0x98
 800b834:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b836:	1d13      	adds	r3, r2, #4
 800b838:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800b83a:	f102 034c 	add.w	r3, r2, #76	@ 0x4c
 800b83e:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b840:	f502 629a 	add.w	r2, r2, #1232	@ 0x4d0
 800b844:	a90e      	add	r1, sp, #56	@ 0x38
 800b846:	a805      	add	r0, sp, #20
 800b848:	f001 fc02 	bl	800d050 <LoRaMacClassBInit>
}
 800b84c:	b011      	add	sp, #68	@ 0x44
 800b84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b850:	20008000 	.word	0x20008000
 800b854:	20000a6c 	.word	0x20000a6c
 800b858:	200009dc 	.word	0x200009dc
 800b85c:	20000ed4 	.word	0x20000ed4
 800b860:	200080e4 	.word	0x200080e4

0800b864 <SwitchClass>:
{
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b868:	4b45      	ldr	r3, [pc, #276]	@ (800b980 <SwitchClass+0x11c>)
 800b86a:	f893 5118 	ldrb.w	r5, [r3, #280]	@ 0x118
 800b86e:	2d01      	cmp	r5, #1
 800b870:	d06d      	beq.n	800b94e <SwitchClass+0xea>
 800b872:	2d02      	cmp	r5, #2
 800b874:	d072      	beq.n	800b95c <SwitchClass+0xf8>
 800b876:	2d00      	cmp	r5, #0
 800b878:	d17d      	bne.n	800b976 <SwitchClass+0x112>
            if( deviceClass == CLASS_A )
 800b87a:	bb58      	cbnz	r0, 800b8d4 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b87c:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800b880:	336c      	adds	r3, #108	@ 0x6c
 800b882:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b886:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800b88a:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800b88c:	2c01      	cmp	r4, #1
 800b88e:	d023      	beq.n	800b8d8 <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 800b890:	2c02      	cmp	r4, #2
 800b892:	d171      	bne.n	800b978 <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b894:	4b3a      	ldr	r3, [pc, #232]	@ (800b980 <SwitchClass+0x11c>)
 800b896:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b89a:	4e3a      	ldr	r6, [pc, #232]	@ (800b984 <SwitchClass+0x120>)
 800b89c:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800b8a0:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800b8a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b8a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8aa:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b8ae:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	dd15      	ble.n	800b8ea <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 800b8be:	4b31      	ldr	r3, [pc, #196]	@ (800b984 <SwitchClass+0x120>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                Radio.Sleep( );
 800b8c6:	4b30      	ldr	r3, [pc, #192]	@ (800b988 <SwitchClass+0x124>)
 800b8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ca:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b8cc:	f7ff fcf0 	bl	800b2b0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e051      	b.n	800b978 <SwitchClass+0x114>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b8d4:	2003      	movs	r0, #3
 800b8d6:	e7d9      	b.n	800b88c <SwitchClass+0x28>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f001 fbcf 	bl	800d07c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d1d6      	bne.n	800b890 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b8e2:	4b27      	ldr	r3, [pc, #156]	@ (800b980 <SwitchClass+0x11c>)
 800b8e4:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800b8e8:	e7d2      	b.n	800b890 <SwitchClass+0x2c>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b8ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800b8ee:	4a24      	ldr	r2, [pc, #144]	@ (800b980 <SwitchClass+0x11c>)
 800b8f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b8f4:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800b8f8:	b132      	cbz	r2, 800b908 <SwitchClass+0xa4>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800b8fa:	4a21      	ldr	r2, [pc, #132]	@ (800b980 <SwitchClass+0x11c>)
 800b8fc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b900:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b904:	2a02      	cmp	r2, #2
 800b906:	d002      	beq.n	800b90e <SwitchClass+0xaa>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b908:	3301      	adds	r3, #1
 800b90a:	b25b      	sxtb	r3, r3
 800b90c:	e7d5      	b.n	800b8ba <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800b90e:	4a1c      	ldr	r2, [pc, #112]	@ (800b980 <SwitchClass+0x11c>)
 800b910:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800b914:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 800b918:	6751      	str	r1, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800b91a:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800b91e:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b922:	4b18      	ldr	r3, [pc, #96]	@ (800b984 <SwitchClass+0x120>)
 800b924:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 800b928:	f883 03e8 	strb.w	r0, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b92c:	f8c3 13ec 	str.w	r1, [r3, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b930:	f892 107d 	ldrb.w	r1, [r2, #125]	@ 0x7d
 800b934:	f883 13f8 	strb.w	r1, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b938:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 800b93c:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b940:	2203      	movs	r2, #3
 800b942:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b946:	2201      	movs	r2, #1
 800b948:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800b94c:	e7b7      	b.n	800b8be <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b94e:	f001 fb95 	bl	800d07c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b952:	b988      	cbnz	r0, 800b978 <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b954:	4b0a      	ldr	r3, [pc, #40]	@ (800b980 <SwitchClass+0x11c>)
 800b956:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800b95a:	e00d      	b.n	800b978 <SwitchClass+0x114>
            if( deviceClass == CLASS_A )
 800b95c:	b968      	cbnz	r0, 800b97a <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800b95e:	4b09      	ldr	r3, [pc, #36]	@ (800b984 <SwitchClass+0x120>)
 800b960:	2206      	movs	r2, #6
 800b962:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b966:	4b06      	ldr	r3, [pc, #24]	@ (800b980 <SwitchClass+0x11c>)
 800b968:	f883 0118 	strb.w	r0, [r3, #280]	@ 0x118
                Radio.Sleep( );
 800b96c:	4b06      	ldr	r3, [pc, #24]	@ (800b988 <SwitchClass+0x124>)
 800b96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b970:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b972:	4620      	mov	r0, r4
 800b974:	e000      	b.n	800b978 <SwitchClass+0x114>
    switch( Nvm.MacGroup2.DeviceClass )
 800b976:	2003      	movs	r0, #3
}
 800b978:	bd70      	pop	{r4, r5, r6, pc}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b97a:	2003      	movs	r0, #3
 800b97c:	e7fc      	b.n	800b978 <SwitchClass+0x114>
 800b97e:	bf00      	nop
 800b980:	20008000 	.word	0x20008000
 800b984:	20000a6c 	.word	0x20000a6c
 800b988:	08016f38 	.word	0x08016f38

0800b98c <SendReJoinReq>:
{
 800b98c:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800b98e:	28ff      	cmp	r0, #255	@ 0xff
 800b990:	d003      	beq.n	800b99a <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800b992:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800b994:	f7ff fb4e 	bl	800b034 <ScheduleTx>
}
 800b998:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800b99a:	2000      	movs	r0, #0
 800b99c:	f7ff ff62 	bl	800b864 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b9a0:	4d0a      	ldr	r5, [pc, #40]	@ (800b9cc <SendReJoinReq+0x40>)
 800b9a2:	2400      	movs	r4, #0
 800b9a4:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b9a8:	1cab      	adds	r3, r5, #2
 800b9aa:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b9ae:	23ff      	movs	r3, #255	@ 0xff
 800b9b0:	f885 310c 	strb.w	r3, [r5, #268]	@ 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b9b4:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800b9b8:	f505 7087 	add.w	r0, r5, #270	@ 0x10e
 800b9bc:	f005 faec 	bl	8010f98 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800b9c0:	f505 708b 	add.w	r0, r5, #278	@ 0x116
 800b9c4:	f005 faca 	bl	8010f5c <SecureElementGetDevEui>
            allowDelayedTx = false;
 800b9c8:	4620      	mov	r0, r4
            break;
 800b9ca:	e7e3      	b.n	800b994 <SendReJoinReq+0x8>
 800b9cc:	20000a6c 	.word	0x20000a6c

0800b9d0 <PrepareFrame>:
{
 800b9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	460e      	mov	r6, r1
 800b9da:	4617      	mov	r7, r2
 800b9dc:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
    MacCtx.PktBufferLen = 0;
 800b9e0:	495a      	ldr	r1, [pc, #360]	@ (800bb4c <PrepareFrame+0x17c>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800b9e6:	f881 241a 	strb.w	r2, [r1, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800b9ea:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800b9ec:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800b9ee:	4699      	mov	r9, r3
 800b9f0:	b1cb      	cbz	r3, 800ba26 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b9f2:	4c57      	ldr	r4, [pc, #348]	@ (800bb50 <PrepareFrame+0x180>)
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f005 fbea 	bl	80111d2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b9fe:	fa5f f088 	uxtb.w	r0, r8
 800ba02:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
 800ba06:	f5a4 749c 	sub.w	r4, r4, #312	@ 0x138
    MacCtx.PktBuffer[0] = macHdr->Value;
 800ba0a:	782b      	ldrb	r3, [r5, #0]
 800ba0c:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 800ba0e:	782b      	ldrb	r3, [r5, #0]
 800ba10:	095b      	lsrs	r3, r3, #5
 800ba12:	2b04      	cmp	r3, #4
 800ba14:	d009      	beq.n	800ba2a <PrepareFrame+0x5a>
 800ba16:	2b07      	cmp	r3, #7
 800ba18:	d079      	beq.n	800bb0e <PrepareFrame+0x13e>
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d009      	beq.n	800ba32 <PrepareFrame+0x62>
 800ba1e:	2002      	movs	r0, #2
}
 800ba20:	b003      	add	sp, #12
 800ba22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800ba26:	4690      	mov	r8, r2
 800ba28:	e7e3      	b.n	800b9f2 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800ba2a:	4b48      	ldr	r3, [pc, #288]	@ (800bb4c <PrepareFrame+0x17c>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800ba32:	4b46      	ldr	r3, [pc, #280]	@ (800bb4c <PrepareFrame+0x17c>)
 800ba34:	2204      	movs	r2, #4
 800ba36:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800ba3a:	1c9a      	adds	r2, r3, #2
 800ba3c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ba40:	22ff      	movs	r2, #255	@ 0xff
 800ba42:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800ba46:	782a      	ldrb	r2, [r5, #0]
 800ba48:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800ba4c:	f883 7128 	strb.w	r7, [r3, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800ba50:	4a40      	ldr	r2, [pc, #256]	@ (800bb54 <PrepareFrame+0x184>)
 800ba52:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800ba56:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ba5a:	7832      	ldrb	r2, [r6, #0]
 800ba5c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ba60:	f883 0130 	strb.w	r0, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ba64:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 800ba68:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ba6c:	a801      	add	r0, sp, #4
 800ba6e:	f001 ff8f 	bl	800d990 <LoRaMacCryptoGetFCntUp>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d15e      	bne.n	800bb34 <PrepareFrame+0x164>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ba76:	9a01      	ldr	r2, [sp, #4]
 800ba78:	4b34      	ldr	r3, [pc, #208]	@ (800bb4c <PrepareFrame+0x17c>)
 800ba7a:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800ba7e:	2100      	movs	r1, #0
 800ba80:	f883 1445 	strb.w	r1, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800ba84:	f883 1444 	strb.w	r1, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800ba88:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ba8c:	4668      	mov	r0, sp
 800ba8e:	f001 fc27 	bl	800d2e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d150      	bne.n	800bb38 <PrepareFrame+0x168>
            if( macCmdsSize > 0 )
 800ba96:	9b00      	ldr	r3, [sp, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0c1      	beq.n	800ba20 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800ba9c:	4b2d      	ldr	r3, [pc, #180]	@ (800bb54 <PrepareFrame+0x184>)
 800ba9e:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800baa2:	f7fe f8c9 	bl	8009c38 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800baa6:	4b29      	ldr	r3, [pc, #164]	@ (800bb4c <PrepareFrame+0x17c>)
 800baa8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800baac:	b113      	cbz	r3, 800bab4 <PrepareFrame+0xe4>
 800baae:	9a00      	ldr	r2, [sp, #0]
 800bab0:	2a0f      	cmp	r2, #15
 800bab2:	d915      	bls.n	800bae0 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800bab4:	b113      	cbz	r3, 800babc <PrepareFrame+0xec>
 800bab6:	9b00      	ldr	r3, [sp, #0]
 800bab8:	2b0f      	cmp	r3, #15
 800baba:	d821      	bhi.n	800bb00 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800babc:	4a26      	ldr	r2, [pc, #152]	@ (800bb58 <PrepareFrame+0x188>)
 800babe:	4669      	mov	r1, sp
 800bac0:	f001 fc1a 	bl	800d2f8 <LoRaMacCommandsSerializeCmds>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d13d      	bne.n	800bb44 <PrepareFrame+0x174>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800bac8:	4b20      	ldr	r3, [pc, #128]	@ (800bb4c <PrepareFrame+0x17c>)
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800bad0:	f203 429c 	addw	r2, r3, #1180	@ 0x49c
 800bad4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800bad8:	9a00      	ldr	r2, [sp, #0]
 800bada:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800bade:	e79f      	b.n	800ba20 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800bae0:	4a1e      	ldr	r2, [pc, #120]	@ (800bb5c <PrepareFrame+0x18c>)
 800bae2:	4669      	mov	r1, sp
 800bae4:	200f      	movs	r0, #15
 800bae6:	f001 fc07 	bl	800d2f8 <LoRaMacCommandsSerializeCmds>
 800baea:	bb38      	cbnz	r0, 800bb3c <PrepareFrame+0x16c>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800baec:	7833      	ldrb	r3, [r6, #0]
 800baee:	9a00      	ldr	r2, [sp, #0]
 800baf0:	f362 0303 	bfi	r3, r2, #0, #4
 800baf4:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	4b14      	ldr	r3, [pc, #80]	@ (800bb4c <PrepareFrame+0x17c>)
 800bafa:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800bafe:	e78f      	b.n	800ba20 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800bb00:	4a15      	ldr	r2, [pc, #84]	@ (800bb58 <PrepareFrame+0x188>)
 800bb02:	4669      	mov	r1, sp
 800bb04:	f001 fbf8 	bl	800d2f8 <LoRaMacCommandsSerializeCmds>
 800bb08:	b1d0      	cbz	r0, 800bb40 <PrepareFrame+0x170>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bb0a:	2013      	movs	r0, #19
 800bb0c:	e788      	b.n	800ba20 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800bb0e:	f1b9 0f00 	cmp.w	r9, #0
 800bb12:	d019      	beq.n	800bb48 <PrepareFrame+0x178>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d083      	beq.n	800ba20 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800bb18:	4c11      	ldr	r4, [pc, #68]	@ (800bb60 <PrepareFrame+0x190>)
 800bb1a:	fa5f f288 	uxtb.w	r2, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	4620      	mov	r0, r4
 800bb22:	f005 fb56 	bl	80111d2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800bb26:	f894 3234 	ldrb.w	r3, [r4, #564]	@ 0x234
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	f824 3c03 	strh.w	r3, [r4, #-3]
    return LORAMAC_STATUS_OK;
 800bb30:	2000      	movs	r0, #0
 800bb32:	e775      	b.n	800ba20 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800bb34:	2012      	movs	r0, #18
 800bb36:	e773      	b.n	800ba20 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bb38:	2013      	movs	r0, #19
 800bb3a:	e771      	b.n	800ba20 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bb3c:	2013      	movs	r0, #19
 800bb3e:	e76f      	b.n	800ba20 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800bb40:	200a      	movs	r0, #10
 800bb42:	e76d      	b.n	800ba20 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bb44:	2013      	movs	r0, #19
 800bb46:	e76b      	b.n	800ba20 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800bb48:	2000      	movs	r0, #0
 800bb4a:	e769      	b.n	800ba20 <PrepareFrame+0x50>
 800bb4c:	20000a6c 	.word	0x20000a6c
 800bb50:	20000ba4 	.word	0x20000ba4
 800bb54:	20008000 	.word	0x20008000
 800bb58:	20000f08 	.word	0x20000f08
 800bb5c:	20000b84 	.word	0x20000b84
 800bb60:	20000a6f 	.word	0x20000a6f

0800bb64 <Send>:
{
 800bb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb68:	b08a      	sub	sp, #40	@ 0x28
 800bb6a:	4617      	mov	r7, r2
 800bb6c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bb6e:	4c44      	ldr	r4, [pc, #272]	@ (800bc80 <Send+0x11c>)
 800bb70:	f994 a039 	ldrsb.w	sl, [r4, #57]	@ 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800bb74:	f994 9038 	ldrsb.w	r9, [r4, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bb78:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bb7a:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bb7c:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d07a      	beq.n	800bc7a <Send+0x116>
 800bb84:	4605      	mov	r5, r0
 800bb86:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800bb88:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800bb8c:	b90b      	cbnz	r3, 800bb92 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800bb8e:	2100      	movs	r1, #0
 800bb90:	6321      	str	r1, [r4, #48]	@ 0x30
    fCtrl.Value = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800bb98:	4839      	ldr	r0, [pc, #228]	@ (800bc80 <Send+0x11c>)
 800bb9a:	f890 111a 	ldrb.w	r1, [r0, #282]	@ 0x11a
 800bb9e:	f361 13c7 	bfi	r3, r1, #7, #1
 800bba2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bba6:	f890 3118 	ldrb.w	r3, [r0, #280]	@ 0x118
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d052      	beq.n	800bc54 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800bbae:	4b34      	ldr	r3, [pc, #208]	@ (800bc80 <Send+0x11c>)
 800bbb0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bbb4:	b12b      	cbz	r3, 800bbc2 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800bbb6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800bbba:	f043 0320 	orr.w	r3, r3, #32
 800bbbe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    adrNext.UpdateChanMask = true;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800bbc8:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bbcc:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800bbce:	492c      	ldr	r1, [pc, #176]	@ (800bc80 <Send+0x11c>)
 800bbd0:	f8b1 3088 	ldrh.w	r3, [r1, #136]	@ 0x88
 800bbd4:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800bbd8:	f8b1 308a 	ldrh.w	r3, [r1, #138]	@ 0x8a
 800bbdc:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bbe0:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bbe4:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bbe8:	f891 307c 	ldrb.w	r3, [r1, #124]	@ 0x7c
 800bbec:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800bbf0:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 800bbf4:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800bbfe:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800bc02:	aa08      	add	r2, sp, #32
 800bc04:	9200      	str	r2, [sp, #0]
 800bc06:	f101 0238 	add.w	r2, r1, #56	@ 0x38
 800bc0a:	3139      	adds	r1, #57	@ 0x39
 800bc0c:	a803      	add	r0, sp, #12
 800bc0e:	f001 f9a5 	bl	800cf5c <LoRaMacAdrCalcNext>
 800bc12:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800bc16:	f360 1386 	bfi	r3, r0, #6, #1
 800bc1a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800bc1e:	f8cd 8000 	str.w	r8, [sp]
 800bc22:	463b      	mov	r3, r7
 800bc24:	4632      	mov	r2, r6
 800bc26:	a909      	add	r1, sp, #36	@ 0x24
 800bc28:	4628      	mov	r0, r5
 800bc2a:	f7ff fed1 	bl	800b9d0 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800bc2e:	4604      	mov	r4, r0
 800bc30:	b108      	cbz	r0, 800bc36 <Send+0xd2>
 800bc32:	280a      	cmp	r0, #10
 800bc34:	d104      	bne.n	800bc40 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800bc36:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 800bc3a:	f7ff f9fb 	bl	800b034 <ScheduleTx>
 800bc3e:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800bc40:	b17c      	cbz	r4, 800bc62 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800bc42:	4b0f      	ldr	r3, [pc, #60]	@ (800bc80 <Send+0x11c>)
 800bc44:	f883 a039 	strb.w	sl, [r3, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800bc48:	f883 9038 	strb.w	r9, [r3, #56]	@ 0x38
}
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	b00a      	add	sp, #40	@ 0x28
 800bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800bc54:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800bc58:	f043 0310 	orr.w	r3, r3, #16
 800bc5c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800bc60:	e7a5      	b.n	800bbae <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800bc62:	4b07      	ldr	r3, [pc, #28]	@ (800bc80 <Send+0x11c>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800bc6a:	9a08      	ldr	r2, [sp, #32]
 800bc6c:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800bc6e:	f001 fb05 	bl	800d27c <LoRaMacCommandsRemoveNoneStickyCmds>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d0ea      	beq.n	800bc4c <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc76:	2413      	movs	r4, #19
 800bc78:	e7e8      	b.n	800bc4c <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800bc7a:	2407      	movs	r4, #7
 800bc7c:	e7e6      	b.n	800bc4c <Send+0xe8>
 800bc7e:	bf00      	nop
 800bc80:	20008000 	.word	0x20008000

0800bc84 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800bc84:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb8 <LoRaMacIsBusy+0x34>)
 800bc86:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d00c      	beq.n	800bca8 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800bc8e:	4a0b      	ldr	r2, [pc, #44]	@ (800bcbc <LoRaMacIsBusy+0x38>)
 800bc90:	7812      	ldrb	r2, [r2, #0]
 800bc92:	f012 0f01 	tst.w	r2, #1
 800bc96:	d109      	bne.n	800bcac <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800bc98:	b953      	cbnz	r3, 800bcb0 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800bc9a:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <LoRaMacIsBusy+0x34>)
 800bc9c:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d007      	beq.n	800bcb4 <LoRaMacIsBusy+0x30>
    return true;
 800bca4:	2001      	movs	r0, #1
 800bca6:	4770      	bx	lr
        return false;
 800bca8:	2000      	movs	r0, #0
 800bcaa:	4770      	bx	lr
        return true;
 800bcac:	2001      	movs	r0, #1
 800bcae:	4770      	bx	lr
    return true;
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	4770      	bx	lr
        return false;
 800bcb4:	2000      	movs	r0, #0
}
 800bcb6:	4770      	bx	lr
 800bcb8:	20000a6c 	.word	0x20000a6c
 800bcbc:	200009d8 	.word	0x200009d8

0800bcc0 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800bcc0:	4b04      	ldr	r3, [pc, #16]	@ (800bcd4 <LoRaMacIsStopped+0x14>)
 800bcc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d001      	beq.n	800bcce <LoRaMacIsStopped+0xe>
    return false;
 800bcca:	2000      	movs	r0, #0
 800bccc:	4770      	bx	lr
        return true;
 800bcce:	2001      	movs	r0, #1
}
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20000a6c 	.word	0x20000a6c

0800bcd8 <LoRaMacProcess>:
{
 800bcd8:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800bcda:	f7fe fffb 	bl	800acd4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800bcde:	f001 f9de 	bl	800d09e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800bce2:	4b1f      	ldr	r3, [pc, #124]	@ (800bd60 <LoRaMacProcess+0x88>)
 800bce4:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bce8:	f013 0f10 	tst.w	r3, #16
 800bcec:	d10d      	bne.n	800bd0a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800bcee:	f7fd fe6d 	bl	80099cc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800bcf2:	4b1b      	ldr	r3, [pc, #108]	@ (800bd60 <LoRaMacProcess+0x88>)
 800bcf4:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d022      	beq.n	800bd42 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800bcfc:	4b18      	ldr	r3, [pc, #96]	@ (800bd60 <LoRaMacProcess+0x88>)
 800bcfe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bd02:	f013 0f20 	tst.w	r3, #32
 800bd06:	d11f      	bne.n	800bd48 <LoRaMacProcess+0x70>
}
 800bd08:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	f7fd fe58 	bl	80099c0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800bd10:	f7fd fe94 	bl	8009a3c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800bd14:	f7fd ff84 	bl	8009c20 <IsRequestPending>
 800bd18:	b110      	cbz	r0, 800bd20 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800bd1a:	f7fe f86f 	bl	8009dfc <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800bd1e:	b918      	cbnz	r0, 800bd28 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800bd20:	f7ff f81a 	bl	800ad58 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800bd24:	f7ff fa3c 	bl	800b1a0 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800bd28:	f7ff fa78 	bl	800b21c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bd2c:	2001      	movs	r0, #1
 800bd2e:	f7fd fe47 	bl	80099c0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800bd32:	4a0b      	ldr	r2, [pc, #44]	@ (800bd60 <LoRaMacProcess+0x88>)
 800bd34:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bd38:	f043 0320 	orr.w	r3, r3, #32
 800bd3c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800bd40:	e7d5      	b.n	800bcee <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800bd42:	f7ff fab5 	bl	800b2b0 <OpenContinuousRxCWindow>
 800bd46:	e7d9      	b.n	800bcfc <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800bd48:	4a05      	ldr	r2, [pc, #20]	@ (800bd60 <LoRaMacProcess+0x88>)
 800bd4a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bd4e:	f023 0320 	bic.w	r3, r3, #32
 800bd52:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800bd56:	4803      	ldr	r0, [pc, #12]	@ (800bd64 <LoRaMacProcess+0x8c>)
 800bd58:	f7ff fb58 	bl	800b40c <LoRaMacHandleNvm>
}
 800bd5c:	e7d4      	b.n	800bd08 <LoRaMacProcess+0x30>
 800bd5e:	bf00      	nop
 800bd60:	20000a6c 	.word	0x20000a6c
 800bd64:	20008000 	.word	0x20008000

0800bd68 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	b08d      	sub	sp, #52	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f000 81a3 	beq.w	800c0ba <LoRaMacInitialization+0x352>
 800bd74:	4688      	mov	r8, r1
 800bd76:	4691      	mov	r9, r2
 800bd78:	4607      	mov	r7, r0
 800bd7a:	2900      	cmp	r1, #0
 800bd7c:	f000 819f 	beq.w	800c0be <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800bd80:	6803      	ldr	r3, [r0, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 819d 	beq.w	800c0c2 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800bd88:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 819b 	beq.w	800c0c6 <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800bd90:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 8199 	beq.w	800c0ca <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800bd98:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 8197 	beq.w	800c0ce <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800bda0:	4610      	mov	r0, r2
 800bda2:	f002 f94b 	bl	800e03c <RegionIsActive>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f000 8193 	beq.w	800c0d2 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800bdac:	4638      	mov	r0, r7
 800bdae:	f001 fb37 	bl	800d420 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800bdb2:	4ccb      	ldr	r4, [pc, #812]	@ (800c0e0 <LoRaMacInitialization+0x378>)
 800bdb4:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f005 fa21 	bl	8011202 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800bdc0:	4ec8      	ldr	r6, [pc, #800]	@ (800c0e4 <LoRaMacInitialization+0x37c>)
 800bdc2:	f240 521c 	movw	r2, #1308	@ 0x51c
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f005 fa1a 	bl	8011202 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800bdce:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800bdd2:	2500      	movs	r5, #0
 800bdd4:	f884 5118 	strb.w	r5, [r4, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800bdd8:	f884 508c 	strb.w	r5, [r4, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800bddc:	4bc2      	ldr	r3, [pc, #776]	@ (800c0e8 <LoRaMacInitialization+0x380>)
 800bdde:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800bde2:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800bde6:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800bdea:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800bdec:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 800bdf0:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800bdf2:	4bbe      	ldr	r3, [pc, #760]	@ (800c0ec <LoRaMacInitialization+0x384>)
 800bdf4:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800bdf6:	a905      	add	r1, sp, #20
 800bdf8:	4648      	mov	r0, r9
 800bdfa:	f002 f94e 	bl	800e09a <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bdfe:	230f      	movs	r3, #15
 800be00:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be04:	a90a      	add	r1, sp, #40	@ 0x28
 800be06:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be0a:	f002 f921 	bl	800e050 <RegionGetPhyParam>
 800be0e:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800be10:	1b40      	subs	r0, r0, r5
 800be12:	bf18      	it	ne
 800be14:	2001      	movne	r0, #1
 800be16:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800be1a:	f04f 0a0a 	mov.w	sl, #10
 800be1e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be22:	a90a      	add	r1, sp, #40	@ 0x28
 800be24:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be28:	f002 f912 	bl	800e050 <RegionGetPhyParam>
 800be2c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800be2e:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800be32:	f04f 0906 	mov.w	r9, #6
 800be36:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be3a:	a90a      	add	r1, sp, #40	@ 0x28
 800be3c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be40:	f002 f906 	bl	800e050 <RegionGetPhyParam>
 800be44:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800be46:	f884 00dd 	strb.w	r0, [r4, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800be4a:	2310      	movs	r3, #16
 800be4c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be50:	a90a      	add	r1, sp, #40	@ 0x28
 800be52:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be56:	f002 f8fb 	bl	800e050 <RegionGetPhyParam>
 800be5a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800be5c:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800be60:	2311      	movs	r3, #17
 800be62:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be66:	a90a      	add	r1, sp, #40	@ 0x28
 800be68:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be6c:	f002 f8f0 	bl	800e050 <RegionGetPhyParam>
 800be70:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800be72:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800be76:	2312      	movs	r3, #18
 800be78:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be7c:	a90a      	add	r1, sp, #40	@ 0x28
 800be7e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be82:	f002 f8e5 	bl	800e050 <RegionGetPhyParam>
 800be86:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800be88:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800be8c:	2313      	movs	r3, #19
 800be8e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be92:	a90a      	add	r1, sp, #40	@ 0x28
 800be94:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be98:	f002 f8da 	bl	800e050 <RegionGetPhyParam>
 800be9c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800be9e:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800bea2:	2314      	movs	r3, #20
 800bea4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bea8:	a90a      	add	r1, sp, #40	@ 0x28
 800beaa:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800beae:	f002 f8cf 	bl	800e050 <RegionGetPhyParam>
 800beb2:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800beb4:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800beb8:	2316      	movs	r3, #22
 800beba:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bebe:	a90a      	add	r1, sp, #40	@ 0x28
 800bec0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bec4:	f002 f8c4 	bl	800e050 <RegionGetPhyParam>
 800bec8:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800beca:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800bece:	2317      	movs	r3, #23
 800bed0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bed4:	a90a      	add	r1, sp, #40	@ 0x28
 800bed6:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800beda:	f002 f8b9 	bl	800e050 <RegionGetPhyParam>
 800bede:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800bee0:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800bee4:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800bee8:	2318      	movs	r3, #24
 800beea:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800beee:	a90a      	add	r1, sp, #40	@ 0x28
 800bef0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bef4:	f002 f8ac 	bl	800e050 <RegionGetPhyParam>
 800bef8:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800befa:	b2c0      	uxtb	r0, r0
 800befc:	f884 00b8 	strb.w	r0, [r4, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800bf00:	f884 00c0 	strb.w	r0, [r4, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800bf04:	231d      	movs	r3, #29
 800bf06:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf0a:	a90a      	add	r1, sp, #40	@ 0x28
 800bf0c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bf10:	f002 f89e 	bl	800e050 <RegionGetPhyParam>
 800bf14:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800bf16:	f884 00c4 	strb.w	r0, [r4, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800bf1a:	231e      	movs	r3, #30
 800bf1c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf20:	a90a      	add	r1, sp, #40	@ 0x28
 800bf22:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bf26:	f002 f893 	bl	800e050 <RegionGetPhyParam>
 800bf2a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800bf2c:	f884 00c5 	strb.w	r0, [r4, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800bf30:	231f      	movs	r3, #31
 800bf32:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf36:	a90a      	add	r1, sp, #40	@ 0x28
 800bf38:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bf3c:	f002 f888 	bl	800e050 <RegionGetPhyParam>
 800bf40:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800bf42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf44:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800bf48:	2320      	movs	r3, #32
 800bf4a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf4e:	a90a      	add	r1, sp, #40	@ 0x28
 800bf50:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bf54:	f002 f87c 	bl	800e050 <RegionGetPhyParam>
 800bf58:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800bf5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5c:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800bf60:	230b      	movs	r3, #11
 800bf62:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf66:	a90a      	add	r1, sp, #40	@ 0x28
 800bf68:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bf6c:	f002 f870 	bl	800e050 <RegionGetPhyParam>
 800bf70:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800bf72:	f8a4 00d0 	strh.w	r0, [r4, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800bf76:	230c      	movs	r3, #12
 800bf78:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf7c:	a90a      	add	r1, sp, #40	@ 0x28
 800bf7e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800bf82:	f002 f865 	bl	800e050 <RegionGetPhyParam>
 800bf86:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800bf88:	f8a4 00d2 	strh.w	r0, [r4, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800bf8c:	f04f 0b01 	mov.w	fp, #1
 800bf90:	f884 b0b0 	strb.w	fp, [r4, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800bf94:	f8c4 a094 	str.w	sl, [r4, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800bf98:	f884 9098 	strb.w	r9, [r4, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800bf9c:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800bfa0:	f884 9050 	strb.w	r9, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800bfa4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800bfa8:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800bfaa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800bfae:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800bfb0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800bfb4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800bfb6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800bfba:	6623      	str	r3, [r4, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800bfbc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800bfc0:	6663      	str	r3, [r4, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800bfc2:	f884 b068 	strb.w	fp, [r4, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800bfc6:	f884 b11f 	strb.w	fp, [r4, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800bfca:	f8c6 8348 	str.w	r8, [r6, #840]	@ 0x348
    ResetMacParameters( false );
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f7ff fb7e 	bl	800b6d0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800bfd4:	f884 b119 	strb.w	fp, [r4, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800bfd8:	f8c6 7344 	str.w	r7, [r6, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800bfdc:	f886 5491 	strb.w	r5, [r6, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800bfe0:	f8c6 b340 	str.w	fp, [r6, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800bfe4:	62e5      	str	r5, [r4, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800bfe6:	6325      	str	r5, [r4, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800bfe8:	9500      	str	r5, [sp, #0]
 800bfea:	4b41      	ldr	r3, [pc, #260]	@ (800c0f0 <LoRaMacInitialization+0x388>)
 800bfec:	462a      	mov	r2, r5
 800bfee:	f04f 31ff 	mov.w	r1, #4294967295
 800bff2:	f506 705a 	add.w	r0, r6, #872	@ 0x368
 800bff6:	f007 fec9 	bl	8013d8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800bffa:	9500      	str	r5, [sp, #0]
 800bffc:	4b3d      	ldr	r3, [pc, #244]	@ (800c0f4 <LoRaMacInitialization+0x38c>)
 800bffe:	462a      	mov	r2, r5
 800c000:	f04f 31ff 	mov.w	r1, #4294967295
 800c004:	f506 7060 	add.w	r0, r6, #896	@ 0x380
 800c008:	f007 fec0 	bl	8013d8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800c00c:	9500      	str	r5, [sp, #0]
 800c00e:	4b3a      	ldr	r3, [pc, #232]	@ (800c0f8 <LoRaMacInitialization+0x390>)
 800c010:	462a      	mov	r2, r5
 800c012:	f04f 31ff 	mov.w	r1, #4294967295
 800c016:	f506 7066 	add.w	r0, r6, #920	@ 0x398
 800c01a:	f007 feb7 	bl	8013d8c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800c01e:	9500      	str	r5, [sp, #0]
 800c020:	4b36      	ldr	r3, [pc, #216]	@ (800c0fc <LoRaMacInitialization+0x394>)
 800c022:	462a      	mov	r2, r5
 800c024:	f04f 31ff 	mov.w	r1, #4294967295
 800c028:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 800c02c:	f007 feae 	bl	8013d8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800c030:	af02      	add	r7, sp, #8
 800c032:	4638      	mov	r0, r7
 800c034:	f007 fdca 	bl	8013bcc <SysTimeGetMcuTime>
 800c038:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800c03c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c040:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800c044:	4b2e      	ldr	r3, [pc, #184]	@ (800c100 <LoRaMacInitialization+0x398>)
 800c046:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800c048:	4b2e      	ldr	r3, [pc, #184]	@ (800c104 <LoRaMacInitialization+0x39c>)
 800c04a:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800c04e:	4b2e      	ldr	r3, [pc, #184]	@ (800c108 <LoRaMacInitialization+0x3a0>)
 800c050:	f8c6 3354 	str.w	r3, [r6, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800c054:	4b2d      	ldr	r3, [pc, #180]	@ (800c10c <LoRaMacInitialization+0x3a4>)
 800c056:	f8c6 335c 	str.w	r3, [r6, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800c05a:	4b2d      	ldr	r3, [pc, #180]	@ (800c110 <LoRaMacInitialization+0x3a8>)
 800c05c:	f8c6 3350 	str.w	r3, [r6, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800c060:	4b2c      	ldr	r3, [pc, #176]	@ (800c114 <LoRaMacInitialization+0x3ac>)
 800c062:	f8c6 3358 	str.w	r3, [r6, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800c066:	4b2c      	ldr	r3, [pc, #176]	@ (800c118 <LoRaMacInitialization+0x3b0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f506 7053 	add.w	r0, r6, #844	@ 0x34c
 800c06e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800c070:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800c074:	f004 fddc 	bl	8010c30 <SecureElementInit>
 800c078:	bb80      	cbnz	r0, 800c0dc <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800c07a:	4620      	mov	r0, r4
 800c07c:	f001 fc68 	bl	800d950 <LoRaMacCryptoInit>
 800c080:	2800      	cmp	r0, #0
 800c082:	d14b      	bne.n	800c11c <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800c084:	f001 f88e 	bl	800d1a4 <LoRaMacCommandsInit>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d149      	bne.n	800c120 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800c08c:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800c090:	f001 fcb0 	bl	800d9f4 <LoRaMacCryptoSetMulticastReference>
 800c094:	4604      	mov	r4, r0
 800c096:	2800      	cmp	r0, #0
 800c098:	d144      	bne.n	800c124 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800c09a:	4d1f      	ldr	r5, [pc, #124]	@ (800c118 <LoRaMacInitialization+0x3b0>)
 800c09c:	696b      	ldr	r3, [r5, #20]
 800c09e:	4798      	blx	r3
 800c0a0:	f005 f884 	bl	80111ac <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c0a4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800c0a6:	4a0e      	ldr	r2, [pc, #56]	@ (800c0e0 <LoRaMacInitialization+0x378>)
 800c0a8:	f892 0119 	ldrb.w	r0, [r2, #281]	@ 0x119
 800c0ac:	4798      	blx	r3
    Radio.Sleep( );
 800c0ae:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c0b0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c0b2:	4658      	mov	r0, fp
 800c0b4:	f7fd fc84 	bl	80099c0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800c0b8:	e00c      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c0ba:	2403      	movs	r4, #3
 800c0bc:	e00a      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
 800c0be:	2403      	movs	r4, #3
 800c0c0:	e008      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c0c2:	2403      	movs	r4, #3
 800c0c4:	e006      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
 800c0c6:	2403      	movs	r4, #3
 800c0c8:	e004      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
 800c0ca:	2403      	movs	r4, #3
 800c0cc:	e002      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
 800c0ce:	2403      	movs	r4, #3
 800c0d0:	e000      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c0d2:	2409      	movs	r4, #9
}
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	b00d      	add	sp, #52	@ 0x34
 800c0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c0dc:	2411      	movs	r4, #17
 800c0de:	e7f9      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
 800c0e0:	20008000 	.word	0x20008000
 800c0e4:	20000a6c 	.word	0x20000a6c
 800c0e8:	01000400 	.word	0x01000400
 800c0ec:	200009dc 	.word	0x200009dc
 800c0f0:	0800b13d 	.word	0x0800b13d
 800c0f4:	0800b3bd 	.word	0x0800b3bd
 800c0f8:	0800b365 	.word	0x0800b365
 800c0fc:	08009d99 	.word	0x08009d99
 800c100:	200009d8 	.word	0x200009d8
 800c104:	0800b685 	.word	0x0800b685
 800c108:	0800b635 	.word	0x0800b635
 800c10c:	08009bf1 	.word	0x08009bf1
 800c110:	0800b60d 	.word	0x0800b60d
 800c114:	0800b5e5 	.word	0x0800b5e5
 800c118:	08016f38 	.word	0x08016f38
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c11c:	2411      	movs	r4, #17
 800c11e:	e7d9      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c120:	2413      	movs	r4, #19
 800c122:	e7d7      	b.n	800c0d4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c124:	2411      	movs	r4, #17
 800c126:	e7d5      	b.n	800c0d4 <LoRaMacInitialization+0x36c>

0800c128 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800c128:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800c12a:	2400      	movs	r4, #0
 800c12c:	4b03      	ldr	r3, [pc, #12]	@ (800c13c <LoRaMacStart+0x14>)
 800c12e:	f8c3 4340 	str.w	r4, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800c132:	f7fd fc31 	bl	8009998 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800c136:	4620      	mov	r0, r4
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	bf00      	nop
 800c13c:	20000a6c 	.word	0x20000a6c

0800c140 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800c140:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800c142:	f7ff fd9f 	bl	800bc84 <LoRaMacIsBusy>
 800c146:	b130      	cbz	r0, 800c156 <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800c148:	4b0b      	ldr	r3, [pc, #44]	@ (800c178 <LoRaMacStop+0x38>)
 800c14a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d010      	beq.n	800c174 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800c152:	2001      	movs	r0, #1
}
 800c154:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c156:	4b09      	ldr	r3, [pc, #36]	@ (800c17c <LoRaMacStop+0x3c>)
 800c158:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	d005      	beq.n	800c16c <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800c160:	4b05      	ldr	r3, [pc, #20]	@ (800c178 <LoRaMacStop+0x38>)
 800c162:	2201      	movs	r2, #1
 800c164:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 800c168:	2000      	movs	r0, #0
 800c16a:	e7f3      	b.n	800c154 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800c16c:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <LoRaMacStop+0x40>)
 800c16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c170:	4798      	blx	r3
 800c172:	e7f5      	b.n	800c160 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800c174:	2000      	movs	r0, #0
 800c176:	e7ed      	b.n	800c154 <LoRaMacStop+0x14>
 800c178:	20000a6c 	.word	0x20000a6c
 800c17c:	20008000 	.word	0x20008000
 800c180:	08016f38 	.word	0x08016f38

0800c184 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800c184:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800c186:	4c13      	ldr	r4, [pc, #76]	@ (800c1d4 <LoRaMacHalt+0x50>)
 800c188:	4620      	mov	r0, r4
 800c18a:	f007 fe5d 	bl	8013e48 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800c18e:	f104 0018 	add.w	r0, r4, #24
 800c192:	f007 fe59 	bl	8013e48 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800c196:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800c19a:	f007 fe55 	bl	8013e48 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800c19e:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 800c1a2:	f007 fe51 	bl	8013e48 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800c1a6:	f000 ff67 	bl	800d078 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800c1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d8 <LoRaMacHalt+0x54>)
 800c1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ae:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800c1b0:	2500      	movs	r5, #0
 800c1b2:	f844 5c28 	str.w	r5, [r4, #-40]

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800c1b6:	4e09      	ldr	r6, [pc, #36]	@ (800c1dc <LoRaMacHalt+0x58>)
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f7ff f927 	bl	800b40c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800c1be:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4806      	ldr	r0, [pc, #24]	@ (800c1e0 <LoRaMacHalt+0x5c>)
 800c1c6:	f005 f804 	bl	80111d2 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f844 3c28 	str.w	r3, [r4, #-40]

    return LORAMAC_STATUS_OK;
}
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	20000dd4 	.word	0x20000dd4
 800c1d8:	08016f38 	.word	0x08016f38
 800c1dc:	20008000 	.word	0x20008000
 800c1e0:	200085cc 	.word	0x200085cc

0800c1e4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800c1e4:	b530      	push	{r4, r5, lr}
 800c1e6:	b08b      	sub	sp, #44	@ 0x2c
 800c1e8:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c1ea:	4b31      	ldr	r3, [pc, #196]	@ (800c2b0 <LoRaMacQueryTxPossible+0xcc>)
 800c1ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c1ee:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c1f0:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800c1f4:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c1f8:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800c1fc:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800c200:	4b2c      	ldr	r3, [pc, #176]	@ (800c2b4 <LoRaMacQueryTxPossible+0xd0>)
 800c202:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800c206:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800c20a:	2300      	movs	r3, #0
 800c20c:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800c20e:	2900      	cmp	r1, #0
 800c210:	d048      	beq.n	800c2a4 <LoRaMacQueryTxPossible+0xc0>
 800c212:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800c214:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c218:	4b25      	ldr	r3, [pc, #148]	@ (800c2b0 <LoRaMacQueryTxPossible+0xcc>)
 800c21a:	f893 111a 	ldrb.w	r1, [r3, #282]	@ 0x11a
 800c21e:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c222:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800c224:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800c228:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800c22c:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800c230:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c234:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800c238:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c23c:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 800c240:	f88d 1021 	strb.w	r1, [sp, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800c244:	f88d 2022 	strb.w	r2, [sp, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c248:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800c24c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800c250:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c254:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800c258:	ab04      	add	r3, sp, #16
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	f10d 030d 	add.w	r3, sp, #13
 800c260:	f10d 020e 	add.w	r2, sp, #14
 800c264:	f10d 010f 	add.w	r1, sp, #15
 800c268:	a805      	add	r0, sp, #20
 800c26a:	f000 fe77 	bl	800cf5c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c26e:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800c272:	f7fd fce1 	bl	8009c38 <GetMaxAppPayloadWithoutFOptsLength>
 800c276:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c278:	a802      	add	r0, sp, #8
 800c27a:	f001 f831 	bl	800d2e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800c27e:	b998      	cbnz	r0, 800c2a8 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800c280:	9b02      	ldr	r3, [sp, #8]
 800c282:	2b0f      	cmp	r3, #15
 800c284:	d80a      	bhi.n	800c29c <LoRaMacQueryTxPossible+0xb8>
 800c286:	786a      	ldrb	r2, [r5, #1]
 800c288:	4293      	cmp	r3, r2
 800c28a:	d807      	bhi.n	800c29c <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800c290:	9b02      	ldr	r3, [sp, #8]
 800c292:	441c      	add	r4, r3
 800c294:	42a2      	cmp	r2, r4
 800c296:	d309      	bcc.n	800c2ac <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800c298:	b00b      	add	sp, #44	@ 0x2c
 800c29a:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800c2a0:	2008      	movs	r0, #8
 800c2a2:	e7f9      	b.n	800c298 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c2a4:	2003      	movs	r0, #3
 800c2a6:	e7f7      	b.n	800c298 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c2a8:	2013      	movs	r0, #19
 800c2aa:	e7f5      	b.n	800c298 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800c2ac:	2008      	movs	r0, #8
 800c2ae:	e7f3      	b.n	800c298 <LoRaMacQueryTxPossible+0xb4>
 800c2b0:	20008000 	.word	0x20008000
 800c2b4:	20000a6c 	.word	0x20000a6c

0800c2b8 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	f000 815f 	beq.w	800c57c <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800c2be:	b510      	push	{r4, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800c2c4:	7800      	ldrb	r0, [r0, #0]
 800c2c6:	2841      	cmp	r0, #65	@ 0x41
 800c2c8:	f200 8154 	bhi.w	800c574 <LoRaMacMibGetRequestConfirm+0x2bc>
 800c2cc:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c2d0:	00470042 	.word	0x00470042
 800c2d4:	0052004d 	.word	0x0052004d
 800c2d8:	005d0057 	.word	0x005d0057
 800c2dc:	01520063 	.word	0x01520063
 800c2e0:	01520152 	.word	0x01520152
 800c2e4:	01520152 	.word	0x01520152
 800c2e8:	01520152 	.word	0x01520152
 800c2ec:	006b0152 	.word	0x006b0152
 800c2f0:	00770071 	.word	0x00770071
 800c2f4:	008c0084 	.word	0x008c0084
 800c2f8:	009c0094 	.word	0x009c0094
 800c2fc:	00a400b1 	.word	0x00a400b1
 800c300:	00c400be 	.word	0x00c400be
 800c304:	00ce00c9 	.word	0x00ce00c9
 800c308:	00d800d3 	.word	0x00d800d3
 800c30c:	00ee00dd 	.word	0x00ee00dd
 800c310:	010000f4 	.word	0x010000f4
 800c314:	010600fa 	.word	0x010600fa
 800c318:	0111010b 	.word	0x0111010b
 800c31c:	0117011f 	.word	0x0117011f
 800c320:	0152011b 	.word	0x0152011b
 800c324:	01520125 	.word	0x01520125
 800c328:	01520152 	.word	0x01520152
 800c32c:	01520152 	.word	0x01520152
 800c330:	01520152 	.word	0x01520152
 800c334:	01520152 	.word	0x01520152
 800c338:	01520152 	.word	0x01520152
 800c33c:	01520152 	.word	0x01520152
 800c340:	01520152 	.word	0x01520152
 800c344:	0134012e 	.word	0x0134012e
 800c348:	0140013a 	.word	0x0140013a
 800c34c:	014c0146 	.word	0x014c0146
 800c350:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800c354:	4b8c      	ldr	r3, [pc, #560]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c356:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c35a:	7123      	strb	r3, [r4, #4]
            break;
 800c35c:	e111      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c35e:	4b8a      	ldr	r3, [pc, #552]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c360:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c364:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c366:	2000      	movs	r0, #0
            break;
 800c368:	e10b      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800c36a:	6860      	ldr	r0, [r4, #4]
 800c36c:	f004 fdf6 	bl	8010f5c <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c370:	2000      	movs	r0, #0
            break;
 800c372:	e106      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800c374:	6860      	ldr	r0, [r4, #4]
 800c376:	f004 fe0f 	bl	8010f98 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c37a:	2000      	movs	r0, #0
            break;
 800c37c:	e101      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800c37e:	4b82      	ldr	r3, [pc, #520]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c380:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800c384:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c386:	2000      	movs	r0, #0
            break;
 800c388:	e0fb      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800c38a:	4b7f      	ldr	r3, [pc, #508]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c38c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c390:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c392:	2000      	movs	r0, #0
            break;
 800c394:	e0f5      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800c396:	1d21      	adds	r1, r4, #4
 800c398:	4b7b      	ldr	r3, [pc, #492]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c39a:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800c39e:	f004 fe17 	bl	8010fd0 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3a2:	2000      	movs	r0, #0
            break;
 800c3a4:	e0ed      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800c3a6:	4b78      	ldr	r3, [pc, #480]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c3a8:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800c3ac:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3ae:	2000      	movs	r0, #0
            break;
 800c3b0:	e0e7      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c3b2:	4b75      	ldr	r3, [pc, #468]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c3b4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800c3b8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3ba:	2000      	movs	r0, #0
            break;
 800c3bc:	e0e1      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800c3be:	231c      	movs	r3, #28
 800c3c0:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c3c4:	a902      	add	r1, sp, #8
 800c3c6:	4b70      	ldr	r3, [pc, #448]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c3c8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c3cc:	f001 fe40 	bl	800e050 <RegionGetPhyParam>
 800c3d0:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800c3d2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3d4:	2000      	movs	r0, #0
            break;
 800c3d6:	e0d4      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c3d8:	3404      	adds	r4, #4
 800c3da:	4b6c      	ldr	r3, [pc, #432]	@ (800c58c <LoRaMacMibGetRequestConfirm+0x2d4>)
 800c3dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3e0:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3e4:	2000      	movs	r0, #0
            break;
 800c3e6:	e0cc      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800c3e8:	3404      	adds	r4, #4
 800c3ea:	4b69      	ldr	r3, [pc, #420]	@ (800c590 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800c3ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3f0:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3f4:	2000      	movs	r0, #0
            break;
 800c3f6:	e0c4      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800c3f8:	3404      	adds	r4, #4
 800c3fa:	4b66      	ldr	r3, [pc, #408]	@ (800c594 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800c3fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c400:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c404:	2000      	movs	r0, #0
            break;
 800c406:	e0bc      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800c408:	3404      	adds	r4, #4
 800c40a:	4b63      	ldr	r3, [pc, #396]	@ (800c598 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800c40c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c410:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c414:	2000      	movs	r0, #0
            break;
 800c416:	e0b4      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800c418:	231a      	movs	r3, #26
 800c41a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c41e:	a902      	add	r1, sp, #8
 800c420:	4b59      	ldr	r3, [pc, #356]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c422:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c426:	f001 fe13 	bl	800e050 <RegionGetPhyParam>
 800c42a:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800c42c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c42e:	2000      	movs	r0, #0
            break;
 800c430:	e0a7      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800c432:	2319      	movs	r3, #25
 800c434:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c438:	a902      	add	r1, sp, #8
 800c43a:	4b53      	ldr	r3, [pc, #332]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c43c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c440:	f001 fe06 	bl	800e050 <RegionGetPhyParam>
 800c444:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800c446:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c448:	2000      	movs	r0, #0
            break;
 800c44a:	e09a      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c44c:	4b4e      	ldr	r3, [pc, #312]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c44e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c452:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c454:	2000      	movs	r0, #0
            break;
 800c456:	e094      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800c458:	4b4b      	ldr	r3, [pc, #300]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c45a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c45c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c45e:	2000      	movs	r0, #0
            break;
 800c460:	e08f      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800c462:	4b49      	ldr	r3, [pc, #292]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c466:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c468:	2000      	movs	r0, #0
            break;
 800c46a:	e08a      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800c46c:	4b46      	ldr	r3, [pc, #280]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c46e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c470:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c472:	2000      	movs	r0, #0
            break;
 800c474:	e085      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800c476:	4b44      	ldr	r3, [pc, #272]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c47a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c47c:	2000      	movs	r0, #0
            break;
 800c47e:	e080      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800c480:	4b41      	ldr	r3, [pc, #260]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c484:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c486:	2000      	movs	r0, #0
            break;
 800c488:	e07b      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800c48a:	2302      	movs	r3, #2
 800c48c:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c490:	4b3d      	ldr	r3, [pc, #244]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c492:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800c496:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c49a:	a902      	add	r1, sp, #8
 800c49c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c4a0:	f001 fdd6 	bl	800e050 <RegionGetPhyParam>
 800c4a4:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800c4a6:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4a8:	2000      	movs	r0, #0
            break;
 800c4aa:	e06a      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c4ac:	4b36      	ldr	r3, [pc, #216]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4ae:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800c4b2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4b4:	2000      	movs	r0, #0
            break;
 800c4b6:	e064      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c4b8:	4b33      	ldr	r3, [pc, #204]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4ba:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800c4be:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4c0:	2000      	movs	r0, #0
            break;
 800c4c2:	e05e      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c4c4:	4b30      	ldr	r3, [pc, #192]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4c6:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800c4ca:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4cc:	2000      	movs	r0, #0
            break;
 800c4ce:	e058      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c4d0:	4b2d      	ldr	r3, [pc, #180]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4d2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800c4d6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4d8:	2000      	movs	r0, #0
            break;
 800c4da:	e052      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800c4dc:	4b2a      	ldr	r3, [pc, #168]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4e0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4e2:	2000      	movs	r0, #0
            break;
 800c4e4:	e04d      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800c4e6:	4b28      	ldr	r3, [pc, #160]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c4ec:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4ee:	2000      	movs	r0, #0
            break;
 800c4f0:	e047      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c4f2:	4b25      	ldr	r3, [pc, #148]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4f8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4fa:	2000      	movs	r0, #0
            break;
 800c4fc:	e041      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800c4fe:	4b22      	ldr	r3, [pc, #136]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c500:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c502:	2000      	movs	r0, #0
            break;
 800c504:	e03d      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800c506:	4b25      	ldr	r3, [pc, #148]	@ (800c59c <LoRaMacMibGetRequestConfirm+0x2e4>)
 800c508:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c50a:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800c50c:	e039      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800c50e:	4b1e      	ldr	r3, [pc, #120]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c510:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c514:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c516:	2000      	movs	r0, #0
            break;
 800c518:	e033      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800c51a:	4b1b      	ldr	r3, [pc, #108]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c51c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800c520:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800c522:	f001 feb9 	bl	800e298 <RegionGetVersion>
 800c526:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c528:	2000      	movs	r0, #0
            break;
 800c52a:	e02a      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c52c:	4b16      	ldr	r3, [pc, #88]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c532:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c534:	2000      	movs	r0, #0
            break;
 800c536:	e024      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800c538:	4b13      	ldr	r3, [pc, #76]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c53a:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800c53e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c540:	2000      	movs	r0, #0
            break;
 800c542:	e01e      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800c544:	4b10      	ldr	r3, [pc, #64]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c546:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800c54a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c54c:	2000      	movs	r0, #0
            break;
 800c54e:	e018      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800c550:	4b0d      	ldr	r3, [pc, #52]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c552:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800c556:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c558:	2000      	movs	r0, #0
            break;
 800c55a:	e012      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800c55c:	4b0a      	ldr	r3, [pc, #40]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c55e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800c562:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c564:	2000      	movs	r0, #0
            break;
 800c566:	e00c      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800c568:	4b07      	ldr	r3, [pc, #28]	@ (800c588 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c56a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800c56e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c570:	2000      	movs	r0, #0
            break;
 800c572:	e006      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800c574:	4620      	mov	r0, r4
 800c576:	f000 fd83 	bl	800d080 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800c57a:	e002      	b.n	800c582 <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c57c:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800c57e:	4770      	bx	lr
    switch( mibGet->Type )
 800c580:	2018      	movs	r0, #24
}
 800c582:	b004      	add	sp, #16
 800c584:	bd10      	pop	{r4, pc}
 800c586:	bf00      	nop
 800c588:	20008000 	.word	0x20008000
 800c58c:	2000806c 	.word	0x2000806c
 800c590:	200080b4 	.word	0x200080b4
 800c594:	20008074 	.word	0x20008074
 800c598:	200080bc 	.word	0x200080bc
 800c59c:	200085cc 	.word	0x200085cc

0800c5a0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800c5a0:	b530      	push	{r4, r5, lr}
 800c5a2:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	f000 82c5 	beq.w	800cb34 <LoRaMacMibSetRequestConfirm+0x594>
 800c5aa:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800c5ac:	4ba0      	ldr	r3, [pc, #640]	@ (800c830 <LoRaMacMibSetRequestConfirm+0x290>)
 800c5ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c5b2:	f013 0f02 	tst.w	r3, #2
 800c5b6:	f040 82bf 	bne.w	800cb38 <LoRaMacMibSetRequestConfirm+0x598>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800c5ba:	7804      	ldrb	r4, [r0, #0]
 800c5bc:	2c41      	cmp	r4, #65	@ 0x41
 800c5be:	f200 8278 	bhi.w	800cab2 <LoRaMacMibSetRequestConfirm+0x512>
 800c5c2:	e8df f014 	tbh	[pc, r4, lsl #1]
 800c5c6:	0042      	.short	0x0042
 800c5c8:	00500047 	.word	0x00500047
 800c5cc:	00610059 	.word	0x00610059
 800c5d0:	006d0067 	.word	0x006d0067
 800c5d4:	0089007c 	.word	0x0089007c
 800c5d8:	00a30096 	.word	0x00a30096
 800c5dc:	00bd00b0 	.word	0x00bd00b0
 800c5e0:	00d700ca 	.word	0x00d700ca
 800c5e4:	00ef00e4 	.word	0x00ef00e4
 800c5e8:	00f50276 	.word	0x00f50276
 800c5ec:	013f011b 	.word	0x013f011b
 800c5f0:	0197016d 	.word	0x0197016d
 800c5f4:	01a70187 	.word	0x01a70187
 800c5f8:	01b701b2 	.word	0x01b701b2
 800c5fc:	01c101bc 	.word	0x01c101bc
 800c600:	027601c6 	.word	0x027601c6
 800c604:	01e001cb 	.word	0x01e001cb
 800c608:	01f9020e 	.word	0x01f9020e
 800c60c:	022a0223 	.word	0x022a0223
 800c610:	02380232 	.word	0x02380232
 800c614:	0276023e 	.word	0x0276023e
 800c618:	02760242 	.word	0x02760242
 800c61c:	02760276 	.word	0x02760276
 800c620:	02760276 	.word	0x02760276
 800c624:	02760276 	.word	0x02760276
 800c628:	02760276 	.word	0x02760276
 800c62c:	02760276 	.word	0x02760276
 800c630:	02760276 	.word	0x02760276
 800c634:	02760276 	.word	0x02760276
 800c638:	02520276 	.word	0x02520276
 800c63c:	025e0258 	.word	0x025e0258
 800c640:	026a0264 	.word	0x026a0264
 800c644:	027a0270 	.word	0x027a0270
 800c648:	027a      	.short	0x027a
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800c64a:	7900      	ldrb	r0, [r0, #4]
 800c64c:	f7ff f90a 	bl	800b864 <SwitchClass>
 800c650:	4604      	mov	r4, r0
            break;
 800c652:	e233      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800c654:	7903      	ldrb	r3, [r0, #4]
 800c656:	2b02      	cmp	r3, #2
 800c658:	f000 823a 	beq.w	800cad0 <LoRaMacMibSetRequestConfirm+0x530>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800c65c:	4a75      	ldr	r2, [pc, #468]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c65e:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c662:	2400      	movs	r4, #0
 800c664:	e22a      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800c666:	6840      	ldr	r0, [r0, #4]
 800c668:	f004 fc6a 	bl	8010f40 <SecureElementSetDevEui>
 800c66c:	4604      	mov	r4, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	f000 8224 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c674:	2403      	movs	r4, #3
 800c676:	e221      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800c678:	6840      	ldr	r0, [r0, #4]
 800c67a:	f004 fc7d 	bl	8010f78 <SecureElementSetJoinEui>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f040 821c 	bne.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c684:	4604      	mov	r4, r0
 800c686:	e219      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800c688:	7902      	ldrb	r2, [r0, #4]
 800c68a:	4b6a      	ldr	r3, [pc, #424]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c68c:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c690:	2400      	movs	r4, #0
            break;
 800c692:	e213      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800c694:	6842      	ldr	r2, [r0, #4]
 800c696:	4b67      	ldr	r3, [pc, #412]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c698:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c69c:	2400      	movs	r4, #0
            break;
 800c69e:	e20d      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800c6a0:	6841      	ldr	r1, [r0, #4]
 800c6a2:	4b64      	ldr	r3, [pc, #400]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c6a4:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800c6a8:	f004 fc84 	bl	8010fb4 <SecureElementSetDevAddr>
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	f040 8210 	bne.w	800cad4 <LoRaMacMibSetRequestConfirm+0x534>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c6b4:	686a      	ldr	r2, [r5, #4]
 800c6b6:	4b5f      	ldr	r3, [pc, #380]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c6b8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800c6bc:	e1fe      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800c6be:	6841      	ldr	r1, [r0, #4]
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	f000 8209 	beq.w	800cad8 <LoRaMacMibSetRequestConfirm+0x538>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	f001 fa9e 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f000 81f4 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c6d4:	2411      	movs	r4, #17
 800c6d6:	e230      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800c6d8:	6841      	ldr	r1, [r0, #4]
 800c6da:	2900      	cmp	r1, #0
 800c6dc:	f000 81fe 	beq.w	800cadc <LoRaMacMibSetRequestConfirm+0x53c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f001 fa91 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f000 81e7 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c6ee:	2411      	movs	r4, #17
 800c6f0:	e223      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800c6f2:	6841      	ldr	r1, [r0, #4]
 800c6f4:	2900      	cmp	r1, #0
 800c6f6:	f000 81f3 	beq.w	800cae0 <LoRaMacMibSetRequestConfirm+0x540>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c6fa:	2008      	movs	r0, #8
 800c6fc:	f001 fa84 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c700:	4604      	mov	r4, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	f000 81da 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c708:	2411      	movs	r4, #17
 800c70a:	e216      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800c70c:	6841      	ldr	r1, [r0, #4]
 800c70e:	2900      	cmp	r1, #0
 800c710:	f000 81e8 	beq.w	800cae4 <LoRaMacMibSetRequestConfirm+0x544>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c714:	2009      	movs	r0, #9
 800c716:	f001 fa77 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c71a:	4604      	mov	r4, r0
 800c71c:	2800      	cmp	r0, #0
 800c71e:	f000 81cd 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c722:	2411      	movs	r4, #17
 800c724:	e209      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800c726:	6841      	ldr	r1, [r0, #4]
 800c728:	2900      	cmp	r1, #0
 800c72a:	f000 81dd 	beq.w	800cae8 <LoRaMacMibSetRequestConfirm+0x548>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c72e:	200c      	movs	r0, #12
 800c730:	f001 fa6a 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c734:	4604      	mov	r4, r0
 800c736:	2800      	cmp	r0, #0
 800c738:	f000 81c0 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c73c:	2411      	movs	r4, #17
 800c73e:	e1fc      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800c740:	6841      	ldr	r1, [r0, #4]
 800c742:	2900      	cmp	r1, #0
 800c744:	f000 81d2 	beq.w	800caec <LoRaMacMibSetRequestConfirm+0x54c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c748:	200d      	movs	r0, #13
 800c74a:	f001 fa5d 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c74e:	4604      	mov	r4, r0
 800c750:	2800      	cmp	r0, #0
 800c752:	f000 81b3 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c756:	2411      	movs	r4, #17
 800c758:	e1ef      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800c75a:	6841      	ldr	r1, [r0, #4]
 800c75c:	2900      	cmp	r1, #0
 800c75e:	f000 81c7 	beq.w	800caf0 <LoRaMacMibSetRequestConfirm+0x550>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800c762:	200e      	movs	r0, #14
 800c764:	f001 fa50 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c768:	4604      	mov	r4, r0
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f000 81a6 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c770:	2411      	movs	r4, #17
 800c772:	e1e2      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800c774:	6841      	ldr	r1, [r0, #4]
 800c776:	2900      	cmp	r1, #0
 800c778:	f000 81bc 	beq.w	800caf4 <LoRaMacMibSetRequestConfirm+0x554>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800c77c:	200f      	movs	r0, #15
 800c77e:	f001 fa43 	bl	800dc08 <LoRaMacCryptoSetKey>
 800c782:	4604      	mov	r4, r0
 800c784:	2800      	cmp	r0, #0
 800c786:	f000 8199 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c78a:	2411      	movs	r4, #17
 800c78c:	e1d5      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800c78e:	7900      	ldrb	r0, [r0, #4]
 800c790:	4b28      	ldr	r3, [pc, #160]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c792:	f883 0119 	strb.w	r0, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c796:	4c28      	ldr	r4, [pc, #160]	@ (800c838 <LoRaMacMibSetRequestConfirm+0x298>)
 800c798:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c79a:	4798      	blx	r3
            Radio.Sleep( );
 800c79c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c79e:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c7a0:	2400      	movs	r4, #0
            break;
 800c7a2:	e18b      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800c7a4:	7902      	ldrb	r2, [r0, #4]
 800c7a6:	4b23      	ldr	r3, [pc, #140]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c7a8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c7ac:	2400      	movs	r4, #0
            break;
 800c7ae:	e185      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c7b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c7b4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c7b8:	4b1e      	ldr	r3, [pc, #120]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c7ba:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800c7be:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800c7c2:	2207      	movs	r2, #7
 800c7c4:	a901      	add	r1, sp, #4
 800c7c6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c7ca:	f001 fc73 	bl	800e0b4 <RegionVerify>
 800c7ce:	b908      	cbnz	r0, 800c7d4 <LoRaMacMibSetRequestConfirm+0x234>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c7d0:	2403      	movs	r4, #3
 800c7d2:	e173      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800c7d4:	686b      	ldr	r3, [r5, #4]
 800c7d6:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800c7d8:	2200      	movs	r2, #0
 800c7da:	a901      	add	r1, sp, #4
 800c7dc:	4b15      	ldr	r3, [pc, #84]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c7de:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c7e2:	f001 fc67 	bl	800e0b4 <RegionVerify>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f000 8186 	beq.w	800caf8 <LoRaMacMibSetRequestConfirm+0x558>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800c7ec:	4b13      	ldr	r3, [pc, #76]	@ (800c83c <LoRaMacMibSetRequestConfirm+0x29c>)
 800c7ee:	3504      	adds	r5, #4
 800c7f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c7f4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c7f8:	2400      	movs	r4, #0
 800c7fa:	e15f      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c7fc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c800:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c804:	4b0b      	ldr	r3, [pc, #44]	@ (800c834 <LoRaMacMibSetRequestConfirm+0x294>)
 800c806:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800c80a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c80e:	2207      	movs	r2, #7
 800c810:	a901      	add	r1, sp, #4
 800c812:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c816:	f001 fc4d 	bl	800e0b4 <RegionVerify>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	f000 816e 	beq.w	800cafc <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800c820:	4b07      	ldr	r3, [pc, #28]	@ (800c840 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c822:	3504      	adds	r5, #4
 800c824:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c828:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c82c:	2400      	movs	r4, #0
 800c82e:	e145      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
 800c830:	20000a6c 	.word	0x20000a6c
 800c834:	20008000 	.word	0x20008000
 800c838:	08016f38 	.word	0x08016f38
 800c83c:	2000806c 	.word	0x2000806c
 800c840:	200080b4 	.word	0x200080b4
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c844:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c848:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c84c:	4bb5      	ldr	r3, [pc, #724]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c84e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800c852:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c856:	2207      	movs	r2, #7
 800c858:	a901      	add	r1, sp, #4
 800c85a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c85e:	f001 fc29 	bl	800e0b4 <RegionVerify>
 800c862:	2800      	cmp	r0, #0
 800c864:	f000 814c 	beq.w	800cb00 <LoRaMacMibSetRequestConfirm+0x560>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800c868:	4bae      	ldr	r3, [pc, #696]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c86a:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800c86e:	3504      	adds	r5, #4
 800c870:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c874:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c878:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d001      	beq.n	800c884 <LoRaMacMibSetRequestConfirm+0x2e4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c880:	2400      	movs	r4, #0
 800c882:	e11b      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c884:	f1a2 0374 	sub.w	r3, r2, #116	@ 0x74
 800c888:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 800c88c:	2c00      	cmp	r4, #0
 800c88e:	f000 8115 	beq.w	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800c892:	4ba5      	ldr	r3, [pc, #660]	@ (800cb28 <LoRaMacMibSetRequestConfirm+0x588>)
 800c894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c896:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800c898:	f7fe fd0a 	bl	800b2b0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c89c:	2400      	movs	r4, #0
 800c89e:	e10d      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c8a0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c8a4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c8a8:	4b9e      	ldr	r3, [pc, #632]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c8aa:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800c8ae:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c8b2:	2207      	movs	r2, #7
 800c8b4:	a901      	add	r1, sp, #4
 800c8b6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c8ba:	f001 fbfb 	bl	800e0b4 <RegionVerify>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	f000 8120 	beq.w	800cb04 <LoRaMacMibSetRequestConfirm+0x564>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800c8c4:	4b99      	ldr	r3, [pc, #612]	@ (800cb2c <LoRaMacMibSetRequestConfirm+0x58c>)
 800c8c6:	3504      	adds	r5, #4
 800c8c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8cc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c8d0:	2400      	movs	r4, #0
 800c8d2:	e0f3      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800c8d4:	6843      	ldr	r3, [r0, #4]
 800c8d6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c8de:	a902      	add	r1, sp, #8
 800c8e0:	4b90      	ldr	r3, [pc, #576]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c8e2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c8e6:	f001 fc02 	bl	800e0ee <RegionChanMaskSet>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	f000 810c 	beq.w	800cb08 <LoRaMacMibSetRequestConfirm+0x568>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c8f0:	2400      	movs	r4, #0
 800c8f2:	e0e3      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800c8f4:	6843      	ldr	r3, [r0, #4]
 800c8f6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c8fe:	a902      	add	r1, sp, #8
 800c900:	4b88      	ldr	r3, [pc, #544]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c902:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c906:	f001 fbf2 	bl	800e0ee <RegionChanMaskSet>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	f000 80fe 	beq.w	800cb0c <LoRaMacMibSetRequestConfirm+0x56c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c910:	2400      	movs	r4, #0
 800c912:	e0d3      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800c914:	7902      	ldrb	r2, [r0, #4]
 800c916:	1e53      	subs	r3, r2, #1
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b0e      	cmp	r3, #14
 800c91c:	f200 80f8 	bhi.w	800cb10 <LoRaMacMibSetRequestConfirm+0x570>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800c920:	4b80      	ldr	r3, [pc, #512]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c922:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c926:	2400      	movs	r4, #0
 800c928:	e0c8      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800c92a:	6842      	ldr	r2, [r0, #4]
 800c92c:	4b7d      	ldr	r3, [pc, #500]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c92e:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c930:	2400      	movs	r4, #0
            break;
 800c932:	e0c3      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800c934:	6842      	ldr	r2, [r0, #4]
 800c936:	4b7b      	ldr	r3, [pc, #492]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c938:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c93a:	2400      	movs	r4, #0
            break;
 800c93c:	e0be      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800c93e:	6842      	ldr	r2, [r0, #4]
 800c940:	4b78      	ldr	r3, [pc, #480]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c942:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c944:	2400      	movs	r4, #0
            break;
 800c946:	e0b9      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800c948:	6842      	ldr	r2, [r0, #4]
 800c94a:	4b76      	ldr	r3, [pc, #472]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c94c:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c94e:	2400      	movs	r4, #0
            break;
 800c950:	e0b4      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800c952:	6842      	ldr	r2, [r0, #4]
 800c954:	4b73      	ldr	r3, [pc, #460]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c956:	665a      	str	r2, [r3, #100]	@ 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c958:	2400      	movs	r4, #0
            break;
 800c95a:	e0af      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800c95c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c960:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800c964:	2206      	movs	r2, #6
 800c966:	a901      	add	r1, sp, #4
 800c968:	4b6e      	ldr	r3, [pc, #440]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c96a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c96e:	f001 fba1 	bl	800e0b4 <RegionVerify>
 800c972:	2800      	cmp	r0, #0
 800c974:	f000 80ce 	beq.w	800cb14 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800c978:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c97c:	4b69      	ldr	r3, [pc, #420]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c97e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c982:	2400      	movs	r4, #0
 800c984:	e09a      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800c986:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c98a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c98e:	4b65      	ldr	r3, [pc, #404]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c990:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800c994:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c998:	2205      	movs	r2, #5
 800c99a:	a901      	add	r1, sp, #4
 800c99c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c9a0:	f001 fb88 	bl	800e0b4 <RegionVerify>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	f000 80b7 	beq.w	800cb18 <LoRaMacMibSetRequestConfirm+0x578>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c9aa:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c9ae:	4b5d      	ldr	r3, [pc, #372]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c9b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c9b4:	2400      	movs	r4, #0
 800c9b6:	e081      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800c9b8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c9bc:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800c9c0:	220a      	movs	r2, #10
 800c9c2:	a901      	add	r1, sp, #4
 800c9c4:	4b57      	ldr	r3, [pc, #348]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c9c6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c9ca:	f001 fb73 	bl	800e0b4 <RegionVerify>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	f000 80a4 	beq.w	800cb1c <LoRaMacMibSetRequestConfirm+0x57c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800c9d4:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c9d8:	4b52      	ldr	r3, [pc, #328]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c9da:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c9de:	2400      	movs	r4, #0
 800c9e0:	e06c      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800c9e2:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c9e6:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800c9ea:	2209      	movs	r2, #9
 800c9ec:	a901      	add	r1, sp, #4
 800c9ee:	4b4d      	ldr	r3, [pc, #308]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800c9f0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c9f4:	f001 fb5e 	bl	800e0b4 <RegionVerify>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	f000 8091 	beq.w	800cb20 <LoRaMacMibSetRequestConfirm+0x580>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800c9fe:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ca02:	4b48      	ldr	r3, [pc, #288]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca08:	2400      	movs	r4, #0
 800ca0a:	e057      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ca0c:	6842      	ldr	r2, [r0, #4]
 800ca0e:	4b45      	ldr	r3, [pc, #276]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800ca14:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca16:	2400      	movs	r4, #0
            break;
 800ca18:	e050      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ca1a:	7902      	ldrb	r2, [r0, #4]
 800ca1c:	4b41      	ldr	r3, [pc, #260]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca1e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800ca22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca26:	2400      	movs	r4, #0
            break;
 800ca28:	e048      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ca2a:	6842      	ldr	r2, [r0, #4]
 800ca2c:	4b3d      	ldr	r3, [pc, #244]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca32:	2400      	movs	r4, #0
            break;
 800ca34:	e042      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ca36:	6842      	ldr	r2, [r0, #4]
 800ca38:	4b3a      	ldr	r3, [pc, #232]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca3a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca3e:	2400      	movs	r4, #0
            break;
 800ca40:	e03c      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800ca42:	f7fe fd49 	bl	800b4d8 <RestoreNvmData>
 800ca46:	4604      	mov	r4, r0
            break;
 800ca48:	e038      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ca4a:	7983      	ldrb	r3, [r0, #6]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d901      	bls.n	800ca54 <LoRaMacMibSetRequestConfirm+0x4b4>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca50:	2403      	movs	r4, #3
 800ca52:	e033      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800ca54:	6842      	ldr	r2, [r0, #4]
 800ca56:	4b33      	ldr	r3, [pc, #204]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca58:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ca5c:	6840      	ldr	r0, [r0, #4]
 800ca5e:	f000 ff8f 	bl	800d980 <LoRaMacCryptoSetLrWanVersion>
 800ca62:	4604      	mov	r4, r0
 800ca64:	b350      	cbz	r0, 800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ca66:	2411      	movs	r4, #17
 800ca68:	e067      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800ca6a:	6842      	ldr	r2, [r0, #4]
 800ca6c:	4b2d      	ldr	r3, [pc, #180]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca72:	2400      	movs	r4, #0
            break;
 800ca74:	e022      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800ca76:	7902      	ldrb	r2, [r0, #4]
 800ca78:	4b2a      	ldr	r3, [pc, #168]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca7a:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca7e:	2400      	movs	r4, #0
            break;
 800ca80:	e01c      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800ca82:	8882      	ldrh	r2, [r0, #4]
 800ca84:	4b27      	ldr	r3, [pc, #156]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca86:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca8a:	2400      	movs	r4, #0
            break;
 800ca8c:	e016      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800ca8e:	8882      	ldrh	r2, [r0, #4]
 800ca90:	4b24      	ldr	r3, [pc, #144]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca92:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ca96:	2400      	movs	r4, #0
            break;
 800ca98:	e010      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800ca9a:	8882      	ldrh	r2, [r0, #4]
 800ca9c:	4b21      	ldr	r3, [pc, #132]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800ca9e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800caa2:	2400      	movs	r4, #0
            break;
 800caa4:	e00a      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800caa6:	8882      	ldrh	r2, [r0, #4]
 800caa8:	4b1e      	ldr	r3, [pc, #120]	@ (800cb24 <LoRaMacMibSetRequestConfirm+0x584>)
 800caaa:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800caae:	2400      	movs	r4, #0
            break;
 800cab0:	e004      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800cab2:	f000 fae7 	bl	800d084 <LoRaMacMibClassBSetRequestConfirm>
 800cab6:	4604      	mov	r4, r0
            break;
 800cab8:	e000      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
    switch( mibSet->Type )
 800caba:	2418      	movs	r4, #24
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800cabc:	2c00      	cmp	r4, #0
 800cabe:	d13c      	bne.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800cac0:	4a1b      	ldr	r2, [pc, #108]	@ (800cb30 <LoRaMacMibSetRequestConfirm+0x590>)
 800cac2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800cac6:	f043 0320 	orr.w	r3, r3, #32
 800caca:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800cace:	e034      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cad0:	2403      	movs	r4, #3
 800cad2:	e7f3      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cad4:	2403      	movs	r4, #3
 800cad6:	e7f1      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cad8:	2403      	movs	r4, #3
 800cada:	e7ef      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cadc:	2403      	movs	r4, #3
 800cade:	e7ed      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cae0:	2403      	movs	r4, #3
 800cae2:	e7eb      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cae4:	2403      	movs	r4, #3
 800cae6:	e7e9      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cae8:	2403      	movs	r4, #3
 800caea:	e7e7      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800caec:	2403      	movs	r4, #3
 800caee:	e7e5      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800caf0:	2403      	movs	r4, #3
 800caf2:	e7e3      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800caf4:	2403      	movs	r4, #3
 800caf6:	e7e1      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800caf8:	2403      	movs	r4, #3
 800cafa:	e7df      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cafc:	2403      	movs	r4, #3
 800cafe:	e7dd      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb00:	2403      	movs	r4, #3
 800cb02:	e7db      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb04:	2403      	movs	r4, #3
 800cb06:	e7d9      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb08:	2403      	movs	r4, #3
 800cb0a:	e7d7      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb0c:	2403      	movs	r4, #3
 800cb0e:	e7d5      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb10:	2403      	movs	r4, #3
 800cb12:	e7d3      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb14:	2403      	movs	r4, #3
 800cb16:	e7d1      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb18:	2403      	movs	r4, #3
 800cb1a:	e7cf      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb1c:	2403      	movs	r4, #3
 800cb1e:	e7cd      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb20:	2403      	movs	r4, #3
 800cb22:	e7cb      	b.n	800cabc <LoRaMacMibSetRequestConfirm+0x51c>
 800cb24:	20008000 	.word	0x20008000
 800cb28:	08016f38 	.word	0x08016f38
 800cb2c:	200080bc 	.word	0x200080bc
 800cb30:	20000a6c 	.word	0x20000a6c
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cb34:	2403      	movs	r4, #3
 800cb36:	e000      	b.n	800cb3a <LoRaMacMibSetRequestConfirm+0x59a>
        return LORAMAC_STATUS_BUSY;
 800cb38:	2401      	movs	r4, #1
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	b005      	add	sp, #20
 800cb3e:	bd30      	pop	{r4, r5, pc}

0800cb40 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800cb44:	2300      	movs	r3, #0
 800cb46:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	f000 80f3 	beq.w	800cd36 <LoRaMacMlmeRequest+0x1f6>
 800cb50:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800cb52:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800cb54:	f7ff f896 	bl	800bc84 <LoRaMacIsBusy>
 800cb58:	b118      	cbz	r0, 800cb62 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800cb5a:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	b006      	add	sp, #24
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800cb62:	f000 fd41 	bl	800d5e8 <LoRaMacConfirmQueueIsFull>
 800cb66:	b108      	cbz	r0, 800cb6c <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800cb68:	2401      	movs	r4, #1
 800cb6a:	e7f7      	b.n	800cb5c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800cb6c:	f000 fd36 	bl	800d5dc <LoRaMacConfirmQueueGetCnt>
 800cb70:	b308      	cbz	r0, 800cbb6 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cb72:	4b72      	ldr	r3, [pc, #456]	@ (800cd3c <LoRaMacMlmeRequest+0x1fc>)
 800cb74:	2101      	movs	r1, #1
 800cb76:	f883 1455 	strb.w	r1, [r3, #1109]	@ 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800cb7a:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800cb7e:	f042 0204 	orr.w	r2, r2, #4
 800cb82:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800cb86:	782b      	ldrb	r3, [r5, #0]
 800cb88:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cb8c:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800cb90:	2200      	movs	r2, #0
 800cb92:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800cb96:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800cb9a:	461c      	mov	r4, r3
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	2b0c      	cmp	r3, #12
 800cba0:	f200 80af 	bhi.w	800cd02 <LoRaMacMlmeRequest+0x1c2>
 800cba4:	e8df f003 	tbb	[pc, r3]
 800cba8:	adadad0d 	.word	0xadadad0d
 800cbac:	adad675d 	.word	0xadad675d
 800cbb0:	7f9ead70 	.word	0x7f9ead70
 800cbb4:	95          	.byte	0x95
 800cbb5:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800cbb6:	2214      	movs	r2, #20
 800cbb8:	2100      	movs	r1, #0
 800cbba:	4861      	ldr	r0, [pc, #388]	@ (800cd40 <LoRaMacMlmeRequest+0x200>)
 800cbbc:	f004 fb21 	bl	8011202 <memset1>
 800cbc0:	e7d7      	b.n	800cb72 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800cbc2:	4b5e      	ldr	r3, [pc, #376]	@ (800cd3c <LoRaMacMlmeRequest+0x1fc>)
 800cbc4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800cbc8:	f013 0f20 	tst.w	r3, #32
 800cbcc:	d1c6      	bne.n	800cb5c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800cbce:	792b      	ldrb	r3, [r5, #4]
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d003      	beq.n	800cbdc <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d026      	beq.n	800cc26 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cbd8:	2402      	movs	r4, #2
 800cbda:	e093      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800cbdc:	2000      	movs	r0, #0
 800cbde:	f7fe fd77 	bl	800b6d0 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800cbe2:	4c58      	ldr	r4, [pc, #352]	@ (800cd44 <LoRaMacMlmeRequest+0x204>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800cbea:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800cbee:	f001 fb1b 	bl	800e228 <RegionAlternateDr>
 800cbf2:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800cbf6:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800cbfa:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800cbfe:	2307      	movs	r3, #7
 800cc00:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800cc04:	20ff      	movs	r0, #255	@ 0xff
 800cc06:	f7fe fec1 	bl	800b98c <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d079      	beq.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800cc10:	4e4c      	ldr	r6, [pc, #304]	@ (800cd44 <LoRaMacMlmeRequest+0x204>)
 800cc12:	2201      	movs	r2, #1
 800cc14:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800cc18:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800cc1c:	f001 fb04 	bl	800e228 <RegionAlternateDr>
 800cc20:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 800cc24:	e06e      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800cc26:	4e47      	ldr	r6, [pc, #284]	@ (800cd44 <LoRaMacMlmeRequest+0x204>)
 800cc28:	2400      	movs	r4, #0
 800cc2a:	f886 411d 	strb.w	r4, [r6, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800cc2e:	2302      	movs	r3, #2
 800cc30:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800cc34:	4669      	mov	r1, sp
 800cc36:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800cc3a:	f001 fa2e 	bl	800e09a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800cc3e:	792b      	ldrb	r3, [r5, #4]
 800cc40:	f886 3130 	strb.w	r3, [r6, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cc44:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800cc4e:	f7fc ffc3 	bl	8009bd8 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800cc52:	4a3a      	ldr	r2, [pc, #232]	@ (800cd3c <LoRaMacMlmeRequest+0x1fc>)
 800cc54:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800cc58:	f043 0310 	orr.w	r3, r3, #16
 800cc5c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800cc60:	e050      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cc62:	2200      	movs	r2, #0
 800cc64:	a904      	add	r1, sp, #16
 800cc66:	2002      	movs	r0, #2
 800cc68:	f000 faac 	bl	800d1c4 <LoRaMacCommandsAddCmd>
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d048      	beq.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cc72:	2413      	movs	r4, #19
 800cc74:	e046      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800cc76:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	68a9      	ldr	r1, [r5, #8]
 800cc7e:	88a8      	ldrh	r0, [r5, #4]
 800cc80:	f7fc ff00 	bl	8009a84 <SetTxContinuousWave>
 800cc84:	4604      	mov	r4, r0
            break;
 800cc86:	e03d      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800cc88:	4669      	mov	r1, sp
 800cc8a:	200d      	movs	r0, #13
 800cc8c:	f000 fae6 	bl	800d25c <LoRaMacCommandsGetCmd>
 800cc90:	4604      	mov	r4, r0
 800cc92:	b3b8      	cbz	r0, 800cd04 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cc94:	2200      	movs	r2, #0
 800cc96:	a904      	add	r1, sp, #16
 800cc98:	200d      	movs	r0, #13
 800cc9a:	f000 fa93 	bl	800d1c4 <LoRaMacCommandsAddCmd>
 800cc9e:	4604      	mov	r4, r0
 800cca0:	b380      	cbz	r0, 800cd04 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cca2:	2413      	movs	r4, #19
            break;
 800cca4:	e02e      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800cca6:	4b27      	ldr	r3, [pc, #156]	@ (800cd44 <LoRaMacMlmeRequest+0x204>)
 800cca8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ccac:	b10b      	cbz	r3, 800ccb2 <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ccae:	2402      	movs	r4, #2
 800ccb0:	e028      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800ccb2:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800ccb4:	f004 0007 	and.w	r0, r4, #7
 800ccb8:	f000 f9dd 	bl	800d076 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800ccbc:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	a904      	add	r1, sp, #16
 800ccc4:	2010      	movs	r0, #16
 800ccc6:	f000 fa7d 	bl	800d1c4 <LoRaMacCommandsAddCmd>
 800ccca:	4604      	mov	r4, r0
 800cccc:	b1d0      	cbz	r0, 800cd04 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ccce:	2413      	movs	r4, #19
 800ccd0:	e018      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	a904      	add	r1, sp, #16
 800ccd6:	2012      	movs	r0, #18
 800ccd8:	f000 fa74 	bl	800d1c4 <LoRaMacCommandsAddCmd>
 800ccdc:	4604      	mov	r4, r0
 800ccde:	b188      	cbz	r0, 800cd04 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cce0:	2413      	movs	r4, #19
 800cce2:	e00f      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800cce4:	2301      	movs	r3, #1
 800cce6:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800ccea:	f000 f9b5 	bl	800d058 <LoRaMacClassBIsAcquisitionInProgress>
 800ccee:	b108      	cbz	r0, 800ccf4 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800ccf0:	2401      	movs	r4, #1
 800ccf2:	e007      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800ccf4:	f000 f9ad 	bl	800d052 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	f000 f9af 	bl	800d05c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800ccfe:	2400      	movs	r4, #0
 800cd00:	e000      	b.n	800cd04 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800cd02:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800cd04:	4b0d      	ldr	r3, [pc, #52]	@ (800cd3c <LoRaMacMlmeRequest+0x1fc>)
 800cd06:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800cd0a:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800cd0c:	b17c      	cbz	r4, 800cd2e <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800cd0e:	f000 fc65 	bl	800d5dc <LoRaMacConfirmQueueGetCnt>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f47f af22 	bne.w	800cb5c <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800cd18:	4b08      	ldr	r3, [pc, #32]	@ (800cd3c <LoRaMacMlmeRequest+0x1fc>)
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	f883 141a 	strb.w	r1, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800cd20:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800cd24:	f361 0282 	bfi	r2, r1, #2, #1
 800cd28:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800cd2c:	e716      	b.n	800cb5c <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800cd2e:	a805      	add	r0, sp, #20
 800cd30:	f000 fb8a 	bl	800d448 <LoRaMacConfirmQueueAdd>
 800cd34:	e712      	b.n	800cb5c <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cd36:	2403      	movs	r4, #3
 800cd38:	e710      	b.n	800cb5c <LoRaMacMlmeRequest+0x1c>
 800cd3a:	bf00      	nop
 800cd3c:	20000a6c 	.word	0x20000a6c
 800cd40:	20000ec0 	.word	0x20000ec0
 800cd44:	20008000 	.word	0x20008000

0800cd48 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	b091      	sub	sp, #68	@ 0x44
 800cd4e:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f000 80db 	beq.w	800cf0c <LoRaMacMcpsRequest+0x1c4>
 800cd56:	f04f 0800 	mov.w	r8, #0
 800cd5a:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800cd5c:	f8c0 8010 	str.w	r8, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800cd60:	f7fe ff90 	bl	800bc84 <LoRaMacIsBusy>
 800cd64:	4607      	mov	r7, r0
 800cd66:	b118      	cbz	r0, 800cd70 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800cd68:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800cd6a:	b011      	add	sp, #68	@ 0x44
 800cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800cd70:	ac06      	add	r4, sp, #24
 800cd72:	462e      	mov	r6, r5
 800cd74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cd76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd78:	f8c4 8000 	str.w	r8, [r4]
    macHdr.Value = 0;
 800cd7c:	4641      	mov	r1, r8
 800cd7e:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800cd82:	4c64      	ldr	r4, [pc, #400]	@ (800cf14 <LoRaMacMcpsRequest+0x1cc>)
 800cd84:	2214      	movs	r2, #20
 800cd86:	4620      	mov	r0, r4
 800cd88:	f004 fa3b 	bl	8011202 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	7063      	strb	r3, [r4, #1]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800cd90:	4b61      	ldr	r3, [pc, #388]	@ (800cf18 <LoRaMacMcpsRequest+0x1d0>)
 800cd92:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d071      	beq.n	800ce7e <LoRaMacMcpsRequest+0x136>
    switch( request.Type )
 800cd9a:	f89d 9018 	ldrb.w	r9, [sp, #24]
 800cd9e:	f1b9 0f01 	cmp.w	r9, #1
 800cda2:	d07f      	beq.n	800cea4 <LoRaMacMcpsRequest+0x15c>
 800cda4:	f1b9 0f03 	cmp.w	r9, #3
 800cda8:	f000 808e 	beq.w	800cec8 <LoRaMacMcpsRequest+0x180>
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	f040 809a 	bne.w	800cee8 <LoRaMacMcpsRequest+0x1a0>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800cdb4:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800cdb8:	2202      	movs	r2, #2
 800cdba:	f362 1347 	bfi	r3, r2, #5, #3
 800cdbe:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800cdc2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800cdc6:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800cdc8:	9b08      	ldr	r3, [sp, #32]
 800cdca:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800cdcc:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800cdd0:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800cdd4:	2701      	movs	r7, #1
    getPhy.Attribute = PHY_MIN_TX_DR;
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cddc:	4e4e      	ldr	r6, [pc, #312]	@ (800cf18 <LoRaMacMcpsRequest+0x1d0>)
 800cdde:	f896 307c 	ldrb.w	r3, [r6, #124]	@ 0x7c
 800cde2:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cde6:	a90e      	add	r1, sp, #56	@ 0x38
 800cde8:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800cdec:	f001 f930 	bl	800e050 <RegionGetPhyParam>
 800cdf0:	900d      	str	r0, [sp, #52]	@ 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800cdf2:	b244      	sxtb	r4, r0
 800cdf4:	45a3      	cmp	fp, r4
 800cdf6:	bfb8      	it	lt
 800cdf8:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800cdfa:	f896 a11a 	ldrb.w	sl, [r6, #282]	@ 0x11a
 800cdfe:	f896 211d 	ldrb.w	r2, [r6, #285]	@ 0x11d
 800ce02:	f896 1130 	ldrb.w	r1, [r6, #304]	@ 0x130
 800ce06:	4650      	mov	r0, sl
 800ce08:	f7fc fe0e 	bl	8009a28 <CheckForMinimumAbpDatarate>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	b900      	cbnz	r0, 800ce12 <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ce10:	465c      	mov	r4, fp
    if( readyToSend == true )
 800ce12:	2f00      	cmp	r7, #0
 800ce14:	d074      	beq.n	800cf00 <LoRaMacMcpsRequest+0x1b8>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800ce16:	f1ba 0f00 	cmp.w	sl, #0
 800ce1a:	d000      	beq.n	800ce1e <LoRaMacMcpsRequest+0xd6>
 800ce1c:	b19b      	cbz	r3, 800ce46 <LoRaMacMcpsRequest+0xfe>
            verify.DatarateParams.Datarate = datarate;
 800ce1e:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ce22:	4b3d      	ldr	r3, [pc, #244]	@ (800cf18 <LoRaMacMcpsRequest+0x1d0>)
 800ce24:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800ce28:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ce2c:	2205      	movs	r2, #5
 800ce2e:	a90b      	add	r1, sp, #44	@ 0x2c
 800ce30:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ce34:	f001 f93e 	bl	800e0b4 <RegionVerify>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d069      	beq.n	800cf10 <LoRaMacMcpsRequest+0x1c8>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ce3c:	f99d 202c 	ldrsb.w	r2, [sp, #44]	@ 0x2c
 800ce40:	4b35      	ldr	r3, [pc, #212]	@ (800cf18 <LoRaMacMcpsRequest+0x1d0>)
 800ce42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ce46:	4b35      	ldr	r3, [pc, #212]	@ (800cf1c <LoRaMacMcpsRequest+0x1d4>)
 800ce48:	f8d3 1498 	ldr.w	r1, [r3, #1176]	@ 0x498
 800ce4c:	4b32      	ldr	r3, [pc, #200]	@ (800cf18 <LoRaMacMcpsRequest+0x1d0>)
 800ce4e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800ce52:	f7fd ff6d 	bl	800ad30 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	4643      	mov	r3, r8
 800ce5c:	9a05      	ldr	r2, [sp, #20]
 800ce5e:	9904      	ldr	r1, [sp, #16]
 800ce60:	a80c      	add	r0, sp, #48	@ 0x30
 800ce62:	f7fe fe7f 	bl	800bb64 <Send>
        if( status == LORAMAC_STATUS_OK )
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d145      	bne.n	800cef6 <LoRaMacMcpsRequest+0x1ae>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800ce6a:	4b2c      	ldr	r3, [pc, #176]	@ (800cf1c <LoRaMacMcpsRequest+0x1d4>)
 800ce6c:	f883 9440 	strb.w	r9, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ce70:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800ce74:	f042 0201 	orr.w	r2, r2, #1
 800ce78:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800ce7c:	e041      	b.n	800cf02 <LoRaMacMcpsRequest+0x1ba>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ce7e:	4b26      	ldr	r3, [pc, #152]	@ (800cf18 <LoRaMacMcpsRequest+0x1d0>)
 800ce80:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d188      	bne.n	800cd9a <LoRaMacMcpsRequest+0x52>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ce88:	4b23      	ldr	r3, [pc, #140]	@ (800cf18 <LoRaMacMcpsRequest+0x1d0>)
 800ce8a:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d183      	bne.n	800cd9a <LoRaMacMcpsRequest+0x52>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800ce92:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f47f af7f 	bne.w	800cd9a <LoRaMacMcpsRequest+0x52>
        request.Type = MCPS_CONFIRMED;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	f88d 3018 	strb.w	r3, [sp, #24]
 800cea2:	e77a      	b.n	800cd9a <LoRaMacMcpsRequest+0x52>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800cea4:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800cea8:	2204      	movs	r2, #4
 800ceaa:	f362 1347 	bfi	r3, r2, #5, #3
 800ceae:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Confirmed.fPort;
 800ceb2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ceb6:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800ceb8:	9b08      	ldr	r3, [sp, #32]
 800ceba:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800cebc:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Confirmed.Datarate;
 800cec0:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800cec4:	2701      	movs	r7, #1
            break;
 800cec6:	e786      	b.n	800cdd6 <LoRaMacMcpsRequest+0x8e>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800cec8:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800cecc:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800ced0:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800ced4:	9b07      	ldr	r3, [sp, #28]
 800ced6:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800ced8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800cedc:	f99d b022 	ldrsb.w	fp, [sp, #34]	@ 0x22
            readyToSend = true;
 800cee0:	2701      	movs	r7, #1
    uint8_t fPort = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	9304      	str	r3, [sp, #16]
            break;
 800cee6:	e776      	b.n	800cdd6 <LoRaMacMcpsRequest+0x8e>
    switch( request.Type )
 800cee8:	f04f 0b00 	mov.w	fp, #0
 800ceec:	f8cd b014 	str.w	fp, [sp, #20]
 800cef0:	f8cd b010 	str.w	fp, [sp, #16]
 800cef4:	e76f      	b.n	800cdd6 <LoRaMacMcpsRequest+0x8e>
            MacCtx.NodeAckRequested = false;
 800cef6:	4b09      	ldr	r3, [pc, #36]	@ (800cf1c <LoRaMacMcpsRequest+0x1d4>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
 800cefe:	e000      	b.n	800cf02 <LoRaMacMcpsRequest+0x1ba>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cf00:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800cf02:	4b06      	ldr	r3, [pc, #24]	@ (800cf1c <LoRaMacMcpsRequest+0x1d4>)
 800cf04:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800cf08:	612b      	str	r3, [r5, #16]
    return status;
 800cf0a:	e72e      	b.n	800cd6a <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cf0c:	2003      	movs	r0, #3
 800cf0e:	e72c      	b.n	800cd6a <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800cf10:	2003      	movs	r0, #3
 800cf12:	e72a      	b.n	800cd6a <LoRaMacMcpsRequest+0x22>
 800cf14:	20000eac 	.word	0x20000eac
 800cf18:	20008000 	.word	0x20008000
 800cf1c:	20000a6c 	.word	0x20000a6c

0800cf20 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800cf20:	b510      	push	{r4, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800cf26:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800cf2a:	220f      	movs	r2, #15
 800cf2c:	a901      	add	r1, sp, #4
 800cf2e:	4b09      	ldr	r3, [pc, #36]	@ (800cf54 <LoRaMacTestSetDutyCycleOn+0x34>)
 800cf30:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800cf34:	f001 f8be 	bl	800e0b4 <RegionVerify>
 800cf38:	b148      	cbz	r0, 800cf4e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800cf3a:	4b06      	ldr	r3, [pc, #24]	@ (800cf54 <LoRaMacTestSetDutyCycleOn+0x34>)
 800cf3c:	f883 411c 	strb.w	r4, [r3, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800cf40:	4a05      	ldr	r2, [pc, #20]	@ (800cf58 <LoRaMacTestSetDutyCycleOn+0x38>)
 800cf42:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800cf46:	f043 0320 	orr.w	r3, r3, #32
 800cf4a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800cf4e:	b002      	add	sp, #8
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	bf00      	nop
 800cf54:	20008000 	.word	0x20008000
 800cf58:	20000a6c 	.word	0x20000a6c

0800cf5c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800cf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	b08b      	sub	sp, #44	@ 0x2c
 800cf62:	460f      	mov	r7, r1
 800cf64:	4616      	mov	r6, r2
 800cf66:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800cf68:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800cf6c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800cf70:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800cf74:	6842      	ldr	r2, [r0, #4]
 800cf76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cf78:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800cf7a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	d109      	bne.n	800cf98 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800cf84:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800cf88:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800cf8c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800cf90:	4640      	mov	r0, r8
 800cf92:	b00b      	add	sp, #44	@ 0x2c
 800cf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf98:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800cfa0:	7bc3      	ldrb	r3, [r0, #15]
 800cfa2:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cfa6:	a908      	add	r1, sp, #32
 800cfa8:	7c00      	ldrb	r0, [r0, #16]
 800cfaa:	f001 f851 	bl	800e050 <RegionGetPhyParam>
 800cfae:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800cfb0:	b243      	sxtb	r3, r0
 800cfb2:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800cfb4:	454b      	cmp	r3, r9
 800cfb6:	bfb8      	it	lt
 800cfb8:	464b      	movlt	r3, r9
 800cfba:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800cfbc:	6862      	ldr	r2, [r4, #4]
 800cfbe:	8923      	ldrh	r3, [r4, #8]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d201      	bcs.n	800cfc8 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800cfc4:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800cfc8:	8961      	ldrh	r1, [r4, #10]
 800cfca:	440b      	add	r3, r1
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d224      	bcs.n	800d01a <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800cfd0:	6863      	ldr	r3, [r4, #4]
 800cfd2:	8921      	ldrh	r1, [r4, #8]
 800cfd4:	8962      	ldrh	r2, [r4, #10]
 800cfd6:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800cfda:	4283      	cmp	r3, r0
 800cfdc:	d332      	bcc.n	800d044 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800cfde:	1a5b      	subs	r3, r3, r1
 800cfe0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfe4:	fb02 3311 	mls	r3, r2, r1, r3
 800cfe8:	bb7b      	cbnz	r3, 800d04a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800cfea:	9b01      	ldr	r3, [sp, #4]
 800cfec:	4599      	cmp	r9, r3
 800cfee:	dc03      	bgt.n	800cff8 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800cff0:	7823      	ldrb	r3, [r4, #0]
 800cff2:	b9eb      	cbnz	r3, 800d030 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800cff4:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800cff8:	2321      	movs	r3, #33	@ 0x21
 800cffa:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800cffe:	9b00      	ldr	r3, [sp, #0]
 800d000:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800d004:	7be3      	ldrb	r3, [r4, #15]
 800d006:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d00a:	a908      	add	r1, sp, #32
 800d00c:	7c20      	ldrb	r0, [r4, #16]
 800d00e:	f001 f81f 	bl	800e050 <RegionGetPhyParam>
 800d012:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800d014:	fa4f f980 	sxtb.w	r9, r0
 800d018:	e7b4      	b.n	800cf84 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800d01a:	230a      	movs	r3, #10
 800d01c:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d020:	a908      	add	r1, sp, #32
 800d022:	7c20      	ldrb	r0, [r4, #16]
 800d024:	f001 f814 	bl	800e050 <RegionGetPhyParam>
 800d028:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800d02a:	fa4f fa80 	sxtb.w	sl, r0
 800d02e:	e7cf      	b.n	800cfd0 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800d030:	2302      	movs	r3, #2
 800d032:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800d036:	a903      	add	r1, sp, #12
 800d038:	7c20      	ldrb	r0, [r4, #16]
 800d03a:	f001 f82e 	bl	800e09a <RegionInitDefaults>
                    nbTrans = 1;
 800d03e:	f04f 0b01 	mov.w	fp, #1
 800d042:	e7d9      	b.n	800cff8 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800d044:	f8dd 9000 	ldr.w	r9, [sp]
 800d048:	e79c      	b.n	800cf84 <LoRaMacAdrCalcNext+0x28>
 800d04a:	f8dd 9000 	ldr.w	r9, [sp]
 800d04e:	e799      	b.n	800cf84 <LoRaMacAdrCalcNext+0x28>

0800d050 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d050:	4770      	bx	lr

0800d052 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d052:	4770      	bx	lr

0800d054 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d054:	4770      	bx	lr

0800d056 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d056:	4770      	bx	lr

0800d058 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d058:	2000      	movs	r0, #0
 800d05a:	4770      	bx	lr

0800d05c <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d05c:	4770      	bx	lr

0800d05e <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d05e:	4770      	bx	lr

0800d060 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d060:	4770      	bx	lr

0800d062 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d062:	2000      	movs	r0, #0
 800d064:	4770      	bx	lr

0800d066 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d066:	2000      	movs	r0, #0
 800d068:	4770      	bx	lr

0800d06a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d06a:	2000      	movs	r0, #0
 800d06c:	4770      	bx	lr

0800d06e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d06e:	2000      	movs	r0, #0
 800d070:	4770      	bx	lr

0800d072 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d072:	2000      	movs	r0, #0
 800d074:	4770      	bx	lr

0800d076 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d076:	4770      	bx	lr

0800d078 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d078:	4770      	bx	lr

0800d07a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d07a:	4770      	bx	lr

0800d07c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d07c:	2002      	movs	r0, #2
 800d07e:	4770      	bx	lr

0800d080 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d080:	2002      	movs	r0, #2
 800d082:	4770      	bx	lr

0800d084 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d084:	2002      	movs	r0, #2
 800d086:	4770      	bx	lr

0800d088 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d088:	4770      	bx	lr

0800d08a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d08a:	2000      	movs	r0, #0
 800d08c:	4770      	bx	lr

0800d08e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d08e:	4770      	bx	lr

0800d090 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d090:	4770      	bx	lr

0800d092 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d092:	2000      	movs	r0, #0
 800d094:	4770      	bx	lr

0800d096 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d096:	2000      	movs	r0, #0
 800d098:	4770      	bx	lr

0800d09a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d09a:	4770      	bx	lr

0800d09c <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d09c:	4770      	bx	lr

0800d09e <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d09e:	4770      	bx	lr

0800d0a0 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	2b0f      	cmp	r3, #15
 800d0a4:	d804      	bhi.n	800d0b0 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800d0a6:	5cc2      	ldrb	r2, [r0, r3]
 800d0a8:	b922      	cbnz	r2, 800d0b4 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	e7f8      	b.n	800d0a2 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800d0b0:	2001      	movs	r0, #1
 800d0b2:	4770      	bx	lr
            return false;
 800d0b4:	2000      	movs	r0, #0
}
 800d0b6:	4770      	bx	lr

0800d0b8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800d0b8:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800d0ba:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800d0bc:	012c      	lsls	r4, r5, #4
 800d0be:	3408      	adds	r4, #8
 800d0c0:	4b06      	ldr	r3, [pc, #24]	@ (800d0dc <MallocNewMacCommandSlot+0x24>)
 800d0c2:	441c      	add	r4, r3
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f7ff ffeb 	bl	800d0a0 <IsSlotFree>
 800d0ca:	b920      	cbnz	r0, 800d0d6 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800d0cc:	3501      	adds	r5, #1
 800d0ce:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800d0d0:	2d20      	cmp	r5, #32
 800d0d2:	d1f3      	bne.n	800d0bc <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800d0d4:	2400      	movs	r4, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	bd38      	pop	{r3, r4, r5, pc}
 800d0da:	bf00      	nop
 800d0dc:	20000f88 	.word	0x20000f88

0800d0e0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800d0e0:	b120      	cbz	r0, 800d0ec <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800d0e6:	6042      	str	r2, [r0, #4]

    return true;
 800d0e8:	2001      	movs	r0, #1
 800d0ea:	4770      	bx	lr
        return false;
 800d0ec:	2000      	movs	r0, #0
}
 800d0ee:	4770      	bx	lr

0800d0f0 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	b160      	cbz	r0, 800d10e <LinkedListAdd+0x1e>
 800d0f4:	b169      	cbz	r1, 800d112 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800d0f6:	6802      	ldr	r2, [r0, #0]
 800d0f8:	b13a      	cbz	r2, 800d10a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	b102      	cbz	r2, 800d100 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800d0fe:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800d100:	2200      	movs	r2, #0
 800d102:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800d104:	6059      	str	r1, [r3, #4]

    return true;
 800d106:	2001      	movs	r0, #1
 800d108:	4770      	bx	lr
        list->First = element;
 800d10a:	6001      	str	r1, [r0, #0]
 800d10c:	e7f5      	b.n	800d0fa <LinkedListAdd+0xa>
        return false;
 800d10e:	2000      	movs	r0, #0
 800d110:	4770      	bx	lr
 800d112:	2000      	movs	r0, #0
}
 800d114:	4770      	bx	lr

0800d116 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800d116:	b160      	cbz	r0, 800d132 <LinkedListGetPrevious+0x1c>
 800d118:	b161      	cbz	r1, 800d134 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800d11a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800d11c:	4281      	cmp	r1, r0
 800d11e:	d102      	bne.n	800d126 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800d120:	2000      	movs	r0, #0
    }

    return curElement;
}
 800d122:	4770      	bx	lr
            curElement = curElement->Next;
 800d124:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800d126:	2800      	cmp	r0, #0
 800d128:	d0fb      	beq.n	800d122 <LinkedListGetPrevious+0xc>
 800d12a:	6803      	ldr	r3, [r0, #0]
 800d12c:	428b      	cmp	r3, r1
 800d12e:	d1f9      	bne.n	800d124 <LinkedListGetPrevious+0xe>
 800d130:	4770      	bx	lr
 800d132:	4770      	bx	lr
        return NULL;
 800d134:	4608      	mov	r0, r1
 800d136:	4770      	bx	lr

0800d138 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800d138:	b1b8      	cbz	r0, 800d16a <LinkedListRemove+0x32>
{
 800d13a:	b538      	push	{r3, r4, r5, lr}
 800d13c:	460c      	mov	r4, r1
 800d13e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800d140:	b1a9      	cbz	r1, 800d16e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800d142:	f7ff ffe8 	bl	800d116 <LinkedListGetPrevious>

    if( list->First == element )
 800d146:	682b      	ldr	r3, [r5, #0]
 800d148:	42a3      	cmp	r3, r4
 800d14a:	d009      	beq.n	800d160 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800d14c:	686b      	ldr	r3, [r5, #4]
 800d14e:	42a3      	cmp	r3, r4
 800d150:	d009      	beq.n	800d166 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800d152:	b108      	cbz	r0, 800d158 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800d154:	6823      	ldr	r3, [r4, #0]
 800d156:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800d158:	2300      	movs	r3, #0
 800d15a:	6023      	str	r3, [r4, #0]

    return true;
 800d15c:	2001      	movs	r0, #1
}
 800d15e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	602b      	str	r3, [r5, #0]
 800d164:	e7f2      	b.n	800d14c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800d166:	6068      	str	r0, [r5, #4]
 800d168:	e7f3      	b.n	800d152 <LinkedListRemove+0x1a>
        return false;
 800d16a:	2000      	movs	r0, #0
}
 800d16c:	4770      	bx	lr
        return false;
 800d16e:	2000      	movs	r0, #0
 800d170:	e7f5      	b.n	800d15e <LinkedListRemove+0x26>
	...

0800d174 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800d174:	2811      	cmp	r0, #17
 800d176:	d805      	bhi.n	800d184 <IsSticky+0x10>
 800d178:	4b03      	ldr	r3, [pc, #12]	@ (800d188 <IsSticky+0x14>)
 800d17a:	fa23 f000 	lsr.w	r0, r3, r0
 800d17e:	f000 0001 	and.w	r0, r0, #1
 800d182:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800d184:	2000      	movs	r0, #0
    }
}
 800d186:	4770      	bx	lr
 800d188:	00020720 	.word	0x00020720

0800d18c <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800d18c:	2000      	movs	r0, #0
 800d18e:	4770      	bx	lr

0800d190 <FreeMacCommandSlot>:
    if( slot == NULL )
 800d190:	b130      	cbz	r0, 800d1a0 <FreeMacCommandSlot+0x10>
{
 800d192:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800d194:	2210      	movs	r2, #16
 800d196:	2100      	movs	r1, #0
 800d198:	f004 f833 	bl	8011202 <memset1>
    return true;
 800d19c:	2001      	movs	r0, #1
}
 800d19e:	bd08      	pop	{r3, pc}
        return false;
 800d1a0:	2000      	movs	r0, #0
}
 800d1a2:	4770      	bx	lr

0800d1a4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800d1a4:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800d1a6:	4c06      	ldr	r4, [pc, #24]	@ (800d1c0 <LoRaMacCommandsInit+0x1c>)
 800d1a8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f004 f827 	bl	8011202 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f7ff ff93 	bl	800d0e0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	bd10      	pop	{r4, pc}
 800d1be:	bf00      	nop
 800d1c0:	20000f88 	.word	0x20000f88

0800d1c4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800d1c4:	b321      	cbz	r1, 800d210 <LoRaMacCommandsAddCmd+0x4c>
{
 800d1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	4614      	mov	r4, r2
 800d1cc:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800d1ce:	f7ff ff73 	bl	800d0b8 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	b1f0      	cbz	r0, 800d214 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	4810      	ldr	r0, [pc, #64]	@ (800d21c <LoRaMacCommandsAddCmd+0x58>)
 800d1da:	f7ff ff89 	bl	800d0f0 <LinkedListAdd>
 800d1de:	b1d8      	cbz	r0, 800d218 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800d1e0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800d1e2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800d1e4:	b2a2      	uxth	r2, r4
 800d1e6:	4639      	mov	r1, r7
 800d1e8:	1d70      	adds	r0, r6, #5
 800d1ea:	f003 fff2 	bl	80111d2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f7ff ffc0 	bl	800d174 <IsSticky>
 800d1f4:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f7ff ffc8 	bl	800d18c <IsConfirmationRequired>
 800d1fc:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800d1fe:	4a07      	ldr	r2, [pc, #28]	@ (800d21c <LoRaMacCommandsAddCmd+0x58>)
 800d200:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800d204:	4423      	add	r3, r4
 800d206:	3301      	adds	r3, #1
 800d208:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800d20c:	2000      	movs	r0, #0
}
 800d20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d210:	2001      	movs	r0, #1
}
 800d212:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800d214:	2002      	movs	r0, #2
 800d216:	e7fa      	b.n	800d20e <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800d218:	2005      	movs	r0, #5
 800d21a:	e7f8      	b.n	800d20e <LoRaMacCommandsAddCmd+0x4a>
 800d21c:	20000f88 	.word	0x20000f88

0800d220 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800d220:	b1a0      	cbz	r0, 800d24c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800d222:	b510      	push	{r4, lr}
 800d224:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800d226:	4601      	mov	r1, r0
 800d228:	480b      	ldr	r0, [pc, #44]	@ (800d258 <LoRaMacCommandsRemoveCmd+0x38>)
 800d22a:	f7ff ff85 	bl	800d138 <LinkedListRemove>
 800d22e:	b178      	cbz	r0, 800d250 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800d230:	4a09      	ldr	r2, [pc, #36]	@ (800d258 <LoRaMacCommandsRemoveCmd+0x38>)
 800d232:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800d236:	68a1      	ldr	r1, [r4, #8]
 800d238:	1a5b      	subs	r3, r3, r1
 800d23a:	3b01      	subs	r3, #1
 800d23c:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800d240:	4620      	mov	r0, r4
 800d242:	f7ff ffa5 	bl	800d190 <FreeMacCommandSlot>
 800d246:	b128      	cbz	r0, 800d254 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d248:	2000      	movs	r0, #0
}
 800d24a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d24c:	2001      	movs	r0, #1
}
 800d24e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800d250:	2003      	movs	r0, #3
 800d252:	e7fa      	b.n	800d24a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800d254:	2005      	movs	r0, #5
 800d256:	e7f8      	b.n	800d24a <LoRaMacCommandsRemoveCmd+0x2a>
 800d258:	20000f88 	.word	0x20000f88

0800d25c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d25c:	4b06      	ldr	r3, [pc, #24]	@ (800d278 <LoRaMacCommandsGetCmd+0x1c>)
 800d25e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800d260:	e000      	b.n	800d264 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800d262:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800d264:	b113      	cbz	r3, 800d26c <LoRaMacCommandsGetCmd+0x10>
 800d266:	791a      	ldrb	r2, [r3, #4]
 800d268:	4282      	cmp	r2, r0
 800d26a:	d1fa      	bne.n	800d262 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800d26c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800d26e:	b10b      	cbz	r3, 800d274 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800d270:	2000      	movs	r0, #0
 800d272:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800d274:	2003      	movs	r0, #3
}
 800d276:	4770      	bx	lr
 800d278:	20000f88 	.word	0x20000f88

0800d27c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d27c:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800d27e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d280:	b120      	cbz	r0, 800d28c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800d282:	7b03      	ldrb	r3, [r0, #12]
 800d284:	b11b      	cbz	r3, 800d28e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800d286:	6800      	ldr	r0, [r0, #0]
 800d288:	e7fa      	b.n	800d280 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d28a:	bd10      	pop	{r4, pc}
 800d28c:	4770      	bx	lr
{
 800d28e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800d290:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800d292:	f7ff ffc5 	bl	800d220 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800d296:	4620      	mov	r0, r4
    while( curElement != NULL )
 800d298:	2800      	cmp	r0, #0
 800d29a:	d0f6      	beq.n	800d28a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800d29c:	7b03      	ldrb	r3, [r0, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d0f6      	beq.n	800d290 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800d2a2:	6800      	ldr	r0, [r0, #0]
 800d2a4:	e7f8      	b.n	800d298 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800d2a6:	bf00      	nop
 800d2a8:	20000f88 	.word	0x20000f88

0800d2ac <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800d2ac:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d2ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d2dc <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800d2b0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d2b2:	e000      	b.n	800d2b6 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800d2b4:	4634      	mov	r4, r6
    while( curElement != NULL )
 800d2b6:	b17c      	cbz	r4, 800d2d8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800d2b8:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800d2ba:	7925      	ldrb	r5, [r4, #4]
 800d2bc:	4628      	mov	r0, r5
 800d2be:	f7ff ff59 	bl	800d174 <IsSticky>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d0f6      	beq.n	800d2b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f7ff ff60 	bl	800d18c <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d1f1      	bne.n	800d2b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f7ff ffa5 	bl	800d220 <LoRaMacCommandsRemoveCmd>
 800d2d6:	e7ed      	b.n	800d2b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d2d8:	2000      	movs	r0, #0
 800d2da:	bd70      	pop	{r4, r5, r6, pc}
 800d2dc:	20000f88 	.word	0x20000f88

0800d2e0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800d2e0:	b128      	cbz	r0, 800d2ee <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800d2e2:	4a04      	ldr	r2, [pc, #16]	@ (800d2f4 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800d2e4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800d2e8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d2ee:	2001      	movs	r0, #1
}
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	20000f88 	.word	0x20000f88

0800d2f8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800d2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800d2fc:	4b16      	ldr	r3, [pc, #88]	@ (800d358 <LoRaMacCommandsSerializeCmds+0x60>)
 800d2fe:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800d300:	b32a      	cbz	r2, 800d34e <LoRaMacCommandsSerializeCmds+0x56>
 800d302:	4607      	mov	r7, r0
 800d304:	4688      	mov	r8, r1
 800d306:	4616      	mov	r6, r2
 800d308:	b319      	cbz	r1, 800d352 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800d30a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800d30c:	b194      	cbz	r4, 800d334 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800d30e:	1a7a      	subs	r2, r7, r1
 800d310:	68a3      	ldr	r3, [r4, #8]
 800d312:	3301      	adds	r3, #1
 800d314:	429a      	cmp	r2, r3
 800d316:	d30d      	bcc.n	800d334 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800d318:	1c4d      	adds	r5, r1, #1
 800d31a:	b2ed      	uxtb	r5, r5
 800d31c:	7923      	ldrb	r3, [r4, #4]
 800d31e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800d320:	8922      	ldrh	r2, [r4, #8]
 800d322:	1d61      	adds	r1, r4, #5
 800d324:	1970      	adds	r0, r6, r5
 800d326:	f003 ff54 	bl	80111d2 <memcpy1>
            itr += curElement->PayloadSize;
 800d32a:	68a3      	ldr	r3, [r4, #8]
 800d32c:	441d      	add	r5, r3
 800d32e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800d330:	6824      	ldr	r4, [r4, #0]
 800d332:	e7eb      	b.n	800d30c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800d334:	b12c      	cbz	r4, 800d342 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800d336:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800d338:	4620      	mov	r0, r4
 800d33a:	f7ff ff71 	bl	800d220 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800d33e:	462c      	mov	r4, r5
 800d340:	e7f8      	b.n	800d334 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800d342:	4640      	mov	r0, r8
 800d344:	f7ff ffcc 	bl	800d2e0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800d348:	2000      	movs	r0, #0
}
 800d34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d34e:	2001      	movs	r0, #1
 800d350:	e7fb      	b.n	800d34a <LoRaMacCommandsSerializeCmds+0x52>
 800d352:	2001      	movs	r0, #1
 800d354:	e7f9      	b.n	800d34a <LoRaMacCommandsSerializeCmds+0x52>
 800d356:	bf00      	nop
 800d358:	20000f88 	.word	0x20000f88

0800d35c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800d35c:	1e83      	subs	r3, r0, #2
 800d35e:	2b11      	cmp	r3, #17
 800d360:	d80a      	bhi.n	800d378 <LoRaMacCommandsGetCmdSize+0x1c>
 800d362:	e8df f003 	tbb	[pc, r3]
 800d366:	0b23      	.short	0x0b23
 800d368:	110f240d 	.word	0x110f240d
 800d36c:	09171513 	.word	0x09171513
 800d370:	09091909 	.word	0x09091909
 800d374:	211f1d1b 	.word	0x211f1d1b
 800d378:	2000      	movs	r0, #0
 800d37a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800d37c:	2005      	movs	r0, #5
            break;
 800d37e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800d380:	2002      	movs	r0, #2
            break;
 800d382:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800d384:	2001      	movs	r0, #1
            break;
 800d386:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800d388:	2006      	movs	r0, #6
            break;
 800d38a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800d38c:	2002      	movs	r0, #2
            break;
 800d38e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800d390:	2002      	movs	r0, #2
            break;
 800d392:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800d394:	2005      	movs	r0, #5
            break;
 800d396:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800d398:	2006      	movs	r0, #6
            break;
 800d39a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800d39c:	2001      	movs	r0, #1
            break;
 800d39e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800d3a0:	2005      	movs	r0, #5
            break;
 800d3a2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800d3a4:	2004      	movs	r0, #4
            break;
 800d3a6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800d3a8:	2004      	movs	r0, #4
            break;
 800d3aa:	4770      	bx	lr
            cidSize = 3;
 800d3ac:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800d3ae:	4770      	bx	lr

0800d3b0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d3b0:	4b03      	ldr	r3, [pc, #12]	@ (800d3c0 <IncreaseBufferPointer+0x10>)
 800d3b2:	4298      	cmp	r0, r3
 800d3b4:	d001      	beq.n	800d3ba <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800d3b6:	3004      	adds	r0, #4
 800d3b8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d3ba:	4802      	ldr	r0, [pc, #8]	@ (800d3c4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	200011b0 	.word	0x200011b0
 800d3c4:	200011a0 	.word	0x200011a0

0800d3c8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800d3c8:	b108      	cbz	r0, 800d3ce <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	4770      	bx	lr
        return true;
 800d3ce:	2001      	movs	r0, #1
}
 800d3d0:	4770      	bx	lr

0800d3d2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d3d2:	2804      	cmp	r0, #4
 800d3d4:	d801      	bhi.n	800d3da <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	4770      	bx	lr
        return true;
 800d3da:	2001      	movs	r0, #1
}
 800d3dc:	4770      	bx	lr
	...

0800d3e0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d41c <GetElement+0x3c>)
 800d3e8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	f7ff ffeb 	bl	800d3c8 <IsListEmpty>
 800d3f2:	b970      	cbnz	r0, 800d412 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d3f4:	2500      	movs	r5, #0
 800d3f6:	42af      	cmp	r7, r5
 800d3f8:	d909      	bls.n	800d40e <GetElement+0x2e>
    {
        if( element->Request == request )
 800d3fa:	7823      	ldrb	r3, [r4, #0]
 800d3fc:	42b3      	cmp	r3, r6
 800d3fe:	d00a      	beq.n	800d416 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800d400:	4620      	mov	r0, r4
 800d402:	f7ff ffd5 	bl	800d3b0 <IncreaseBufferPointer>
 800d406:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d408:	3501      	adds	r5, #1
 800d40a:	b2ed      	uxtb	r5, r5
 800d40c:	e7f3      	b.n	800d3f6 <GetElement+0x16>
    }

    return NULL;
 800d40e:	2000      	movs	r0, #0
}
 800d410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800d412:	2000      	movs	r0, #0
 800d414:	e7fc      	b.n	800d410 <GetElement+0x30>
            return element;
 800d416:	4620      	mov	r0, r4
 800d418:	e7fa      	b.n	800d410 <GetElement+0x30>
 800d41a:	bf00      	nop
 800d41c:	20001194 	.word	0x20001194

0800d420 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800d420:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800d422:	4c08      	ldr	r4, [pc, #32]	@ (800d444 <LoRaMacConfirmQueueInit+0x24>)
 800d424:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d42c:	f104 000c 	add.w	r0, r4, #12
 800d430:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d432:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800d434:	2214      	movs	r2, #20
 800d436:	21ff      	movs	r1, #255	@ 0xff
 800d438:	f003 fee3 	bl	8011202 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800d442:	bd10      	pop	{r4, pc}
 800d444:	20001194 	.word	0x20001194

0800d448 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d44c:	4b0f      	ldr	r3, [pc, #60]	@ (800d48c <LoRaMacConfirmQueueAdd+0x44>)
 800d44e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d452:	f7ff ffbe 	bl	800d3d2 <IsListFull>
 800d456:	b9b8      	cbnz	r0, 800d488 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800d458:	4c0c      	ldr	r4, [pc, #48]	@ (800d48c <LoRaMacConfirmQueueAdd+0x44>)
 800d45a:	68a3      	ldr	r3, [r4, #8]
 800d45c:	782a      	ldrb	r2, [r5, #0]
 800d45e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800d460:	68a3      	ldr	r3, [r4, #8]
 800d462:	786a      	ldrb	r2, [r5, #1]
 800d464:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	78ea      	ldrb	r2, [r5, #3]
 800d46a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	78aa      	ldrb	r2, [r5, #2]
 800d470:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800d472:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d476:	3301      	adds	r3, #1
 800d478:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800d47c:	68a0      	ldr	r0, [r4, #8]
 800d47e:	f7ff ff97 	bl	800d3b0 <IncreaseBufferPointer>
 800d482:	60a0      	str	r0, [r4, #8]

    return true;
 800d484:	2001      	movs	r0, #1
}
 800d486:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d488:	2000      	movs	r0, #0
 800d48a:	e7fc      	b.n	800d486 <LoRaMacConfirmQueueAdd+0x3e>
 800d48c:	20001194 	.word	0x20001194

0800d490 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800d490:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d492:	4b09      	ldr	r3, [pc, #36]	@ (800d4b8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d494:	f893 4020 	ldrb.w	r4, [r3, #32]
 800d498:	4620      	mov	r0, r4
 800d49a:	f7ff ff95 	bl	800d3c8 <IsListEmpty>
 800d49e:	b948      	cbnz	r0, 800d4b4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800d4a0:	4d05      	ldr	r5, [pc, #20]	@ (800d4b8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d4a2:	3c01      	subs	r4, #1
 800d4a4:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d4a8:	6868      	ldr	r0, [r5, #4]
 800d4aa:	f7ff ff81 	bl	800d3b0 <IncreaseBufferPointer>
 800d4ae:	6068      	str	r0, [r5, #4]

    return true;
 800d4b0:	2001      	movs	r0, #1
}
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e7fc      	b.n	800d4b2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800d4b8:	20001194 	.word	0x20001194

0800d4bc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d4bc:	b538      	push	{r3, r4, r5, lr}
 800d4be:	4605      	mov	r5, r0
 800d4c0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d4c2:	4b08      	ldr	r3, [pc, #32]	@ (800d4e4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d4c4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d4c8:	f7ff ff7e 	bl	800d3c8 <IsListEmpty>
 800d4cc:	b948      	cbnz	r0, 800d4e2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d4ce:	4b05      	ldr	r3, [pc, #20]	@ (800d4e4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d4d0:	689a      	ldr	r2, [r3, #8]
 800d4d2:	6859      	ldr	r1, [r3, #4]
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f7ff ff83 	bl	800d3e0 <GetElement>
        if( element != NULL )
 800d4da:	b110      	cbz	r0, 800d4e2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800d4dc:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800d4de:	2201      	movs	r2, #1
 800d4e0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	20001194 	.word	0x20001194

0800d4e8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d4ec:	4b09      	ldr	r3, [pc, #36]	@ (800d514 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d4ee:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d4f2:	f7ff ff69 	bl	800d3c8 <IsListEmpty>
 800d4f6:	b940      	cbnz	r0, 800d50a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d4f8:	4b06      	ldr	r3, [pc, #24]	@ (800d514 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d4fa:	689a      	ldr	r2, [r3, #8]
 800d4fc:	6859      	ldr	r1, [r3, #4]
 800d4fe:	4620      	mov	r0, r4
 800d500:	f7ff ff6e 	bl	800d3e0 <GetElement>
        if( element != NULL )
 800d504:	b118      	cbz	r0, 800d50e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800d506:	7840      	ldrb	r0, [r0, #1]
 800d508:	e000      	b.n	800d50c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d50a:	2001      	movs	r0, #1
}
 800d50c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d50e:	2001      	movs	r0, #1
 800d510:	e7fc      	b.n	800d50c <LoRaMacConfirmQueueGetStatus+0x24>
 800d512:	bf00      	nop
 800d514:	20001194 	.word	0x20001194

0800d518 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d51c:	4b0c      	ldr	r3, [pc, #48]	@ (800d550 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d51e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800d520:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d524:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d528:	f7ff ff4e 	bl	800d3c8 <IsListEmpty>
 800d52c:	b150      	cbz	r0, 800d544 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800d530:	2301      	movs	r3, #1
 800d532:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800d534:	4620      	mov	r0, r4
 800d536:	f7ff ff3b 	bl	800d3b0 <IncreaseBufferPointer>
 800d53a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d53c:	4b04      	ldr	r3, [pc, #16]	@ (800d550 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	4283      	cmp	r3, r0
 800d542:	d0f4      	beq.n	800d52e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d544:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d546:	78e3      	ldrb	r3, [r4, #3]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1f3      	bne.n	800d534 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d54c:	e7f0      	b.n	800d530 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d54e:	bf00      	nop
 800d550:	20001194 	.word	0x20001194

0800d554 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d554:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d556:	4b04      	ldr	r3, [pc, #16]	@ (800d568 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d558:	689a      	ldr	r2, [r3, #8]
 800d55a:	6859      	ldr	r1, [r3, #4]
 800d55c:	f7ff ff40 	bl	800d3e0 <GetElement>
 800d560:	b100      	cbz	r0, 800d564 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d562:	2001      	movs	r0, #1
    }
    return false;
}
 800d564:	bd08      	pop	{r3, pc}
 800d566:	bf00      	nop
 800d568:	20001194 	.word	0x20001194

0800d56c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56e:	b083      	sub	sp, #12
 800d570:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d572:	4b19      	ldr	r3, [pc, #100]	@ (800d5d8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d574:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800d578:	2204      	movs	r2, #4
 800d57a:	2100      	movs	r1, #0
 800d57c:	eb0d 0002 	add.w	r0, sp, r2
 800d580:	f003 fe3f 	bl	8011202 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800d584:	2400      	movs	r4, #0
 800d586:	e00d      	b.n	800d5a4 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d588:	781a      	ldrb	r2, [r3, #0]
 800d58a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d58e:	785a      	ldrb	r2, [r3, #1]
 800d590:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d594:	78db      	ldrb	r3, [r3, #3]
 800d596:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d59a:	f7ff ff79 	bl	800d490 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d59e:	b1a5      	cbz	r5, 800d5ca <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d5a0:	3401      	adds	r4, #1
 800d5a2:	b2e4      	uxtb	r4, r4
 800d5a4:	42bc      	cmp	r4, r7
 800d5a6:	d214      	bcs.n	800d5d2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	7812      	ldrb	r2, [r2, #0]
 800d5ae:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	7852      	ldrb	r2, [r2, #1]
 800d5b4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	d0e4      	beq.n	800d588 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d5be:	4b06      	ldr	r3, [pc, #24]	@ (800d5d8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	4798      	blx	r3
 800d5c8:	e7e7      	b.n	800d59a <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d5ca:	a801      	add	r0, sp, #4
 800d5cc:	f7ff ff3c 	bl	800d448 <LoRaMacConfirmQueueAdd>
 800d5d0:	e7e6      	b.n	800d5a0 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800d5d2:	b003      	add	sp, #12
 800d5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20001194 	.word	0x20001194

0800d5dc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d5dc:	4b01      	ldr	r3, [pc, #4]	@ (800d5e4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d5de:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d5e2:	4770      	bx	lr
 800d5e4:	20001194 	.word	0x20001194

0800d5e8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d5e8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d5ea:	4b03      	ldr	r3, [pc, #12]	@ (800d5f8 <LoRaMacConfirmQueueIsFull+0x10>)
 800d5ec:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d5f0:	f7ff feef 	bl	800d3d2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d5f4:	bd08      	pop	{r3, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20001194 	.word	0x20001194

0800d5fc <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d5fc:	b410      	push	{r4}
 800d5fe:	9c01      	ldr	r4, [sp, #4]
 800d600:	9902      	ldr	r1, [sp, #8]
 800d602:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d604:	b1da      	cbz	r2, 800d63e <PrepareB0+0x42>
 800d606:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d608:	2049      	movs	r0, #73	@ 0x49
 800d60a:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800d60c:	2000      	movs	r0, #0
 800d60e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d610:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d612:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d614:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d616:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d618:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d61a:	0a23      	lsrs	r3, r4, #8
 800d61c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d61e:	0c23      	lsrs	r3, r4, #16
 800d620:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d622:	0e24      	lsrs	r4, r4, #24
 800d624:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d626:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d628:	0a0b      	lsrs	r3, r1, #8
 800d62a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d62c:	0c0b      	lsrs	r3, r1, #16
 800d62e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d630:	0e09      	lsrs	r1, r1, #24
 800d632:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d634:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d636:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d63a:	bc10      	pop	{r4}
 800d63c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d63e:	2009      	movs	r0, #9
 800d640:	e7fb      	b.n	800d63a <PrepareB0+0x3e>
	...

0800d644 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d644:	2300      	movs	r3, #0
 800d646:	2b01      	cmp	r3, #1
 800d648:	d80d      	bhi.n	800d666 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d64a:	4a08      	ldr	r2, [pc, #32]	@ (800d66c <GetKeyAddrItem+0x28>)
 800d64c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d650:	4282      	cmp	r2, r0
 800d652:	d002      	beq.n	800d65a <GetKeyAddrItem+0x16>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d654:	3301      	adds	r3, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	e7f5      	b.n	800d646 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d65a:	4a04      	ldr	r2, [pc, #16]	@ (800d66c <GetKeyAddrItem+0x28>)
 800d65c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d660:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d662:	2000      	movs	r0, #0
 800d664:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d666:	200b      	movs	r0, #11
}
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	20000118 	.word	0x20000118

0800d670 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d670:	b1f1      	cbz	r1, 800d6b0 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d672:	3801      	subs	r0, #1
 800d674:	2803      	cmp	r0, #3
 800d676:	d81d      	bhi.n	800d6b4 <GetLastFcntDown+0x44>
 800d678:	e8df f000 	tbb	[pc, r0]
 800d67c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d680:	4a0d      	ldr	r2, [pc, #52]	@ (800d6b8 <GetLastFcntDown+0x48>)
 800d682:	6812      	ldr	r2, [r2, #0]
 800d684:	6912      	ldr	r2, [r2, #16]
 800d686:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d688:	2000      	movs	r0, #0
            break;
 800d68a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d68c:	4a0a      	ldr	r2, [pc, #40]	@ (800d6b8 <GetLastFcntDown+0x48>)
 800d68e:	6812      	ldr	r2, [r2, #0]
 800d690:	6952      	ldr	r2, [r2, #20]
 800d692:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d694:	2000      	movs	r0, #0
            break;
 800d696:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d698:	4a07      	ldr	r2, [pc, #28]	@ (800d6b8 <GetLastFcntDown+0x48>)
 800d69a:	6812      	ldr	r2, [r2, #0]
 800d69c:	6992      	ldr	r2, [r2, #24]
 800d69e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d6a0:	2000      	movs	r0, #0
            break;
 800d6a2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d6a4:	4a04      	ldr	r2, [pc, #16]	@ (800d6b8 <GetLastFcntDown+0x48>)
 800d6a6:	6812      	ldr	r2, [r2, #0]
 800d6a8:	69d2      	ldr	r2, [r2, #28]
 800d6aa:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d6ac:	2000      	movs	r0, #0
            break;
 800d6ae:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d6b0:	2009      	movs	r0, #9
 800d6b2:	4770      	bx	lr
    switch( fCntID )
 800d6b4:	2005      	movs	r0, #5
}
 800d6b6:	4770      	bx	lr
 800d6b8:	200011b8 	.word	0x200011b8

0800d6bc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d6bc:	b510      	push	{r4, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d6c6:	a901      	add	r1, sp, #4
 800d6c8:	f7ff ffd2 	bl	800d670 <GetLastFcntDown>
 800d6cc:	b948      	cbnz	r0, 800d6e2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d6ce:	9b01      	ldr	r3, [sp, #4]
 800d6d0:	42a3      	cmp	r3, r4
 800d6d2:	d309      	bcc.n	800d6e8 <CheckFCntDown+0x2c>
 800d6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d8:	d001      	beq.n	800d6de <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e002      	b.n	800d6e4 <CheckFCntDown+0x28>
        return true;
 800d6de:	2001      	movs	r0, #1
 800d6e0:	e000      	b.n	800d6e4 <CheckFCntDown+0x28>
        return false;
 800d6e2:	2000      	movs	r0, #0
    }
}
 800d6e4:	b002      	add	sp, #8
 800d6e6:	bd10      	pop	{r4, pc}
        return true;
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	e7fb      	b.n	800d6e4 <CheckFCntDown+0x28>

0800d6ec <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d6ec:	3801      	subs	r0, #1
 800d6ee:	2803      	cmp	r0, #3
 800d6f0:	d815      	bhi.n	800d71e <UpdateFCntDown+0x32>
 800d6f2:	e8df f000 	tbb	[pc, r0]
 800d6f6:	0702      	.short	0x0702
 800d6f8:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d6fa:	4b09      	ldr	r3, [pc, #36]	@ (800d720 <UpdateFCntDown+0x34>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800d700:	6219      	str	r1, [r3, #32]
            break;
 800d702:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d704:	4b06      	ldr	r3, [pc, #24]	@ (800d720 <UpdateFCntDown+0x34>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800d70a:	6219      	str	r1, [r3, #32]
            break;
 800d70c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d70e:	4b04      	ldr	r3, [pc, #16]	@ (800d720 <UpdateFCntDown+0x34>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800d714:	6219      	str	r1, [r3, #32]
            break;
 800d716:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d718:	4b01      	ldr	r3, [pc, #4]	@ (800d720 <UpdateFCntDown+0x34>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d71e:	4770      	bx	lr
 800d720:	200011b8 	.word	0x200011b8

0800d724 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d724:	4b0a      	ldr	r3, [pc, #40]	@ (800d750 <ResetFCnts+0x2c>)
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	2300      	movs	r3, #0
 800d72a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d72c:	f04f 31ff 	mov.w	r1, #4294967295
 800d730:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d732:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d734:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d736:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dd00      	ble.n	800d73e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800d73c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800d73e:	1d99      	adds	r1, r3, #6
 800d740:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d744:	f04f 30ff 	mov.w	r0, #4294967295
 800d748:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d74a:	3301      	adds	r3, #1
 800d74c:	e7f4      	b.n	800d738 <ResetFCnts+0x14>
 800d74e:	bf00      	nop
 800d750:	200011b8 	.word	0x200011b8

0800d754 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800d754:	4b03      	ldr	r3, [pc, #12]	@ (800d764 <IsJoinNonce10xOk+0x10>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800d75a:	4283      	cmp	r3, r0
 800d75c:	bf2c      	ite	cs
 800d75e:	2000      	movcs	r0, #0
 800d760:	2001      	movcc	r0, #1
 800d762:	4770      	bx	lr
 800d764:	200011b8 	.word	0x200011b8

0800d768 <ComputeCmacB0>:
{
 800d768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76c:	b088      	sub	sp, #32
 800d76e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d770:	b1f0      	cbz	r0, 800d7b0 <ComputeCmacB0+0x48>
 800d772:	460c      	mov	r4, r1
 800d774:	4615      	mov	r5, r2
 800d776:	461a      	mov	r2, r3
 800d778:	4680      	mov	r8, r0
 800d77a:	b1de      	cbz	r6, 800d7b4 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d77c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800d780:	d81a      	bhi.n	800d7b8 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d782:	af04      	add	r7, sp, #16
 800d784:	9702      	str	r7, [sp, #8]
 800d786:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800d792:	4629      	mov	r1, r5
 800d794:	4620      	mov	r0, r4
 800d796:	f7ff ff31 	bl	800d5fc <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d79a:	9600      	str	r6, [sp, #0]
 800d79c:	462b      	mov	r3, r5
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4641      	mov	r1, r8
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f003 fad0 	bl	8010d48 <SecureElementComputeAesCmac>
 800d7a8:	b940      	cbnz	r0, 800d7bc <ComputeCmacB0+0x54>
}
 800d7aa:	b008      	add	sp, #32
 800d7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7b0:	2009      	movs	r0, #9
 800d7b2:	e7fa      	b.n	800d7aa <ComputeCmacB0+0x42>
 800d7b4:	2009      	movs	r0, #9
 800d7b6:	e7f8      	b.n	800d7aa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d7b8:	200d      	movs	r0, #13
 800d7ba:	e7f6      	b.n	800d7aa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7bc:	200e      	movs	r0, #14
 800d7be:	e7f4      	b.n	800d7aa <ComputeCmacB0+0x42>

0800d7c0 <DeriveSessionKey10x>:
{
 800d7c0:	b510      	push	{r4, lr}
 800d7c2:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d7c4:	2400      	movs	r4, #0
 800d7c6:	9400      	str	r4, [sp, #0]
 800d7c8:	9401      	str	r4, [sp, #4]
 800d7ca:	9402      	str	r4, [sp, #8]
 800d7cc:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d7ce:	2808      	cmp	r0, #8
 800d7d0:	d003      	beq.n	800d7da <DeriveSessionKey10x+0x1a>
 800d7d2:	2809      	cmp	r0, #9
 800d7d4:	d025      	beq.n	800d822 <DeriveSessionKey10x+0x62>
 800d7d6:	200a      	movs	r0, #10
 800d7d8:	e021      	b.n	800d81e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d7da:	2401      	movs	r4, #1
 800d7dc:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d7e0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d7e4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d7e8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d7ec:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d7f0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d7f4:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d7f8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d7fc:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d800:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d804:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d808:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d80c:	0a1b      	lsrs	r3, r3, #8
 800d80e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d812:	4602      	mov	r2, r0
 800d814:	2101      	movs	r1, #1
 800d816:	4668      	mov	r0, sp
 800d818:	f003 fb34 	bl	8010e84 <SecureElementDeriveAndStoreKey>
 800d81c:	b928      	cbnz	r0, 800d82a <DeriveSessionKey10x+0x6a>
}
 800d81e:	b004      	add	sp, #16
 800d820:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d822:	2402      	movs	r4, #2
 800d824:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d828:	e7da      	b.n	800d7e0 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d82a:	200e      	movs	r0, #14
 800d82c:	e7f7      	b.n	800d81e <DeriveSessionKey10x+0x5e>

0800d82e <PayloadEncrypt>:
{
 800d82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	4690      	mov	r8, r2
 800d836:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 800d838:	2800      	cmp	r0, #0
 800d83a:	d052      	beq.n	800d8e2 <PayloadEncrypt+0xb4>
 800d83c:	460d      	mov	r5, r1
 800d83e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d840:	2600      	movs	r6, #0
 800d842:	9604      	str	r6, [sp, #16]
 800d844:	9605      	str	r6, [sp, #20]
 800d846:	9606      	str	r6, [sp, #24]
 800d848:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d84a:	9600      	str	r6, [sp, #0]
 800d84c:	9601      	str	r6, [sp, #4]
 800d84e:	9602      	str	r6, [sp, #8]
 800d850:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d852:	2701      	movs	r7, #1
 800d854:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d858:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d85c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d860:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d864:	0a19      	lsrs	r1, r3, #8
 800d866:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d86a:	0c19      	lsrs	r1, r3, #16
 800d86c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d870:	0e1b      	lsrs	r3, r3, #24
 800d872:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d876:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d87a:	0a13      	lsrs	r3, r2, #8
 800d87c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d880:	0c13      	lsrs	r3, r2, #16
 800d882:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d886:	0e12      	lsrs	r2, r2, #24
 800d888:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d88c:	e014      	b.n	800d8b8 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d88e:	18f2      	adds	r2, r6, r3
 800d890:	5ca0      	ldrb	r0, [r4, r2]
 800d892:	f103 0120 	add.w	r1, r3, #32
 800d896:	4469      	add	r1, sp
 800d898:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d89c:	4048      	eors	r0, r1
 800d89e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	462a      	mov	r2, r5
 800d8a6:	2d10      	cmp	r5, #16
 800d8a8:	bfa8      	it	ge
 800d8aa:	2210      	movge	r2, #16
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	dbee      	blt.n	800d88e <PayloadEncrypt+0x60>
        size -= 16;
 800d8b0:	3d10      	subs	r5, #16
 800d8b2:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d8b4:	3610      	adds	r6, #16
 800d8b6:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d8b8:	2d00      	cmp	r5, #0
 800d8ba:	dd0e      	ble.n	800d8da <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d8bc:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d8c0:	3701      	adds	r7, #1
 800d8c2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d8c4:	ab04      	add	r3, sp, #16
 800d8c6:	4642      	mov	r2, r8
 800d8c8:	2110      	movs	r1, #16
 800d8ca:	4668      	mov	r0, sp
 800d8cc:	f003 fa61 	bl	8010d92 <SecureElementAesEncrypt>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d0e6      	beq.n	800d8a4 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d8d6:	200e      	movs	r0, #14
 800d8d8:	e000      	b.n	800d8dc <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d8da:	2000      	movs	r0, #0
}
 800d8dc:	b008      	add	sp, #32
 800d8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d8e2:	2009      	movs	r0, #9
 800d8e4:	e7fa      	b.n	800d8dc <PayloadEncrypt+0xae>

0800d8e6 <VerifyCmacB0>:
    if( msg == 0 )
 800d8e6:	b368      	cbz	r0, 800d944 <VerifyCmacB0+0x5e>
{
 800d8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ec:	b0c8      	sub	sp, #288	@ 0x120
 800d8ee:	460c      	mov	r4, r1
 800d8f0:	4615      	mov	r5, r2
 800d8f2:	461e      	mov	r6, r3
 800d8f4:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d8f6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800d8fa:	d825      	bhi.n	800d948 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d8fc:	af04      	add	r7, sp, #16
 800d8fe:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800d902:	2100      	movs	r1, #0
 800d904:	4638      	mov	r0, r7
 800d906:	f003 fc7c 	bl	8011202 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d90a:	9702      	str	r7, [sp, #8]
 800d90c:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	f89d 3138 	ldrb.w	r3, [sp, #312]	@ 0x138
 800d918:	4632      	mov	r2, r6
 800d91a:	4629      	mov	r1, r5
 800d91c:	4620      	mov	r0, r4
 800d91e:	f7ff fe6d 	bl	800d5fc <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d922:	4622      	mov	r2, r4
 800d924:	4641      	mov	r1, r8
 800d926:	a808      	add	r0, sp, #32
 800d928:	f003 fc53 	bl	80111d2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d92c:	462b      	mov	r3, r5
 800d92e:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800d930:	f104 0110 	add.w	r1, r4, #16
 800d934:	4638      	mov	r0, r7
 800d936:	f003 fa16 	bl	8010d66 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d93a:	b130      	cbz	r0, 800d94a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d93c:	2801      	cmp	r0, #1
 800d93e:	d004      	beq.n	800d94a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d940:	200e      	movs	r0, #14
 800d942:	e002      	b.n	800d94a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d944:	2009      	movs	r0, #9
}
 800d946:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d948:	200d      	movs	r0, #13
}
 800d94a:	b048      	add	sp, #288	@ 0x120
 800d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d950 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d950:	b188      	cbz	r0, 800d976 <LoRaMacCryptoInit+0x26>
{
 800d952:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d954:	4c09      	ldr	r4, [pc, #36]	@ (800d97c <LoRaMacCryptoInit+0x2c>)
 800d956:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d958:	2228      	movs	r2, #40	@ 0x28
 800d95a:	2100      	movs	r1, #0
 800d95c:	f003 fc51 	bl	8011202 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	2201      	movs	r2, #1
 800d964:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d966:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d968:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d96a:	2400      	movs	r4, #0
 800d96c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d96e:	f7ff fed9 	bl	800d724 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d972:	4620      	mov	r0, r4
}
 800d974:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d976:	2008      	movs	r0, #8
}
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	200011b8 	.word	0x200011b8

0800d980 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d980:	4b02      	ldr	r3, [pc, #8]	@ (800d98c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d986:	2000      	movs	r0, #0
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	200011b8 	.word	0x200011b8

0800d990 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d990:	b130      	cbz	r0, 800d9a0 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d992:	4b04      	ldr	r3, [pc, #16]	@ (800d9a4 <LoRaMacCryptoGetFCntUp+0x14>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	3301      	adds	r3, #1
 800d99a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d99c:	2000      	movs	r0, #0
 800d99e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d9a0:	2009      	movs	r0, #9
}
 800d9a2:	4770      	bx	lr
 800d9a4:	200011b8 	.word	0x200011b8

0800d9a8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d9a8:	b530      	push	{r4, r5, lr}
 800d9aa:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d9b0:	b1f2      	cbz	r2, 800d9f0 <LoRaMacCryptoGetFCntDown+0x48>
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d9b6:	a901      	add	r1, sp, #4
 800d9b8:	f7ff fe5a 	bl	800d670 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d9bc:	b948      	cbnz	r0, 800d9d2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c4:	d007      	beq.n	800d9d6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d9ca:	2a00      	cmp	r2, #0
 800d9cc:	dd05      	ble.n	800d9da <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d9ce:	4413      	add	r3, r2
 800d9d0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d9d2:	b003      	add	sp, #12
 800d9d4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800d9d6:	602c      	str	r4, [r5, #0]
 800d9d8:	e7fb      	b.n	800d9d2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800d9da:	b132      	cbz	r2, 800d9ea <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d9dc:	f36f 030f 	bfc	r3, #0, #16
 800d9e0:	4423      	add	r3, r4
 800d9e2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800d9e6:	602b      	str	r3, [r5, #0]
 800d9e8:	e7f3      	b.n	800d9d2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800d9ea:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d9ec:	2007      	movs	r0, #7
 800d9ee:	e7f0      	b.n	800d9d2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d9f0:	2009      	movs	r0, #9
 800d9f2:	e7ee      	b.n	800d9d2 <LoRaMacCryptoGetFCntDown+0x2a>

0800d9f4 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d9f4:	4601      	mov	r1, r0
 800d9f6:	b908      	cbnz	r0, 800d9fc <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d9f8:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d9fa:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	dd01      	ble.n	800da06 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800da02:	2000      	movs	r0, #0
 800da04:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800da06:	4a07      	ldr	r2, [pc, #28]	@ (800da24 <LoRaMacCryptoSetMulticastReference+0x30>)
 800da08:	6812      	ldr	r2, [r2, #0]
 800da0a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800da0e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800da12:	f103 0c06 	add.w	ip, r3, #6
 800da16:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800da1a:	3204      	adds	r2, #4
 800da1c:	6242      	str	r2, [r0, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800da1e:	3301      	adds	r3, #1
 800da20:	e7ed      	b.n	800d9fe <LoRaMacCryptoSetMulticastReference+0xa>
 800da22:	bf00      	nop
 800da24:	200011b8 	.word	0x200011b8

0800da28 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800da28:	b1d8      	cbz	r0, 800da62 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800da2a:	b510      	push	{r4, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800da30:	4b0f      	ldr	r3, [pc, #60]	@ (800da70 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	8893      	ldrh	r3, [r2, #4]
 800da36:	3301      	adds	r3, #1
 800da38:	b29b      	uxth	r3, r3
 800da3a:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800da3c:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800da3e:	f000 fa36 	bl	800deae <LoRaMacSerializerJoinRequest>
 800da42:	b980      	cbnz	r0, 800da66 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800da44:	4623      	mov	r3, r4
 800da46:	f853 1b18 	ldr.w	r1, [r3], #24
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	2301      	movs	r3, #1
 800da4e:	2213      	movs	r2, #19
 800da50:	f003 f97a 	bl	8010d48 <SecureElementComputeAesCmac>
 800da54:	b950      	cbnz	r0, 800da6c <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800da56:	4620      	mov	r0, r4
 800da58:	f000 fa29 	bl	800deae <LoRaMacSerializerJoinRequest>
 800da5c:	b120      	cbz	r0, 800da68 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800da5e:	2010      	movs	r0, #16
 800da60:	e002      	b.n	800da68 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800da62:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800da64:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800da66:	2010      	movs	r0, #16
}
 800da68:	b002      	add	sp, #8
 800da6a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800da6c:	200e      	movs	r0, #14
 800da6e:	e7fb      	b.n	800da68 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800da70:	200011b8 	.word	0x200011b8

0800da74 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800da74:	2b00      	cmp	r3, #0
 800da76:	d036      	beq.n	800dae6 <LoRaMacCryptoSecureMessage+0x72>
{
 800da78:	b530      	push	{r4, r5, lr}
 800da7a:	b085      	sub	sp, #20
 800da7c:	4604      	mov	r4, r0
 800da7e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800da80:	4b1d      	ldr	r3, [pc, #116]	@ (800daf8 <LoRaMacCryptoSecureMessage+0x84>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	4283      	cmp	r3, r0
 800da88:	d82f      	bhi.n	800daea <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800da8a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800da8e:	b342      	cbz	r2, 800dae2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800da90:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800da92:	42a3      	cmp	r3, r4
 800da94:	d209      	bcs.n	800daaa <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800da96:	9401      	str	r4, [sp, #4]
 800da98:	2300      	movs	r3, #0
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	68ab      	ldr	r3, [r5, #8]
 800da9e:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 800daa2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800daa4:	f7ff fec3 	bl	800d82e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800daa8:	bb10      	cbnz	r0, 800daf0 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800daaa:	4628      	mov	r0, r5
 800daac:	f000 fa35 	bl	800df1a <LoRaMacSerializerData>
 800dab0:	b9e8      	cbnz	r0, 800daee <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800dab2:	7929      	ldrb	r1, [r5, #4]
 800dab4:	3904      	subs	r1, #4
 800dab6:	462b      	mov	r3, r5
 800dab8:	f853 0b2c 	ldr.w	r0, [r3], #44
 800dabc:	9303      	str	r3, [sp, #12]
 800dabe:	9402      	str	r4, [sp, #8]
 800dac0:	68ab      	ldr	r3, [r5, #8]
 800dac2:	9301      	str	r3, [sp, #4]
 800dac4:	2300      	movs	r3, #0
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	2208      	movs	r2, #8
 800daca:	b289      	uxth	r1, r1
 800dacc:	f7ff fe4c 	bl	800d768 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dad0:	b970      	cbnz	r0, 800daf0 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800dad2:	4628      	mov	r0, r5
 800dad4:	f000 fa21 	bl	800df1a <LoRaMacSerializerData>
 800dad8:	b960      	cbnz	r0, 800daf4 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800dada:	4b07      	ldr	r3, [pc, #28]	@ (800daf8 <LoRaMacCryptoSecureMessage+0x84>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800dae0:	e006      	b.n	800daf0 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800dae2:	2208      	movs	r2, #8
 800dae4:	e7d5      	b.n	800da92 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dae6:	2009      	movs	r0, #9
}
 800dae8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800daea:	2006      	movs	r0, #6
 800daec:	e000      	b.n	800daf0 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800daee:	2010      	movs	r0, #16
}
 800daf0:	b005      	add	sp, #20
 800daf2:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800daf4:	2010      	movs	r0, #16
 800daf6:	e7fb      	b.n	800daf0 <LoRaMacCryptoSecureMessage+0x7c>
 800daf8:	200011b8 	.word	0x200011b8

0800dafc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800dafc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db00:	b087      	sub	sp, #28
 800db02:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    if( macMsg == 0 )
 800db04:	2e00      	cmp	r6, #0
 800db06:	d049      	beq.n	800db9c <LoRaMacCryptoUnsecureMessage+0xa0>
 800db08:	4605      	mov	r5, r0
 800db0a:	4688      	mov	r8, r1
 800db0c:	4617      	mov	r7, r2
 800db0e:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800db10:	4619      	mov	r1, r3
 800db12:	4610      	mov	r0, r2
 800db14:	f7ff fdd2 	bl	800d6bc <CheckFCntDown>
 800db18:	2800      	cmp	r0, #0
 800db1a:	d041      	beq.n	800dba0 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800db1c:	4630      	mov	r0, r6
 800db1e:	f000 f967 	bl	800ddf0 <LoRaMacParserData>
 800db22:	2800      	cmp	r0, #0
 800db24:	d141      	bne.n	800dbaa <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800db26:	a905      	add	r1, sp, #20
 800db28:	4628      	mov	r0, r5
 800db2a:	f7ff fd8b 	bl	800d644 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db2e:	4605      	mov	r5, r0
 800db30:	2800      	cmp	r0, #0
 800db32:	d136      	bne.n	800dba2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800db34:	9b05      	ldr	r3, [sp, #20]
 800db36:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800db3a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800db3c:	68b3      	ldr	r3, [r6, #8]
 800db3e:	4543      	cmp	r3, r8
 800db40:	d135      	bne.n	800dbae <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800db42:	7b33      	ldrb	r3, [r6, #12]
 800db44:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800db48:	491a      	ldr	r1, [pc, #104]	@ (800dbb4 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800db4a:	6809      	ldr	r1, [r1, #0]
 800db4c:	7889      	ldrb	r1, [r1, #2]
 800db4e:	b901      	cbnz	r1, 800db52 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800db50:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800db52:	7931      	ldrb	r1, [r6, #4]
 800db54:	3904      	subs	r1, #4
 800db56:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800db58:	9003      	str	r0, [sp, #12]
 800db5a:	9402      	str	r4, [sp, #8]
 800db5c:	f8cd 8004 	str.w	r8, [sp, #4]
 800db60:	2001      	movs	r0, #1
 800db62:	9000      	str	r0, [sp, #0]
 800db64:	b289      	uxth	r1, r1
 800db66:	6830      	ldr	r0, [r6, #0]
 800db68:	f7ff febd 	bl	800d8e6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db6c:	4605      	mov	r5, r0
 800db6e:	b9c0      	cbnz	r0, 800dba2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800db70:	f896 3020 	ldrb.w	r3, [r6, #32]
 800db74:	b90b      	cbnz	r3, 800db7a <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800db76:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800db7a:	9401      	str	r4, [sp, #4]
 800db7c:	2301      	movs	r3, #1
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	4643      	mov	r3, r8
 800db82:	464a      	mov	r2, r9
 800db84:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800db88:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800db8a:	f7ff fe50 	bl	800d82e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db8e:	4605      	mov	r5, r0
 800db90:	b938      	cbnz	r0, 800dba2 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800db92:	4621      	mov	r1, r4
 800db94:	4638      	mov	r0, r7
 800db96:	f7ff fda9 	bl	800d6ec <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800db9a:	e002      	b.n	800dba2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800db9c:	2509      	movs	r5, #9
 800db9e:	e000      	b.n	800dba2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800dba0:	2506      	movs	r5, #6
}
 800dba2:	4628      	mov	r0, r5
 800dba4:	b007      	add	sp, #28
 800dba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800dbaa:	250f      	movs	r5, #15
 800dbac:	e7f9      	b.n	800dba2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800dbae:	2502      	movs	r5, #2
 800dbb0:	e7f7      	b.n	800dba2 <LoRaMacCryptoUnsecureMessage+0xa6>
 800dbb2:	bf00      	nop
 800dbb4:	200011b8 	.word	0x200011b8

0800dbb8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800dbb8:	b500      	push	{lr}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	9301      	str	r3, [sp, #4]
 800dbc4:	9302      	str	r3, [sp, #8]
 800dbc6:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800dbc8:	290b      	cmp	r1, #11
 800dbca:	d005      	beq.n	800dbd8 <LoRaMacCryptoDeriveLifeTimeKey+0x20>
 800dbcc:	290c      	cmp	r1, #12
 800dbce:	d011      	beq.n	800dbf4 <LoRaMacCryptoDeriveLifeTimeKey+0x3c>
 800dbd0:	290a      	cmp	r1, #10
 800dbd2:	d00a      	beq.n	800dbea <LoRaMacCryptoDeriveLifeTimeKey+0x32>
 800dbd4:	200a      	movs	r0, #10
 800dbd6:	e012      	b.n	800dbfe <LoRaMacCryptoDeriveLifeTimeKey+0x46>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 800dbd8:	2801      	cmp	r0, #1
 800dbda:	d001      	beq.n	800dbe0 <LoRaMacCryptoDeriveLifeTimeKey+0x28>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800dbdc:	2100      	movs	r1, #0
 800dbde:	e00a      	b.n	800dbf6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            {
                compBase[0] = 0x20;
 800dbe0:	2320      	movs	r3, #32
 800dbe2:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	e005      	b.n	800dbf6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            break;
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
            break;
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 800dbea:	2330      	movs	r3, #48	@ 0x30
 800dbec:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800dbf0:	2100      	movs	r1, #0
            break;
 800dbf2:	e000      	b.n	800dbf6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
    switch( keyID )
 800dbf4:	210b      	movs	r1, #11
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800dbf6:	4668      	mov	r0, sp
 800dbf8:	f003 f944 	bl	8010e84 <SecureElementDeriveAndStoreKey>
 800dbfc:	b910      	cbnz	r0, 800dc04 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800dbfe:	b005      	add	sp, #20
 800dc00:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dc04:	200e      	movs	r0, #14
 800dc06:	e7fa      	b.n	800dbfe <LoRaMacCryptoDeriveLifeTimeKey+0x46>

0800dc08 <LoRaMacCryptoSetKey>:
{
 800dc08:	b510      	push	{r4, lr}
 800dc0a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800dc0c:	f003 f8f8 	bl	8010e00 <SecureElementSetKey>
 800dc10:	b998      	cbnz	r0, 800dc3a <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800dc12:	b104      	cbz	r4, 800dc16 <LoRaMacCryptoSetKey+0xe>
}
 800dc14:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800dc16:	4b0c      	ldr	r3, [pc, #48]	@ (800dc48 <LoRaMacCryptoSetKey+0x40>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	210b      	movs	r1, #11
 800dc1c:	7898      	ldrb	r0, [r3, #2]
 800dc1e:	f7ff ffcb 	bl	800dbb8 <LoRaMacCryptoDeriveLifeTimeKey>
 800dc22:	b960      	cbnz	r0, 800dc3e <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800dc24:	210c      	movs	r1, #12
 800dc26:	f7ff ffc7 	bl	800dbb8 <LoRaMacCryptoDeriveLifeTimeKey>
 800dc2a:	b950      	cbnz	r0, 800dc42 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800dc2c:	210a      	movs	r1, #10
 800dc2e:	f7ff ffc3 	bl	800dbb8 <LoRaMacCryptoDeriveLifeTimeKey>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d0ee      	beq.n	800dc14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dc36:	200e      	movs	r0, #14
 800dc38:	e7ec      	b.n	800dc14 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dc3a:	200e      	movs	r0, #14
 800dc3c:	e7ea      	b.n	800dc14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dc3e:	200e      	movs	r0, #14
 800dc40:	e7e8      	b.n	800dc14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dc42:	200e      	movs	r0, #14
 800dc44:	e7e6      	b.n	800dc14 <LoRaMacCryptoSetKey+0xc>
 800dc46:	bf00      	nop
 800dc48:	200011b8 	.word	0x200011b8

0800dc4c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800dc4c:	2a00      	cmp	r2, #0
 800dc4e:	d06e      	beq.n	800dd2e <LoRaMacCryptoHandleJoinAccept+0xe2>
{
 800dc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc54:	b08e      	sub	sp, #56	@ 0x38
 800dc56:	4606      	mov	r6, r0
 800dc58:	460d      	mov	r5, r1
 800dc5a:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800dc5c:	2900      	cmp	r1, #0
 800dc5e:	d068      	beq.n	800dd32 <LoRaMacCryptoHandleJoinAccept+0xe6>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800dc60:	f10d 0814 	add.w	r8, sp, #20
 800dc64:	2221      	movs	r2, #33	@ 0x21
 800dc66:	2100      	movs	r1, #0
 800dc68:	4640      	mov	r0, r8
 800dc6a:	f006 fcf5 	bl	8014658 <memset>
    uint8_t versionMinor         = 0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	f88d 3013 	strb.w	r3, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800dc74:	4b34      	ldr	r3, [pc, #208]	@ (800dd48 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800dc7a:	f10d 0313 	add.w	r3, sp, #19
 800dc7e:	9302      	str	r3, [sp, #8]
 800dc80:	f8cd 8004 	str.w	r8, [sp, #4]
 800dc84:	7923      	ldrb	r3, [r4, #4]
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	463a      	mov	r2, r7
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f003 f918 	bl	8010ec4 <SecureElementProcessJoinAccept>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d14e      	bne.n	800dd36 <LoRaMacCryptoHandleJoinAccept+0xea>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800dc98:	7922      	ldrb	r2, [r4, #4]
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	6820      	ldr	r0, [r4, #0]
 800dc9e:	f003 fa98 	bl	80111d2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 f852 	bl	800dd4c <LoRaMacParserJoinAccept>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d148      	bne.n	800dd3e <LoRaMacCryptoHandleJoinAccept+0xf2>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800dcac:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800dcae:	79e3      	ldrb	r3, [r4, #7]
 800dcb0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800dcb4:	7a23      	ldrb	r3, [r4, #8]
 800dcb6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f7ff fd4a 	bl	800d754 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d03e      	beq.n	800dd42 <LoRaMacCryptoHandleJoinAccept+0xf6>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800dcc4:	4b20      	ldr	r3, [pc, #128]	@ (800dd48 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800dcca:	210b      	movs	r1, #11
 800dccc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800dcd0:	f7ff ff72 	bl	800dbb8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dcd4:	bb80      	cbnz	r0, 800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800dcd6:	210c      	movs	r1, #12
 800dcd8:	2000      	movs	r0, #0
 800dcda:	f7ff ff6d 	bl	800dbb8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dcde:	bb58      	cbnz	r0, 800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800dce0:	210a      	movs	r1, #10
 800dce2:	2000      	movs	r0, #0
 800dce4:	f7ff ff68 	bl	800dbb8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dce8:	bb30      	cbnz	r0, 800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
        netID = ( uint32_t )macMsg->NetID[0];
 800dcea:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800dcec:	7aa2      	ldrb	r2, [r4, #10]
 800dcee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800dcf2:	7ae2      	ldrb	r2, [r4, #11]
 800dcf4:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800dcf8:	463b      	mov	r3, r7
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	2009      	movs	r0, #9
 800dd00:	f7ff fd5e 	bl	800d7c0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dd04:	b9c0      	cbnz	r0, 800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800dd06:	463b      	mov	r3, r7
 800dd08:	4622      	mov	r2, r4
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	2008      	movs	r0, #8
 800dd0e:	f7ff fd57 	bl	800d7c0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dd12:	b988      	cbnz	r0, 800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800dd14:	4b0c      	ldr	r3, [pc, #48]	@ (800dd48 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800dd1c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800dd1e:	2200      	movs	r2, #0
 800dd20:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800dd22:	f04f 32ff 	mov.w	r2, #4294967295
 800dd26:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800dd28:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800dd2a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800dd2c:	e004      	b.n	800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dd2e:	2009      	movs	r0, #9
}
 800dd30:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dd32:	2009      	movs	r0, #9
 800dd34:	e000      	b.n	800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dd36:	200e      	movs	r0, #14
}
 800dd38:	b00e      	add	sp, #56	@ 0x38
 800dd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800dd3e:	200f      	movs	r0, #15
 800dd40:	e7fa      	b.n	800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800dd42:	2003      	movs	r0, #3
 800dd44:	e7f8      	b.n	800dd38 <LoRaMacCryptoHandleJoinAccept+0xec>
 800dd46:	bf00      	nop
 800dd48:	200011b8 	.word	0x200011b8

0800dd4c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d049      	beq.n	800dde4 <LoRaMacParserJoinAccept+0x98>
{
 800dd50:	b510      	push	{r4, lr}
 800dd52:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dd54:	6801      	ldr	r1, [r0, #0]
 800dd56:	2900      	cmp	r1, #0
 800dd58:	d046      	beq.n	800dde8 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800dd5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd5e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800dd60:	2203      	movs	r2, #3
 800dd62:	3006      	adds	r0, #6
 800dd64:	f003 fa35 	bl	80111d2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f850 1b09 	ldr.w	r1, [r0], #9
 800dd6e:	2203      	movs	r2, #3
 800dd70:	3104      	adds	r1, #4
 800dd72:	f003 fa2e 	bl	80111d2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800dd76:	6821      	ldr	r1, [r4, #0]
 800dd78:	79cb      	ldrb	r3, [r1, #7]
 800dd7a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800dd7c:	7a0a      	ldrb	r2, [r1, #8]
 800dd7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dd82:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dd84:	7a4a      	ldrb	r2, [r1, #9]
 800dd86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd8a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800dd8c:	7a8a      	ldrb	r2, [r1, #10]
 800dd8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dd92:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800dd94:	7acb      	ldrb	r3, [r1, #11]
 800dd96:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800dd98:	7b0b      	ldrb	r3, [r1, #12]
 800dd9a:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800dd9c:	7923      	ldrb	r3, [r4, #4]
 800dd9e:	2b21      	cmp	r3, #33	@ 0x21
 800dda0:	d018      	beq.n	800ddd4 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800dda2:	2b11      	cmp	r3, #17
 800dda4:	dc22      	bgt.n	800ddec <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800dda6:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800dda8:	6821      	ldr	r1, [r4, #0]
 800ddaa:	f102 0c01 	add.w	ip, r2, #1
 800ddae:	5c8b      	ldrb	r3, [r1, r2]
 800ddb0:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ddb2:	1c90      	adds	r0, r2, #2
 800ddb4:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800ddb8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ddbc:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ddbe:	3203      	adds	r2, #3
 800ddc0:	5c08      	ldrb	r0, [r1, r0]
 800ddc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ddc6:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ddc8:	5c8a      	ldrb	r2, [r1, r2]
 800ddca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ddce:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 800ddd0:	2000      	movs	r0, #0
}
 800ddd2:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800ddd4:	2210      	movs	r2, #16
 800ddd6:	310d      	adds	r1, #13
 800ddd8:	f104 0012 	add.w	r0, r4, #18
 800dddc:	f003 f9f9 	bl	80111d2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800dde0:	221d      	movs	r2, #29
 800dde2:	e7e1      	b.n	800dda8 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800dde4:	2002      	movs	r0, #2
}
 800dde6:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800dde8:	2002      	movs	r0, #2
 800ddea:	e7f2      	b.n	800ddd2 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800ddec:	2001      	movs	r0, #1
 800ddee:	e7f0      	b.n	800ddd2 <LoRaMacParserJoinAccept+0x86>

0800ddf0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d058      	beq.n	800dea6 <LoRaMacParserData+0xb6>
{
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ddf8:	6801      	ldr	r1, [r0, #0]
 800ddfa:	2900      	cmp	r1, #0
 800ddfc:	d055      	beq.n	800deaa <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ddfe:	780b      	ldrb	r3, [r1, #0]
 800de00:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800de02:	784b      	ldrb	r3, [r1, #1]
 800de04:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800de06:	788a      	ldrb	r2, [r1, #2]
 800de08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800de0c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800de0e:	78ca      	ldrb	r2, [r1, #3]
 800de10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de14:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800de16:	790a      	ldrb	r2, [r1, #4]
 800de18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800de1c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800de1e:	794b      	ldrb	r3, [r1, #5]
 800de20:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800de22:	798b      	ldrb	r3, [r1, #6]
 800de24:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800de26:	79ca      	ldrb	r2, [r1, #7]
 800de28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800de2c:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800de2e:	7b02      	ldrb	r2, [r0, #12]
 800de30:	f002 020f 	and.w	r2, r2, #15
 800de34:	3108      	adds	r1, #8
 800de36:	3010      	adds	r0, #16
 800de38:	f003 f9cb 	bl	80111d2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800de3c:	7b23      	ldrb	r3, [r4, #12]
 800de3e:	f003 030f 	and.w	r3, r3, #15
 800de42:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800de46:	2200      	movs	r2, #0
 800de48:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800de4c:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800de50:	7922      	ldrb	r2, [r4, #4]
 800de52:	1a11      	subs	r1, r2, r0
 800de54:	2904      	cmp	r1, #4
 800de56:	dc16      	bgt.n	800de86 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800de58:	6822      	ldr	r2, [r4, #0]
 800de5a:	7923      	ldrb	r3, [r4, #4]
 800de5c:	441a      	add	r2, r3
 800de5e:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800de62:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800de64:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800de68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800de6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800de6e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800de72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800de76:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800de78:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800de7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800de80:	62e3      	str	r3, [r4, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800de82:	2000      	movs	r0, #0
}
 800de84:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800de86:	6821      	ldr	r1, [r4, #0]
 800de88:	3309      	adds	r3, #9
 800de8a:	5c08      	ldrb	r0, [r1, r0]
 800de8c:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800de90:	1ad2      	subs	r2, r2, r3
 800de92:	b2d2      	uxtb	r2, r2
 800de94:	3a04      	subs	r2, #4
 800de96:	b2d2      	uxtb	r2, r2
 800de98:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800de9c:	4419      	add	r1, r3
 800de9e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dea0:	f003 f997 	bl	80111d2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800dea4:	e7d8      	b.n	800de58 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800dea6:	2002      	movs	r0, #2
}
 800dea8:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800deaa:	2002      	movs	r0, #2
 800deac:	e7ea      	b.n	800de84 <LoRaMacParserData+0x94>

0800deae <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800deae:	b370      	cbz	r0, 800df0e <LoRaMacSerializerJoinRequest+0x60>
{
 800deb0:	b510      	push	{r4, lr}
 800deb2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800deb4:	6803      	ldr	r3, [r0, #0]
 800deb6:	b363      	cbz	r3, 800df12 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800deb8:	7902      	ldrb	r2, [r0, #4]
 800deba:	2a16      	cmp	r2, #22
 800debc:	d92b      	bls.n	800df16 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800debe:	7942      	ldrb	r2, [r0, #5]
 800dec0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800dec2:	4601      	mov	r1, r0
 800dec4:	f851 0b06 	ldr.w	r0, [r1], #6
 800dec8:	2208      	movs	r2, #8
 800deca:	3001      	adds	r0, #1
 800decc:	f003 f98c 	bl	80111e8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800ded0:	4621      	mov	r1, r4
 800ded2:	f851 0b0e 	ldr.w	r0, [r1], #14
 800ded6:	2208      	movs	r2, #8
 800ded8:	3009      	adds	r0, #9
 800deda:	f003 f985 	bl	80111e8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800dede:	8ae2      	ldrh	r2, [r4, #22]
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800dee4:	8ae3      	ldrh	r3, [r4, #22]
 800dee6:	6822      	ldr	r2, [r4, #0]
 800dee8:	0a1b      	lsrs	r3, r3, #8
 800deea:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800deec:	69a2      	ldr	r2, [r4, #24]
 800deee:	6823      	ldr	r3, [r4, #0]
 800def0:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800def2:	69a3      	ldr	r3, [r4, #24]
 800def4:	0a1b      	lsrs	r3, r3, #8
 800def6:	6822      	ldr	r2, [r4, #0]
 800def8:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800defa:	8b62      	ldrh	r2, [r4, #26]
 800defc:	6823      	ldr	r3, [r4, #0]
 800defe:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800df00:	7ee2      	ldrb	r2, [r4, #27]
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800df06:	2317      	movs	r3, #23
 800df08:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800df0a:	2000      	movs	r0, #0
}
 800df0c:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800df0e:	2001      	movs	r0, #1
}
 800df10:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800df12:	2001      	movs	r0, #1
 800df14:	e7fa      	b.n	800df0c <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800df16:	2002      	movs	r0, #2
 800df18:	e7f8      	b.n	800df0c <LoRaMacSerializerJoinRequest+0x5e>

0800df1a <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d066      	beq.n	800dfec <LoRaMacSerializerData+0xd2>
{
 800df1e:	b538      	push	{r3, r4, r5, lr}
 800df20:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800df22:	6801      	ldr	r1, [r0, #0]
 800df24:	2900      	cmp	r1, #0
 800df26:	d063      	beq.n	800dff0 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800df28:	7b02      	ldrb	r2, [r0, #12]
 800df2a:	f002 020f 	and.w	r2, r2, #15
 800df2e:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800df32:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800df36:	b10b      	cbz	r3, 800df3c <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800df38:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800df3c:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800df3e:	3304      	adds	r3, #4
 800df40:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800df42:	7922      	ldrb	r2, [r4, #4]
 800df44:	429a      	cmp	r2, r3
 800df46:	d355      	bcc.n	800dff4 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800df48:	7963      	ldrb	r3, [r4, #5]
 800df4a:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800df4c:	68a2      	ldr	r2, [r4, #8]
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800df52:	68a3      	ldr	r3, [r4, #8]
 800df54:	0a1b      	lsrs	r3, r3, #8
 800df56:	6822      	ldr	r2, [r4, #0]
 800df58:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800df5a:	8962      	ldrh	r2, [r4, #10]
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800df60:	7ae2      	ldrb	r2, [r4, #11]
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800df66:	6823      	ldr	r3, [r4, #0]
 800df68:	7b22      	ldrb	r2, [r4, #12]
 800df6a:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800df6c:	89e2      	ldrh	r2, [r4, #14]
 800df6e:	6823      	ldr	r3, [r4, #0]
 800df70:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800df72:	89e3      	ldrh	r3, [r4, #14]
 800df74:	6822      	ldr	r2, [r4, #0]
 800df76:	0a1b      	lsrs	r3, r3, #8
 800df78:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800df7a:	4621      	mov	r1, r4
 800df7c:	f851 0b10 	ldr.w	r0, [r1], #16
 800df80:	7b22      	ldrb	r2, [r4, #12]
 800df82:	f002 020f 	and.w	r2, r2, #15
 800df86:	3008      	adds	r0, #8
 800df88:	f003 f923 	bl	80111d2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800df8c:	7b23      	ldrb	r3, [r4, #12]
 800df8e:	f003 030f 	and.w	r3, r3, #15
 800df92:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800df96:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800df9a:	b12a      	cbz	r2, 800dfa8 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800df9c:	6822      	ldr	r2, [r4, #0]
 800df9e:	f894 1020 	ldrb.w	r1, [r4, #32]
 800dfa2:	5551      	strb	r1, [r2, r5]
 800dfa4:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800dfa8:	6820      	ldr	r0, [r4, #0]
 800dfaa:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800dfae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800dfb0:	4428      	add	r0, r5
 800dfb2:	f003 f90e 	bl	80111d2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800dfb6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dfba:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dfbc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800dfbe:	6821      	ldr	r1, [r4, #0]
 800dfc0:	1c5a      	adds	r2, r3, #1
 800dfc2:	b292      	uxth	r2, r2
 800dfc4:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dfc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dfc8:	0a08      	lsrs	r0, r1, #8
 800dfca:	6825      	ldr	r5, [r4, #0]
 800dfcc:	1c99      	adds	r1, r3, #2
 800dfce:	b289      	uxth	r1, r1
 800dfd0:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800dfd2:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 800dfd4:	6820      	ldr	r0, [r4, #0]
 800dfd6:	1cda      	adds	r2, r3, #3
 800dfd8:	b292      	uxth	r2, r2
 800dfda:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800dfdc:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 800dfe0:	6821      	ldr	r1, [r4, #0]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800dfe6:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800dfe8:	2000      	movs	r0, #0
}
 800dfea:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dfec:	2001      	movs	r0, #1
}
 800dfee:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dff0:	2001      	movs	r0, #1
 800dff2:	e7fa      	b.n	800dfea <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800dff4:	2002      	movs	r0, #2
 800dff6:	e7f8      	b.n	800dfea <LoRaMacSerializerData+0xd0>

0800dff8 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800dff8:	4b02      	ldr	r3, [pc, #8]	@ (800e004 <NvmDataMgmtEvent+0xc>)
 800dffa:	881a      	ldrh	r2, [r3, #0]
 800dffc:	4310      	orrs	r0, r2
 800dffe:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	200011bc 	.word	0x200011bc

0800e008 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e008:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800e00a:	4b06      	ldr	r3, [pc, #24]	@ (800e024 <NvmDataMgmtStoreBegin+0x1c>)
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	b11b      	cbz	r3, 800e018 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800e010:	f7fe f896 	bl	800c140 <LoRaMacStop>
 800e014:	b918      	cbnz	r0, 800e01e <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e016:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800e018:	f06f 0001 	mvn.w	r0, #1
 800e01c:	e7fb      	b.n	800e016 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800e01e:	f06f 0002 	mvn.w	r0, #2
 800e022:	e7f8      	b.n	800e016 <NvmDataMgmtStoreBegin+0xe>
 800e024:	200011bc 	.word	0x200011bc

0800e028 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e028:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e02a:	2400      	movs	r4, #0
 800e02c:	4b02      	ldr	r3, [pc, #8]	@ (800e038 <NvmDataMgmtStoreEnd+0x10>)
 800e02e:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800e030:	f7fe f87a 	bl	800c128 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e034:	4620      	mov	r0, r4
 800e036:	bd10      	pop	{r4, pc}
 800e038:	200011bc 	.word	0x200011bc

0800e03c <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800e03c:	2805      	cmp	r0, #5
 800e03e:	d005      	beq.n	800e04c <RegionIsActive+0x10>
 800e040:	2808      	cmp	r0, #8
 800e042:	d001      	beq.n	800e048 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800e044:	2000      	movs	r0, #0
        }
    }
}
 800e046:	4770      	bx	lr
    switch( region )
 800e048:	2001      	movs	r0, #1
 800e04a:	4770      	bx	lr
 800e04c:	2001      	movs	r0, #1
 800e04e:	4770      	bx	lr

0800e050 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800e050:	b500      	push	{lr}
 800e052:	b083      	sub	sp, #12
 800e054:	4603      	mov	r3, r0
 800e056:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800e058:	2200      	movs	r2, #0
 800e05a:	9200      	str	r2, [sp, #0]
    switch( region )
 800e05c:	2b05      	cmp	r3, #5
 800e05e:	d004      	beq.n	800e06a <RegionGetPhyParam+0x1a>
 800e060:	2b08      	cmp	r3, #8
 800e062:	d009      	beq.n	800e078 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800e064:	9b00      	ldr	r3, [sp, #0]
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	e002      	b.n	800e070 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800e06a:	f000 fded 	bl	800ec48 <RegionEU868GetPhyParam>
 800e06e:	9001      	str	r0, [sp, #4]
        }
    }
}
 800e070:	9801      	ldr	r0, [sp, #4]
 800e072:	b003      	add	sp, #12
 800e074:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800e078:	f001 fbda 	bl	800f830 <RegionUS915GetPhyParam>
 800e07c:	9001      	str	r0, [sp, #4]
 800e07e:	e7f7      	b.n	800e070 <RegionGetPhyParam+0x20>

0800e080 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800e080:	b508      	push	{r3, lr}
 800e082:	4603      	mov	r3, r0
 800e084:	4608      	mov	r0, r1
    switch( region )
 800e086:	2b05      	cmp	r3, #5
 800e088:	d004      	beq.n	800e094 <RegionSetBandTxDone+0x14>
 800e08a:	2b08      	cmp	r3, #8
 800e08c:	d104      	bne.n	800e098 <RegionSetBandTxDone+0x18>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 800e08e:	f001 fca5 	bl	800f9dc <RegionUS915SetBandTxDone>
 800e092:	e001      	b.n	800e098 <RegionSetBandTxDone+0x18>
        EU868_SET_BAND_TX_DONE( );
 800e094:	f000 fe94 	bl	800edc0 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800e098:	bd08      	pop	{r3, pc}

0800e09a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800e09a:	b508      	push	{r3, lr}
 800e09c:	4603      	mov	r3, r0
 800e09e:	4608      	mov	r0, r1
    switch( region )
 800e0a0:	2b05      	cmp	r3, #5
 800e0a2:	d004      	beq.n	800e0ae <RegionInitDefaults+0x14>
 800e0a4:	2b08      	cmp	r3, #8
 800e0a6:	d104      	bne.n	800e0b2 <RegionInitDefaults+0x18>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 800e0a8:	f001 fcb6 	bl	800fa18 <RegionUS915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800e0ac:	e001      	b.n	800e0b2 <RegionInitDefaults+0x18>
        EU868_INIT_DEFAULTS( );
 800e0ae:	f000 fea5 	bl	800edfc <RegionEU868InitDefaults>
}
 800e0b2:	bd08      	pop	{r3, pc}

0800e0b4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e0b4:	b508      	push	{r3, lr}
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	4608      	mov	r0, r1
 800e0ba:	4611      	mov	r1, r2
    switch( region )
 800e0bc:	2b05      	cmp	r3, #5
 800e0be:	d003      	beq.n	800e0c8 <RegionVerify+0x14>
 800e0c0:	2b08      	cmp	r3, #8
 800e0c2:	d004      	beq.n	800e0ce <RegionVerify+0x1a>
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	e001      	b.n	800e0cc <RegionVerify+0x18>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 800e0c8:	f000 ff04 	bl	800eed4 <RegionEU868Verify>
        default:
        {
            return false;
        }
    }
}
 800e0cc:	bd08      	pop	{r3, pc}
        US915_VERIFY( );
 800e0ce:	f001 fd47 	bl	800fb60 <RegionUS915Verify>
 800e0d2:	e7fb      	b.n	800e0cc <RegionVerify+0x18>

0800e0d4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800e0d4:	b508      	push	{r3, lr}
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	4608      	mov	r0, r1
    switch( region )
 800e0da:	2b05      	cmp	r3, #5
 800e0dc:	d004      	beq.n	800e0e8 <RegionApplyCFList+0x14>
 800e0de:	2b08      	cmp	r3, #8
 800e0e0:	d104      	bne.n	800e0ec <RegionApplyCFList+0x18>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 800e0e2:	f001 fd77 	bl	800fbd4 <RegionUS915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800e0e6:	e001      	b.n	800e0ec <RegionApplyCFList+0x18>
        EU868_APPLY_CF_LIST( );
 800e0e8:	f001 fac4 	bl	800f674 <RegionEU868ApplyCFList>
}
 800e0ec:	bd08      	pop	{r3, pc}

0800e0ee <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800e0ee:	b508      	push	{r3, lr}
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	4608      	mov	r0, r1
    switch( region )
 800e0f4:	2b05      	cmp	r3, #5
 800e0f6:	d003      	beq.n	800e100 <RegionChanMaskSet+0x12>
 800e0f8:	2b08      	cmp	r3, #8
 800e0fa:	d004      	beq.n	800e106 <RegionChanMaskSet+0x18>
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	e001      	b.n	800e104 <RegionChanMaskSet+0x16>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 800e100:	f000 ff2e 	bl	800ef60 <RegionEU868ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800e104:	bd08      	pop	{r3, pc}
        US915_CHAN_MASK_SET( );
 800e106:	f001 fda3 	bl	800fc50 <RegionUS915ChanMaskSet>
 800e10a:	e7fb      	b.n	800e104 <RegionChanMaskSet+0x16>

0800e10c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e10c:	b508      	push	{r3, lr}
 800e10e:	4684      	mov	ip, r0
 800e110:	4608      	mov	r0, r1
 800e112:	4611      	mov	r1, r2
 800e114:	461a      	mov	r2, r3
    switch( region )
 800e116:	f1bc 0f05 	cmp.w	ip, #5
 800e11a:	d006      	beq.n	800e12a <RegionComputeRxWindowParameters+0x1e>
 800e11c:	f1bc 0f08 	cmp.w	ip, #8
 800e120:	d106      	bne.n	800e130 <RegionComputeRxWindowParameters+0x24>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800e122:	9b02      	ldr	r3, [sp, #8]
 800e124:	f001 fdd6 	bl	800fcd4 <RegionUS915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800e128:	e002      	b.n	800e130 <RegionComputeRxWindowParameters+0x24>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800e12a:	9b02      	ldr	r3, [sp, #8]
 800e12c:	f000 ff36 	bl	800ef9c <RegionEU868ComputeRxWindowParameters>
}
 800e130:	bd08      	pop	{r3, pc}

0800e132 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e132:	b508      	push	{r3, lr}
 800e134:	4603      	mov	r3, r0
 800e136:	4608      	mov	r0, r1
 800e138:	4611      	mov	r1, r2
    switch( region )
 800e13a:	2b05      	cmp	r3, #5
 800e13c:	d003      	beq.n	800e146 <RegionRxConfig+0x14>
 800e13e:	2b08      	cmp	r3, #8
 800e140:	d004      	beq.n	800e14c <RegionRxConfig+0x1a>
 800e142:	2000      	movs	r0, #0
 800e144:	e001      	b.n	800e14a <RegionRxConfig+0x18>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 800e146:	f000 ff5f 	bl	800f008 <RegionEU868RxConfig>
        default:
        {
            return false;
        }
    }
}
 800e14a:	bd08      	pop	{r3, pc}
        US915_RX_CONFIG( );
 800e14c:	f001 fdf0 	bl	800fd30 <RegionUS915RxConfig>
 800e150:	e7fb      	b.n	800e14a <RegionRxConfig+0x18>

0800e152 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e152:	b508      	push	{r3, lr}
 800e154:	4684      	mov	ip, r0
 800e156:	4608      	mov	r0, r1
 800e158:	4611      	mov	r1, r2
 800e15a:	461a      	mov	r2, r3
    switch( region )
 800e15c:	f1bc 0f05 	cmp.w	ip, #5
 800e160:	d004      	beq.n	800e16c <RegionTxConfig+0x1a>
 800e162:	f1bc 0f08 	cmp.w	ip, #8
 800e166:	d004      	beq.n	800e172 <RegionTxConfig+0x20>
 800e168:	2000      	movs	r0, #0
 800e16a:	e001      	b.n	800e170 <RegionTxConfig+0x1e>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 800e16c:	f000 ffd0 	bl	800f110 <RegionEU868TxConfig>
        default:
        {
            return false;
        }
    }
}
 800e170:	bd08      	pop	{r3, pc}
        US915_TX_CONFIG( );
 800e172:	f001 fe37 	bl	800fde4 <RegionUS915TxConfig>
 800e176:	e7fb      	b.n	800e170 <RegionTxConfig+0x1e>

0800e178 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e178:	b500      	push	{lr}
 800e17a:	b083      	sub	sp, #12
 800e17c:	4684      	mov	ip, r0
 800e17e:	4608      	mov	r0, r1
 800e180:	4611      	mov	r1, r2
 800e182:	461a      	mov	r2, r3
    switch( region )
 800e184:	f1bc 0f05 	cmp.w	ip, #5
 800e188:	d004      	beq.n	800e194 <RegionLinkAdrReq+0x1c>
 800e18a:	f1bc 0f08 	cmp.w	ip, #8
 800e18e:	d009      	beq.n	800e1a4 <RegionLinkAdrReq+0x2c>
 800e190:	2000      	movs	r0, #0
 800e192:	e004      	b.n	800e19e <RegionLinkAdrReq+0x26>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 800e194:	9b05      	ldr	r3, [sp, #20]
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	9b04      	ldr	r3, [sp, #16]
 800e19a:	f001 f851 	bl	800f240 <RegionEU868LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 800e19e:	b003      	add	sp, #12
 800e1a0:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_LINK_ADR_REQ( );
 800e1a4:	9b05      	ldr	r3, [sp, #20]
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	9b04      	ldr	r3, [sp, #16]
 800e1aa:	f001 fe95 	bl	800fed8 <RegionUS915LinkAdrReq>
 800e1ae:	e7f6      	b.n	800e19e <RegionLinkAdrReq+0x26>

0800e1b0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e1b0:	b508      	push	{r3, lr}
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	4608      	mov	r0, r1
    switch( region )
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d003      	beq.n	800e1c2 <RegionRxParamSetupReq+0x12>
 800e1ba:	2b08      	cmp	r3, #8
 800e1bc:	d004      	beq.n	800e1c8 <RegionRxParamSetupReq+0x18>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	e001      	b.n	800e1c6 <RegionRxParamSetupReq+0x16>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 800e1c2:	f001 f903 	bl	800f3cc <RegionEU868RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800e1c6:	bd08      	pop	{r3, pc}
        US915_RX_PARAM_SETUP_REQ( );
 800e1c8:	f001 ffca 	bl	8010160 <RegionUS915RxParamSetupReq>
 800e1cc:	e7fb      	b.n	800e1c6 <RegionRxParamSetupReq+0x16>

0800e1ce <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800e1ce:	b508      	push	{r3, lr}
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	4608      	mov	r0, r1
    switch( region )
 800e1d4:	2b05      	cmp	r3, #5
 800e1d6:	d003      	beq.n	800e1e0 <RegionNewChannelReq+0x12>
 800e1d8:	2b08      	cmp	r3, #8
 800e1da:	d004      	beq.n	800e1e6 <RegionNewChannelReq+0x18>
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e001      	b.n	800e1e4 <RegionNewChannelReq+0x16>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 800e1e0:	f001 fa89 	bl	800f6f6 <RegionEU868NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800e1e4:	bd08      	pop	{r3, pc}
        US915_NEW_CHANNEL_REQ( );
 800e1e6:	f001 ffe6 	bl	80101b6 <RegionUS915NewChannelReq>
 800e1ea:	e7fb      	b.n	800e1e4 <RegionNewChannelReq+0x16>

0800e1ec <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800e1ec:	b508      	push	{r3, lr}
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	4608      	mov	r0, r1
    switch( region )
 800e1f2:	2b05      	cmp	r3, #5
 800e1f4:	d003      	beq.n	800e1fe <RegionTxParamSetupReq+0x12>
 800e1f6:	2b08      	cmp	r3, #8
 800e1f8:	d004      	beq.n	800e204 <RegionTxParamSetupReq+0x18>
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	e001      	b.n	800e202 <RegionTxParamSetupReq+0x16>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 800e1fe:	f001 f909 	bl	800f414 <RegionEU868TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800e202:	bd08      	pop	{r3, pc}
        US915_TX_PARAM_SETUP_REQ( );
 800e204:	f001 ffda 	bl	80101bc <RegionUS915TxParamSetupReq>
 800e208:	e7fb      	b.n	800e202 <RegionTxParamSetupReq+0x16>

0800e20a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800e20a:	b508      	push	{r3, lr}
 800e20c:	4603      	mov	r3, r0
 800e20e:	4608      	mov	r0, r1
    switch( region )
 800e210:	2b05      	cmp	r3, #5
 800e212:	d003      	beq.n	800e21c <RegionDlChannelReq+0x12>
 800e214:	2b08      	cmp	r3, #8
 800e216:	d004      	beq.n	800e222 <RegionDlChannelReq+0x18>
 800e218:	2000      	movs	r0, #0
 800e21a:	e001      	b.n	800e220 <RegionDlChannelReq+0x16>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 800e21c:	f001 f8fe 	bl	800f41c <RegionEU868DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800e220:	bd08      	pop	{r3, pc}
        US915_DL_CHANNEL_REQ( );
 800e222:	f001 ffce 	bl	80101c2 <RegionUS915DlChannelReq>
 800e226:	e7fb      	b.n	800e220 <RegionDlChannelReq+0x16>

0800e228 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800e228:	b508      	push	{r3, lr}
 800e22a:	4603      	mov	r3, r0
 800e22c:	4608      	mov	r0, r1
 800e22e:	4611      	mov	r1, r2
    switch( region )
 800e230:	2b05      	cmp	r3, #5
 800e232:	d003      	beq.n	800e23c <RegionAlternateDr+0x14>
 800e234:	2b08      	cmp	r3, #8
 800e236:	d004      	beq.n	800e242 <RegionAlternateDr+0x1a>
 800e238:	2000      	movs	r0, #0
 800e23a:	e001      	b.n	800e240 <RegionAlternateDr+0x18>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 800e23c:	f001 f91a 	bl	800f474 <RegionEU868AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800e240:	bd08      	pop	{r3, pc}
        US915_ALTERNATE_DR( );
 800e242:	f001 ffc1 	bl	80101c8 <RegionUS915AlternateDr>
 800e246:	e7fb      	b.n	800e240 <RegionAlternateDr+0x18>

0800e248 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e248:	b508      	push	{r3, lr}
 800e24a:	4684      	mov	ip, r0
 800e24c:	4608      	mov	r0, r1
 800e24e:	4611      	mov	r1, r2
 800e250:	461a      	mov	r2, r3
    switch( region )
 800e252:	f1bc 0f05 	cmp.w	ip, #5
 800e256:	d004      	beq.n	800e262 <RegionNextChannel+0x1a>
 800e258:	f1bc 0f08 	cmp.w	ip, #8
 800e25c:	d005      	beq.n	800e26a <RegionNextChannel+0x22>
 800e25e:	2009      	movs	r0, #9
 800e260:	e002      	b.n	800e268 <RegionNextChannel+0x20>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 800e262:	9b02      	ldr	r3, [sp, #8]
 800e264:	f001 f908 	bl	800f478 <RegionEU868NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800e268:	bd08      	pop	{r3, pc}
        US915_NEXT_CHANNEL( );
 800e26a:	9b02      	ldr	r3, [sp, #8]
 800e26c:	f001 ffce 	bl	801020c <RegionUS915NextChannel>
 800e270:	e7fa      	b.n	800e268 <RegionNextChannel+0x20>

0800e272 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800e272:	b508      	push	{r3, lr}
 800e274:	4684      	mov	ip, r0
 800e276:	4608      	mov	r0, r1
 800e278:	4611      	mov	r1, r2
 800e27a:	461a      	mov	r2, r3
    switch( region )
 800e27c:	f1bc 0f05 	cmp.w	ip, #5
 800e280:	d004      	beq.n	800e28c <RegionApplyDrOffset+0x1a>
 800e282:	f1bc 0f08 	cmp.w	ip, #8
 800e286:	d004      	beq.n	800e292 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800e288:	b2c8      	uxtb	r0, r1
 800e28a:	e001      	b.n	800e290 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800e28c:	f001 fa5e 	bl	800f74c <RegionEU868ApplyDrOffset>
        }
    }
}
 800e290:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800e292:	f002 f867 	bl	8010364 <RegionUS915ApplyDrOffset>
 800e296:	e7fb      	b.n	800e290 <RegionApplyDrOffset+0x1e>

0800e298 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800e298:	4800      	ldr	r0, [pc, #0]	@ (800e29c <RegionGetVersion+0x4>)
 800e29a:	4770      	bx	lr
 800e29c:	02010001 	.word	0x02010001

0800e2a0 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800e2a0:	468c      	mov	ip, r1
 800e2a2:	b1a9      	cbz	r1, 800e2d0 <FindAvailable125kHzChannels+0x30>
 800e2a4:	b1b2      	cbz	r2, 800e2d4 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800e2aa:	e001      	b.n	800e2b0 <FindAvailable125kHzChannels+0x10>
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	2b07      	cmp	r3, #7
 800e2b2:	d80b      	bhi.n	800e2cc <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800e2b4:	fa40 f103 	asr.w	r1, r0, r3
 800e2b8:	f011 0f01 	tst.w	r1, #1
 800e2bc:	d0f6      	beq.n	800e2ac <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800e2be:	7811      	ldrb	r1, [r2, #0]
 800e2c0:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800e2c4:	7811      	ldrb	r1, [r2, #0]
 800e2c6:	3101      	adds	r1, #1
 800e2c8:	7011      	strb	r1, [r2, #0]
 800e2ca:	e7ef      	b.n	800e2ac <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e2d0:	2003      	movs	r0, #3
 800e2d2:	4770      	bx	lr
 800e2d4:	2003      	movs	r0, #3
}
 800e2d6:	4770      	bx	lr

0800e2d8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2da:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800e2dc:	2300      	movs	r3, #0
 800e2de:	9302      	str	r3, [sp, #8]
 800e2e0:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800e2e2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d03e      	beq.n	800e368 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	4617      	mov	r7, r2
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	2900      	cmp	r1, #0
 800e2f2:	d03b      	beq.n	800e36c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800e2f4:	2a00      	cmp	r2, #0
 800e2f6:	d03b      	beq.n	800e370 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800e2f8:	780c      	ldrb	r4, [r1, #0]
 800e2fa:	e017      	b.n	800e32c <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800e2fc:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800e300:	0a00      	lsrs	r0, r0, #8
 800e302:	e019      	b.n	800e338 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800e304:	3901      	subs	r1, #1
 800e306:	2000      	movs	r0, #0
 800e308:	f002 ff56 	bl	80111b8 <randr>
 800e30c:	f100 0310 	add.w	r3, r0, #16
 800e310:	eb0d 0003 	add.w	r0, sp, r3
 800e314:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800e318:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e31c:	703b      	strb	r3, [r7, #0]
 800e31e:	e016      	b.n	800e34e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800e320:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e324:	b9cb      	cbnz	r3, 800e35a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800e326:	782a      	ldrb	r2, [r5, #0]
 800e328:	42a2      	cmp	r2, r4
 800e32a:	d016      	beq.n	800e35a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800e32c:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800e32e:	f014 0f01 	tst.w	r4, #1
 800e332:	d1e3      	bne.n	800e2fc <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800e334:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800e338:	f10d 0207 	add.w	r2, sp, #7
 800e33c:	a902      	add	r1, sp, #8
 800e33e:	f7ff ffaf 	bl	800e2a0 <FindAvailable125kHzChannels>
 800e342:	2803      	cmp	r0, #3
 800e344:	d00b      	beq.n	800e35e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800e346:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e34a:	2900      	cmp	r1, #0
 800e34c:	d1da      	bne.n	800e304 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800e34e:	3401      	adds	r4, #1
 800e350:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800e352:	2c07      	cmp	r4, #7
 800e354:	d9e4      	bls.n	800e320 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800e356:	2400      	movs	r4, #0
 800e358:	e7e2      	b.n	800e320 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800e35a:	b913      	cbnz	r3, 800e362 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800e35c:	2003      	movs	r0, #3
}
 800e35e:	b005      	add	sp, #20
 800e360:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800e362:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800e364:	2000      	movs	r0, #0
 800e366:	e7fa      	b.n	800e35e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e368:	2003      	movs	r0, #3
 800e36a:	e7f8      	b.n	800e35e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800e36c:	2003      	movs	r0, #3
 800e36e:	e7f6      	b.n	800e35e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800e370:	2003      	movs	r0, #3
 800e372:	e7f4      	b.n	800e35e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800e374 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800e374:	fb02 1000 	mla	r0, r2, r0, r1
 800e378:	4770      	bx	lr

0800e37a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e37a:	b082      	sub	sp, #8
 800e37c:	f10d 0c08 	add.w	ip, sp, #8
 800e380:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800e384:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800e386:	b999      	cbnz	r1, 800e3b0 <GetDutyCycle+0x36>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800e388:	4613      	mov	r3, r2
 800e38a:	f5b2 6f61 	cmp.w	r2, #3600	@ 0xe10
 800e38e:	d306      	bcc.n	800e39e <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800e390:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800e394:	4293      	cmp	r3, r2
 800e396:	d808      	bhi.n	800e3aa <GetDutyCycle+0x30>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800e398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e39c:	e000      	b.n	800e3a0 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800e39e:	2364      	movs	r3, #100	@ 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800e3a0:	4298      	cmp	r0, r3
 800e3a2:	bf38      	it	cc
 800e3a4:	4618      	movcc	r0, r3
    {
        dutyCycle = 1;
    }

    return dutyCycle;
}
 800e3a6:	b002      	add	sp, #8
 800e3a8:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800e3aa:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e3ae:	e7f7      	b.n	800e3a0 <GetDutyCycle+0x26>
    if( dutyCycle == 0 )
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d1f8      	bne.n	800e3a6 <GetDutyCycle+0x2c>
        dutyCycle = 1;
 800e3b4:	2001      	movs	r0, #1
 800e3b6:	e7f6      	b.n	800e3a6 <GetDutyCycle+0x2c>

0800e3b8 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800e3b8:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800e3ba:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800e3bc:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800e3be:	e001      	b.n	800e3c4 <CountChannels+0xc>
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	428b      	cmp	r3, r1
 800e3c6:	d207      	bcs.n	800e3d8 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	409a      	lsls	r2, r3
 800e3cc:	ea32 020c 	bics.w	r2, r2, ip
 800e3d0:	d1f6      	bne.n	800e3c0 <CountChannels+0x8>
        {
            nbActiveBits++;
 800e3d2:	3001      	adds	r0, #1
 800e3d4:	b2c0      	uxtb	r0, r0
 800e3d6:	e7f3      	b.n	800e3c0 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800e3d8:	4770      	bx	lr
	...

0800e3dc <SetMaxTimeCredits>:
{
 800e3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3e0:	b089      	sub	sp, #36	@ 0x24
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	460e      	mov	r6, r1
 800e3e6:	ad02      	add	r5, sp, #8
 800e3e8:	e885 000c 	stmia.w	r5, {r2, r3}
 800e3ec:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
 800e3f0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800e3f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e3f8:	f005 fbfe 	bl	8013bf8 <SysTimeToMs>
 800e3fc:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800e3fe:	2300      	movs	r3, #0
 800e400:	9304      	str	r3, [sp, #16]
 800e402:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e404:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e408:	4631      	mov	r1, r6
 800e40a:	4620      	mov	r0, r4
 800e40c:	f7ff ffb5 	bl	800e37a <GetDutyCycle>
 800e410:	4605      	mov	r5, r0
    if( joined == false )
 800e412:	2e00      	cmp	r6, #0
 800e414:	d14c      	bne.n	800e4b0 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e416:	2864      	cmp	r0, #100	@ 0x64
 800e418:	d025      	beq.n	800e466 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e41a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800e41e:	d025      	beq.n	800e46c <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800e420:	4e27      	ldr	r6, [pc, #156]	@ (800e4c0 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800e422:	68a1      	ldr	r1, [r4, #8]
 800e424:	a806      	add	r0, sp, #24
 800e426:	f005 fc07 	bl	8013c38 <SysTimeFromMs>
 800e42a:	9b07      	ldr	r3, [sp, #28]
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	9b06      	ldr	r3, [sp, #24]
 800e430:	aa02      	add	r2, sp, #8
 800e432:	ca06      	ldmia	r2, {r1, r2}
 800e434:	a804      	add	r0, sp, #16
 800e436:	f005 fb66 	bl	8013b06 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e43a:	f1b8 0f00 	cmp.w	r8, #0
 800e43e:	d102      	bne.n	800e446 <SetMaxTimeCredits+0x6a>
 800e440:	f1b9 0f00 	cmp.w	r9, #0
 800e444:	d002      	beq.n	800e44c <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e446:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e448:	42b3      	cmp	r3, r6
 800e44a:	d012      	beq.n	800e472 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800e44c:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e44e:	9b02      	ldr	r3, [sp, #8]
 800e450:	4a1c      	ldr	r2, [pc, #112]	@ (800e4c4 <SetMaxTimeCredits+0xe8>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d812      	bhi.n	800e47c <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800e456:	6863      	ldr	r3, [r4, #4]
 800e458:	b903      	cbnz	r3, 800e45c <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800e45a:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800e45c:	6126      	str	r6, [r4, #16]
}
 800e45e:	4628      	mov	r0, r5
 800e460:	b009      	add	sp, #36	@ 0x24
 800e462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800e466:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e468:	4e17      	ldr	r6, [pc, #92]	@ (800e4c8 <SetMaxTimeCredits+0xec>)
 800e46a:	e7da      	b.n	800e422 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800e46c:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800e46e:	4e17      	ldr	r6, [pc, #92]	@ (800e4cc <SetMaxTimeCredits+0xf0>)
 800e470:	e7d7      	b.n	800e422 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e472:	9a04      	ldr	r2, [sp, #16]
 800e474:	4b16      	ldr	r3, [pc, #88]	@ (800e4d0 <SetMaxTimeCredits+0xf4>)
 800e476:	429a      	cmp	r2, r3
 800e478:	d9ed      	bls.n	800e456 <SetMaxTimeCredits+0x7a>
 800e47a:	e7e7      	b.n	800e44c <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800e47c:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800e480:	3b30      	subs	r3, #48	@ 0x30
 800e482:	4a14      	ldr	r2, [pc, #80]	@ (800e4d4 <SetMaxTimeCredits+0xf8>)
 800e484:	fba2 2303 	umull	r2, r3, r2, r3
 800e488:	0c1b      	lsrs	r3, r3, #16
 800e48a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800e48c:	4a12      	ldr	r2, [pc, #72]	@ (800e4d8 <SetMaxTimeCredits+0xfc>)
 800e48e:	fb02 f303 	mul.w	r3, r2, r3
 800e492:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e494:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 800e498:	3330      	adds	r3, #48	@ 0x30
 800e49a:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800e49c:	2300      	movs	r3, #0
 800e49e:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800e4a2:	ab04      	add	r3, sp, #16
 800e4a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4a8:	f005 fba6 	bl	8013bf8 <SysTimeToMs>
 800e4ac:	60a0      	str	r0, [r4, #8]
 800e4ae:	e7d2      	b.n	800e456 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800e4b0:	f1b8 0f00 	cmp.w	r8, #0
 800e4b4:	d102      	bne.n	800e4bc <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800e4b6:	4e04      	ldr	r6, [pc, #16]	@ (800e4c8 <SetMaxTimeCredits+0xec>)
 800e4b8:	60e6      	str	r6, [r4, #12]
 800e4ba:	e7cc      	b.n	800e456 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e4bc:	4e02      	ldr	r6, [pc, #8]	@ (800e4c8 <SetMaxTimeCredits+0xec>)
 800e4be:	e7ca      	b.n	800e456 <SetMaxTimeCredits+0x7a>
 800e4c0:	02932e00 	.word	0x02932e00
 800e4c4:	0001ec2f 	.word	0x0001ec2f
 800e4c8:	001b7740 	.word	0x001b7740
 800e4cc:	0112a880 	.word	0x0112a880
 800e4d0:	0001517f 	.word	0x0001517f
 800e4d4:	c22e4507 	.word	0xc22e4507
 800e4d8:	00015180 	.word	0x00015180

0800e4dc <UpdateTimeCredits>:
{
 800e4dc:	b570      	push	{r4, r5, r6, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	9200      	str	r2, [sp, #0]
 800e4e8:	ab06      	add	r3, sp, #24
 800e4ea:	cb0c      	ldmia	r3, {r2, r3}
 800e4ec:	f7ff ff76 	bl	800e3dc <SetMaxTimeCredits>
 800e4f0:	4605      	mov	r5, r0
    if( joined == true )
 800e4f2:	b94e      	cbnz	r6, 800e508 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e4f4:	68e2      	ldr	r2, [r4, #12]
 800e4f6:	6923      	ldr	r3, [r4, #16]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d900      	bls.n	800e4fe <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e4fc:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e4fe:	9b08      	ldr	r3, [sp, #32]
 800e500:	6063      	str	r3, [r4, #4]
}
 800e502:	4628      	mov	r0, r5
 800e504:	b002      	add	sp, #8
 800e506:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e508:	6860      	ldr	r0, [r4, #4]
 800e50a:	f005 fc67 	bl	8013ddc <UTIL_TIMER_GetElapsedTime>
 800e50e:	68e3      	ldr	r3, [r4, #12]
 800e510:	4403      	add	r3, r0
 800e512:	60e3      	str	r3, [r4, #12]
 800e514:	e7ee      	b.n	800e4f4 <UpdateTimeCredits+0x18>

0800e516 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e516:	4288      	cmp	r0, r1
 800e518:	db03      	blt.n	800e522 <RegionCommonValueInRange+0xc>
 800e51a:	4290      	cmp	r0, r2
 800e51c:	dd03      	ble.n	800e526 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e51e:	2000      	movs	r0, #0
 800e520:	4770      	bx	lr
 800e522:	2000      	movs	r0, #0
 800e524:	4770      	bx	lr
        return 1;
 800e526:	2001      	movs	r0, #1
}
 800e528:	4770      	bx	lr

0800e52a <RegionCommonChanVerifyDr>:
{
 800e52a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e52e:	4682      	mov	sl, r0
 800e530:	460e      	mov	r6, r1
 800e532:	4690      	mov	r8, r2
 800e534:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e538:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800e53c:	4619      	mov	r1, r3
 800e53e:	4640      	mov	r0, r8
 800e540:	f7ff ffe9 	bl	800e516 <RegionCommonValueInRange>
 800e544:	b338      	cbz	r0, 800e596 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e546:	2500      	movs	r5, #0
 800e548:	462f      	mov	r7, r5
 800e54a:	e01e      	b.n	800e58a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800e54c:	3401      	adds	r4, #1
 800e54e:	b2e4      	uxtb	r4, r4
 800e550:	2c0f      	cmp	r4, #15
 800e552:	d816      	bhi.n	800e582 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e554:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800e558:	4123      	asrs	r3, r4
 800e55a:	f013 0f01 	tst.w	r3, #1
 800e55e:	d0f5      	beq.n	800e54c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800e560:	193b      	adds	r3, r7, r4
 800e562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e566:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e56a:	7a19      	ldrb	r1, [r3, #8]
 800e56c:	090a      	lsrs	r2, r1, #4
 800e56e:	f001 010f 	and.w	r1, r1, #15
 800e572:	4640      	mov	r0, r8
 800e574:	f7ff ffcf 	bl	800e516 <RegionCommonValueInRange>
 800e578:	2801      	cmp	r0, #1
 800e57a:	d1e7      	bne.n	800e54c <RegionCommonChanVerifyDr+0x22>
                    return true;
 800e57c:	2001      	movs	r0, #1
}
 800e57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e582:	3710      	adds	r7, #16
 800e584:	b2ff      	uxtb	r7, r7
 800e586:	3501      	adds	r5, #1
 800e588:	b2ed      	uxtb	r5, r5
 800e58a:	4557      	cmp	r7, sl
 800e58c:	d201      	bcs.n	800e592 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800e58e:	2400      	movs	r4, #0
 800e590:	e7de      	b.n	800e550 <RegionCommonChanVerifyDr+0x26>
    return false;
 800e592:	2000      	movs	r0, #0
 800e594:	e7f3      	b.n	800e57e <RegionCommonChanVerifyDr+0x54>
        return false;
 800e596:	2000      	movs	r0, #0
 800e598:	e7f1      	b.n	800e57e <RegionCommonChanVerifyDr+0x54>

0800e59a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e59a:	0913      	lsrs	r3, r2, #4
 800e59c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800e5a0:	d313      	bcc.n	800e5ca <RegionCommonChanDisable+0x30>
{
 800e5a2:	b500      	push	{lr}
 800e5a4:	4684      	mov	ip, r0
 800e5a6:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e5aa:	4291      	cmp	r1, r2
 800e5ac:	d20f      	bcs.n	800e5ce <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800e5ae:	f830 301e 	ldrh.w	r3, [r0, lr, lsl #1]
 800e5b2:	f001 010f 	and.w	r1, r1, #15
 800e5b6:	2001      	movs	r0, #1
 800e5b8:	fa00 f101 	lsl.w	r1, r0, r1
 800e5bc:	43c9      	mvns	r1, r1
 800e5be:	b209      	sxth	r1, r1
 800e5c0:	400b      	ands	r3, r1
 800e5c2:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800e5c6:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800e5ca:	2000      	movs	r0, #0
}
 800e5cc:	4770      	bx	lr
        return false;
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	e7f9      	b.n	800e5c6 <RegionCommonChanDisable+0x2c>

0800e5d2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800e5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800e5d4:	b188      	cbz	r0, 800e5fa <RegionCommonCountChannels+0x28>
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	4616      	mov	r6, r2
 800e5da:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800e5dc:	2500      	movs	r5, #0
 800e5de:	e008      	b.n	800e5f2 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800e5e0:	2110      	movs	r1, #16
 800e5e2:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e5e6:	f7ff fee7 	bl	800e3b8 <CountChannels>
 800e5ea:	4405      	add	r5, r0
 800e5ec:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800e5ee:	3401      	adds	r4, #1
 800e5f0:	b2e4      	uxtb	r4, r4
 800e5f2:	42b4      	cmp	r4, r6
 800e5f4:	d3f4      	bcc.n	800e5e0 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800e5fa:	2500      	movs	r5, #0
 800e5fc:	e7fb      	b.n	800e5f6 <RegionCommonCountChannels+0x24>

0800e5fe <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800e5fe:	4684      	mov	ip, r0
 800e600:	b158      	cbz	r0, 800e61a <RegionCommonChanMaskCopy+0x1c>
 800e602:	b109      	cbz	r1, 800e608 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800e604:	2300      	movs	r3, #0
 800e606:	e006      	b.n	800e616 <RegionCommonChanMaskCopy+0x18>
 800e608:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800e60a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e60e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800e612:	3301      	adds	r3, #1
 800e614:	b2db      	uxtb	r3, r3
 800e616:	4293      	cmp	r3, r2
 800e618:	d3f7      	bcc.n	800e60a <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800e61a:	4770      	bx	lr

0800e61c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e61c:	b082      	sub	sp, #8
 800e61e:	b538      	push	{r3, r4, r5, lr}
 800e620:	4604      	mov	r4, r0
 800e622:	460d      	mov	r5, r1
 800e624:	4611      	mov	r1, r2
 800e626:	aa04      	add	r2, sp, #16
 800e628:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e62c:	ca0c      	ldmia	r2, {r2, r3}
 800e62e:	f7ff fea4 	bl	800e37a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800e632:	68e3      	ldr	r3, [r4, #12]
 800e634:	fb05 f100 	mul.w	r1, r5, r0
 800e638:	428b      	cmp	r3, r1
 800e63a:	d905      	bls.n	800e648 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800e63c:	1a5b      	subs	r3, r3, r1
 800e63e:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800e640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e644:	b002      	add	sp, #8
 800e646:	4770      	bx	lr
        band->TimeCredits = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	60e3      	str	r3, [r4, #12]
}
 800e64c:	e7f8      	b.n	800e640 <RegionCommonSetBandTxDone+0x24>
	...

0800e650 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	b089      	sub	sp, #36	@ 0x24
 800e656:	4607      	mov	r7, r0
 800e658:	468b      	mov	fp, r1
 800e65a:	4691      	mov	r9, r2
 800e65c:	4698      	mov	r8, r3
 800e65e:	f89d a048 	ldrb.w	sl, [sp, #72]	@ 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800e662:	f005 fbb1 	bl	8013dc8 <UTIL_TIMER_GetCurrentTime>
 800e666:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800e668:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800e66a:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800e66c:	f04f 33ff 	mov.w	r3, #4294967295
 800e670:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800e672:	e005      	b.n	800e680 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800e674:	2301      	movs	r3, #1
 800e676:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800e678:	441e      	add	r6, r3
 800e67a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800e67c:	3401      	adds	r4, #1
 800e67e:	b2e4      	uxtb	r4, r4
 800e680:	454c      	cmp	r4, r9
 800e682:	d25d      	bcs.n	800e740 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800e684:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e688:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800e68c:	9b04      	ldr	r3, [sp, #16]
 800e68e:	9302      	str	r3, [sp, #8]
 800e690:	ab13      	add	r3, sp, #76	@ 0x4c
 800e692:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e696:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e69a:	4653      	mov	r3, sl
 800e69c:	4642      	mov	r2, r8
 800e69e:	4639      	mov	r1, r7
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	f7ff ff1b 	bl	800e4dc <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800e6a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e6a8:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800e6ac:	68ea      	ldr	r2, [r5, #12]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d2e0      	bcs.n	800e674 <RegionCommonUpdateBandTimeOff+0x24>
 800e6b2:	f1b8 0f00 	cmp.w	r8, #0
 800e6b6:	d101      	bne.n	800e6bc <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800e6b8:	2f00      	cmp	r7, #0
 800e6ba:	d1db      	bne.n	800e674 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800e6bc:	2100      	movs	r1, #0
 800e6be:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800e6c0:	6929      	ldr	r1, [r5, #16]
 800e6c2:	4299      	cmp	r1, r3
 800e6c4:	d307      	bcc.n	800e6d6 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800e6c6:	1a9b      	subs	r3, r3, r2
 800e6c8:	9a05      	ldr	r2, [sp, #20]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	bf28      	it	cs
 800e6ce:	461a      	movcs	r2, r3
 800e6d0:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800e6d2:	3601      	adds	r6, #1
 800e6d4:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800e6d6:	2f00      	cmp	r7, #0
 800e6d8:	d1d0      	bne.n	800e67c <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800e6da:	2300      	movs	r3, #0
 800e6dc:	9306      	str	r3, [sp, #24]
 800e6de:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e6e2:	2864      	cmp	r0, #100	@ 0x64
 800e6e4:	d024      	beq.n	800e730 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e6e6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800e6ea:	d025      	beq.n	800e738 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e6ec:	4b19      	ldr	r3, [pc, #100]	@ (800e754 <RegionCommonUpdateBandTimeOff+0x104>)
 800e6ee:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e6f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6f2:	4a18      	ldr	r2, [pc, #96]	@ (800e754 <RegionCommonUpdateBandTimeOff+0x104>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d90c      	bls.n	800e712 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800e6f8:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800e6fc:	3b30      	subs	r3, #48	@ 0x30
 800e6fe:	4a16      	ldr	r2, [pc, #88]	@ (800e758 <RegionCommonUpdateBandTimeOff+0x108>)
 800e700:	fba2 2303 	umull	r2, r3, r2, r3
 800e704:	0c1b      	lsrs	r3, r3, #16
 800e706:	4a15      	ldr	r2, [pc, #84]	@ (800e75c <RegionCommonUpdateBandTimeOff+0x10c>)
 800e708:	fb03 2202 	mla	r2, r3, r2, r2
 800e70c:	9b06      	ldr	r3, [sp, #24]
 800e70e:	4413      	add	r3, r2
 800e710:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800e712:	ad06      	add	r5, sp, #24
 800e714:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e71a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e71e:	4628      	mov	r0, r5
 800e720:	f005 f9f1 	bl	8013b06 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800e724:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e728:	f005 fa66 	bl	8013bf8 <SysTimeToMs>
 800e72c:	9005      	str	r0, [sp, #20]
 800e72e:	e7a5      	b.n	800e67c <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800e730:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800e734:	9306      	str	r3, [sp, #24]
 800e736:	e7db      	b.n	800e6f0 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800e738:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 800e73c:	9306      	str	r3, [sp, #24]
 800e73e:	e7d7      	b.n	800e6f0 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800e740:	b11e      	cbz	r6, 800e74a <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800e742:	9805      	ldr	r0, [sp, #20]
 800e744:	b009      	add	sp, #36	@ 0x24
 800e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800e74a:	f04f 33ff 	mov.w	r3, #4294967295
 800e74e:	9305      	str	r3, [sp, #20]
 800e750:	e7f7      	b.n	800e742 <RegionCommonUpdateBandTimeOff+0xf2>
 800e752:	bf00      	nop
 800e754:	0001ec30 	.word	0x0001ec30
 800e758:	c22e4507 	.word	0xc22e4507
 800e75c:	00015180 	.word	0x00015180

0800e760 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800e760:	7803      	ldrb	r3, [r0, #0]
 800e762:	2b03      	cmp	r3, #3
 800e764:	d001      	beq.n	800e76a <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800e766:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800e768:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800e76a:	7843      	ldrb	r3, [r0, #1]
 800e76c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800e770:	704a      	strb	r2, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800e772:	f003 020f 	and.w	r2, r3, #15
 800e776:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800e778:	091b      	lsrs	r3, r3, #4
 800e77a:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800e77c:	7883      	ldrb	r3, [r0, #2]
 800e77e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800e780:	78c2      	ldrb	r2, [r0, #3]
 800e782:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e786:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800e788:	7903      	ldrb	r3, [r0, #4]
 800e78a:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800e78c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e790:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800e792:	f003 030f 	and.w	r3, r3, #15
 800e796:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800e798:	2005      	movs	r0, #5
 800e79a:	4770      	bx	lr

0800e79c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	4616      	mov	r6, r2
 800e7a8:	461d      	mov	r5, r3
    uint8_t status = verifyParams->Status;
 800e7aa:	f890 8004 	ldrb.w	r8, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e7ae:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e7b2:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e7b6:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e7ba:	7943      	ldrb	r3, [r0, #5]
 800e7bc:	b92b      	cbnz	r3, 800e7ca <RegionCommonLinkAdrReqVerifyParams+0x2e>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e7be:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e7c2:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e7c6:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e7ca:	f1b8 0f00 	cmp.w	r8, #0
 800e7ce:	d02d      	beq.n	800e82c <RegionCommonLinkAdrReqVerifyParams+0x90>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e7d0:	f1ba 0f0f 	cmp.w	sl, #15
 800e7d4:	d114      	bne.n	800e800 <RegionCommonLinkAdrReqVerifyParams+0x64>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e7d6:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e7da:	f1b9 0f0f 	cmp.w	r9, #15
 800e7de:	d020      	beq.n	800e822 <RegionCommonLinkAdrReqVerifyParams+0x86>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e7e0:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e7e4:	9303      	str	r3, [sp, #12]
 800e7e6:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e7ea:	461c      	mov	r4, r3
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	4648      	mov	r0, r9
 800e7f0:	f7ff fe91 	bl	800e516 <RegionCommonValueInRange>
 800e7f4:	b9b8      	cbnz	r0, 800e826 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e7f6:	454c      	cmp	r4, r9
 800e7f8:	dc22      	bgt.n	800e840 <RegionCommonLinkAdrReqVerifyParams+0xa4>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e7fa:	f008 08fb 	and.w	r8, r8, #251	@ 0xfb
 800e7fe:	e012      	b.n	800e826 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e800:	69a3      	ldr	r3, [r4, #24]
 800e802:	9301      	str	r3, [sp, #4]
 800e804:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e80e:	4652      	mov	r2, sl
 800e810:	6921      	ldr	r1, [r4, #16]
 800e812:	7b20      	ldrb	r0, [r4, #12]
 800e814:	f7ff fe89 	bl	800e52a <RegionCommonChanVerifyDr>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d1de      	bne.n	800e7da <RegionCommonLinkAdrReqVerifyParams+0x3e>
            status &= 0xFD; // Datarate KO
 800e81c:	f008 08fd 	and.w	r8, r8, #253	@ 0xfd
 800e820:	e7db      	b.n	800e7da <RegionCommonLinkAdrReqVerifyParams+0x3e>
            txPower =  verifyParams->CurrentTxPower;
 800e822:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e826:	f1b8 0f07 	cmp.w	r8, #7
 800e82a:	d00c      	beq.n	800e846 <RegionCommonLinkAdrReqVerifyParams+0xaa>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e82c:	f887 a000 	strb.w	sl, [r7]
    *txPow = txPower;
 800e830:	f886 9000 	strb.w	r9, [r6]
    *nbRep = nbRepetitions;
 800e834:	f885 b000 	strb.w	fp, [r5]

    return status;
}
 800e838:	4640      	mov	r0, r8
 800e83a:	b005      	add	sp, #20
 800e83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e840:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e844:	e7ef      	b.n	800e826 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        if( nbRepetitions == 0 )
 800e846:	f1bb 0f00 	cmp.w	fp, #0
 800e84a:	d1ef      	bne.n	800e82c <RegionCommonLinkAdrReqVerifyParams+0x90>
            nbRepetitions = 1;
 800e84c:	f04f 0b01 	mov.w	fp, #1
 800e850:	e7ec      	b.n	800e82c <RegionCommonLinkAdrReqVerifyParams+0x90>
	...

0800e854 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e854:	4b02      	ldr	r3, [pc, #8]	@ (800e860 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e856:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e85a:	fbb0 f0f1 	udiv	r0, r0, r1
 800e85e:	4770      	bx	lr
 800e860:	000f4240 	.word	0x000f4240

0800e864 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e864:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800e868:	fbb3 f0f0 	udiv	r0, r3, r0
 800e86c:	4770      	bx	lr
	...

0800e870 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e870:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e872:	f1a1 0c04 	sub.w	ip, r1, #4
 800e876:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
 800e87a:	fb0e f202 	mul.w	r2, lr, r2
 800e87e:	fb00 220c 	mla	r2, r0, ip, r2
 800e882:	0052      	lsls	r2, r2, #1
 800e884:	d021      	beq.n	800e8ca <RegionCommonComputeRxWindowParameters+0x5a>
 800e886:	4402      	add	r2, r0
 800e888:	3a01      	subs	r2, #1
 800e88a:	fbb2 f2f0 	udiv	r2, r2, r0
 800e88e:	4291      	cmp	r1, r2
 800e890:	bf38      	it	cc
 800e892:	4611      	movcc	r1, r2
 800e894:	9a01      	ldr	r2, [sp, #4]
 800e896:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e898:	0082      	lsls	r2, r0, #2
 800e89a:	fb01 f000 	mul.w	r0, r1, r0
 800e89e:	b1b8      	cbz	r0, 800e8d0 <RegionCommonComputeRxWindowParameters+0x60>
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	0840      	lsrs	r0, r0, #1
 800e8a4:	1a12      	subs	r2, r2, r0
 800e8a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e8aa:	fb01 2313 	mls	r3, r1, r3, r2
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	dd10      	ble.n	800e8d4 <RegionCommonComputeRxWindowParameters+0x64>
 800e8b2:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800e8b6:	4a0b      	ldr	r2, [pc, #44]	@ (800e8e4 <RegionCommonComputeRxWindowParameters+0x74>)
 800e8b8:	fb82 1203 	smull	r1, r2, r2, r3
 800e8bc:	17db      	asrs	r3, r3, #31
 800e8be:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e8c2:	9a02      	ldr	r2, [sp, #8]
 800e8c4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e8ca:	fbb2 f2f0 	udiv	r2, r2, r0
 800e8ce:	e7de      	b.n	800e88e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e8d0:	0840      	lsrs	r0, r0, #1
 800e8d2:	e7e7      	b.n	800e8a4 <RegionCommonComputeRxWindowParameters+0x34>
 800e8d4:	4a03      	ldr	r2, [pc, #12]	@ (800e8e4 <RegionCommonComputeRxWindowParameters+0x74>)
 800e8d6:	fb82 1203 	smull	r1, r2, r2, r3
 800e8da:	17db      	asrs	r3, r3, #31
 800e8dc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e8e0:	e7ef      	b.n	800e8c2 <RegionCommonComputeRxWindowParameters+0x52>
 800e8e2:	bf00      	nop
 800e8e4:	10624dd3 	.word	0x10624dd3

0800e8e8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	460d      	mov	r5, r1
 800e8ec:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e8ee:	0040      	lsls	r0, r0, #1
 800e8f0:	f7f1 ff6c 	bl	80007cc <__aeabi_ui2f>
 800e8f4:	4601      	mov	r1, r0
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	f7f1 feb6 	bl	8000668 <__aeabi_fsub>
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	f7f1 feb3 	bl	8000668 <__aeabi_fsub>
 800e902:	f7f1 fda5 	bl	8000450 <__aeabi_f2d>
 800e906:	f005 fee7 	bl	80146d8 <floor>
 800e90a:	f7f1 fe81 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800e90e:	b240      	sxtb	r0, r0
 800e910:	bd38      	pop	{r3, r4, r5, pc}

0800e912 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e916:	b083      	sub	sp, #12
 800e918:	4605      	mov	r5, r0
 800e91a:	468b      	mov	fp, r1
 800e91c:	9300      	str	r3, [sp, #0]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e91e:	2600      	movs	r6, #0
 800e920:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e922:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e924:	46b1      	mov	r9, r6
 800e926:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e928:	e049      	b.n	800e9be <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e92a:	7a3a      	ldrb	r2, [r7, #8]
 800e92c:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e930:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e934:	b252      	sxtb	r2, r2
 800e936:	b249      	sxtb	r1, r1
 800e938:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e93c:	f7ff fdeb 	bl	800e516 <RegionCommonValueInRange>
 800e940:	b178      	cbz	r0, 800e962 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e942:	68ea      	ldr	r2, [r5, #12]
 800e944:	7a7b      	ldrb	r3, [r7, #9]
 800e946:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e94a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e94e:	7d13      	ldrb	r3, [r2, #20]
 800e950:	b353      	cbz	r3, 800e9a8 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e952:	f109 0301 	add.w	r3, r9, #1
 800e956:	eb08 0204 	add.w	r2, r8, r4
 800e95a:	f80b 2009 	strb.w	r2, [fp, r9]
 800e95e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e962:	3401      	adds	r4, #1
 800e964:	b2e4      	uxtb	r4, r4
 800e966:	2c0f      	cmp	r4, #15
 800e968:	d823      	bhi.n	800e9b2 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e96a:	686b      	ldr	r3, [r5, #4]
 800e96c:	0072      	lsls	r2, r6, #1
 800e96e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e972:	4123      	asrs	r3, r4
 800e974:	f013 0f01 	tst.w	r3, #1
 800e978:	d0f3      	beq.n	800e962 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e97a:	68a8      	ldr	r0, [r5, #8]
 800e97c:	eb08 0304 	add.w	r3, r8, r4
 800e980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e984:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e988:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d0e8      	beq.n	800e962 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e990:	782b      	ldrb	r3, [r5, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1c9      	bne.n	800e92a <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e996:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d0c6      	beq.n	800e92a <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e99c:	5a9b      	ldrh	r3, [r3, r2]
 800e99e:	4123      	asrs	r3, r4
 800e9a0:	f013 0f01 	tst.w	r3, #1
 800e9a4:	d1c1      	bne.n	800e92a <RegionCommonCountNbOfEnabledChannels+0x18>
 800e9a6:	e7dc      	b.n	800e962 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e9a8:	f10a 0a01 	add.w	sl, sl, #1
 800e9ac:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e9b0:	e7d7      	b.n	800e962 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e9b2:	f108 0810 	add.w	r8, r8, #16
 800e9b6:	fa5f f888 	uxtb.w	r8, r8
 800e9ba:	3601      	adds	r6, #1
 800e9bc:	b2f6      	uxtb	r6, r6
 800e9be:	8a2b      	ldrh	r3, [r5, #16]
 800e9c0:	4598      	cmp	r8, r3
 800e9c2:	d201      	bcs.n	800e9c8 <RegionCommonCountNbOfEnabledChannels+0xb6>
        for( uint8_t j = 0; j < 16; j++ )
 800e9c4:	2400      	movs	r4, #0
 800e9c6:	e7ce      	b.n	800e966 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e9c8:	9f01      	ldr	r7, [sp, #4]
 800e9ca:	f887 9000 	strb.w	r9, [r7]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e9ce:	9b00      	ldr	r3, [sp, #0]
 800e9d0:	f883 a000 	strb.w	sl, [r3]
}
 800e9d4:	b003      	add	sp, #12
 800e9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9da <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e9da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	460f      	mov	r7, r1
 800e9e4:	4616      	mov	r6, r2
 800e9e6:	461d      	mov	r5, r3
 800e9e8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800e9ec:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e9f0:	6840      	ldr	r0, [r0, #4]
 800e9f2:	f005 f9f3 	bl	8013ddc <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e9f6:	6823      	ldr	r3, [r4, #0]
 800e9f8:	1a1b      	subs	r3, r3, r0
 800e9fa:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800ea04:	2300      	movs	r3, #0
 800ea06:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ea08:	6863      	ldr	r3, [r4, #4]
 800ea0a:	b113      	cbz	r3, 800ea12 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800ea0c:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ea0e:	4283      	cmp	r3, r0
 800ea10:	d81e      	bhi.n	800ea50 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800ea16:	69e3      	ldr	r3, [r4, #28]
 800ea18:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ea1c:	781f      	ldrb	r7, [r3, #0]
 800ea1e:	69a3      	ldr	r3, [r4, #24]
 800ea20:	9303      	str	r3, [sp, #12]
 800ea22:	ab01      	add	r3, sp, #4
 800ea24:	f104 020c 	add.w	r2, r4, #12
 800ea28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea2c:	e883 0003 	stmia.w	r3, {r0, r1}
 800ea30:	7d23      	ldrb	r3, [r4, #20]
 800ea32:	9300      	str	r3, [sp, #0]
 800ea34:	7a23      	ldrb	r3, [r4, #8]
 800ea36:	7a62      	ldrb	r2, [r4, #9]
 800ea38:	4661      	mov	r1, ip
 800ea3a:	4638      	mov	r0, r7
 800ea3c:	f7ff fe08 	bl	800e650 <RegionCommonUpdateBandTimeOff>
 800ea40:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800ea44:	4643      	mov	r3, r8
 800ea46:	462a      	mov	r2, r5
 800ea48:	4631      	mov	r1, r6
 800ea4a:	69e0      	ldr	r0, [r4, #28]
 800ea4c:	f7ff ff61 	bl	800e912 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800ea50:	782b      	ldrb	r3, [r5, #0]
 800ea52:	b923      	cbnz	r3, 800ea5e <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800ea54:	f898 3000 	ldrb.w	r3, [r8]
 800ea58:	b13b      	cbz	r3, 800ea6a <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800ea5a:	200b      	movs	r0, #11
 800ea5c:	e002      	b.n	800ea64 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800ea5e:	2000      	movs	r0, #0
 800ea60:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800ea64:	b005      	add	sp, #20
 800ea66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800ea6a:	200c      	movs	r0, #12
 800ea6c:	e7fa      	b.n	800ea64 <RegionCommonIdentifyChannels+0x8a>

0800ea6e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800ea6e:	b570      	push	{r4, r5, r6, lr}
 800ea70:	b082      	sub	sp, #8
 800ea72:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800ea74:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800ea78:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800ea7c:	42a6      	cmp	r6, r4
 800ea7e:	d011      	beq.n	800eaa4 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800ea80:	3c01      	subs	r4, #1
 800ea82:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800ea84:	42a6      	cmp	r6, r4
 800ea86:	d00e      	beq.n	800eaa6 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800ea88:	68ab      	ldr	r3, [r5, #8]
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	4633      	mov	r3, r6
 800ea94:	4622      	mov	r2, r4
 800ea96:	6869      	ldr	r1, [r5, #4]
 800ea98:	78e8      	ldrb	r0, [r5, #3]
 800ea9a:	f7ff fd46 	bl	800e52a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d0ee      	beq.n	800ea80 <RegionCommonGetNextLowerTxDr+0x12>
 800eaa2:	e000      	b.n	800eaa6 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800eaa4:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	b002      	add	sp, #8
 800eaaa:	bd70      	pop	{r4, r5, r6, pc}

0800eaac <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800eaac:	4288      	cmp	r0, r1
 800eaae:	bfb8      	it	lt
 800eab0:	4608      	movlt	r0, r1
 800eab2:	4770      	bx	lr

0800eab4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800eab4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800eab8:	4a05      	ldr	r2, [pc, #20]	@ (800ead0 <RegionCommonGetBandwidth+0x1c>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d004      	beq.n	800eac8 <RegionCommonGetBandwidth+0x14>
 800eabe:	4a05      	ldr	r2, [pc, #20]	@ (800ead4 <RegionCommonGetBandwidth+0x20>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d103      	bne.n	800eacc <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800eac4:	2002      	movs	r0, #2
 800eac6:	4770      	bx	lr
            return 1;
 800eac8:	2001      	movs	r0, #1
 800eaca:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800eacc:	2000      	movs	r0, #0
    }
}
 800eace:	4770      	bx	lr
 800ead0:	0003d090 	.word	0x0003d090
 800ead4:	0007a120 	.word	0x0007a120

0800ead8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800ead8:	b500      	push	{lr}
 800eada:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800eadc:	2805      	cmp	r0, #5
 800eade:	d80e      	bhi.n	800eafe <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800eae0:	9202      	str	r2, [sp, #8]
 800eae2:	9101      	str	r1, [sp, #4]
 800eae4:	4b0a      	ldr	r3, [pc, #40]	@ (800eb10 <RegionCommonRxConfigPrint+0x38>)
 800eae6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	4b09      	ldr	r3, [pc, #36]	@ (800eb14 <RegionCommonRxConfigPrint+0x3c>)
 800eaee:	2201      	movs	r2, #1
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	2002      	movs	r0, #2
 800eaf4:	f004 fd24 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800eaf8:	b005      	add	sp, #20
 800eafa:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800eafe:	9201      	str	r2, [sp, #4]
 800eb00:	9100      	str	r1, [sp, #0]
 800eb02:	4b05      	ldr	r3, [pc, #20]	@ (800eb18 <RegionCommonRxConfigPrint+0x40>)
 800eb04:	2201      	movs	r2, #1
 800eb06:	2100      	movs	r1, #0
 800eb08:	2002      	movs	r0, #2
 800eb0a:	f004 fd19 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb0e:	e7f3      	b.n	800eaf8 <RegionCommonRxConfigPrint+0x20>
 800eb10:	08016adc 	.word	0x08016adc
 800eb14:	0801631c 	.word	0x0801631c
 800eb18:	0801633c 	.word	0x0801633c

0800eb1c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800eb1c:	b500      	push	{lr}
 800eb1e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800eb20:	9101      	str	r1, [sp, #4]
 800eb22:	9000      	str	r0, [sp, #0]
 800eb24:	4b04      	ldr	r3, [pc, #16]	@ (800eb38 <RegionCommonTxConfigPrint+0x1c>)
 800eb26:	2201      	movs	r2, #1
 800eb28:	2100      	movs	r1, #0
 800eb2a:	2002      	movs	r0, #2
 800eb2c:	f004 fd08 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb30:	b003      	add	sp, #12
 800eb32:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb36:	bf00      	nop
 800eb38:	08016358 	.word	0x08016358

0800eb3c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	4604      	mov	r4, r0
 800eb40:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800eb42:	4b1b      	ldr	r3, [pc, #108]	@ (800ebb0 <VerifyRfFreq+0x74>)
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	4798      	blx	r3
 800eb48:	b130      	cbz	r0, 800eb58 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800eb4a:	4b1a      	ldr	r3, [pc, #104]	@ (800ebb4 <VerifyRfFreq+0x78>)
 800eb4c:	4423      	add	r3, r4
 800eb4e:	4a1a      	ldr	r2, [pc, #104]	@ (800ebb8 <VerifyRfFreq+0x7c>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d802      	bhi.n	800eb5a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800eb54:	2302      	movs	r3, #2
 800eb56:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800eb58:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800eb5a:	4b18      	ldr	r3, [pc, #96]	@ (800ebbc <VerifyRfFreq+0x80>)
 800eb5c:	4423      	add	r3, r4
 800eb5e:	4a18      	ldr	r2, [pc, #96]	@ (800ebc0 <VerifyRfFreq+0x84>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d802      	bhi.n	800eb6a <VerifyRfFreq+0x2e>
        *band = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	702b      	strb	r3, [r5, #0]
 800eb68:	e7f6      	b.n	800eb58 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800eb6a:	4b16      	ldr	r3, [pc, #88]	@ (800ebc4 <VerifyRfFreq+0x88>)
 800eb6c:	4423      	add	r3, r4
 800eb6e:	4a16      	ldr	r2, [pc, #88]	@ (800ebc8 <VerifyRfFreq+0x8c>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d802      	bhi.n	800eb7a <VerifyRfFreq+0x3e>
        *band = 1;
 800eb74:	2301      	movs	r3, #1
 800eb76:	702b      	strb	r3, [r5, #0]
 800eb78:	e7ee      	b.n	800eb58 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800eb7a:	4b14      	ldr	r3, [pc, #80]	@ (800ebcc <VerifyRfFreq+0x90>)
 800eb7c:	4423      	add	r3, r4
 800eb7e:	4a14      	ldr	r2, [pc, #80]	@ (800ebd0 <VerifyRfFreq+0x94>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d802      	bhi.n	800eb8a <VerifyRfFreq+0x4e>
        *band = 5;
 800eb84:	2305      	movs	r3, #5
 800eb86:	702b      	strb	r3, [r5, #0]
 800eb88:	e7e6      	b.n	800eb58 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800eb8a:	4b12      	ldr	r3, [pc, #72]	@ (800ebd4 <VerifyRfFreq+0x98>)
 800eb8c:	4423      	add	r3, r4
 800eb8e:	4a12      	ldr	r2, [pc, #72]	@ (800ebd8 <VerifyRfFreq+0x9c>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d802      	bhi.n	800eb9a <VerifyRfFreq+0x5e>
        *band = 3;
 800eb94:	2303      	movs	r3, #3
 800eb96:	702b      	strb	r3, [r5, #0]
 800eb98:	e7de      	b.n	800eb58 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800eb9a:	4b10      	ldr	r3, [pc, #64]	@ (800ebdc <VerifyRfFreq+0xa0>)
 800eb9c:	4423      	add	r3, r4
 800eb9e:	4a10      	ldr	r2, [pc, #64]	@ (800ebe0 <VerifyRfFreq+0xa4>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d802      	bhi.n	800ebaa <VerifyRfFreq+0x6e>
        *band = 4;
 800eba4:	2304      	movs	r3, #4
 800eba6:	702b      	strb	r3, [r5, #0]
 800eba8:	e7d6      	b.n	800eb58 <VerifyRfFreq+0x1c>
        return false;
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e7d4      	b.n	800eb58 <VerifyRfFreq+0x1c>
 800ebae:	bf00      	nop
 800ebb0:	08016f38 	.word	0x08016f38
 800ebb4:	cc8faa40 	.word	0xcc8faa40
 800ebb8:	001e847f 	.word	0x001e847f
 800ebbc:	cc7125c0 	.word	0xcc7125c0
 800ebc0:	002dc6c0 	.word	0x002dc6c0
 800ebc4:	cc435eff 	.word	0xcc435eff
 800ebc8:	000927bf 	.word	0x000927bf
 800ebcc:	cc38b0a0 	.word	0xcc38b0a0
 800ebd0:	0007a120 	.word	0x0007a120
 800ebd4:	cc2e0240 	.word	0xcc2e0240
 800ebd8:	0003d090 	.word	0x0003d090
 800ebdc:	cc296e60 	.word	0xcc296e60
 800ebe0:	000493e0 	.word	0x000493e0

0800ebe4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ebe4:	b570      	push	{r4, r5, r6, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	4605      	mov	r5, r0
 800ebea:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ebec:	4b13      	ldr	r3, [pc, #76]	@ (800ec3c <GetTimeOnAir+0x58>)
 800ebee:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ebf0:	4913      	ldr	r1, [pc, #76]	@ (800ec40 <GetTimeOnAir+0x5c>)
 800ebf2:	f7ff ff5f 	bl	800eab4 <RegionCommonGetBandwidth>
 800ebf6:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800ebf8:	2d07      	cmp	r5, #7
 800ebfa:	d00e      	beq.n	800ec1a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ebfc:	4b11      	ldr	r3, [pc, #68]	@ (800ec44 <GetTimeOnAir+0x60>)
 800ebfe:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800ec00:	2001      	movs	r0, #1
 800ec02:	9003      	str	r0, [sp, #12]
 800ec04:	b2e4      	uxtb	r4, r4
 800ec06:	9402      	str	r4, [sp, #8]
 800ec08:	2300      	movs	r3, #0
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	2308      	movs	r3, #8
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	4603      	mov	r3, r0
 800ec12:	4632      	mov	r2, r6
 800ec14:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800ec16:	b004      	add	sp, #16
 800ec18:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ec1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ec44 <GetTimeOnAir+0x60>)
 800ec1c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800ec1e:	2301      	movs	r3, #1
 800ec20:	9303      	str	r3, [sp, #12]
 800ec22:	b2e4      	uxtb	r4, r4
 800ec24:	9402      	str	r4, [sp, #8]
 800ec26:	2000      	movs	r0, #0
 800ec28:	9001      	str	r0, [sp, #4]
 800ec2a:	2305      	movs	r3, #5
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	4603      	mov	r3, r0
 800ec30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ec34:	fb06 f202 	mul.w	r2, r6, r2
 800ec38:	47a8      	blx	r5
 800ec3a:	e7ec      	b.n	800ec16 <GetTimeOnAir+0x32>
 800ec3c:	08016b24 	.word	0x08016b24
 800ec40:	08016b04 	.word	0x08016b04
 800ec44:	08016f38 	.word	0x08016f38

0800ec48 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800ec48:	b500      	push	{lr}
 800ec4a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800ec50:	7803      	ldrb	r3, [r0, #0]
 800ec52:	3b0b      	subs	r3, #11
 800ec54:	2b2d      	cmp	r3, #45	@ 0x2d
 800ec56:	d82f      	bhi.n	800ecb8 <RegionEU868GetPhyParam+0x70>
 800ec58:	e8df f003 	tbb	[pc, r3]
 800ec5c:	3f393633 	.word	0x3f393633
 800ec60:	504c4845 	.word	0x504c4845
 800ec64:	2e5c5854 	.word	0x2e5c5854
 800ec68:	6e682e65 	.word	0x6e682e65
 800ec6c:	2e2e7774 	.word	0x2e2e7774
 800ec70:	2e177f7b 	.word	0x2e177f7b
 800ec74:	2e2e2e2e 	.word	0x2e2e2e2e
 800ec78:	2e2e2e2e 	.word	0x2e2e2e2e
 800ec7c:	2e2e2e2e 	.word	0x2e2e2e2e
 800ec80:	2e8c8582 	.word	0x2e8c8582
 800ec84:	2e928f2e 	.word	0x2e928f2e
 800ec88:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800ec8a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ec8e:	f88d 3004 	strb.w	r3, [sp, #4]
 800ec92:	2307      	movs	r3, #7
 800ec94:	f88d 3005 	strb.w	r3, [sp, #5]
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f88d 3006 	strb.w	r3, [sp, #6]
 800ec9e:	2310      	movs	r3, #16
 800eca0:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800eca4:	4b3e      	ldr	r3, [pc, #248]	@ (800eda0 <RegionEU868GetPhyParam+0x158>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ecac:	9202      	str	r2, [sp, #8]
 800ecae:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ecb0:	a801      	add	r0, sp, #4
 800ecb2:	f7ff fedc 	bl	800ea6e <RegionCommonGetNextLowerTxDr>
 800ecb6:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800ecb8:	9804      	ldr	r0, [sp, #16]
 800ecba:	9005      	str	r0, [sp, #20]
}
 800ecbc:	b007      	add	sp, #28
 800ecbe:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800ecc2:	2340      	movs	r3, #64	@ 0x40
 800ecc4:	9304      	str	r3, [sp, #16]
            break;
 800ecc6:	e7f7      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800ecc8:	2320      	movs	r3, #32
 800ecca:	9304      	str	r3, [sp, #16]
            break;
 800eccc:	e7f4      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800ecce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ecd2:	4a34      	ldr	r2, [pc, #208]	@ (800eda4 <RegionEU868GetPhyParam+0x15c>)
 800ecd4:	5cd3      	ldrb	r3, [r2, r3]
 800ecd6:	9304      	str	r3, [sp, #16]
            break;
 800ecd8:	e7ee      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800ecda:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ecde:	4a32      	ldr	r2, [pc, #200]	@ (800eda8 <RegionEU868GetPhyParam+0x160>)
 800ece0:	5cd3      	ldrb	r3, [r2, r3]
 800ece2:	9304      	str	r3, [sp, #16]
            break;
 800ece4:	e7e8      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800ece6:	2301      	movs	r3, #1
 800ece8:	9304      	str	r3, [sp, #16]
            break;
 800ecea:	e7e5      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800ecec:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ecf0:	9304      	str	r3, [sp, #16]
            break;
 800ecf2:	e7e1      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800ecf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ecf8:	9304      	str	r3, [sp, #16]
            break;
 800ecfa:	e7dd      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ecfc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800ed00:	9304      	str	r3, [sp, #16]
            break;
 800ed02:	e7d9      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ed04:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ed08:	9304      	str	r3, [sp, #16]
            break;
 800ed0a:	e7d5      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ed0c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ed10:	9304      	str	r3, [sp, #16]
            break;
 800ed12:	e7d1      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800ed14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ed18:	4824      	ldr	r0, [pc, #144]	@ (800edac <RegionEU868GetPhyParam+0x164>)
 800ed1a:	f002 fa4d 	bl	80111b8 <randr>
 800ed1e:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800ed22:	9004      	str	r0, [sp, #16]
            break;
 800ed24:	e7c8      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800ed26:	4b22      	ldr	r3, [pc, #136]	@ (800edb0 <RegionEU868GetPhyParam+0x168>)
 800ed28:	9304      	str	r3, [sp, #16]
            break;
 800ed2a:	e7c5      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ed2c:	4b1c      	ldr	r3, [pc, #112]	@ (800eda0 <RegionEU868GetPhyParam+0x158>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ed34:	9304      	str	r3, [sp, #16]
            break;
 800ed36:	e7bf      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ed38:	4b19      	ldr	r3, [pc, #100]	@ (800eda0 <RegionEU868GetPhyParam+0x158>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800ed40:	9304      	str	r3, [sp, #16]
            break;
 800ed42:	e7b9      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ed44:	2310      	movs	r3, #16
 800ed46:	9304      	str	r3, [sp, #16]
            break;
 800ed48:	e7b6      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ed4a:	4b15      	ldr	r3, [pc, #84]	@ (800eda0 <RegionEU868GetPhyParam+0x158>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	9304      	str	r3, [sp, #16]
            break;
 800ed50:	e7b2      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ed52:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800ed56:	9304      	str	r3, [sp, #16]
            break;
 800ed58:	e7ae      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ed5a:	4b16      	ldr	r3, [pc, #88]	@ (800edb4 <RegionEU868GetPhyParam+0x16c>)
 800ed5c:	9304      	str	r3, [sp, #16]
            break;
 800ed5e:	e7ab      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800ed60:	4b13      	ldr	r3, [pc, #76]	@ (800edb0 <RegionEU868GetPhyParam+0x168>)
 800ed62:	9304      	str	r3, [sp, #16]
            break;
 800ed64:	e7a8      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800ed66:	2311      	movs	r3, #17
 800ed68:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800ed72:	e7a1      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800ed74:	2303      	movs	r3, #3
 800ed76:	9304      	str	r3, [sp, #16]
            break;
 800ed78:	e79e      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800ed7a:	4b0d      	ldr	r3, [pc, #52]	@ (800edb0 <RegionEU868GetPhyParam+0x168>)
 800ed7c:	9304      	str	r3, [sp, #16]
            break;
 800ed7e:	e79b      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800ed80:	2303      	movs	r3, #3
 800ed82:	9304      	str	r3, [sp, #16]
            break;
 800ed84:	e798      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ed86:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ed8a:	4a0b      	ldr	r2, [pc, #44]	@ (800edb8 <RegionEU868GetPhyParam+0x170>)
 800ed8c:	5cd3      	ldrb	r3, [r2, r3]
 800ed8e:	9304      	str	r3, [sp, #16]
            break;
 800ed90:	e792      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ed92:	490a      	ldr	r1, [pc, #40]	@ (800edbc <RegionEU868GetPhyParam+0x174>)
 800ed94:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ed98:	f7ff fe8c 	bl	800eab4 <RegionCommonGetBandwidth>
 800ed9c:	9004      	str	r0, [sp, #16]
            break;
 800ed9e:	e78b      	b.n	800ecb8 <RegionEU868GetPhyParam+0x70>
 800eda0:	200011c4 	.word	0x200011c4
 800eda4:	08016afc 	.word	0x08016afc
 800eda8:	08016af4 	.word	0x08016af4
 800edac:	fffffc18 	.word	0xfffffc18
 800edb0:	33d3e608 	.word	0x33d3e608
 800edb4:	4009999a 	.word	0x4009999a
 800edb8:	08016b24 	.word	0x08016b24
 800edbc:	08016b04 	.word	0x08016b04

0800edc0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800edc0:	b510      	push	{r4, lr}
 800edc2:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800edc4:	4b0b      	ldr	r3, [pc, #44]	@ (800edf4 <RegionEU868SetBandTxDone+0x34>)
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	7803      	ldrb	r3, [r0, #0]
 800edca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800edce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edd2:	7a5b      	ldrb	r3, [r3, #9]
 800edd4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800edd8:	4b07      	ldr	r3, [pc, #28]	@ (800edf8 <RegionEU868SetBandTxDone+0x38>)
 800edda:	681c      	ldr	r4, [r3, #0]
 800eddc:	6903      	ldr	r3, [r0, #16]
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	68c3      	ldr	r3, [r0, #12]
 800ede2:	7842      	ldrb	r2, [r0, #1]
 800ede4:	6881      	ldr	r1, [r0, #8]
 800ede6:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800edea:	f7ff fc17 	bl	800e61c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800edee:	b002      	add	sp, #8
 800edf0:	bd10      	pop	{r4, pc}
 800edf2:	bf00      	nop
 800edf4:	200011c4 	.word	0x200011c4
 800edf8:	200011c0 	.word	0x200011c0

0800edfc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800edfc:	b530      	push	{r4, r5, lr}
 800edfe:	b0a5      	sub	sp, #148	@ 0x94
 800ee00:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ee02:	2290      	movs	r2, #144	@ 0x90
 800ee04:	2100      	movs	r1, #0
 800ee06:	4668      	mov	r0, sp
 800ee08:	f005 fc26 	bl	8014658 <memset>
 800ee0c:	2364      	movs	r3, #100	@ 0x64
 800ee0e:	f8ad 3000 	strh.w	r3, [sp]
 800ee12:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ee16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ee1a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800ee1e:	210a      	movs	r1, #10
 800ee20:	f8ad 1048 	strh.w	r1, [sp, #72]	@ 0x48
 800ee24:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800ee28:	f8ad 2078 	strh.w	r2, [sp, #120]	@ 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800ee2c:	7b23      	ldrb	r3, [r4, #12]
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d031      	beq.n	800ee96 <RegionEU868InitDefaults+0x9a>
 800ee32:	2b02      	cmp	r3, #2
 800ee34:	d03e      	beq.n	800eeb4 <RegionEU868InitDefaults+0xb8>
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d13a      	bne.n	800eeb0 <RegionEU868InitDefaults+0xb4>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d037      	beq.n	800eeb0 <RegionEU868InitDefaults+0xb4>
 800ee40:	6863      	ldr	r3, [r4, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d034      	beq.n	800eeb0 <RegionEU868InitDefaults+0xb4>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ee46:	4d20      	ldr	r5, [pc, #128]	@ (800eec8 <RegionEU868InitDefaults+0xcc>)
 800ee48:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800ee4a:	68a0      	ldr	r0, [r4, #8]
 800ee4c:	4b1f      	ldr	r3, [pc, #124]	@ (800eecc <RegionEU868InitDefaults+0xd0>)
 800ee4e:	6018      	str	r0, [r3, #0]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ee50:	2290      	movs	r2, #144	@ 0x90
 800ee52:	4669      	mov	r1, sp
 800ee54:	f002 f9bd 	bl	80111d2 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800ee58:	682c      	ldr	r4, [r5, #0]
 800ee5a:	4b1d      	ldr	r3, [pc, #116]	@ (800eed0 <RegionEU868InitDefaults+0xd4>)
 800ee5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ee64:	f104 0c0c 	add.w	ip, r4, #12
 800ee68:	f103 020c 	add.w	r2, r3, #12
 800ee6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee6e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800ee72:	f104 0c18 	add.w	ip, r4, #24
 800ee76:	3318      	adds	r3, #24
 800ee78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee7c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ee80:	2307      	movs	r3, #7
 800ee82:	f8a4 336c 	strh.w	r3, [r4, #876]	@ 0x36c

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ee86:	2201      	movs	r2, #1
 800ee88:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
 800ee8c:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 800ee90:	f7ff fbb5 	bl	800e5fe <RegionCommonChanMaskCopy>
            break;
 800ee94:	e00c      	b.n	800eeb0 <RegionEU868InitDefaults+0xb4>
        }
        case INIT_TYPE_RESET_TO_DEFAULT_CHANNELS:
        {
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ee96:	4b0c      	ldr	r3, [pc, #48]	@ (800eec8 <RegionEU868InitDefaults+0xcc>)
 800ee98:	6818      	ldr	r0, [r3, #0]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800ee9e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800eea0:	61c3      	str	r3, [r0, #28]
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eea2:	2201      	movs	r2, #1
 800eea4:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800eea8:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800eeac:	f7ff fba7 	bl	800e5fe <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800eeb0:	b025      	add	sp, #148	@ 0x94
 800eeb2:	bd30      	pop	{r4, r5, pc}
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800eeb4:	4b04      	ldr	r3, [pc, #16]	@ (800eec8 <RegionEU868InitDefaults+0xcc>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800eebc:	f8b3 136c 	ldrh.w	r1, [r3, #876]	@ 0x36c
 800eec0:	430a      	orrs	r2, r1
 800eec2:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 800eec6:	e7f3      	b.n	800eeb0 <RegionEU868InitDefaults+0xb4>
 800eec8:	200011c4 	.word	0x200011c4
 800eecc:	200011c0 	.word	0x200011c0
 800eed0:	08014894 	.word	0x08014894

0800eed4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800eed4:	b500      	push	{lr}
 800eed6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800eed8:	290f      	cmp	r1, #15
 800eeda:	d83c      	bhi.n	800ef56 <RegionEU868Verify+0x82>
 800eedc:	e8df f001 	tbb	[pc, r1]
 800eee0:	3b3b3b0a 	.word	0x3b3b3b0a
 800eee4:	271d133b 	.word	0x271d133b
 800eee8:	3b31313b 	.word	0x3b31313b
 800eeec:	083b3b3b 	.word	0x083b3b3b
 800eef0:	2001      	movs	r0, #1
 800eef2:	e031      	b.n	800ef58 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800eefa:	f10d 0107 	add.w	r1, sp, #7
 800eefe:	6800      	ldr	r0, [r0, #0]
 800ef00:	f7ff fe1c 	bl	800eb3c <VerifyRfFreq>
 800ef04:	e028      	b.n	800ef58 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800ef06:	2207      	movs	r2, #7
 800ef08:	2100      	movs	r1, #0
 800ef0a:	f990 0000 	ldrsb.w	r0, [r0]
 800ef0e:	f7ff fb02 	bl	800e516 <RegionCommonValueInRange>
 800ef12:	3800      	subs	r0, #0
 800ef14:	bf18      	it	ne
 800ef16:	2001      	movne	r0, #1
 800ef18:	e01e      	b.n	800ef58 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ef1a:	2205      	movs	r2, #5
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	f990 0000 	ldrsb.w	r0, [r0]
 800ef22:	f7ff faf8 	bl	800e516 <RegionCommonValueInRange>
 800ef26:	3800      	subs	r0, #0
 800ef28:	bf18      	it	ne
 800ef2a:	2001      	movne	r0, #1
 800ef2c:	e014      	b.n	800ef58 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800ef2e:	2207      	movs	r2, #7
 800ef30:	2100      	movs	r1, #0
 800ef32:	f990 0000 	ldrsb.w	r0, [r0]
 800ef36:	f7ff faee 	bl	800e516 <RegionCommonValueInRange>
 800ef3a:	3800      	subs	r0, #0
 800ef3c:	bf18      	it	ne
 800ef3e:	2001      	movne	r0, #1
 800ef40:	e00a      	b.n	800ef58 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800ef42:	2207      	movs	r2, #7
 800ef44:	2100      	movs	r1, #0
 800ef46:	f990 0000 	ldrsb.w	r0, [r0]
 800ef4a:	f7ff fae4 	bl	800e516 <RegionCommonValueInRange>
 800ef4e:	3800      	subs	r0, #0
 800ef50:	bf18      	it	ne
 800ef52:	2001      	movne	r0, #1
 800ef54:	e000      	b.n	800ef58 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800ef56:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800ef58:	b003      	add	sp, #12
 800ef5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ef60 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ef60:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800ef62:	7903      	ldrb	r3, [r0, #4]
 800ef64:	b11b      	cbz	r3, 800ef6e <RegionEU868ChanMaskSet+0xe>
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d00b      	beq.n	800ef82 <RegionEU868ChanMaskSet+0x22>
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	e008      	b.n	800ef80 <RegionEU868ChanMaskSet+0x20>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ef98 <RegionEU868ChanMaskSet+0x38>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2201      	movs	r2, #1
 800ef74:	6801      	ldr	r1, [r0, #0]
 800ef76:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 800ef7a:	f7ff fb40 	bl	800e5fe <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800ef7e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800ef80:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ef82:	4b05      	ldr	r3, [pc, #20]	@ (800ef98 <RegionEU868ChanMaskSet+0x38>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2201      	movs	r2, #1
 800ef88:	6801      	ldr	r1, [r0, #0]
 800ef8a:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800ef8e:	f7ff fb36 	bl	800e5fe <RegionCommonChanMaskCopy>
    return true;
 800ef92:	2001      	movs	r0, #1
            break;
 800ef94:	e7f4      	b.n	800ef80 <RegionEU868ChanMaskSet+0x20>
 800ef96:	bf00      	nop
 800ef98:	200011c4 	.word	0x200011c4

0800ef9c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ef9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	460e      	mov	r6, r1
 800efa2:	4617      	mov	r7, r2
 800efa4:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800efa6:	2807      	cmp	r0, #7
 800efa8:	bfa8      	it	ge
 800efaa:	2007      	movge	r0, #7
 800efac:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800efae:	4913      	ldr	r1, [pc, #76]	@ (800effc <RegionEU868ComputeRxWindowParameters+0x60>)
 800efb0:	f7ff fd80 	bl	800eab4 <RegionCommonGetBandwidth>
 800efb4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800efb6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800efba:	2b07      	cmp	r3, #7
 800efbc:	d017      	beq.n	800efee <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800efbe:	4a0f      	ldr	r2, [pc, #60]	@ (800effc <RegionEU868ComputeRxWindowParameters+0x60>)
 800efc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800efc4:	4a0e      	ldr	r2, [pc, #56]	@ (800f000 <RegionEU868ComputeRxWindowParameters+0x64>)
 800efc6:	5cd0      	ldrb	r0, [r2, r3]
 800efc8:	f7ff fc44 	bl	800e854 <RegionCommonComputeSymbolTimeLoRa>
 800efcc:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800efce:	4b0d      	ldr	r3, [pc, #52]	@ (800f004 <RegionEU868ComputeRxWindowParameters+0x68>)
 800efd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800efd2:	4798      	blx	r3
 800efd4:	4603      	mov	r3, r0
 800efd6:	f104 020c 	add.w	r2, r4, #12
 800efda:	9201      	str	r2, [sp, #4]
 800efdc:	3408      	adds	r4, #8
 800efde:	9400      	str	r4, [sp, #0]
 800efe0:	463a      	mov	r2, r7
 800efe2:	4631      	mov	r1, r6
 800efe4:	4628      	mov	r0, r5
 800efe6:	f7ff fc43 	bl	800e870 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800efea:	b003      	add	sp, #12
 800efec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800efee:	4a04      	ldr	r2, [pc, #16]	@ (800f000 <RegionEU868ComputeRxWindowParameters+0x64>)
 800eff0:	5cd0      	ldrb	r0, [r2, r3]
 800eff2:	f7ff fc37 	bl	800e864 <RegionCommonComputeSymbolTimeFsk>
 800eff6:	4605      	mov	r5, r0
 800eff8:	e7e9      	b.n	800efce <RegionEU868ComputeRxWindowParameters+0x32>
 800effa:	bf00      	nop
 800effc:	08016b04 	.word	0x08016b04
 800f000:	08016b24 	.word	0x08016b24
 800f004:	08016f38 	.word	0x08016f38

0800f008 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f00c:	b08a      	sub	sp, #40	@ 0x28
 800f00e:	4604      	mov	r4, r0
 800f010:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800f012:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f016:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f01a:	4b37      	ldr	r3, [pc, #220]	@ (800f0f8 <RegionEU868RxConfig+0xf0>)
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	4798      	blx	r3
 800f020:	2800      	cmp	r0, #0
 800f022:	d167      	bne.n	800f0f4 <RegionEU868RxConfig+0xec>
 800f024:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f026:	7ce3      	ldrb	r3, [r4, #19]
 800f028:	b983      	cbnz	r3, 800f04c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800f02a:	4b34      	ldr	r3, [pc, #208]	@ (800f0fc <RegionEU868RxConfig+0xf4>)
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	7823      	ldrb	r3, [r4, #0]
 800f030:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f034:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800f038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f03c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f040:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800f044:	f1b8 0f00 	cmp.w	r8, #0
 800f048:	d100      	bne.n	800f04c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800f04a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800f04c:	4b2c      	ldr	r3, [pc, #176]	@ (800f100 <RegionEU868RxConfig+0xf8>)
 800f04e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800f052:	4b29      	ldr	r3, [pc, #164]	@ (800f0f8 <RegionEU868RxConfig+0xf0>)
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	4640      	mov	r0, r8
 800f058:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800f05a:	2d07      	cmp	r5, #7
 800f05c:	d02b      	beq.n	800f0b6 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f05e:	4b26      	ldr	r3, [pc, #152]	@ (800f0f8 <RegionEU868RxConfig+0xf0>)
 800f060:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f064:	7ca3      	ldrb	r3, [r4, #18]
 800f066:	9309      	str	r3, [sp, #36]	@ 0x24
 800f068:	2601      	movs	r6, #1
 800f06a:	9608      	str	r6, [sp, #32]
 800f06c:	2300      	movs	r3, #0
 800f06e:	9307      	str	r3, [sp, #28]
 800f070:	9306      	str	r3, [sp, #24]
 800f072:	9305      	str	r3, [sp, #20]
 800f074:	9304      	str	r3, [sp, #16]
 800f076:	9303      	str	r3, [sp, #12]
 800f078:	8922      	ldrh	r2, [r4, #8]
 800f07a:	9202      	str	r2, [sp, #8]
 800f07c:	2208      	movs	r2, #8
 800f07e:	9201      	str	r2, [sp, #4]
 800f080:	9300      	str	r3, [sp, #0]
 800f082:	4633      	mov	r3, r6
 800f084:	464a      	mov	r2, r9
 800f086:	78a1      	ldrb	r1, [r4, #2]
 800f088:	4630      	mov	r0, r6
 800f08a:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800f08c:	7c63      	ldrb	r3, [r4, #17]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d02d      	beq.n	800f0ee <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800f092:	4b1c      	ldr	r3, [pc, #112]	@ (800f104 <RegionEU868RxConfig+0xfc>)
 800f094:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f096:	4b18      	ldr	r3, [pc, #96]	@ (800f0f8 <RegionEU868RxConfig+0xf0>)
 800f098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f09a:	310d      	adds	r1, #13
 800f09c:	b2c9      	uxtb	r1, r1
 800f09e:	4630      	mov	r0, r6
 800f0a0:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f0a2:	462a      	mov	r2, r5
 800f0a4:	4641      	mov	r1, r8
 800f0a6:	7ce0      	ldrb	r0, [r4, #19]
 800f0a8:	f7ff fd16 	bl	800ead8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800f0ac:	703d      	strb	r5, [r7, #0]
    return true;
 800f0ae:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800f0b0:	b00a      	add	sp, #40	@ 0x28
 800f0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800f0b6:	4b10      	ldr	r3, [pc, #64]	@ (800f0f8 <RegionEU868RxConfig+0xf0>)
 800f0b8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f0bc:	7ca3      	ldrb	r3, [r4, #18]
 800f0be:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	9008      	str	r0, [sp, #32]
 800f0c4:	9007      	str	r0, [sp, #28]
 800f0c6:	9006      	str	r0, [sp, #24]
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	9305      	str	r3, [sp, #20]
 800f0cc:	9004      	str	r0, [sp, #16]
 800f0ce:	9003      	str	r0, [sp, #12]
 800f0d0:	8923      	ldrh	r3, [r4, #8]
 800f0d2:	9302      	str	r3, [sp, #8]
 800f0d4:	2305      	movs	r3, #5
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f108 <RegionEU868RxConfig+0x100>)
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	4603      	mov	r3, r0
 800f0de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f0e2:	fb02 f209 	mul.w	r2, r2, r9
 800f0e6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f0ea:	47d0      	blx	sl
 800f0ec:	e7ce      	b.n	800f08c <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800f0ee:	4b07      	ldr	r3, [pc, #28]	@ (800f10c <RegionEU868RxConfig+0x104>)
 800f0f0:	5d59      	ldrb	r1, [r3, r5]
 800f0f2:	e7d0      	b.n	800f096 <RegionEU868RxConfig+0x8e>
        return false;
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	e7db      	b.n	800f0b0 <RegionEU868RxConfig+0xa8>
 800f0f8:	08016f38 	.word	0x08016f38
 800f0fc:	200011c4 	.word	0x200011c4
 800f100:	08016b24 	.word	0x08016b24
 800f104:	08016af4 	.word	0x08016af4
 800f108:	00014585 	.word	0x00014585
 800f10c:	08016afc 	.word	0x08016afc

0800f110 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f114:	b08d      	sub	sp, #52	@ 0x34
 800f116:	4604      	mov	r4, r0
 800f118:	460f      	mov	r7, r1
 800f11a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800f11c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f120:	4a42      	ldr	r2, [pc, #264]	@ (800f22c <RegionEU868TxConfig+0x11c>)
 800f122:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800f126:	4d42      	ldr	r5, [pc, #264]	@ (800f230 <RegionEU868TxConfig+0x120>)
 800f128:	682a      	ldr	r2, [r5, #0]
 800f12a:	7803      	ldrb	r3, [r0, #0]
 800f12c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f130:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f134:	7a53      	ldrb	r3, [r2, #9]
 800f136:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f13a:	4a3e      	ldr	r2, [pc, #248]	@ (800f234 <RegionEU868TxConfig+0x124>)
 800f13c:	6812      	ldr	r2, [r2, #0]
 800f13e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f142:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f146:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f14a:	f7ff fcaf 	bl	800eaac <RegionCommonLimitTxPower>
 800f14e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800f150:	4939      	ldr	r1, [pc, #228]	@ (800f238 <RegionEU868TxConfig+0x128>)
 800f152:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f156:	f7ff fcad 	bl	800eab4 <RegionCommonGetBandwidth>
 800f15a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800f15c:	68a2      	ldr	r2, [r4, #8]
 800f15e:	6861      	ldr	r1, [r4, #4]
 800f160:	4630      	mov	r0, r6
 800f162:	f7ff fbc1 	bl	800e8e8 <RegionCommonComputeTxPower>
 800f166:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800f168:	4b34      	ldr	r3, [pc, #208]	@ (800f23c <RegionEU868TxConfig+0x12c>)
 800f16a:	68da      	ldr	r2, [r3, #12]
 800f16c:	6829      	ldr	r1, [r5, #0]
 800f16e:	7823      	ldrb	r3, [r4, #0]
 800f170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f174:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f178:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800f17a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f17e:	2b07      	cmp	r3, #7
 800f180:	d031      	beq.n	800f1e6 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800f182:	4b2e      	ldr	r3, [pc, #184]	@ (800f23c <RegionEU868TxConfig+0x12c>)
 800f184:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800f188:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800f18c:	9308      	str	r3, [sp, #32]
 800f18e:	2200      	movs	r2, #0
 800f190:	9207      	str	r2, [sp, #28]
 800f192:	9206      	str	r2, [sp, #24]
 800f194:	9205      	str	r2, [sp, #20]
 800f196:	2501      	movs	r5, #1
 800f198:	9504      	str	r5, [sp, #16]
 800f19a:	9203      	str	r2, [sp, #12]
 800f19c:	2308      	movs	r3, #8
 800f19e:	9302      	str	r3, [sp, #8]
 800f1a0:	9501      	str	r5, [sp, #4]
 800f1a2:	f8cd a000 	str.w	sl, [sp]
 800f1a6:	464b      	mov	r3, r9
 800f1a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800f1ae:	4b20      	ldr	r3, [pc, #128]	@ (800f230 <RegionEU868TxConfig+0x120>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	7823      	ldrb	r3, [r4, #0]
 800f1b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f1b8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f1bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f1c0:	f7ff fcac 	bl	800eb1c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800f1c4:	89a1      	ldrh	r1, [r4, #12]
 800f1c6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f1ca:	f7ff fd0b 	bl	800ebe4 <GetTimeOnAir>
 800f1ce:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800f1d2:	4b1a      	ldr	r3, [pc, #104]	@ (800f23c <RegionEU868TxConfig+0x12c>)
 800f1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1d6:	7b21      	ldrb	r1, [r4, #12]
 800f1d8:	4628      	mov	r0, r5
 800f1da:	4798      	blx	r3

    *txPower = txPowerLimited;
 800f1dc:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f1de:	2001      	movs	r0, #1
 800f1e0:	b00d      	add	sp, #52	@ 0x34
 800f1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800f1e6:	4b15      	ldr	r3, [pc, #84]	@ (800f23c <RegionEU868TxConfig+0x12c>)
 800f1e8:	69dd      	ldr	r5, [r3, #28]
 800f1ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f1ee:	fb03 f30a 	mul.w	r3, r3, sl
 800f1f2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800f1f6:	9208      	str	r2, [sp, #32]
 800f1f8:	f04f 0a00 	mov.w	sl, #0
 800f1fc:	f8cd a01c 	str.w	sl, [sp, #28]
 800f200:	f8cd a018 	str.w	sl, [sp, #24]
 800f204:	f8cd a014 	str.w	sl, [sp, #20]
 800f208:	2201      	movs	r2, #1
 800f20a:	9204      	str	r2, [sp, #16]
 800f20c:	f8cd a00c 	str.w	sl, [sp, #12]
 800f210:	2205      	movs	r2, #5
 800f212:	9202      	str	r2, [sp, #8]
 800f214:	f8cd a004 	str.w	sl, [sp, #4]
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	464b      	mov	r3, r9
 800f21c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800f220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f222:	4650      	mov	r0, sl
 800f224:	47a8      	blx	r5
        modem = MODEM_FSK;
 800f226:	4655      	mov	r5, sl
 800f228:	e7c1      	b.n	800f1ae <RegionEU868TxConfig+0x9e>
 800f22a:	bf00      	nop
 800f22c:	08016b24 	.word	0x08016b24
 800f230:	200011c4 	.word	0x200011c4
 800f234:	200011c0 	.word	0x200011c0
 800f238:	08016b04 	.word	0x08016b04
 800f23c:	08016f38 	.word	0x08016f38

0800f240 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f244:	b08f      	sub	sp, #60	@ 0x3c
 800f246:	4605      	mov	r5, r0
 800f248:	4689      	mov	r9, r1
 800f24a:	4690      	mov	r8, r2
 800f24c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800f24e:	2400      	movs	r4, #0
 800f250:	940c      	str	r4, [sp, #48]	@ 0x30
 800f252:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800f256:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
    uint8_t status = 0x07;
 800f25a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f25c:	e030      	b.n	800f2c0 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f25e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800f262:	2607      	movs	r6, #7
 800f264:	e012      	b.n	800f28c <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800f266:	4a58      	ldr	r2, [pc, #352]	@ (800f3c8 <RegionEU868LinkAdrReq+0x188>)
 800f268:	6812      	ldr	r2, [r2, #0]
 800f26a:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f26e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f272:	b13a      	cbz	r2, 800f284 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800f274:	2201      	movs	r2, #1
 800f276:	fa02 f20c 	lsl.w	r2, r2, ip
 800f27a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800f27e:	430a      	orrs	r2, r1
 800f280:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f284:	f10c 0c01 	add.w	ip, ip, #1
 800f288:	fa5f fc8c 	uxtb.w	ip, ip
 800f28c:	f1bc 0f0f 	cmp.w	ip, #15
 800f290:	d816      	bhi.n	800f2c0 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800f292:	2b06      	cmp	r3, #6
 800f294:	d0e7      	beq.n	800f266 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f296:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800f29a:	fa4e fe0c 	asr.w	lr, lr, ip
 800f29e:	f01e 0f01 	tst.w	lr, #1
 800f2a2:	d0ef      	beq.n	800f284 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800f2a4:	4a48      	ldr	r2, [pc, #288]	@ (800f3c8 <RegionEU868LinkAdrReq+0x188>)
 800f2a6:	6812      	ldr	r2, [r2, #0]
 800f2a8:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f2ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f2b0:	2a00      	cmp	r2, #0
 800f2b2:	d1e7      	bne.n	800f284 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800f2b4:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800f2b8:	e7e4      	b.n	800f284 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800f2ba:	2606      	movs	r6, #6
 800f2bc:	e000      	b.n	800f2c0 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800f2be:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f2c0:	7a2b      	ldrb	r3, [r5, #8]
 800f2c2:	42a3      	cmp	r3, r4
 800f2c4:	d919      	bls.n	800f2fa <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f2c6:	6868      	ldr	r0, [r5, #4]
 800f2c8:	a90c      	add	r1, sp, #48	@ 0x30
 800f2ca:	4420      	add	r0, r4
 800f2cc:	f7ff fa48 	bl	800e760 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	b190      	cbz	r0, 800f2fa <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800f2d4:	4423      	add	r3, r4
 800f2d6:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800f2d8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800f2dc:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800f2e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800f2e4:	b90b      	cbnz	r3, 800f2ea <RegionEU868LinkAdrReq+0xaa>
 800f2e6:	2a00      	cmp	r2, #0
 800f2e8:	d0e7      	beq.n	800f2ba <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800f2ea:	1e5a      	subs	r2, r3, #1
 800f2ec:	b2d2      	uxtb	r2, r2
 800f2ee:	2a04      	cmp	r2, #4
 800f2f0:	d9e5      	bls.n	800f2be <RegionEU868LinkAdrReq+0x7e>
 800f2f2:	2b06      	cmp	r3, #6
 800f2f4:	d9b3      	bls.n	800f25e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800f2f6:	2606      	movs	r6, #6
 800f2f8:	e7e2      	b.n	800f2c0 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f2fa:	2302      	movs	r3, #2
 800f2fc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800f300:	7a6b      	ldrb	r3, [r5, #9]
 800f302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800f306:	a80a      	add	r0, sp, #40	@ 0x28
 800f308:	f7ff fc9e 	bl	800ec48 <RegionEU868GetPhyParam>
 800f30c:	9009      	str	r0, [sp, #36]	@ 0x24

    linkAdrVerifyParams.Status = status;
 800f30e:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f312:	7aab      	ldrb	r3, [r5, #10]
 800f314:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f318:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800f31c:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f320:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800f324:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f328:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800f32c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f330:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800f334:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f338:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800f33c:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f340:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f344:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800f348:	2310      	movs	r3, #16
 800f34a:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800f34e:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800f352:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f354:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800f358:	2307      	movs	r3, #7
 800f35a:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f35e:	4a1a      	ldr	r2, [pc, #104]	@ (800f3c8 <RegionEU868LinkAdrReq+0x188>)
 800f360:	6812      	ldr	r2, [r2, #0]
 800f362:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800f364:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800f368:	2300      	movs	r3, #0
 800f36a:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f36e:	682b      	ldr	r3, [r5, #0]
 800f370:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f372:	ab0c      	add	r3, sp, #48	@ 0x30
 800f374:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f378:	f10d 0131 	add.w	r1, sp, #49	@ 0x31
 800f37c:	a801      	add	r0, sp, #4
 800f37e:	f7ff fa0d 	bl	800e79c <RegionCommonLinkAdrReqVerifyParams>
 800f382:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f384:	2807      	cmp	r0, #7
 800f386:	d010      	beq.n	800f3aa <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f388:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800f38c:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800f390:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800f394:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800f398:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800f39c:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800f39e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f3a0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	b00f      	add	sp, #60	@ 0x3c
 800f3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800f3aa:	4e07      	ldr	r6, [pc, #28]	@ (800f3c8 <RegionEU868LinkAdrReq+0x188>)
 800f3ac:	6830      	ldr	r0, [r6, #0]
 800f3ae:	220c      	movs	r2, #12
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800f3b6:	f001 ff24 	bl	8011202 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800f3ba:	6833      	ldr	r3, [r6, #0]
 800f3bc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800f3c0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 800f3c4:	e7e0      	b.n	800f388 <RegionEU868LinkAdrReq+0x148>
 800f3c6:	bf00      	nop
 800f3c8:	200011c4 	.word	0x200011c4

0800f3cc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f3cc:	b530      	push	{r4, r5, lr}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800f3d8:	f10d 0107 	add.w	r1, sp, #7
 800f3dc:	6840      	ldr	r0, [r0, #4]
 800f3de:	f7ff fbad 	bl	800eb3c <VerifyRfFreq>
 800f3e2:	b1a8      	cbz	r0, 800f410 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800f3e4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800f3e6:	2207      	movs	r2, #7
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	f994 0000 	ldrsb.w	r0, [r4]
 800f3ee:	f7ff f892 	bl	800e516 <RegionCommonValueInRange>
 800f3f2:	b908      	cbnz	r0, 800f3f8 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800f3f4:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800f3f8:	2205      	movs	r2, #5
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f400:	f7ff f889 	bl	800e516 <RegionCommonValueInRange>
 800f404:	b908      	cbnz	r0, 800f40a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f406:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800f40a:	4628      	mov	r0, r5
 800f40c:	b003      	add	sp, #12
 800f40e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f410:	2506      	movs	r5, #6
 800f412:	e7e8      	b.n	800f3e6 <RegionEU868RxParamSetupReq+0x1a>

0800f414 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f414:	f04f 30ff 	mov.w	r0, #4294967295
 800f418:	4770      	bx	lr
	...

0800f41c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800f41c:	b510      	push	{r4, lr}
 800f41e:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f420:	2300      	movs	r3, #0
 800f422:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800f426:	7803      	ldrb	r3, [r0, #0]
 800f428:	2b0f      	cmp	r3, #15
 800f42a:	d902      	bls.n	800f432 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800f42c:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800f42e:	b002      	add	sp, #8
 800f430:	bd10      	pop	{r4, pc}
 800f432:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800f434:	f10d 0107 	add.w	r1, sp, #7
 800f438:	6840      	ldr	r0, [r0, #4]
 800f43a:	f7ff fb7f 	bl	800eb3c <VerifyRfFreq>
 800f43e:	b160      	cbz	r0, 800f45a <RegionEU868DlChannelReq+0x3e>
    uint8_t status = 0x03;
 800f440:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800f442:	4b0b      	ldr	r3, [pc, #44]	@ (800f470 <RegionEU868DlChannelReq+0x54>)
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	7823      	ldrb	r3, [r4, #0]
 800f448:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f44c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f450:	b929      	cbnz	r1, 800f45e <RegionEU868DlChannelReq+0x42>
        status &= 0xFD;
 800f452:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
    return status;
 800f456:	b240      	sxtb	r0, r0
 800f458:	e7e9      	b.n	800f42e <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800f45a:	2002      	movs	r0, #2
 800f45c:	e7f1      	b.n	800f442 <RegionEU868DlChannelReq+0x26>
    if( status == 0x03 )
 800f45e:	2803      	cmp	r0, #3
 800f460:	d1f9      	bne.n	800f456 <RegionEU868DlChannelReq+0x3a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800f462:	6861      	ldr	r1, [r4, #4]
 800f464:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f468:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f46c:	6051      	str	r1, [r2, #4]
 800f46e:	e7f2      	b.n	800f456 <RegionEU868DlChannelReq+0x3a>
 800f470:	200011c4 	.word	0x200011c4

0800f474 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800f474:	4770      	bx	lr
	...

0800f478 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47a:	b097      	sub	sp, #92	@ 0x5c
 800f47c:	4604      	mov	r4, r0
 800f47e:	460f      	mov	r7, r1
 800f480:	4616      	mov	r6, r2
 800f482:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800f484:	2100      	movs	r1, #0
 800f486:	f88d 1057 	strb.w	r1, [sp, #87]	@ 0x57
    uint8_t nbRestrictedChannels = 0;
 800f48a:	f88d 1056 	strb.w	r1, [sp, #86]	@ 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800f48e:	9111      	str	r1, [sp, #68]	@ 0x44
 800f490:	9112      	str	r1, [sp, #72]	@ 0x48
 800f492:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f494:	9114      	str	r1, [sp, #80]	@ 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800f496:	2307      	movs	r3, #7
 800f498:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f49c:	4b34      	ldr	r3, [pc, #208]	@ (800f570 <RegionEU868NextChannel+0xf8>)
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800f4a6:	f7ff f894 	bl	800e5d2 <RegionCommonCountChannels>
 800f4aa:	b938      	cbnz	r0, 800f4bc <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f4ac:	4b30      	ldr	r3, [pc, #192]	@ (800f570 <RegionEU868NextChannel+0xf8>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800f4b4:	f043 0307 	orr.w	r3, r3, #7
 800f4b8:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f4bc:	7a63      	ldrb	r3, [r4, #9]
 800f4be:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f4c2:	7a23      	ldrb	r3, [r4, #8]
 800f4c4:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f4c8:	4b29      	ldr	r3, [pc, #164]	@ (800f570 <RegionEU868NextChannel+0xf8>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 800f4d0:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f4d2:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f4d4:	4b27      	ldr	r3, [pc, #156]	@ (800f574 <RegionEU868NextChannel+0xfc>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f4da:	2310      	movs	r3, #16
 800f4dc:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f4e0:	f10d 030a 	add.w	r3, sp, #10
 800f4e4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f4e6:	6823      	ldr	r3, [r4, #0]
 800f4e8:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f4ea:	6863      	ldr	r3, [r4, #4]
 800f4ec:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f4ee:	7aa3      	ldrb	r3, [r4, #10]
 800f4f0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f4f4:	2306      	movs	r3, #6
 800f4f6:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f4fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800f4fc:	f104 020c 	add.w	r2, r4, #12
 800f500:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f504:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f508:	7d23      	ldrb	r3, [r4, #20]
 800f50a:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f50e:	8ae1      	ldrh	r1, [r4, #22]
 800f510:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f514:	f7ff fb66 	bl	800ebe4 <GetTimeOnAir>
 800f518:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f51a:	ab03      	add	r3, sp, #12
 800f51c:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f51e:	9601      	str	r6, [sp, #4]
 800f520:	f10d 0356 	add.w	r3, sp, #86	@ 0x56
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	f10d 0357 	add.w	r3, sp, #87	@ 0x57
 800f52a:	aa11      	add	r2, sp, #68	@ 0x44
 800f52c:	4629      	mov	r1, r5
 800f52e:	a809      	add	r0, sp, #36	@ 0x24
 800f530:	f7ff fa53 	bl	800e9da <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f534:	4604      	mov	r4, r0
 800f536:	b120      	cbz	r0, 800f542 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f538:	280c      	cmp	r0, #12
 800f53a:	d00f      	beq.n	800f55c <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f53c:	4620      	mov	r0, r4
 800f53e:	b017      	add	sp, #92	@ 0x5c
 800f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f542:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 800f546:	3901      	subs	r1, #1
 800f548:	f001 fe36 	bl	80111b8 <randr>
 800f54c:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800f550:	eb0d 0003 	add.w	r0, sp, r3
 800f554:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f558:	703b      	strb	r3, [r7, #0]
 800f55a:	e7ef      	b.n	800f53c <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f55c:	4b04      	ldr	r3, [pc, #16]	@ (800f570 <RegionEU868NextChannel+0xf8>)
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800f564:	f043 0307 	orr.w	r3, r3, #7
 800f568:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
 800f56c:	e7e6      	b.n	800f53c <RegionEU868NextChannel+0xc4>
 800f56e:	bf00      	nop
 800f570:	200011c4 	.word	0x200011c4
 800f574:	200011c0 	.word	0x200011c0

0800f578 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f57a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f582:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f584:	2d02      	cmp	r5, #2
 800f586:	d94e      	bls.n	800f626 <RegionEU868ChannelAdd+0xae>
 800f588:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f58a:	2d0f      	cmp	r5, #15
 800f58c:	d84d      	bhi.n	800f62a <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f58e:	6803      	ldr	r3, [r0, #0]
 800f590:	7a18      	ldrb	r0, [r3, #8]
 800f592:	f340 0003 	sbfx	r0, r0, #0, #4
 800f596:	2207      	movs	r2, #7
 800f598:	2100      	movs	r1, #0
 800f59a:	b240      	sxtb	r0, r0
 800f59c:	f7fe ffbb 	bl	800e516 <RegionCommonValueInRange>
 800f5a0:	b308      	cbz	r0, 800f5e6 <RegionEU868ChannelAdd+0x6e>
    bool drInvalid = false;
 800f5a2:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	7a18      	ldrb	r0, [r3, #8]
 800f5a8:	f340 1003 	sbfx	r0, r0, #4, #4
 800f5ac:	2207      	movs	r2, #7
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	b240      	sxtb	r0, r0
 800f5b2:	f7fe ffb0 	bl	800e516 <RegionCommonValueInRange>
 800f5b6:	b900      	cbnz	r0, 800f5ba <RegionEU868ChannelAdd+0x42>
    {
        drInvalid = true;
 800f5b8:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f5ba:	6820      	ldr	r0, [r4, #0]
 800f5bc:	7a03      	ldrb	r3, [r0, #8]
 800f5be:	f343 0203 	sbfx	r2, r3, #0, #4
 800f5c2:	b252      	sxtb	r2, r2
 800f5c4:	f343 1303 	sbfx	r3, r3, #4, #4
 800f5c8:	b25b      	sxtb	r3, r3
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	dd00      	ble.n	800f5d0 <RegionEU868ChannelAdd+0x58>
    {
        drInvalid = true;
 800f5ce:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f5d0:	f10d 0107 	add.w	r1, sp, #7
 800f5d4:	6800      	ldr	r0, [r0, #0]
 800f5d6:	f7ff fab1 	bl	800eb3c <VerifyRfFreq>
 800f5da:	b130      	cbz	r0, 800f5ea <RegionEU868ChannelAdd+0x72>
    bool freqInvalid = false;
 800f5dc:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f5de:	b136      	cbz	r6, 800f5ee <RegionEU868ChannelAdd+0x76>
 800f5e0:	b333      	cbz	r3, 800f630 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f5e2:	2006      	movs	r0, #6
 800f5e4:	e022      	b.n	800f62c <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800f5e6:	2601      	movs	r6, #1
 800f5e8:	e7dc      	b.n	800f5a4 <RegionEU868ChannelAdd+0x2c>
            freqInvalid = true;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e7f7      	b.n	800f5de <RegionEU868ChannelAdd+0x66>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f5ee:	bb0b      	cbnz	r3, 800f634 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f5f0:	4f11      	ldr	r7, [pc, #68]	@ (800f638 <RegionEU868ChannelAdd+0xc0>)
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	006e      	lsls	r6, r5, #1
 800f5f6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f5fa:	220c      	movs	r2, #12
 800f5fc:	6821      	ldr	r1, [r4, #0]
 800f5fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f602:	f001 fde6 	bl	80111d2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	442e      	add	r6, r5
 800f60a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800f60e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f612:	7272      	strb	r2, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f614:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800f618:	2101      	movs	r1, #1
 800f61a:	40a9      	lsls	r1, r5
 800f61c:	430a      	orrs	r2, r1
 800f61e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 800f622:	2000      	movs	r0, #0
 800f624:	e002      	b.n	800f62c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f626:	2006      	movs	r0, #6
 800f628:	e000      	b.n	800f62c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f62a:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f62c:	b003      	add	sp, #12
 800f62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f630:	2005      	movs	r0, #5
 800f632:	e7fb      	b.n	800f62c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f634:	2004      	movs	r0, #4
 800f636:	e7f9      	b.n	800f62c <RegionEU868ChannelAdd+0xb4>
 800f638:	200011c4 	.word	0x200011c4

0800f63c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f63c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f63e:	2902      	cmp	r1, #2
 800f640:	d801      	bhi.n	800f646 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f642:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f644:	4770      	bx	lr
{
 800f646:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f648:	4b09      	ldr	r3, [pc, #36]	@ (800f670 <RegionEU868ChannelsRemove+0x34>)
 800f64a:	6818      	ldr	r0, [r3, #0]
 800f64c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f650:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f654:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f658:	2200      	movs	r2, #0
 800f65a:	f840 200c 	str.w	r2, [r0, ip]
 800f65e:	605a      	str	r2, [r3, #4]
 800f660:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f662:	2210      	movs	r2, #16
 800f664:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800f668:	f7fe ff97 	bl	800e59a <RegionCommonChanDisable>
}
 800f66c:	bd08      	pop	{r3, pc}
 800f66e:	bf00      	nop
 800f670:	200011c4 	.word	0x200011c4

0800f674 <RegionEU868ApplyCFList>:
{
 800f674:	b570      	push	{r4, r5, r6, lr}
 800f676:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f678:	2350      	movs	r3, #80	@ 0x50
 800f67a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f67e:	7a03      	ldrb	r3, [r0, #8]
 800f680:	2b10      	cmp	r3, #16
 800f682:	d136      	bne.n	800f6f2 <RegionEU868ApplyCFList+0x7e>
 800f684:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f686:	6843      	ldr	r3, [r0, #4]
 800f688:	7bdd      	ldrb	r5, [r3, #15]
 800f68a:	2d00      	cmp	r5, #0
 800f68c:	d131      	bne.n	800f6f2 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f68e:	2403      	movs	r4, #3
 800f690:	e01b      	b.n	800f6ca <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f692:	6872      	ldr	r2, [r6, #4]
 800f694:	5d53      	ldrb	r3, [r2, r5]
 800f696:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f698:	442a      	add	r2, r5
 800f69a:	7851      	ldrb	r1, [r2, #1]
 800f69c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f6a0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f6a2:	7892      	ldrb	r2, [r2, #2]
 800f6a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6a8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f6aa:	2264      	movs	r2, #100	@ 0x64
 800f6ac:	fb02 f303 	mul.w	r3, r2, r3
 800f6b0:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	9304      	str	r3, [sp, #16]
 800f6b6:	e011      	b.n	800f6dc <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f6b8:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f6bc:	4668      	mov	r0, sp
 800f6be:	f7ff ffbd 	bl	800f63c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f6c2:	3503      	adds	r5, #3
 800f6c4:	b2ed      	uxtb	r5, r5
 800f6c6:	3401      	adds	r4, #1
 800f6c8:	b2e4      	uxtb	r4, r4
 800f6ca:	2c0f      	cmp	r4, #15
 800f6cc:	d811      	bhi.n	800f6f2 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f6ce:	2c07      	cmp	r4, #7
 800f6d0:	d9df      	bls.n	800f692 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f6d6:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f6da:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f6dc:	9b03      	ldr	r3, [sp, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0ea      	beq.n	800f6b8 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f6e2:	ab03      	add	r3, sp, #12
 800f6e4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f6e6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800f6ea:	a801      	add	r0, sp, #4
 800f6ec:	f7ff ff44 	bl	800f578 <RegionEU868ChannelAdd>
 800f6f0:	e7e7      	b.n	800f6c2 <RegionEU868ApplyCFList+0x4e>
}
 800f6f2:	b006      	add	sp, #24
 800f6f4:	bd70      	pop	{r4, r5, r6, pc}

0800f6f6 <RegionEU868NewChannelReq>:
{
 800f6f6:	b500      	push	{lr}
 800f6f8:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f6fa:	6803      	ldr	r3, [r0, #0]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	b952      	cbnz	r2, 800f716 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f700:	7903      	ldrb	r3, [r0, #4]
 800f702:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800f706:	a801      	add	r0, sp, #4
 800f708:	f7ff ff98 	bl	800f63c <RegionEU868ChannelsRemove>
 800f70c:	b1d0      	cbz	r0, 800f744 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f70e:	2003      	movs	r0, #3
}
 800f710:	b005      	add	sp, #20
 800f712:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f716:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f718:	7903      	ldrb	r3, [r0, #4]
 800f71a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800f71e:	a802      	add	r0, sp, #8
 800f720:	f7ff ff2a 	bl	800f578 <RegionEU868ChannelAdd>
 800f724:	2806      	cmp	r0, #6
 800f726:	d80b      	bhi.n	800f740 <RegionEU868NewChannelReq+0x4a>
 800f728:	e8df f000 	tbb	[pc, r0]
 800f72c:	0a0a0a04 	.word	0x0a0a0a04
 800f730:	060e      	.short	0x060e
 800f732:	08          	.byte	0x08
 800f733:	00          	.byte	0x00
 800f734:	2003      	movs	r0, #3
 800f736:	e7eb      	b.n	800f710 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800f738:	2001      	movs	r0, #1
                break;
 800f73a:	e7e9      	b.n	800f710 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f73c:	2000      	movs	r0, #0
                break;
 800f73e:	e7e7      	b.n	800f710 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f740:	2000      	movs	r0, #0
                break;
 800f742:	e7e5      	b.n	800f710 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800f744:	2000      	movs	r0, #0
 800f746:	e7e3      	b.n	800f710 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800f748:	2002      	movs	r0, #2
 800f74a:	e7e1      	b.n	800f710 <RegionEU868NewChannelReq+0x1a>

0800f74c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f74c:	1a88      	subs	r0, r1, r2
 800f74e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f750:	2800      	cmp	r0, #0
 800f752:	db01      	blt.n	800f758 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f754:	b2c0      	uxtb	r0, r0
 800f756:	4770      	bx	lr
        datarate = DR_0;
 800f758:	2000      	movs	r0, #0
 800f75a:	e7fb      	b.n	800f754 <RegionEU868ApplyDrOffset+0x8>

0800f75c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f75c:	b510      	push	{r4, lr}
 800f75e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f760:	4b10      	ldr	r3, [pc, #64]	@ (800f7a4 <VerifyRfFreq+0x48>)
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	4798      	blx	r3
 800f766:	b1c8      	cbz	r0, 800f79c <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f768:	4b0f      	ldr	r3, [pc, #60]	@ (800f7a8 <VerifyRfFreq+0x4c>)
 800f76a:	4423      	add	r3, r4
 800f76c:	4a0f      	ldr	r2, [pc, #60]	@ (800f7ac <VerifyRfFreq+0x50>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d813      	bhi.n	800f79a <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f772:	f102 42df 	add.w	r2, r2, #1870659584	@ 0x6f800000
 800f776:	f502 12c8 	add.w	r2, r2, #1638400	@ 0x190000
 800f77a:	f202 7245 	addw	r2, r2, #1861	@ 0x745
 800f77e:	fba2 1203 	umull	r1, r2, r2, r3
 800f782:	0c92      	lsrs	r2, r2, #18
 800f784:	490a      	ldr	r1, [pc, #40]	@ (800f7b0 <VerifyRfFreq+0x54>)
 800f786:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f78a:	b942      	cbnz	r2, 800f79e <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f78c:	4b09      	ldr	r3, [pc, #36]	@ (800f7b4 <VerifyRfFreq+0x58>)
 800f78e:	4423      	add	r3, r4
 800f790:	4a09      	ldr	r2, [pc, #36]	@ (800f7b8 <VerifyRfFreq+0x5c>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d902      	bls.n	800f79c <VerifyRfFreq+0x40>
    {
        return false;
 800f796:	2000      	movs	r0, #0
 800f798:	e000      	b.n	800f79c <VerifyRfFreq+0x40>
        return false;
 800f79a:	2000      	movs	r0, #0
    }
    return true;
}
 800f79c:	bd10      	pop	{r4, pc}
        return false;
 800f79e:	2000      	movs	r0, #0
 800f7a0:	e7fc      	b.n	800f79c <VerifyRfFreq+0x40>
 800f7a2:	bf00      	nop
 800f7a4:	08016f38 	.word	0x08016f38
 800f7a8:	c8f78f60 	.word	0xc8f78f60
 800f7ac:	00401640 	.word	0x00401640
 800f7b0:	000927c0 	.word	0x000927c0
 800f7b4:	ca37fea0 	.word	0xca37fea0
 800f7b8:	01808580 	.word	0x01808580

0800f7bc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f7bc:	b570      	push	{r4, r5, r6, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f7ec <GetTimeOnAir+0x30>)
 800f7c4:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f7c6:	490a      	ldr	r1, [pc, #40]	@ (800f7f0 <GetTimeOnAir+0x34>)
 800f7c8:	f7ff f974 	bl	800eab4 <RegionCommonGetBandwidth>
 800f7cc:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f7ce:	4b09      	ldr	r3, [pc, #36]	@ (800f7f4 <GetTimeOnAir+0x38>)
 800f7d0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800f7d2:	2001      	movs	r0, #1
 800f7d4:	9003      	str	r0, [sp, #12]
 800f7d6:	b2e4      	uxtb	r4, r4
 800f7d8:	9402      	str	r4, [sp, #8]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	9201      	str	r2, [sp, #4]
 800f7de:	2208      	movs	r2, #8
 800f7e0:	9200      	str	r2, [sp, #0]
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	47a8      	blx	r5
}
 800f7e8:	b004      	add	sp, #16
 800f7ea:	bd70      	pop	{r4, r5, r6, pc}
 800f7ec:	08016ba0 	.word	0x08016ba0
 800f7f0:	08016b60 	.word	0x08016b60
 800f7f4:	08016f38 	.word	0x08016f38

0800f7f8 <LimitTxPower>:
{
 800f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	4615      	mov	r5, r2
 800f7fe:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f800:	f7ff f954 	bl	800eaac <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f804:	2d04      	cmp	r5, #4
 800f806:	d105      	bne.n	800f814 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f808:	4634      	mov	r4, r6
 800f80a:	2e02      	cmp	r6, #2
 800f80c:	bfb8      	it	lt
 800f80e:	2402      	movlt	r4, #2
}
 800f810:	4620      	mov	r0, r4
 800f812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f814:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f816:	2204      	movs	r2, #4
 800f818:	2100      	movs	r1, #0
 800f81a:	4638      	mov	r0, r7
 800f81c:	f7fe fed9 	bl	800e5d2 <RegionCommonCountChannels>
 800f820:	2831      	cmp	r0, #49	@ 0x31
 800f822:	d8f5      	bhi.n	800f810 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f824:	4634      	mov	r4, r6
 800f826:	2e05      	cmp	r6, #5
 800f828:	bfb8      	it	lt
 800f82a:	2405      	movlt	r4, #5
 800f82c:	e7f0      	b.n	800f810 <LimitTxPower+0x18>
	...

0800f830 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f830:	b500      	push	{lr}
 800f832:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f834:	2300      	movs	r3, #0
 800f836:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f838:	7803      	ldrb	r3, [r0, #0]
 800f83a:	3b01      	subs	r3, #1
 800f83c:	2b37      	cmp	r3, #55	@ 0x37
 800f83e:	d81f      	bhi.n	800f880 <RegionUS915GetPhyParam+0x50>
 800f840:	e8df f003 	tbb	[pc, r3]
 800f844:	1e1e1e1c 	.word	0x1e1e1e1c
 800f848:	1e1e1e1e 	.word	0x1e1e1e1e
 800f84c:	3e3b1e1e 	.word	0x3e3b1e1e
 800f850:	4d1e4741 	.word	0x4d1e4741
 800f854:	5d595551 	.word	0x5d595551
 800f858:	6d6a1e61 	.word	0x6d6a1e61
 800f85c:	7f7c7670 	.word	0x7f7c7670
 800f860:	86831e1e 	.word	0x86831e1e
 800f864:	1e1e1e23 	.word	0x1e1e1e23
 800f868:	1e1e1e1e 	.word	0x1e1e1e1e
 800f86c:	1e1e1e1e 	.word	0x1e1e1e1e
 800f870:	90891e1e 	.word	0x90891e1e
 800f874:	a01e9d9a 	.word	0xa01e9d9a
 800f878:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f87c:	2308      	movs	r3, #8
 800f87e:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800f880:	9804      	ldr	r0, [sp, #16]
 800f882:	9005      	str	r0, [sp, #20]
}
 800f884:	b007      	add	sp, #28
 800f886:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f88a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f88e:	f88d 3004 	strb.w	r3, [sp, #4]
 800f892:	2304      	movs	r3, #4
 800f894:	f88d 3005 	strb.w	r3, [sp, #5]
 800f898:	2300      	movs	r3, #0
 800f89a:	f88d 3006 	strb.w	r3, [sp, #6]
 800f89e:	2348      	movs	r3, #72	@ 0x48
 800f8a0:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f8a4:	4b44      	ldr	r3, [pc, #272]	@ (800f9b8 <RegionUS915GetPhyParam+0x188>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f8ac:	9202      	str	r2, [sp, #8]
 800f8ae:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f8b0:	a801      	add	r0, sp, #4
 800f8b2:	f7ff f8dc 	bl	800ea6e <RegionCommonGetNextLowerTxDr>
 800f8b6:	9004      	str	r0, [sp, #16]
            break;
 800f8b8:	e7e2      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f8ba:	2340      	movs	r3, #64	@ 0x40
 800f8bc:	9304      	str	r3, [sp, #16]
            break;
 800f8be:	e7df      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f8c0:	2320      	movs	r3, #32
 800f8c2:	9304      	str	r3, [sp, #16]
            break;
 800f8c4:	e7dc      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f8c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f8ca:	4a3c      	ldr	r2, [pc, #240]	@ (800f9bc <RegionUS915GetPhyParam+0x18c>)
 800f8cc:	5cd3      	ldrb	r3, [r2, r3]
 800f8ce:	9304      	str	r3, [sp, #16]
            break;
 800f8d0:	e7d6      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f8d2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f8d6:	4a3a      	ldr	r2, [pc, #232]	@ (800f9c0 <RegionUS915GetPhyParam+0x190>)
 800f8d8:	5cd3      	ldrb	r3, [r2, r3]
 800f8da:	9304      	str	r3, [sp, #16]
            break;
 800f8dc:	e7d0      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f8de:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800f8e2:	9304      	str	r3, [sp, #16]
            break;
 800f8e4:	e7cc      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f8e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8ea:	9304      	str	r3, [sp, #16]
            break;
 800f8ec:	e7c8      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f8ee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800f8f2:	9304      	str	r3, [sp, #16]
            break;
 800f8f4:	e7c4      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f8f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f8fa:	9304      	str	r3, [sp, #16]
            break;
 800f8fc:	e7c0      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f8fe:	f241 7370 	movw	r3, #6000	@ 0x1770
 800f902:	9304      	str	r3, [sp, #16]
            break;
 800f904:	e7bc      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800f906:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f90a:	482e      	ldr	r0, [pc, #184]	@ (800f9c4 <RegionUS915GetPhyParam+0x194>)
 800f90c:	f001 fc54 	bl	80111b8 <randr>
 800f910:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800f914:	9004      	str	r0, [sp, #16]
            break;
 800f916:	e7b3      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800f918:	4b2b      	ldr	r3, [pc, #172]	@ (800f9c8 <RegionUS915GetPhyParam+0x198>)
 800f91a:	9304      	str	r3, [sp, #16]
            break;
 800f91c:	e7b0      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800f91e:	2308      	movs	r3, #8
 800f920:	9304      	str	r3, [sp, #16]
            break;
 800f922:	e7ad      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f924:	4b24      	ldr	r3, [pc, #144]	@ (800f9b8 <RegionUS915GetPhyParam+0x188>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800f92c:	9304      	str	r3, [sp, #16]
            break;
 800f92e:	e7a7      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f930:	4b21      	ldr	r3, [pc, #132]	@ (800f9b8 <RegionUS915GetPhyParam+0x188>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800f938:	9304      	str	r3, [sp, #16]
            break;
 800f93a:	e7a1      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800f93c:	2348      	movs	r3, #72	@ 0x48
 800f93e:	9304      	str	r3, [sp, #16]
            break;
 800f940:	e79e      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f942:	4b1d      	ldr	r3, [pc, #116]	@ (800f9b8 <RegionUS915GetPhyParam+0x188>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	9304      	str	r3, [sp, #16]
            break;
 800f948:	e79a      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800f94a:	4b20      	ldr	r3, [pc, #128]	@ (800f9cc <RegionUS915GetPhyParam+0x19c>)
 800f94c:	9304      	str	r3, [sp, #16]
            break;
 800f94e:	e797      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	9304      	str	r3, [sp, #16]
            break;
 800f954:	e794      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f956:	4a1e      	ldr	r2, [pc, #120]	@ (800f9d0 <RegionUS915GetPhyParam+0x1a0>)
 800f958:	491b      	ldr	r1, [pc, #108]	@ (800f9c8 <RegionUS915GetPhyParam+0x198>)
 800f95a:	7900      	ldrb	r0, [r0, #4]
 800f95c:	f7fe fd0a 	bl	800e374 <RegionBaseUSCalcDownlinkFrequency>
 800f960:	9004      	str	r0, [sp, #16]
            break;
 800f962:	e78d      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800f964:	2317      	movs	r3, #23
 800f966:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800f96a:	2304      	movs	r3, #4
 800f96c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800f970:	2303      	movs	r3, #3
 800f972:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800f976:	e783      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800f978:	2308      	movs	r3, #8
 800f97a:	9304      	str	r3, [sp, #16]
            break;
 800f97c:	e780      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f97e:	2308      	movs	r3, #8
 800f980:	9304      	str	r3, [sp, #16]
            break;
 800f982:	e77d      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f984:	4a12      	ldr	r2, [pc, #72]	@ (800f9d0 <RegionUS915GetPhyParam+0x1a0>)
 800f986:	4910      	ldr	r1, [pc, #64]	@ (800f9c8 <RegionUS915GetPhyParam+0x198>)
 800f988:	7900      	ldrb	r0, [r0, #4]
 800f98a:	f7fe fcf3 	bl	800e374 <RegionBaseUSCalcDownlinkFrequency>
 800f98e:	9004      	str	r0, [sp, #16]
            break;
 800f990:	e776      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800f992:	2308      	movs	r3, #8
 800f994:	9304      	str	r3, [sp, #16]
            break;
 800f996:	e773      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f998:	2308      	movs	r3, #8
 800f99a:	9304      	str	r3, [sp, #16]
            break;
 800f99c:	e770      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800f99e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f9a2:	4a0c      	ldr	r2, [pc, #48]	@ (800f9d4 <RegionUS915GetPhyParam+0x1a4>)
 800f9a4:	5cd3      	ldrb	r3, [r2, r3]
 800f9a6:	9304      	str	r3, [sp, #16]
            break;
 800f9a8:	e76a      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800f9aa:	490b      	ldr	r1, [pc, #44]	@ (800f9d8 <RegionUS915GetPhyParam+0x1a8>)
 800f9ac:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f9b0:	f7ff f880 	bl	800eab4 <RegionCommonGetBandwidth>
 800f9b4:	9004      	str	r0, [sp, #16]
            break;
 800f9b6:	e763      	b.n	800f880 <RegionUS915GetPhyParam+0x50>
 800f9b8:	200011cc 	.word	0x200011cc
 800f9bc:	08016b3c 	.word	0x08016b3c
 800f9c0:	08016b2c 	.word	0x08016b2c
 800f9c4:	fffffc18 	.word	0xfffffc18
 800f9c8:	370870a0 	.word	0x370870a0
 800f9cc:	4200999a 	.word	0x4200999a
 800f9d0:	000927c0 	.word	0x000927c0
 800f9d4:	08016ba0 	.word	0x08016ba0
 800f9d8:	08016b60 	.word	0x08016b60

0800f9dc <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800fa10 <RegionUS915SetBandTxDone+0x34>)
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	7803      	ldrb	r3, [r0, #0]
 800f9e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f9ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9ee:	7a5b      	ldrb	r3, [r3, #9]
 800f9f0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f9f4:	4b07      	ldr	r3, [pc, #28]	@ (800fa14 <RegionUS915SetBandTxDone+0x38>)
 800f9f6:	681c      	ldr	r4, [r3, #0]
 800f9f8:	6903      	ldr	r3, [r0, #16]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	68c3      	ldr	r3, [r0, #12]
 800f9fe:	7842      	ldrb	r2, [r0, #1]
 800fa00:	6881      	ldr	r1, [r0, #8]
 800fa02:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800fa06:	f7fe fe09 	bl	800e61c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800fa0a:	b002      	add	sp, #8
 800fa0c:	bd10      	pop	{r4, pc}
 800fa0e:	bf00      	nop
 800fa10:	200011cc 	.word	0x200011cc
 800fa14:	200011c8 	.word	0x200011c8

0800fa18 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	f8ad 3000 	strh.w	r3, [sp]
 800fa22:	2300      	movs	r3, #0
 800fa24:	f88d 3002 	strb.w	r3, [sp, #2]
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	9302      	str	r3, [sp, #8]
 800fa2c:	9303      	str	r3, [sp, #12]
 800fa2e:	9304      	str	r3, [sp, #16]
 800fa30:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800fa34:	7b04      	ldrb	r4, [r0, #12]
 800fa36:	b174      	cbz	r4, 800fa56 <RegionUS915InitDefaults+0x3e>
 800fa38:	3c01      	subs	r4, #1
 800fa3a:	b2e4      	uxtb	r4, r4
 800fa3c:	2c01      	cmp	r4, #1
 800fa3e:	d87e      	bhi.n	800fb3e <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fa40:	4b40      	ldr	r3, [pc, #256]	@ (800fb44 <RegionUS915InitDefaults+0x12c>)
 800fa42:	6818      	ldr	r0, [r3, #0]
 800fa44:	2206      	movs	r2, #6
 800fa46:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800fa4a:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800fa4e:	f7fe fdd6 	bl	800e5fe <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800fa52:	2300      	movs	r3, #0
 800fa54:	e071      	b.n	800fb3a <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800fa56:	6803      	ldr	r3, [r0, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d070      	beq.n	800fb3e <RegionUS915InitDefaults+0x126>
 800fa5c:	6842      	ldr	r2, [r0, #4]
 800fa5e:	2a00      	cmp	r2, #0
 800fa60:	d06d      	beq.n	800fb3e <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800fa62:	4939      	ldr	r1, [pc, #228]	@ (800fb48 <RegionUS915InitDefaults+0x130>)
 800fa64:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800fa66:	4937      	ldr	r1, [pc, #220]	@ (800fb44 <RegionUS915InitDefaults+0x12c>)
 800fa68:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800fa6a:	6880      	ldr	r0, [r0, #8]
 800fa6c:	4a37      	ldr	r2, [pc, #220]	@ (800fb4c <RegionUS915InitDefaults+0x134>)
 800fa6e:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800fa70:	2200      	movs	r2, #0
 800fa72:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800fa74:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800fa76:	2218      	movs	r2, #24
 800fa78:	4669      	mov	r1, sp
 800fa7a:	f001 fbaa 	bl	80111d2 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800fa7e:	e011      	b.n	800faa4 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800fa80:	4b30      	ldr	r3, [pc, #192]	@ (800fb44 <RegionUS915InitDefaults+0x12c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4932      	ldr	r1, [pc, #200]	@ (800fb50 <RegionUS915InitDefaults+0x138>)
 800fa86:	4a33      	ldr	r2, [pc, #204]	@ (800fb54 <RegionUS915InitDefaults+0x13c>)
 800fa88:	fb01 2204 	mla	r2, r1, r4, r2
 800fa8c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800fa90:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800fa94:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800fa98:	2230      	movs	r2, #48	@ 0x30
 800fa9a:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800faa0:	3401      	adds	r4, #1
 800faa2:	b2e4      	uxtb	r4, r4
 800faa4:	2c3f      	cmp	r4, #63	@ 0x3f
 800faa6:	d9eb      	bls.n	800fa80 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800faa8:	2340      	movs	r3, #64	@ 0x40
 800faaa:	2b47      	cmp	r3, #71	@ 0x47
 800faac:	d814      	bhi.n	800fad8 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800faae:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 800fab2:	4a24      	ldr	r2, [pc, #144]	@ (800fb44 <RegionUS915InitDefaults+0x12c>)
 800fab4:	6812      	ldr	r2, [r2, #0]
 800fab6:	4c28      	ldr	r4, [pc, #160]	@ (800fb58 <RegionUS915InitDefaults+0x140>)
 800fab8:	4928      	ldr	r1, [pc, #160]	@ (800fb5c <RegionUS915InitDefaults+0x144>)
 800faba:	fb04 1100 	mla	r1, r4, r0, r1
 800fabe:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800fac2:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800fac6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800faca:	2144      	movs	r1, #68	@ 0x44
 800facc:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800face:	2100      	movs	r1, #0
 800fad0:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800fad2:	3301      	adds	r3, #1
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	e7e8      	b.n	800faaa <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800fad8:	4c1a      	ldr	r4, [pc, #104]	@ (800fb44 <RegionUS915InitDefaults+0x12c>)
 800fada:	6820      	ldr	r0, [r4, #0]
 800fadc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fae0:	f8a0 336c 	strh.w	r3, [r0, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800fae4:	f8a0 336e 	strh.w	r3, [r0, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800fae8:	f8a0 3370 	strh.w	r3, [r0, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800faec:	f8a0 3372 	strh.w	r3, [r0, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800faf0:	23ff      	movs	r3, #255	@ 0xff
 800faf2:	f8a0 3374 	strh.w	r3, [r0, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800faf6:	2300      	movs	r3, #0
 800faf8:	f8a0 3376 	strh.w	r3, [r0, #886]	@ 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fafc:	2206      	movs	r2, #6
 800fafe:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800fb02:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800fb06:	f7fe fd7a 	bl	800e5fe <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fb0a:	6821      	ldr	r1, [r4, #0]
 800fb0c:	2206      	movs	r2, #6
 800fb0e:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800fb12:	4b0d      	ldr	r3, [pc, #52]	@ (800fb48 <RegionUS915InitDefaults+0x130>)
 800fb14:	6818      	ldr	r0, [r3, #0]
 800fb16:	f7fe fd72 	bl	800e5fe <RegionCommonChanMaskCopy>
            break;
 800fb1a:	e010      	b.n	800fb3e <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800fb1c:	4a0a      	ldr	r2, [pc, #40]	@ (800fb48 <RegionUS915InitDefaults+0x130>)
 800fb1e:	6811      	ldr	r1, [r2, #0]
 800fb20:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fb24:	4807      	ldr	r0, [pc, #28]	@ (800fb44 <RegionUS915InitDefaults+0x12c>)
 800fb26:	6800      	ldr	r0, [r0, #0]
 800fb28:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 800fb2c:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 800fb30:	4002      	ands	r2, r0
 800fb32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800fb36:	3301      	adds	r3, #1
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b05      	cmp	r3, #5
 800fb3c:	d9ee      	bls.n	800fb1c <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800fb3e:	b006      	add	sp, #24
 800fb40:	bd10      	pop	{r4, pc}
 800fb42:	bf00      	nop
 800fb44:	200011cc 	.word	0x200011cc
 800fb48:	200011d0 	.word	0x200011d0
 800fb4c:	200011c8 	.word	0x200011c8
 800fb50:	00030d40 	.word	0x00030d40
 800fb54:	35c80160 	.word	0x35c80160
 800fb58:	00186a00 	.word	0x00186a00
 800fb5c:	35d2afc0 	.word	0x35d2afc0

0800fb60 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800fb60:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800fb62:	290a      	cmp	r1, #10
 800fb64:	d833      	bhi.n	800fbce <RegionUS915Verify+0x6e>
 800fb66:	e8df f001 	tbb	[pc, r1]
 800fb6a:	3206      	.short	0x3206
 800fb6c:	0a323232 	.word	0x0a323232
 800fb70:	28321e14 	.word	0x28321e14
 800fb74:	28          	.byte	0x28
 800fb75:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800fb76:	6800      	ldr	r0, [r0, #0]
 800fb78:	f7ff fdf0 	bl	800f75c <VerifyRfFreq>
 800fb7c:	e028      	b.n	800fbd0 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800fb7e:	2204      	movs	r2, #4
 800fb80:	2100      	movs	r1, #0
 800fb82:	f990 0000 	ldrsb.w	r0, [r0]
 800fb86:	f7fe fcc6 	bl	800e516 <RegionCommonValueInRange>
 800fb8a:	3800      	subs	r0, #0
 800fb8c:	bf18      	it	ne
 800fb8e:	2001      	movne	r0, #1
 800fb90:	e01e      	b.n	800fbd0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800fb92:	2205      	movs	r2, #5
 800fb94:	2100      	movs	r1, #0
 800fb96:	f990 0000 	ldrsb.w	r0, [r0]
 800fb9a:	f7fe fcbc 	bl	800e516 <RegionCommonValueInRange>
 800fb9e:	3800      	subs	r0, #0
 800fba0:	bf18      	it	ne
 800fba2:	2001      	movne	r0, #1
 800fba4:	e014      	b.n	800fbd0 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800fba6:	220d      	movs	r2, #13
 800fba8:	2108      	movs	r1, #8
 800fbaa:	f990 0000 	ldrsb.w	r0, [r0]
 800fbae:	f7fe fcb2 	bl	800e516 <RegionCommonValueInRange>
 800fbb2:	3800      	subs	r0, #0
 800fbb4:	bf18      	it	ne
 800fbb6:	2001      	movne	r0, #1
 800fbb8:	e00a      	b.n	800fbd0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800fbba:	220e      	movs	r2, #14
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	f990 0000 	ldrsb.w	r0, [r0]
 800fbc2:	f7fe fca8 	bl	800e516 <RegionCommonValueInRange>
 800fbc6:	3800      	subs	r0, #0
 800fbc8:	bf18      	it	ne
 800fbca:	2001      	movne	r0, #1
 800fbcc:	e000      	b.n	800fbd0 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800fbce:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800fbd0:	bd08      	pop	{r3, pc}
	...

0800fbd4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800fbd4:	7a03      	ldrb	r3, [r0, #8]
 800fbd6:	2b10      	cmp	r3, #16
 800fbd8:	d134      	bne.n	800fc44 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800fbda:	6843      	ldr	r3, [r0, #4]
 800fbdc:	7bdb      	ldrb	r3, [r3, #15]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d130      	bne.n	800fc44 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	2a04      	cmp	r2, #4
 800fbe8:	d82b      	bhi.n	800fc42 <RegionUS915ApplyCFList+0x6e>
{
 800fbea:	b530      	push	{r4, r5, lr}
 800fbec:	e010      	b.n	800fc10 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800fbee:	4916      	ldr	r1, [pc, #88]	@ (800fc48 <RegionUS915ApplyCFList+0x74>)
 800fbf0:	680d      	ldr	r5, [r1, #0]
 800fbf2:	f835 101c 	ldrh.w	r1, [r5, ip, lsl #1]
 800fbf6:	f50c 7ed8 	add.w	lr, ip, #432	@ 0x1b0
 800fbfa:	f834 401e 	ldrh.w	r4, [r4, lr, lsl #1]
 800fbfe:	4021      	ands	r1, r4
 800fc00:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800fc04:	3301      	adds	r3, #1
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	3202      	adds	r2, #2
 800fc0a:	b2d2      	uxtb	r2, r2
 800fc0c:	2b04      	cmp	r3, #4
 800fc0e:	d817      	bhi.n	800fc40 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800fc10:	6841      	ldr	r1, [r0, #4]
 800fc12:	5c89      	ldrb	r1, [r1, r2]
 800fc14:	4c0d      	ldr	r4, [pc, #52]	@ (800fc4c <RegionUS915ApplyCFList+0x78>)
 800fc16:	6824      	ldr	r4, [r4, #0]
 800fc18:	469c      	mov	ip, r3
 800fc1a:	f503 75d8 	add.w	r5, r3, #432	@ 0x1b0
 800fc1e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800fc22:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800fc26:	4496      	add	lr, r2
 800fc28:	f89e e001 	ldrb.w	lr, [lr, #1]
 800fc2c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800fc30:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800fc34:	2b04      	cmp	r3, #4
 800fc36:	d1da      	bne.n	800fbee <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800fc38:	b2c9      	uxtb	r1, r1
 800fc3a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800fc3e:	e7d6      	b.n	800fbee <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800fc40:	bd30      	pop	{r4, r5, pc}
 800fc42:	4770      	bx	lr
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	200011d0 	.word	0x200011d0
 800fc4c:	200011cc 	.word	0x200011cc

0800fc50 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800fc50:	b570      	push	{r4, r5, r6, lr}
 800fc52:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800fc54:	2204      	movs	r2, #4
 800fc56:	2100      	movs	r1, #0
 800fc58:	6800      	ldr	r0, [r0, #0]
 800fc5a:	f7fe fcba 	bl	800e5d2 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800fc5e:	2801      	cmp	r0, #1
 800fc60:	d031      	beq.n	800fcc6 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800fc62:	792c      	ldrb	r4, [r5, #4]
 800fc64:	b11c      	cbz	r4, 800fc6e <RegionUS915ChanMaskSet+0x1e>
 800fc66:	2c01      	cmp	r4, #1
 800fc68:	d023      	beq.n	800fcb2 <RegionUS915ChanMaskSet+0x62>
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	e020      	b.n	800fcb0 <RegionUS915ChanMaskSet+0x60>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800fc6e:	4e17      	ldr	r6, [pc, #92]	@ (800fccc <RegionUS915ChanMaskSet+0x7c>)
 800fc70:	6830      	ldr	r0, [r6, #0]
 800fc72:	2206      	movs	r2, #6
 800fc74:	6829      	ldr	r1, [r5, #0]
 800fc76:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800fc7a:	f7fe fcc0 	bl	800e5fe <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800fc7e:	6830      	ldr	r0, [r6, #0]
 800fc80:	f890 3374 	ldrb.w	r3, [r0, #884]	@ 0x374
 800fc84:	f8a0 3374 	strh.w	r3, [r0, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f8a0 3376 	strh.w	r3, [r0, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800fc8e:	e00c      	b.n	800fcaa <RegionUS915ChanMaskSet+0x5a>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800fc90:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd0 <RegionUS915ChanMaskSet+0x80>)
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800fc98:	f504 71d8 	add.w	r1, r4, #432	@ 0x1b0
 800fc9c:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 800fca0:	400b      	ands	r3, r1
 800fca2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800fca6:	3401      	adds	r4, #1
 800fca8:	b2e4      	uxtb	r4, r4
 800fcaa:	2c05      	cmp	r4, #5
 800fcac:	d9f0      	bls.n	800fc90 <RegionUS915ChanMaskSet+0x40>
            break;
        }
        default:
            return false;
    }
    return true;
 800fcae:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800fcb0:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800fcb2:	4b06      	ldr	r3, [pc, #24]	@ (800fccc <RegionUS915ChanMaskSet+0x7c>)
 800fcb4:	6818      	ldr	r0, [r3, #0]
 800fcb6:	2206      	movs	r2, #6
 800fcb8:	6829      	ldr	r1, [r5, #0]
 800fcba:	f500 705b 	add.w	r0, r0, #876	@ 0x36c
 800fcbe:	f7fe fc9e 	bl	800e5fe <RegionCommonChanMaskCopy>
    return true;
 800fcc2:	2001      	movs	r0, #1
            break;
 800fcc4:	e7f4      	b.n	800fcb0 <RegionUS915ChanMaskSet+0x60>
        return false;
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	e7f2      	b.n	800fcb0 <RegionUS915ChanMaskSet+0x60>
 800fcca:	bf00      	nop
 800fccc:	200011cc 	.word	0x200011cc
 800fcd0:	200011d0 	.word	0x200011d0

0800fcd4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	460e      	mov	r6, r1
 800fcda:	4617      	mov	r7, r2
 800fcdc:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800fcde:	280d      	cmp	r0, #13
 800fce0:	bfa8      	it	ge
 800fce2:	200d      	movge	r0, #13
 800fce4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800fce6:	4d0f      	ldr	r5, [pc, #60]	@ (800fd24 <RegionUS915ComputeRxWindowParameters+0x50>)
 800fce8:	4629      	mov	r1, r5
 800fcea:	f7fe fee3 	bl	800eab4 <RegionCommonGetBandwidth>
 800fcee:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800fcf0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800fcf4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800fcf8:	4a0b      	ldr	r2, [pc, #44]	@ (800fd28 <RegionUS915ComputeRxWindowParameters+0x54>)
 800fcfa:	5cd0      	ldrb	r0, [r2, r3]
 800fcfc:	f7fe fdaa 	bl	800e854 <RegionCommonComputeSymbolTimeLoRa>
 800fd00:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800fd02:	4b0a      	ldr	r3, [pc, #40]	@ (800fd2c <RegionUS915ComputeRxWindowParameters+0x58>)
 800fd04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fd06:	4798      	blx	r3
 800fd08:	4603      	mov	r3, r0
 800fd0a:	f104 020c 	add.w	r2, r4, #12
 800fd0e:	9201      	str	r2, [sp, #4]
 800fd10:	3408      	adds	r4, #8
 800fd12:	9400      	str	r4, [sp, #0]
 800fd14:	463a      	mov	r2, r7
 800fd16:	4631      	mov	r1, r6
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f7fe fda9 	bl	800e870 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800fd1e:	b003      	add	sp, #12
 800fd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd22:	bf00      	nop
 800fd24:	08016b60 	.word	0x08016b60
 800fd28:	08016ba0 	.word	0x08016ba0
 800fd2c:	08016f38 	.word	0x08016f38

0800fd30 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800fd30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd34:	b08b      	sub	sp, #44	@ 0x2c
 800fd36:	4604      	mov	r4, r0
 800fd38:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800fd3a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800fd3e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800fd40:	4b22      	ldr	r3, [pc, #136]	@ (800fdcc <RegionUS915RxConfig+0x9c>)
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	4798      	blx	r3
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d13d      	bne.n	800fdc6 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800fd4a:	7ce3      	ldrb	r3, [r4, #19]
 800fd4c:	b933      	cbnz	r3, 800fd5c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800fd4e:	7823      	ldrb	r3, [r4, #0]
 800fd50:	f003 0307 	and.w	r3, r3, #7
 800fd54:	4a1e      	ldr	r2, [pc, #120]	@ (800fdd0 <RegionUS915RxConfig+0xa0>)
 800fd56:	4f1f      	ldr	r7, [pc, #124]	@ (800fdd4 <RegionUS915RxConfig+0xa4>)
 800fd58:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800fd5c:	4b1e      	ldr	r3, [pc, #120]	@ (800fdd8 <RegionUS915RxConfig+0xa8>)
 800fd5e:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800fd62:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 800fdcc <RegionUS915RxConfig+0x9c>
 800fd66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd6a:	4638      	mov	r0, r7
 800fd6c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800fd6e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800fd72:	7ca3      	ldrb	r3, [r4, #18]
 800fd74:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd76:	2001      	movs	r0, #1
 800fd78:	9008      	str	r0, [sp, #32]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	9207      	str	r2, [sp, #28]
 800fd7e:	9206      	str	r2, [sp, #24]
 800fd80:	9205      	str	r2, [sp, #20]
 800fd82:	9204      	str	r2, [sp, #16]
 800fd84:	9203      	str	r2, [sp, #12]
 800fd86:	8923      	ldrh	r3, [r4, #8]
 800fd88:	9302      	str	r3, [sp, #8]
 800fd8a:	2308      	movs	r3, #8
 800fd8c:	9301      	str	r3, [sp, #4]
 800fd8e:	9200      	str	r2, [sp, #0]
 800fd90:	4603      	mov	r3, r0
 800fd92:	464a      	mov	r2, r9
 800fd94:	78a1      	ldrb	r1, [r4, #2]
 800fd96:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800fd98:	7c63      	ldrb	r3, [r4, #17]
 800fd9a:	b18b      	cbz	r3, 800fdc0 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800fd9c:	4b0f      	ldr	r3, [pc, #60]	@ (800fddc <RegionUS915RxConfig+0xac>)
 800fd9e:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800fda0:	4b0a      	ldr	r3, [pc, #40]	@ (800fdcc <RegionUS915RxConfig+0x9c>)
 800fda2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fda4:	310d      	adds	r1, #13
 800fda6:	b2c9      	uxtb	r1, r1
 800fda8:	2001      	movs	r0, #1
 800fdaa:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800fdac:	4632      	mov	r2, r6
 800fdae:	4639      	mov	r1, r7
 800fdb0:	7ce0      	ldrb	r0, [r4, #19]
 800fdb2:	f7fe fe91 	bl	800ead8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800fdb6:	702e      	strb	r6, [r5, #0]
    return true;
 800fdb8:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800fdba:	b00b      	add	sp, #44	@ 0x2c
 800fdbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800fdc0:	4b07      	ldr	r3, [pc, #28]	@ (800fde0 <RegionUS915RxConfig+0xb0>)
 800fdc2:	5d99      	ldrb	r1, [r3, r6]
 800fdc4:	e7ec      	b.n	800fda0 <RegionUS915RxConfig+0x70>
        return false;
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	e7f7      	b.n	800fdba <RegionUS915RxConfig+0x8a>
 800fdca:	bf00      	nop
 800fdcc:	08016f38 	.word	0x08016f38
 800fdd0:	000927c0 	.word	0x000927c0
 800fdd4:	370870a0 	.word	0x370870a0
 800fdd8:	08016ba0 	.word	0x08016ba0
 800fddc:	08016b2c 	.word	0x08016b2c
 800fde0:	08016b3c 	.word	0x08016b3c

0800fde4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	b08d      	sub	sp, #52	@ 0x34
 800fdea:	4604      	mov	r4, r0
 800fdec:	468b      	mov	fp, r1
 800fdee:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800fdf0:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800fdf4:	4b32      	ldr	r3, [pc, #200]	@ (800fec0 <RegionUS915TxConfig+0xdc>)
 800fdf6:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800fdfa:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800fec4 <RegionUS915TxConfig+0xe0>
 800fdfe:	f8d9 3000 	ldr.w	r3, [r9]
 800fe02:	7801      	ldrb	r1, [r0, #0]
 800fe04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fe08:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800fe0c:	7a49      	ldrb	r1, [r1, #9]
 800fe0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fe12:	482d      	ldr	r0, [pc, #180]	@ (800fec8 <RegionUS915TxConfig+0xe4>)
 800fe14:	6800      	ldr	r0, [r0, #0]
 800fe16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800fe1a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800fe1e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800fe22:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800fe26:	f7ff fce7 	bl	800f7f8 <LimitTxPower>
 800fe2a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800fe2c:	4927      	ldr	r1, [pc, #156]	@ (800fecc <RegionUS915TxConfig+0xe8>)
 800fe2e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fe32:	f7fe fe3f 	bl	800eab4 <RegionCommonGetBandwidth>
 800fe36:	900a      	str	r0, [sp, #40]	@ 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4925      	ldr	r1, [pc, #148]	@ (800fed0 <RegionUS915TxConfig+0xec>)
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	f7fe fd53 	bl	800e8e8 <RegionCommonComputeTxPower>
 800fe42:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800fe44:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800fed4 <RegionUS915TxConfig+0xf0>
 800fe48:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800fe4c:	f8d9 1000 	ldr.w	r1, [r9]
 800fe50:	7823      	ldrb	r3, [r4, #0]
 800fe52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe56:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800fe5a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800fe5c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800fe60:	9308      	str	r3, [sp, #32]
 800fe62:	2200      	movs	r2, #0
 800fe64:	9207      	str	r2, [sp, #28]
 800fe66:	9206      	str	r2, [sp, #24]
 800fe68:	9205      	str	r2, [sp, #20]
 800fe6a:	2501      	movs	r5, #1
 800fe6c:	9504      	str	r5, [sp, #16]
 800fe6e:	9203      	str	r2, [sp, #12]
 800fe70:	2308      	movs	r3, #8
 800fe72:	9302      	str	r3, [sp, #8]
 800fe74:	9501      	str	r5, [sp, #4]
 800fe76:	f8cd a000 	str.w	sl, [sp]
 800fe7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800fe84:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800fe86:	f8d9 2000 	ldr.w	r2, [r9]
 800fe8a:	7823      	ldrb	r3, [r4, #0]
 800fe8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe90:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800fe94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe98:	f7fe fe40 	bl	800eb1c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800fe9c:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 800fea0:	7b21      	ldrb	r1, [r4, #12]
 800fea2:	4628      	mov	r0, r5
 800fea4:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800fea6:	89a1      	ldrh	r1, [r4, #12]
 800fea8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800feac:	f7ff fc86 	bl	800f7bc <GetTimeOnAir>
 800feb0:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800feb2:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800feb6:	4628      	mov	r0, r5
 800feb8:	b00d      	add	sp, #52	@ 0x34
 800feba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800febe:	bf00      	nop
 800fec0:	08016ba0 	.word	0x08016ba0
 800fec4:	200011cc 	.word	0x200011cc
 800fec8:	200011c8 	.word	0x200011c8
 800fecc:	08016b60 	.word	0x08016b60
 800fed0:	41f00000 	.word	0x41f00000
 800fed4:	08016f38 	.word	0x08016f38

0800fed8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800fed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fedc:	b091      	sub	sp, #68	@ 0x44
 800fede:	4605      	mov	r5, r0
 800fee0:	4688      	mov	r8, r1
 800fee2:	4617      	mov	r7, r2
 800fee4:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800fee6:	2400      	movs	r4, #0
 800fee8:	940e      	str	r4, [sp, #56]	@ 0x38
 800feea:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800feee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fef0:	940c      	str	r4, [sp, #48]	@ 0x30
 800fef2:	940d      	str	r4, [sp, #52]	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fef4:	4b98      	ldr	r3, [pc, #608]	@ (8010158 <RegionUS915LinkAdrReq+0x280>)
 800fef6:	6819      	ldr	r1, [r3, #0]
 800fef8:	2206      	movs	r2, #6
 800fefa:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800fefe:	a80b      	add	r0, sp, #44	@ 0x2c
 800ff00:	f7fe fb7d 	bl	800e5fe <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ff04:	e00d      	b.n	800ff22 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800ff06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff0a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0xFFFF;
 800ff0e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0xFFFF;
 800ff12:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0xFFFF;
 800ff16:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800ff1a:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800ff1e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ff22:	7a2b      	ldrb	r3, [r5, #8]
 800ff24:	42a3      	cmp	r3, r4
 800ff26:	f240 8084 	bls.w	8010032 <RegionUS915LinkAdrReq+0x15a>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ff2a:	6868      	ldr	r0, [r5, #4]
 800ff2c:	a90e      	add	r1, sp, #56	@ 0x38
 800ff2e:	4420      	add	r0, r4
 800ff30:	f7fe fc16 	bl	800e760 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ff34:	4603      	mov	r3, r0
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d07b      	beq.n	8010032 <RegionUS915LinkAdrReq+0x15a>
        bytesProcessed += nextIndex;
 800ff3a:	4423      	add	r3, r4
 800ff3c:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 800ff3e:	f89d c03b 	ldrb.w	ip, [sp, #59]	@ 0x3b
 800ff42:	f1bc 0f06 	cmp.w	ip, #6
 800ff46:	d0de      	beq.n	800ff06 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800ff48:	f1bc 0f07 	cmp.w	ip, #7
 800ff4c:	d00a      	beq.n	800ff64 <RegionUS915LinkAdrReq+0x8c>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800ff4e:	f1bc 0f05 	cmp.w	ip, #5
 800ff52:	d06a      	beq.n	801002a <RegionUS915LinkAdrReq+0x152>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800ff54:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800ff58:	aa10      	add	r2, sp, #64	@ 0x40
 800ff5a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800ff5e:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800ff62:	e7de      	b.n	800ff22 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800ff64:	2300      	movs	r3, #0
 800ff66:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0x0000;
 800ff6a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0x0000;
 800ff6e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0x0000;
 800ff72:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800ff76:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800ff7a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ff7e:	e7d0      	b.n	800ff22 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800ff80:	aa10      	add	r2, sp, #64	@ 0x40
 800ff82:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800ff86:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800ff8a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 800ff8e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800ff92:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800ff96:	4313      	orrs	r3, r2
 800ff98:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 800ff9c:	3101      	adds	r1, #1
 800ff9e:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800ffa0:	f10c 0c01 	add.w	ip, ip, #1
 800ffa4:	fa5f fc8c 	uxtb.w	ip, ip
 800ffa8:	f1bc 0f07 	cmp.w	ip, #7
 800ffac:	d8b9      	bhi.n	800ff22 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800ffae:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	fa03 f30c 	lsl.w	r3, r3, ip
 800ffb8:	421a      	tst	r2, r3
 800ffba:	d011      	beq.n	800ffe0 <RegionUS915LinkAdrReq+0x108>
                    if( ( i % 2 ) == 0 )
 800ffbc:	f01c 0f01 	tst.w	ip, #1
 800ffc0:	d1de      	bne.n	800ff80 <RegionUS915LinkAdrReq+0xa8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800ffc2:	aa10      	add	r2, sp, #64	@ 0x40
 800ffc4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800ffc8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800ffcc:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 800ffd0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800ffd4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ffde:	e7df      	b.n	800ffa0 <RegionUS915LinkAdrReq+0xc8>
                    if( ( i % 2 ) == 0 )
 800ffe0:	f01c 0f01 	tst.w	ip, #1
 800ffe4:	d110      	bne.n	8010008 <RegionUS915LinkAdrReq+0x130>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800ffe6:	aa10      	add	r2, sp, #64	@ 0x40
 800ffe8:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800ffec:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fff0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800fff4:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fff8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800fffc:	43db      	mvns	r3, r3
 800fffe:	b21b      	sxth	r3, r3
 8010000:	4013      	ands	r3, r2
 8010002:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010006:	e7cb      	b.n	800ffa0 <RegionUS915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8010008:	aa10      	add	r2, sp, #64	@ 0x40
 801000a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801000e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8010012:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8010016:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801001a:	43db      	mvns	r3, r3
 801001c:	b21b      	sxth	r3, r3
 801001e:	4013      	ands	r3, r2
 8010020:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 8010024:	3101      	adds	r1, #1
 8010026:	b2c9      	uxtb	r1, r1
 8010028:	e7ba      	b.n	800ffa0 <RegionUS915LinkAdrReq+0xc8>
            for( uint8_t i = 0; i <= 7; i++ )
 801002a:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 801002e:	4661      	mov	r1, ip
 8010030:	e7ba      	b.n	800ffa8 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8010032:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 8010036:	2b03      	cmp	r3, #3
 8010038:	dd58      	ble.n	80100ec <RegionUS915LinkAdrReq+0x214>
 801003a:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801003e:	2302      	movs	r3, #2
 8010040:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8010044:	7a6b      	ldrb	r3, [r5, #9]
 8010046:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801004a:	a809      	add	r0, sp, #36	@ 0x24
 801004c:	f7ff fbf0 	bl	800f830 <RegionUS915GetPhyParam>
 8010050:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8010052:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8010056:	7aab      	ldrb	r3, [r5, #10]
 8010058:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801005c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 8010060:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8010064:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 8010068:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801006c:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 8010070:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8010074:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8010078:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801007c:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8010080:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010084:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8010088:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801008c:	2348      	movs	r3, #72	@ 0x48
 801008e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8010092:	ab0b      	add	r3, sp, #44	@ 0x2c
 8010094:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010096:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801009a:	2304      	movs	r3, #4
 801009c:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80100a0:	4b2d      	ldr	r3, [pc, #180]	@ (8010158 <RegionUS915LinkAdrReq+0x280>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80100a6:	230e      	movs	r3, #14
 80100a8:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80100ac:	2300      	movs	r3, #0
 80100ae:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80100b2:	682b      	ldr	r3, [r5, #0]
 80100b4:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80100b6:	ab0e      	add	r3, sp, #56	@ 0x38
 80100b8:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 80100bc:	f10d 0139 	add.w	r1, sp, #57	@ 0x39
 80100c0:	4668      	mov	r0, sp
 80100c2:	f7fe fb6b 	bl	800e79c <RegionCommonLinkAdrReqVerifyParams>
 80100c6:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80100c8:	2807      	cmp	r0, #7
 80100ca:	d01c      	beq.n	8010106 <RegionUS915LinkAdrReq+0x22e>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80100cc:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 80100d0:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 80100d4:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 80100d8:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80100da:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 80100de:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 80100e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80100e2:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80100e4:	4628      	mov	r0, r5
 80100e6:	b011      	add	sp, #68	@ 0x44
 80100e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80100ec:	2204      	movs	r2, #4
 80100ee:	2100      	movs	r1, #0
 80100f0:	a80b      	add	r0, sp, #44	@ 0x2c
 80100f2:	f7fe fa6e 	bl	800e5d2 <RegionCommonCountChannels>
 80100f6:	2801      	cmp	r0, #1
 80100f8:	d902      	bls.n	8010100 <RegionUS915LinkAdrReq+0x228>
 80100fa:	f04f 0907 	mov.w	r9, #7
 80100fe:	e79e      	b.n	801003e <RegionUS915LinkAdrReq+0x166>
        status &= 0xFE; // Channel mask KO
 8010100:	f04f 0906 	mov.w	r9, #6
 8010104:	e79b      	b.n	801003e <RegionUS915LinkAdrReq+0x166>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8010106:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8010158 <RegionUS915LinkAdrReq+0x280>
 801010a:	f8d9 0000 	ldr.w	r0, [r9]
 801010e:	2206      	movs	r2, #6
 8010110:	a90b      	add	r1, sp, #44	@ 0x2c
 8010112:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 8010116:	f7fe fa72 	bl	800e5fe <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801011a:	4b10      	ldr	r3, [pc, #64]	@ (801015c <RegionUS915LinkAdrReq+0x284>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	8819      	ldrh	r1, [r3, #0]
 8010120:	f8d9 2000 	ldr.w	r2, [r9]
 8010124:	f8b2 0360 	ldrh.w	r0, [r2, #864]	@ 0x360
 8010128:	4001      	ands	r1, r0
 801012a:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801012c:	8859      	ldrh	r1, [r3, #2]
 801012e:	f8b2 0362 	ldrh.w	r0, [r2, #866]	@ 0x362
 8010132:	4001      	ands	r1, r0
 8010134:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8010136:	8899      	ldrh	r1, [r3, #4]
 8010138:	f8b2 0364 	ldrh.w	r0, [r2, #868]	@ 0x364
 801013c:	4001      	ands	r1, r0
 801013e:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8010140:	88d9      	ldrh	r1, [r3, #6]
 8010142:	f8b2 0366 	ldrh.w	r0, [r2, #870]	@ 0x366
 8010146:	4001      	ands	r1, r0
 8010148:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801014a:	f8b2 1368 	ldrh.w	r1, [r2, #872]	@ 0x368
 801014e:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8010150:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 8010154:	815a      	strh	r2, [r3, #10]
 8010156:	e7b9      	b.n	80100cc <RegionUS915LinkAdrReq+0x1f4>
 8010158:	200011cc 	.word	0x200011cc
 801015c:	200011d0 	.word	0x200011d0

08010160 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010160:	b538      	push	{r3, r4, r5, lr}
 8010162:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8010164:	6840      	ldr	r0, [r0, #4]
 8010166:	f7ff faf9 	bl	800f75c <VerifyRfFreq>
 801016a:	b310      	cbz	r0, 80101b2 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 801016c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801016e:	220d      	movs	r2, #13
 8010170:	2108      	movs	r1, #8
 8010172:	f994 0000 	ldrsb.w	r0, [r4]
 8010176:	f7fe f9ce 	bl	800e516 <RegionCommonValueInRange>
 801017a:	b908      	cbnz	r0, 8010180 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801017c:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8010180:	2207      	movs	r2, #7
 8010182:	2105      	movs	r1, #5
 8010184:	f994 0000 	ldrsb.w	r0, [r4]
 8010188:	f7fe f9c5 	bl	800e516 <RegionCommonValueInRange>
 801018c:	2801      	cmp	r0, #1
 801018e:	d003      	beq.n	8010198 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8010190:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8010194:	2b0d      	cmp	r3, #13
 8010196:	dd01      	ble.n	801019c <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8010198:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801019c:	2203      	movs	r2, #3
 801019e:	2100      	movs	r1, #0
 80101a0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80101a4:	f7fe f9b7 	bl	800e516 <RegionCommonValueInRange>
 80101a8:	b908      	cbnz	r0, 80101ae <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80101aa:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 80101ae:	4628      	mov	r0, r5
 80101b0:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80101b2:	2506      	movs	r5, #6
 80101b4:	e7db      	b.n	801016e <RegionUS915RxParamSetupReq+0xe>

080101b6 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 80101b6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ba:	4770      	bx	lr

080101bc <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80101bc:	f04f 30ff 	mov.w	r0, #4294967295
 80101c0:	4770      	bx	lr

080101c2 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80101c2:	f04f 30ff 	mov.w	r0, #4294967295
 80101c6:	4770      	bx	lr

080101c8 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80101c8:	b999      	cbnz	r1, 80101f2 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80101ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010204 <RegionUS915AlternateDr+0x3c>)
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	7b53      	ldrb	r3, [r2, #13]
 80101d0:	3301      	adds	r3, #1
 80101d2:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80101d4:	4b0b      	ldr	r3, [pc, #44]	@ (8010204 <RegionUS915AlternateDr+0x3c>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	7b5a      	ldrb	r2, [r3, #13]
 80101da:	4b0b      	ldr	r3, [pc, #44]	@ (8010208 <RegionUS915AlternateDr+0x40>)
 80101dc:	fba3 1302 	umull	r1, r3, r3, r2
 80101e0:	085b      	lsrs	r3, r3, #1
 80101e2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80101e6:	1ad2      	subs	r2, r2, r3
 80101e8:	f012 0fff 	tst.w	r2, #255	@ 0xff
 80101ec:	d007      	beq.n	80101fe <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 80101ee:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 80101f0:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 80101f2:	4b04      	ldr	r3, [pc, #16]	@ (8010204 <RegionUS915AlternateDr+0x3c>)
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	7b53      	ldrb	r3, [r2, #13]
 80101f8:	3b01      	subs	r3, #1
 80101fa:	7353      	strb	r3, [r2, #13]
 80101fc:	e7ea      	b.n	80101d4 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 80101fe:	2004      	movs	r0, #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	200011d0 	.word	0x200011d0
 8010208:	38e38e39 	.word	0x38e38e39

0801020c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010210:	b0a4      	sub	sp, #144	@ 0x90
 8010212:	4604      	mov	r4, r0
 8010214:	460e      	mov	r6, r1
 8010216:	4690      	mov	r8, r2
 8010218:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801021a:	2500      	movs	r5, #0
 801021c:	f88d 508f 	strb.w	r5, [sp, #143]	@ 0x8f
    uint8_t nbRestrictedChannels = 0;
 8010220:	f88d 508e 	strb.w	r5, [sp, #142]	@ 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8010224:	2248      	movs	r2, #72	@ 0x48
 8010226:	4629      	mov	r1, r5
 8010228:	a811      	add	r0, sp, #68	@ 0x44
 801022a:	f004 fa15 	bl	8014658 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801022e:	2204      	movs	r2, #4
 8010230:	4629      	mov	r1, r5
 8010232:	4b49      	ldr	r3, [pc, #292]	@ (8010358 <RegionUS915NextChannel+0x14c>)
 8010234:	6818      	ldr	r0, [r3, #0]
 8010236:	f7fe f9cc 	bl	800e5d2 <RegionCommonCountChannels>
 801023a:	2800      	cmp	r0, #0
 801023c:	d052      	beq.n	80102e4 <RegionUS915NextChannel+0xd8>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801023e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8010242:	2b03      	cmp	r3, #3
 8010244:	dd08      	ble.n	8010258 <RegionUS915NextChannel+0x4c>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8010246:	4b44      	ldr	r3, [pc, #272]	@ (8010358 <RegionUS915NextChannel+0x14c>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	7a1a      	ldrb	r2, [r3, #8]
 801024c:	b922      	cbnz	r2, 8010258 <RegionUS915NextChannel+0x4c>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801024e:	4a43      	ldr	r2, [pc, #268]	@ (801035c <RegionUS915NextChannel+0x150>)
 8010250:	6812      	ldr	r2, [r2, #0]
 8010252:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8010256:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010258:	7a63      	ldrb	r3, [r4, #9]
 801025a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801025e:	7a23      	ldrb	r3, [r4, #8]
 8010260:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8010264:	4b3c      	ldr	r3, [pc, #240]	@ (8010358 <RegionUS915NextChannel+0x14c>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801026a:	4b3c      	ldr	r3, [pc, #240]	@ (801035c <RegionUS915NextChannel+0x150>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8010270:	4b3b      	ldr	r3, [pc, #236]	@ (8010360 <RegionUS915NextChannel+0x154>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8010276:	2348      	movs	r3, #72	@ 0x48
 8010278:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 801027c:	2300      	movs	r3, #0
 801027e:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8010280:	6823      	ldr	r3, [r4, #0]
 8010282:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8010284:	6863      	ldr	r3, [r4, #4]
 8010286:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8010288:	7aa3      	ldrb	r3, [r4, #10]
 801028a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801028e:	2301      	movs	r3, #1
 8010290:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8010294:	ab03      	add	r3, sp, #12
 8010296:	9310      	str	r3, [sp, #64]	@ 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8010298:	ab0c      	add	r3, sp, #48	@ 0x30
 801029a:	f104 020c 	add.w	r2, r4, #12
 801029e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102a2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80102a6:	7d23      	ldrb	r3, [r4, #20]
 80102a8:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80102ac:	8ae1      	ldrh	r1, [r4, #22]
 80102ae:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80102b2:	f7ff fa83 	bl	800f7bc <GetTimeOnAir>
 80102b6:	900f      	str	r0, [sp, #60]	@ 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80102b8:	f8cd 8004 	str.w	r8, [sp, #4]
 80102bc:	f10d 038e 	add.w	r3, sp, #142	@ 0x8e
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	f10d 038f 	add.w	r3, sp, #143	@ 0x8f
 80102c6:	aa11      	add	r2, sp, #68	@ 0x44
 80102c8:	4639      	mov	r1, r7
 80102ca:	a809      	add	r0, sp, #36	@ 0x24
 80102cc:	f7fe fb85 	bl	800e9da <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80102d0:	4605      	mov	r5, r0
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d13c      	bne.n	8010350 <RegionUS915NextChannel+0x144>
    {
        if( nextChanParams->Joined == true )
 80102d6:	7a63      	ldrb	r3, [r4, #9]
 80102d8:	b98b      	cbnz	r3, 80102fe <RegionUS915NextChannel+0xf2>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80102da:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80102de:	b1db      	cbz	r3, 8010318 <RegionUS915NextChannel+0x10c>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80102e0:	4603      	mov	r3, r0
 80102e2:	e026      	b.n	8010332 <RegionUS915NextChannel+0x126>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80102e4:	4d1c      	ldr	r5, [pc, #112]	@ (8010358 <RegionUS915NextChannel+0x14c>)
 80102e6:	4b1d      	ldr	r3, [pc, #116]	@ (801035c <RegionUS915NextChannel+0x150>)
 80102e8:	6819      	ldr	r1, [r3, #0]
 80102ea:	2204      	movs	r2, #4
 80102ec:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 80102f0:	6828      	ldr	r0, [r5, #0]
 80102f2:	f7fe f984 	bl	800e5fe <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80102f6:	682b      	ldr	r3, [r5, #0]
 80102f8:	2200      	movs	r2, #0
 80102fa:	731a      	strb	r2, [r3, #12]
 80102fc:	e79f      	b.n	801023e <RegionUS915NextChannel+0x32>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80102fe:	f89d 108f 	ldrb.w	r1, [sp, #143]	@ 0x8f
 8010302:	3901      	subs	r1, #1
 8010304:	f000 ff58 	bl	80111b8 <randr>
 8010308:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 801030c:	eb0d 0003 	add.w	r0, sp, r3
 8010310:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8010314:	7033      	strb	r3, [r6, #0]
 8010316:	e015      	b.n	8010344 <RegionUS915NextChannel+0x138>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8010318:	4b0f      	ldr	r3, [pc, #60]	@ (8010358 <RegionUS915NextChannel+0x14c>)
 801031a:	6818      	ldr	r0, [r3, #0]
 801031c:	4632      	mov	r2, r6
 801031e:	f100 010c 	add.w	r1, r0, #12
 8010322:	f7fd ffd9 	bl	800e2d8 <RegionBaseUSComputeNext125kHzJoinChannel>
 8010326:	2803      	cmp	r0, #3
 8010328:	d10c      	bne.n	8010344 <RegionUS915NextChannel+0x138>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801032a:	4605      	mov	r5, r0
 801032c:	e010      	b.n	8010350 <RegionUS915NextChannel+0x144>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 801032e:	3301      	adds	r3, #1
 8010330:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8010332:	4a09      	ldr	r2, [pc, #36]	@ (8010358 <RegionUS915NextChannel+0x14c>)
 8010334:	6812      	ldr	r2, [r2, #0]
 8010336:	7a10      	ldrb	r0, [r2, #8]
 8010338:	4118      	asrs	r0, r3
 801033a:	f010 0f01 	tst.w	r0, #1
 801033e:	d0f6      	beq.n	801032e <RegionUS915NextChannel+0x122>
                }
                *channel = 64 + i;
 8010340:	3340      	adds	r3, #64	@ 0x40
 8010342:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8010344:	2248      	movs	r2, #72	@ 0x48
 8010346:	7831      	ldrb	r1, [r6, #0]
 8010348:	4b03      	ldr	r3, [pc, #12]	@ (8010358 <RegionUS915NextChannel+0x14c>)
 801034a:	6818      	ldr	r0, [r3, #0]
 801034c:	f7fe f925 	bl	800e59a <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8010350:	4628      	mov	r0, r5
 8010352:	b024      	add	sp, #144	@ 0x90
 8010354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010358:	200011d0 	.word	0x200011d0
 801035c:	200011cc 	.word	0x200011cc
 8010360:	200011c8 	.word	0x200011c8

08010364 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8010364:	4b04      	ldr	r3, [pc, #16]	@ (8010378 <RegionUS915ApplyDrOffset+0x14>)
 8010366:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801036a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 801036c:	2800      	cmp	r0, #0
 801036e:	db01      	blt.n	8010374 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8010370:	b2c0      	uxtb	r0, r0
 8010372:	4770      	bx	lr
        datarate = DR_0;
 8010374:	2000      	movs	r0, #0
 8010376:	e7fb      	b.n	8010370 <RegionUS915ApplyDrOffset+0xc>
 8010378:	08016b4c 	.word	0x08016b4c

0801037c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 801037c:	b510      	push	{r4, lr}
 801037e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8010380:	2210      	movs	r2, #16
 8010382:	2100      	movs	r1, #0
 8010384:	30f1      	adds	r0, #241	@ 0xf1
 8010386:	f000 ff3c 	bl	8011202 <memset1>
    ctx->M_n = 0;
 801038a:	2100      	movs	r1, #0
 801038c:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8010390:	22f0      	movs	r2, #240	@ 0xf0
 8010392:	4620      	mov	r0, r4
 8010394:	f000 ff35 	bl	8011202 <memset1>
}
 8010398:	bd10      	pop	{r4, pc}

0801039a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801039a:	b508      	push	{r3, lr}
 801039c:	4602      	mov	r2, r0
 801039e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80103a0:	2110      	movs	r1, #16
 80103a2:	f000 fb3b 	bl	8010a1c <lorawan_aes_set_key>
}
 80103a6:	bd08      	pop	{r3, pc}

080103a8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80103a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	4604      	mov	r4, r0
 80103b0:	460d      	mov	r5, r1
 80103b2:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80103b4:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d054      	beq.n	8010466 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80103bc:	f1c3 0810 	rsb	r8, r3, #16
 80103c0:	4647      	mov	r7, r8
 80103c2:	4590      	cmp	r8, r2
 80103c4:	bf28      	it	cs
 80103c6:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80103c8:	f200 1001 	addw	r0, r0, #257	@ 0x101
 80103cc:	b2ba      	uxth	r2, r7
 80103ce:	4418      	add	r0, r3
 80103d0:	f000 feff 	bl	80111d2 <memcpy1>
        ctx->M_n += mlen;
 80103d4:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 80103d8:	443b      	add	r3, r7
 80103da:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 80103de:	2b0f      	cmp	r3, #15
 80103e0:	d94d      	bls.n	801047e <AES_CMAC_Update+0xd6>
 80103e2:	45b0      	cmp	r8, r6
 80103e4:	d24b      	bcs.n	801047e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 80103e6:	2300      	movs	r3, #0
 80103e8:	e008      	b.n	80103fc <AES_CMAC_Update+0x54>
 80103ea:	18e2      	adds	r2, r4, r3
 80103ec:	f892 10f1 	ldrb.w	r1, [r2, #241]	@ 0xf1
 80103f0:	f892 0101 	ldrb.w	r0, [r2, #257]	@ 0x101
 80103f4:	4041      	eors	r1, r0
 80103f6:	f882 10f1 	strb.w	r1, [r2, #241]	@ 0xf1
 80103fa:	3301      	adds	r3, #1
 80103fc:	2b0f      	cmp	r3, #15
 80103fe:	ddf4      	ble.n	80103ea <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010400:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 8010404:	2210      	movs	r2, #16
 8010406:	4641      	mov	r1, r8
 8010408:	4668      	mov	r0, sp
 801040a:	f000 fee2 	bl	80111d2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801040e:	4622      	mov	r2, r4
 8010410:	4669      	mov	r1, sp
 8010412:	4668      	mov	r0, sp
 8010414:	f000 fb84 	bl	8010b20 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010418:	2210      	movs	r2, #16
 801041a:	4669      	mov	r1, sp
 801041c:	4640      	mov	r0, r8
 801041e:	f000 fed8 	bl	80111d2 <memcpy1>

        data += mlen;
 8010422:	443d      	add	r5, r7
        len -= mlen;
 8010424:	1bf6      	subs	r6, r6, r7
 8010426:	e01e      	b.n	8010466 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8010428:	eb04 0e03 	add.w	lr, r4, r3
 801042c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	@ 0xf1
 8010430:	5cea      	ldrb	r2, [r5, r3]
 8010432:	ea8c 0c02 	eor.w	ip, ip, r2
 8010436:	f88e c0f1 	strb.w	ip, [lr, #241]	@ 0xf1
 801043a:	3301      	adds	r3, #1
 801043c:	2b0f      	cmp	r3, #15
 801043e:	ddf3      	ble.n	8010428 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010440:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
 8010444:	2210      	movs	r2, #16
 8010446:	4639      	mov	r1, r7
 8010448:	4668      	mov	r0, sp
 801044a:	f000 fec2 	bl	80111d2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801044e:	4622      	mov	r2, r4
 8010450:	4669      	mov	r1, sp
 8010452:	4668      	mov	r0, sp
 8010454:	f000 fb64 	bl	8010b20 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010458:	2210      	movs	r2, #16
 801045a:	4669      	mov	r1, sp
 801045c:	4638      	mov	r0, r7
 801045e:	f000 feb8 	bl	80111d2 <memcpy1>

        data += 16;
 8010462:	3510      	adds	r5, #16
        len -= 16;
 8010464:	3e10      	subs	r6, #16
    while( len > 16 )
 8010466:	2e10      	cmp	r6, #16
 8010468:	d901      	bls.n	801046e <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 801046a:	2300      	movs	r3, #0
 801046c:	e7e6      	b.n	801043c <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801046e:	b2b2      	uxth	r2, r6
 8010470:	4629      	mov	r1, r5
 8010472:	f204 1001 	addw	r0, r4, #257	@ 0x101
 8010476:	f000 feac 	bl	80111d2 <memcpy1>
    ctx->M_n = len;
 801047a:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
}
 801047e:	b004      	add	sp, #16
 8010480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010484 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8010484:	b530      	push	{r4, r5, lr}
 8010486:	b089      	sub	sp, #36	@ 0x24
 8010488:	4605      	mov	r5, r0
 801048a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801048c:	2210      	movs	r2, #16
 801048e:	2100      	movs	r1, #0
 8010490:	eb0d 0002 	add.w	r0, sp, r2
 8010494:	f000 feb5 	bl	8011202 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8010498:	4622      	mov	r2, r4
 801049a:	a904      	add	r1, sp, #16
 801049c:	4608      	mov	r0, r1
 801049e:	f000 fb3f 	bl	8010b20 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80104a2:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	db01      	blt.n	80104ae <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80104aa:	2300      	movs	r3, #0
 80104ac:	e030      	b.n	8010510 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 80104ae:	2300      	movs	r3, #0
 80104b0:	2b0e      	cmp	r3, #14
 80104b2:	dc11      	bgt.n	80104d8 <AES_CMAC_Final+0x54>
 80104b4:	f103 0220 	add.w	r2, r3, #32
 80104b8:	eb0d 0102 	add.w	r1, sp, r2
 80104bc:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80104c0:	3301      	adds	r3, #1
 80104c2:	f103 0020 	add.w	r0, r3, #32
 80104c6:	4468      	add	r0, sp
 80104c8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80104cc:	0052      	lsls	r2, r2, #1
 80104ce:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 80104d2:	f801 2c10 	strb.w	r2, [r1, #-16]
 80104d6:	e7eb      	b.n	80104b0 <AES_CMAC_Final+0x2c>
 80104d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 80104e4:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 80104e8:	f88d 301f 	strb.w	r3, [sp, #31]
 80104ec:	e017      	b.n	801051e <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 80104ee:	f103 0220 	add.w	r2, r3, #32
 80104f2:	eb0d 0102 	add.w	r1, sp, r2
 80104f6:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80104fa:	3301      	adds	r3, #1
 80104fc:	f103 0020 	add.w	r0, r3, #32
 8010500:	4468      	add	r0, sp
 8010502:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010506:	0052      	lsls	r2, r2, #1
 8010508:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 801050c:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010510:	2b0e      	cmp	r3, #14
 8010512:	ddec      	ble.n	80104ee <AES_CMAC_Final+0x6a>
 8010514:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010518:	005b      	lsls	r3, r3, #1
 801051a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801051e:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8010522:	2810      	cmp	r0, #16
 8010524:	d014      	beq.n	8010550 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8010526:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801052a:	2b00      	cmp	r3, #0
 801052c:	db30      	blt.n	8010590 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801052e:	2300      	movs	r3, #0
 8010530:	e041      	b.n	80105b6 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8010532:	18e1      	adds	r1, r4, r3
 8010534:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 8010538:	f103 0020 	add.w	r0, r3, #32
 801053c:	4468      	add	r0, sp
 801053e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010542:	4042      	eors	r2, r0
 8010544:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 8010548:	3301      	adds	r3, #1
 801054a:	2b0f      	cmp	r3, #15
 801054c:	ddf1      	ble.n	8010532 <AES_CMAC_Final+0xae>
 801054e:	e059      	b.n	8010604 <AES_CMAC_Final+0x180>
 8010550:	2300      	movs	r3, #0
 8010552:	e7fa      	b.n	801054a <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8010554:	f103 0220 	add.w	r2, r3, #32
 8010558:	eb0d 0102 	add.w	r1, sp, r2
 801055c:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8010560:	3301      	adds	r3, #1
 8010562:	f103 0c20 	add.w	ip, r3, #32
 8010566:	44ec      	add	ip, sp
 8010568:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 801056c:	0052      	lsls	r2, r2, #1
 801056e:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 8010572:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010576:	2b0e      	cmp	r3, #14
 8010578:	ddec      	ble.n	8010554 <AES_CMAC_Final+0xd0>
 801057a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801057e:	005b      	lsls	r3, r3, #1
 8010580:	b2db      	uxtb	r3, r3
 8010582:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8010586:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 801058a:	f88d 301f 	strb.w	r3, [sp, #31]
 801058e:	e019      	b.n	80105c4 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8010590:	2300      	movs	r3, #0
 8010592:	e7f0      	b.n	8010576 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8010594:	f103 0220 	add.w	r2, r3, #32
 8010598:	eb0d 0102 	add.w	r1, sp, r2
 801059c:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80105a0:	3301      	adds	r3, #1
 80105a2:	f103 0c20 	add.w	ip, r3, #32
 80105a6:	44ec      	add	ip, sp
 80105a8:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 80105ac:	0052      	lsls	r2, r2, #1
 80105ae:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 80105b2:	f801 2c10 	strb.w	r2, [r1, #-16]
 80105b6:	2b0e      	cmp	r3, #14
 80105b8:	ddec      	ble.n	8010594 <AES_CMAC_Final+0x110>
 80105ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80105be:	005b      	lsls	r3, r3, #1
 80105c0:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80105c4:	4420      	add	r0, r4
 80105c6:	2380      	movs	r3, #128	@ 0x80
 80105c8:	f880 3101 	strb.w	r3, [r0, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 80105cc:	e003      	b.n	80105d6 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80105ce:	4423      	add	r3, r4
 80105d0:	2200      	movs	r2, #0
 80105d2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 80105d6:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 80105da:	3301      	adds	r3, #1
 80105dc:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 80105e0:	2b0f      	cmp	r3, #15
 80105e2:	d9f4      	bls.n	80105ce <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 80105e4:	2300      	movs	r3, #0
 80105e6:	e00b      	b.n	8010600 <AES_CMAC_Final+0x17c>
 80105e8:	18e1      	adds	r1, r4, r3
 80105ea:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 80105ee:	f103 0020 	add.w	r0, r3, #32
 80105f2:	4468      	add	r0, sp
 80105f4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80105f8:	4042      	eors	r2, r0
 80105fa:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 80105fe:	3301      	adds	r3, #1
 8010600:	2b0f      	cmp	r3, #15
 8010602:	ddf1      	ble.n	80105e8 <AES_CMAC_Final+0x164>
 8010604:	2300      	movs	r3, #0
 8010606:	e009      	b.n	801061c <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8010608:	18e2      	adds	r2, r4, r3
 801060a:	f892 c0f1 	ldrb.w	ip, [r2, #241]	@ 0xf1
 801060e:	f892 1101 	ldrb.w	r1, [r2, #257]	@ 0x101
 8010612:	ea8c 0c01 	eor.w	ip, ip, r1
 8010616:	f882 c0f1 	strb.w	ip, [r2, #241]	@ 0xf1
 801061a:	3301      	adds	r3, #1
 801061c:	2b0f      	cmp	r3, #15
 801061e:	ddf3      	ble.n	8010608 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010620:	2210      	movs	r2, #16
 8010622:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 8010626:	4668      	mov	r0, sp
 8010628:	f000 fdd3 	bl	80111d2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 801062c:	4622      	mov	r2, r4
 801062e:	4629      	mov	r1, r5
 8010630:	4668      	mov	r0, sp
 8010632:	f000 fa75 	bl	8010b20 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8010636:	2210      	movs	r2, #16
 8010638:	2100      	movs	r1, #0
 801063a:	eb0d 0002 	add.w	r0, sp, r2
 801063e:	f000 fde0 	bl	8011202 <memset1>
}
 8010642:	b009      	add	sp, #36	@ 0x24
 8010644:	bd30      	pop	{r4, r5, pc}

08010646 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8010646:	780b      	ldrb	r3, [r1, #0]
 8010648:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 801064a:	784b      	ldrb	r3, [r1, #1]
 801064c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801064e:	788b      	ldrb	r3, [r1, #2]
 8010650:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8010652:	78cb      	ldrb	r3, [r1, #3]
 8010654:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8010656:	790b      	ldrb	r3, [r1, #4]
 8010658:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801065a:	794b      	ldrb	r3, [r1, #5]
 801065c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801065e:	798b      	ldrb	r3, [r1, #6]
 8010660:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8010662:	79cb      	ldrb	r3, [r1, #7]
 8010664:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8010666:	7a0b      	ldrb	r3, [r1, #8]
 8010668:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801066a:	7a4b      	ldrb	r3, [r1, #9]
 801066c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801066e:	7a8b      	ldrb	r3, [r1, #10]
 8010670:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8010672:	7acb      	ldrb	r3, [r1, #11]
 8010674:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8010676:	7b0b      	ldrb	r3, [r1, #12]
 8010678:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 801067a:	7b4b      	ldrb	r3, [r1, #13]
 801067c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801067e:	7b8b      	ldrb	r3, [r1, #14]
 8010680:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8010682:	7bcb      	ldrb	r3, [r1, #15]
 8010684:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010686:	4770      	bx	lr

08010688 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8010688:	e004      	b.n	8010694 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801068a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801068e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8010692:	461a      	mov	r2, r3
 8010694:	1e53      	subs	r3, r2, #1
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2a00      	cmp	r2, #0
 801069a:	d1f6      	bne.n	801068a <copy_block_nn+0x2>
}
 801069c:	4770      	bx	lr

0801069e <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 801069e:	7803      	ldrb	r3, [r0, #0]
 80106a0:	780a      	ldrb	r2, [r1, #0]
 80106a2:	4053      	eors	r3, r2
 80106a4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80106a6:	7843      	ldrb	r3, [r0, #1]
 80106a8:	784a      	ldrb	r2, [r1, #1]
 80106aa:	4053      	eors	r3, r2
 80106ac:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80106ae:	7883      	ldrb	r3, [r0, #2]
 80106b0:	788a      	ldrb	r2, [r1, #2]
 80106b2:	4053      	eors	r3, r2
 80106b4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80106b6:	78c3      	ldrb	r3, [r0, #3]
 80106b8:	78ca      	ldrb	r2, [r1, #3]
 80106ba:	4053      	eors	r3, r2
 80106bc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80106be:	7903      	ldrb	r3, [r0, #4]
 80106c0:	790a      	ldrb	r2, [r1, #4]
 80106c2:	4053      	eors	r3, r2
 80106c4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80106c6:	7943      	ldrb	r3, [r0, #5]
 80106c8:	794a      	ldrb	r2, [r1, #5]
 80106ca:	4053      	eors	r3, r2
 80106cc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80106ce:	7983      	ldrb	r3, [r0, #6]
 80106d0:	798a      	ldrb	r2, [r1, #6]
 80106d2:	4053      	eors	r3, r2
 80106d4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80106d6:	79c3      	ldrb	r3, [r0, #7]
 80106d8:	79ca      	ldrb	r2, [r1, #7]
 80106da:	4053      	eors	r3, r2
 80106dc:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80106de:	7a03      	ldrb	r3, [r0, #8]
 80106e0:	7a0a      	ldrb	r2, [r1, #8]
 80106e2:	4053      	eors	r3, r2
 80106e4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80106e6:	7a43      	ldrb	r3, [r0, #9]
 80106e8:	7a4a      	ldrb	r2, [r1, #9]
 80106ea:	4053      	eors	r3, r2
 80106ec:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80106ee:	7a83      	ldrb	r3, [r0, #10]
 80106f0:	7a8a      	ldrb	r2, [r1, #10]
 80106f2:	4053      	eors	r3, r2
 80106f4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80106f6:	7ac3      	ldrb	r3, [r0, #11]
 80106f8:	7aca      	ldrb	r2, [r1, #11]
 80106fa:	4053      	eors	r3, r2
 80106fc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80106fe:	7b03      	ldrb	r3, [r0, #12]
 8010700:	7b0a      	ldrb	r2, [r1, #12]
 8010702:	4053      	eors	r3, r2
 8010704:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8010706:	7b43      	ldrb	r3, [r0, #13]
 8010708:	7b4a      	ldrb	r2, [r1, #13]
 801070a:	4053      	eors	r3, r2
 801070c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801070e:	7b83      	ldrb	r3, [r0, #14]
 8010710:	7b8a      	ldrb	r2, [r1, #14]
 8010712:	4053      	eors	r3, r2
 8010714:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8010716:	7bc3      	ldrb	r3, [r0, #15]
 8010718:	7bca      	ldrb	r2, [r1, #15]
 801071a:	4053      	eors	r3, r2
 801071c:	73c3      	strb	r3, [r0, #15]
#endif
}
 801071e:	4770      	bx	lr

08010720 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8010720:	780b      	ldrb	r3, [r1, #0]
 8010722:	f892 c000 	ldrb.w	ip, [r2]
 8010726:	ea83 030c 	eor.w	r3, r3, ip
 801072a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 801072c:	784b      	ldrb	r3, [r1, #1]
 801072e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8010732:	ea83 030c 	eor.w	r3, r3, ip
 8010736:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8010738:	788b      	ldrb	r3, [r1, #2]
 801073a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801073e:	ea83 030c 	eor.w	r3, r3, ip
 8010742:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8010744:	78cb      	ldrb	r3, [r1, #3]
 8010746:	f892 c003 	ldrb.w	ip, [r2, #3]
 801074a:	ea83 030c 	eor.w	r3, r3, ip
 801074e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8010750:	790b      	ldrb	r3, [r1, #4]
 8010752:	f892 c004 	ldrb.w	ip, [r2, #4]
 8010756:	ea83 030c 	eor.w	r3, r3, ip
 801075a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 801075c:	794b      	ldrb	r3, [r1, #5]
 801075e:	f892 c005 	ldrb.w	ip, [r2, #5]
 8010762:	ea83 030c 	eor.w	r3, r3, ip
 8010766:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8010768:	798b      	ldrb	r3, [r1, #6]
 801076a:	f892 c006 	ldrb.w	ip, [r2, #6]
 801076e:	ea83 030c 	eor.w	r3, r3, ip
 8010772:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8010774:	79cb      	ldrb	r3, [r1, #7]
 8010776:	f892 c007 	ldrb.w	ip, [r2, #7]
 801077a:	ea83 030c 	eor.w	r3, r3, ip
 801077e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8010780:	7a0b      	ldrb	r3, [r1, #8]
 8010782:	f892 c008 	ldrb.w	ip, [r2, #8]
 8010786:	ea83 030c 	eor.w	r3, r3, ip
 801078a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 801078c:	7a4b      	ldrb	r3, [r1, #9]
 801078e:	f892 c009 	ldrb.w	ip, [r2, #9]
 8010792:	ea83 030c 	eor.w	r3, r3, ip
 8010796:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8010798:	7a8b      	ldrb	r3, [r1, #10]
 801079a:	f892 c00a 	ldrb.w	ip, [r2, #10]
 801079e:	ea83 030c 	eor.w	r3, r3, ip
 80107a2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80107a4:	7acb      	ldrb	r3, [r1, #11]
 80107a6:	f892 c00b 	ldrb.w	ip, [r2, #11]
 80107aa:	ea83 030c 	eor.w	r3, r3, ip
 80107ae:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80107b0:	7b0b      	ldrb	r3, [r1, #12]
 80107b2:	f892 c00c 	ldrb.w	ip, [r2, #12]
 80107b6:	ea83 030c 	eor.w	r3, r3, ip
 80107ba:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80107bc:	7b4b      	ldrb	r3, [r1, #13]
 80107be:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80107c2:	ea83 030c 	eor.w	r3, r3, ip
 80107c6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80107c8:	7b8b      	ldrb	r3, [r1, #14]
 80107ca:	f892 c00e 	ldrb.w	ip, [r2, #14]
 80107ce:	ea83 030c 	eor.w	r3, r3, ip
 80107d2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80107d4:	7bcb      	ldrb	r3, [r1, #15]
 80107d6:	7bd2      	ldrb	r2, [r2, #15]
 80107d8:	4053      	eors	r3, r2
 80107da:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80107dc:	4770      	bx	lr

080107de <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80107de:	b508      	push	{r3, lr}
    xor_block(d, k);
 80107e0:	f7ff ff5d 	bl	801069e <xor_block>
}
 80107e4:	bd08      	pop	{r3, pc}
	...

080107e8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80107e8:	7802      	ldrb	r2, [r0, #0]
 80107ea:	4b18      	ldr	r3, [pc, #96]	@ (801084c <shift_sub_rows+0x64>)
 80107ec:	5c9a      	ldrb	r2, [r3, r2]
 80107ee:	7002      	strb	r2, [r0, #0]
 80107f0:	7902      	ldrb	r2, [r0, #4]
 80107f2:	5c9a      	ldrb	r2, [r3, r2]
 80107f4:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80107f6:	7a02      	ldrb	r2, [r0, #8]
 80107f8:	5c9a      	ldrb	r2, [r3, r2]
 80107fa:	7202      	strb	r2, [r0, #8]
 80107fc:	7b02      	ldrb	r2, [r0, #12]
 80107fe:	5c9a      	ldrb	r2, [r3, r2]
 8010800:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8010802:	7842      	ldrb	r2, [r0, #1]
 8010804:	7941      	ldrb	r1, [r0, #5]
 8010806:	5c59      	ldrb	r1, [r3, r1]
 8010808:	7041      	strb	r1, [r0, #1]
 801080a:	7a41      	ldrb	r1, [r0, #9]
 801080c:	5c59      	ldrb	r1, [r3, r1]
 801080e:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8010810:	7b41      	ldrb	r1, [r0, #13]
 8010812:	5c59      	ldrb	r1, [r3, r1]
 8010814:	7241      	strb	r1, [r0, #9]
 8010816:	5c9a      	ldrb	r2, [r3, r2]
 8010818:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801081a:	7882      	ldrb	r2, [r0, #2]
 801081c:	7a81      	ldrb	r1, [r0, #10]
 801081e:	5c59      	ldrb	r1, [r3, r1]
 8010820:	7081      	strb	r1, [r0, #2]
 8010822:	5c9a      	ldrb	r2, [r3, r2]
 8010824:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8010826:	7982      	ldrb	r2, [r0, #6]
 8010828:	7b81      	ldrb	r1, [r0, #14]
 801082a:	5c59      	ldrb	r1, [r3, r1]
 801082c:	7181      	strb	r1, [r0, #6]
 801082e:	5c9a      	ldrb	r2, [r3, r2]
 8010830:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8010832:	7bc2      	ldrb	r2, [r0, #15]
 8010834:	7ac1      	ldrb	r1, [r0, #11]
 8010836:	5c59      	ldrb	r1, [r3, r1]
 8010838:	73c1      	strb	r1, [r0, #15]
 801083a:	79c1      	ldrb	r1, [r0, #7]
 801083c:	5c59      	ldrb	r1, [r3, r1]
 801083e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8010840:	78c1      	ldrb	r1, [r0, #3]
 8010842:	5c59      	ldrb	r1, [r3, r1]
 8010844:	71c1      	strb	r1, [r0, #7]
 8010846:	5c9b      	ldrb	r3, [r3, r2]
 8010848:	70c3      	strb	r3, [r0, #3]
}
 801084a:	4770      	bx	lr
 801084c:	08016db0 	.word	0x08016db0

08010850 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8010850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010854:	b084      	sub	sp, #16
 8010856:	4604      	mov	r4, r0
    block_copy(st, dt);
 8010858:	4601      	mov	r1, r0
 801085a:	4668      	mov	r0, sp
 801085c:	f7ff fef3 	bl	8010646 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8010860:	f89d c000 	ldrb.w	ip, [sp]
 8010864:	4b6a      	ldr	r3, [pc, #424]	@ (8010a10 <mix_sub_columns+0x1c0>)
 8010866:	f813 000c 	ldrb.w	r0, [r3, ip]
 801086a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801086e:	4a69      	ldr	r2, [pc, #420]	@ (8010a14 <mix_sub_columns+0x1c4>)
 8010870:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010874:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8010878:	4967      	ldr	r1, [pc, #412]	@ (8010a18 <mix_sub_columns+0x1c8>)
 801087a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801087e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8010882:	5dce      	ldrb	r6, [r1, r7]
 8010884:	ea80 0009 	eor.w	r0, r0, r9
 8010888:	4068      	eors	r0, r5
 801088a:	4070      	eors	r0, r6
 801088c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801088e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010892:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010896:	f812 900e 	ldrb.w	r9, [r2, lr]
 801089a:	ea80 0a0a 	eor.w	sl, r0, sl
 801089e:	ea89 090a 	eor.w	r9, r9, sl
 80108a2:	ea86 0609 	eor.w	r6, r6, r9
 80108a6:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80108a8:	f811 8008 	ldrb.w	r8, [r1, r8]
 80108ac:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80108b0:	5dd6      	ldrb	r6, [r2, r7]
 80108b2:	ea80 0008 	eor.w	r0, r0, r8
 80108b6:	ea8e 0000 	eor.w	r0, lr, r0
 80108ba:	4070      	eors	r0, r6
 80108bc:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80108be:	f812 600c 	ldrb.w	r6, [r2, ip]
 80108c2:	5dd8      	ldrb	r0, [r3, r7]
 80108c4:	ea86 0608 	eor.w	r6, r6, r8
 80108c8:	4075      	eors	r5, r6
 80108ca:	4068      	eors	r0, r5
 80108cc:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80108ce:	f89d c004 	ldrb.w	ip, [sp, #4]
 80108d2:	f813 000c 	ldrb.w	r0, [r3, ip]
 80108d6:	f89d 8009 	ldrb.w	r8, [sp, #9]
 80108da:	f812 9008 	ldrb.w	r9, [r2, r8]
 80108de:	f89d e00e 	ldrb.w	lr, [sp, #14]
 80108e2:	f811 500e 	ldrb.w	r5, [r1, lr]
 80108e6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80108ea:	5dce      	ldrb	r6, [r1, r7]
 80108ec:	ea80 0009 	eor.w	r0, r0, r9
 80108f0:	4068      	eors	r0, r5
 80108f2:	4070      	eors	r0, r6
 80108f4:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80108f6:	f811 000c 	ldrb.w	r0, [r1, ip]
 80108fa:	f813 a008 	ldrb.w	sl, [r3, r8]
 80108fe:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010902:	ea80 0a0a 	eor.w	sl, r0, sl
 8010906:	ea89 090a 	eor.w	r9, r9, sl
 801090a:	ea86 0609 	eor.w	r6, r6, r9
 801090e:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8010910:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010914:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010918:	5dd6      	ldrb	r6, [r2, r7]
 801091a:	ea80 0008 	eor.w	r0, r0, r8
 801091e:	ea8e 0000 	eor.w	r0, lr, r0
 8010922:	4070      	eors	r0, r6
 8010924:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8010926:	f812 600c 	ldrb.w	r6, [r2, ip]
 801092a:	5dd8      	ldrb	r0, [r3, r7]
 801092c:	ea86 0608 	eor.w	r6, r6, r8
 8010930:	4075      	eors	r5, r6
 8010932:	4068      	eors	r0, r5
 8010934:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8010936:	f89d c008 	ldrb.w	ip, [sp, #8]
 801093a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801093e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8010942:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010946:	f89d e002 	ldrb.w	lr, [sp, #2]
 801094a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801094e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8010952:	5dce      	ldrb	r6, [r1, r7]
 8010954:	ea80 0009 	eor.w	r0, r0, r9
 8010958:	4068      	eors	r0, r5
 801095a:	4070      	eors	r0, r6
 801095c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801095e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010962:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010966:	f812 900e 	ldrb.w	r9, [r2, lr]
 801096a:	ea80 0a0a 	eor.w	sl, r0, sl
 801096e:	ea89 090a 	eor.w	r9, r9, sl
 8010972:	ea86 0609 	eor.w	r6, r6, r9
 8010976:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8010978:	f811 8008 	ldrb.w	r8, [r1, r8]
 801097c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010980:	5dd6      	ldrb	r6, [r2, r7]
 8010982:	ea80 0008 	eor.w	r0, r0, r8
 8010986:	ea8e 0000 	eor.w	r0, lr, r0
 801098a:	4070      	eors	r0, r6
 801098c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801098e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010992:	5dd8      	ldrb	r0, [r3, r7]
 8010994:	ea86 0608 	eor.w	r6, r6, r8
 8010998:	4075      	eors	r5, r6
 801099a:	4068      	eors	r0, r5
 801099c:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 801099e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 80109a2:	5d98      	ldrb	r0, [r3, r6]
 80109a4:	f89d 8001 	ldrb.w	r8, [sp, #1]
 80109a8:	f812 9008 	ldrb.w	r9, [r2, r8]
 80109ac:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80109b0:	f811 c007 	ldrb.w	ip, [r1, r7]
 80109b4:	f89d 500b 	ldrb.w	r5, [sp, #11]
 80109b8:	f811 e005 	ldrb.w	lr, [r1, r5]
 80109bc:	ea80 0009 	eor.w	r0, r0, r9
 80109c0:	ea8c 0000 	eor.w	r0, ip, r0
 80109c4:	ea8e 0000 	eor.w	r0, lr, r0
 80109c8:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80109ca:	5d88      	ldrb	r0, [r1, r6]
 80109cc:	f813 a008 	ldrb.w	sl, [r3, r8]
 80109d0:	f812 9007 	ldrb.w	r9, [r2, r7]
 80109d4:	ea80 0a0a 	eor.w	sl, r0, sl
 80109d8:	ea89 090a 	eor.w	r9, r9, sl
 80109dc:	ea8e 0e09 	eor.w	lr, lr, r9
 80109e0:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80109e4:	f811 1008 	ldrb.w	r1, [r1, r8]
 80109e8:	f813 e007 	ldrb.w	lr, [r3, r7]
 80109ec:	5d57      	ldrb	r7, [r2, r5]
 80109ee:	4048      	eors	r0, r1
 80109f0:	ea8e 0000 	eor.w	r0, lr, r0
 80109f4:	4078      	eors	r0, r7
 80109f6:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80109f8:	5d92      	ldrb	r2, [r2, r6]
 80109fa:	5d5b      	ldrb	r3, [r3, r5]
 80109fc:	4051      	eors	r1, r2
 80109fe:	ea8c 0c01 	eor.w	ip, ip, r1
 8010a02:	ea83 030c 	eor.w	r3, r3, ip
 8010a06:	73e3      	strb	r3, [r4, #15]
  }
 8010a08:	b004      	add	sp, #16
 8010a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a0e:	bf00      	nop
 8010a10:	08016cb0 	.word	0x08016cb0
 8010a14:	08016bb0 	.word	0x08016bb0
 8010a18:	08016db0 	.word	0x08016db0

08010a1c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8010a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a20:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8010a22:	f1a1 0310 	sub.w	r3, r1, #16
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	2b10      	cmp	r3, #16
 8010a2a:	d81a      	bhi.n	8010a62 <lorawan_aes_set_key+0x46>
 8010a2c:	460d      	mov	r5, r1
 8010a2e:	4a3a      	ldr	r2, [pc, #232]	@ (8010b18 <lorawan_aes_set_key+0xfc>)
 8010a30:	fa22 f303 	lsr.w	r3, r2, r3
 8010a34:	f013 0f01 	tst.w	r3, #1
 8010a38:	d013      	beq.n	8010a62 <lorawan_aes_set_key+0x46>
        break;
    default:
        ctx->rnd = 0;
        return ( uint8_t )-1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8010a3a:	460a      	mov	r2, r1
 8010a3c:	4601      	mov	r1, r0
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f7ff fe22 	bl	8010688 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8010a44:	f105 031c 	add.w	r3, r5, #28
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8010a50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010a54:	3b01      	subs	r3, #1
 8010a56:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010a5a:	462b      	mov	r3, r5
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	e029      	b.n	8010ab6 <lorawan_aes_set_key+0x9a>
        ctx->rnd = 0;
 8010a62:	2300      	movs	r3, #0
 8010a64:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
        return ( uint8_t )-1;
 8010a68:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8010a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if( keylen > 24 && cc % keylen == 16 )
 8010a6e:	2d18      	cmp	r5, #24
 8010a70:	d901      	bls.n	8010a76 <lorawan_aes_set_key+0x5a>
 8010a72:	2a10      	cmp	r2, #16
 8010a74:	d047      	beq.n	8010b06 <lorawan_aes_set_key+0xea>
        tt = cc - keylen;
 8010a76:	1b5a      	subs	r2, r3, r5
 8010a78:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8010a7a:	f814 9002 	ldrb.w	r9, [r4, r2]
 8010a7e:	ea89 0808 	eor.w	r8, r9, r8
 8010a82:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8010a86:	f102 0801 	add.w	r8, r2, #1
 8010a8a:	f814 8008 	ldrb.w	r8, [r4, r8]
 8010a8e:	f100 0901 	add.w	r9, r0, #1
 8010a92:	ea88 0707 	eor.w	r7, r8, r7
 8010a96:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8010a9a:	1c97      	adds	r7, r2, #2
 8010a9c:	5de7      	ldrb	r7, [r4, r7]
 8010a9e:	f100 0802 	add.w	r8, r0, #2
 8010aa2:	407e      	eors	r6, r7
 8010aa4:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010aa8:	3203      	adds	r2, #3
 8010aaa:	5ca6      	ldrb	r6, [r4, r2]
 8010aac:	1cc2      	adds	r2, r0, #3
 8010aae:	4071      	eors	r1, r6
 8010ab0:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010ab2:	3304      	adds	r3, #4
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	4573      	cmp	r3, lr
 8010ab8:	d22c      	bcs.n	8010b14 <lorawan_aes_set_key+0xf8>
        t0 = ctx->ksch[cc - 4];
 8010aba:	4618      	mov	r0, r3
 8010abc:	1f1a      	subs	r2, r3, #4
 8010abe:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8010ac2:	1eda      	subs	r2, r3, #3
 8010ac4:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8010ac6:	1e9a      	subs	r2, r3, #2
 8010ac8:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8010aca:	1e5a      	subs	r2, r3, #1
 8010acc:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8010ace:	fbb3 f2f5 	udiv	r2, r3, r5
 8010ad2:	fb05 3212 	mls	r2, r5, r2, r3
 8010ad6:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 8010ada:	d1c8      	bne.n	8010a6e <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 8010adc:	4a0f      	ldr	r2, [pc, #60]	@ (8010b1c <lorawan_aes_set_key+0x100>)
 8010ade:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010ae2:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8010ae6:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8010ae8:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8010aea:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8010aee:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8010af2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010af6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8010afa:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8010afe:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8010b02:	46c8      	mov	r8, r9
 8010b04:	e7b7      	b.n	8010a76 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 8010b06:	4a05      	ldr	r2, [pc, #20]	@ (8010b1c <lorawan_aes_set_key+0x100>)
 8010b08:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8010b0c:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8010b0e:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8010b10:	5c51      	ldrb	r1, [r2, r1]
 8010b12:	e7b0      	b.n	8010a76 <lorawan_aes_set_key+0x5a>
    return 0;
 8010b14:	2000      	movs	r0, #0
 8010b16:	e7a8      	b.n	8010a6a <lorawan_aes_set_key+0x4e>
 8010b18:	00010101 	.word	0x00010101
 8010b1c:	08016db0 	.word	0x08016db0

08010b20 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8010b20:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8010b24:	b31b      	cbz	r3, 8010b6e <lorawan_aes_encrypt+0x4e>
{
 8010b26:	b570      	push	{r4, r5, r6, lr}
 8010b28:	b084      	sub	sp, #16
 8010b2a:	460e      	mov	r6, r1
 8010b2c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8010b2e:	4601      	mov	r1, r0
 8010b30:	4668      	mov	r0, sp
 8010b32:	f7ff fdf5 	bl	8010720 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8010b36:	2401      	movs	r4, #1
 8010b38:	e009      	b.n	8010b4e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8010b3a:	4668      	mov	r0, sp
 8010b3c:	f7ff fe88 	bl	8010850 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8010b40:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8010b44:	4668      	mov	r0, sp
 8010b46:	f7ff fe4a 	bl	80107de <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8010b4a:	3401      	adds	r4, #1
 8010b4c:	b2e4      	uxtb	r4, r4
 8010b4e:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 8010b52:	42a3      	cmp	r3, r4
 8010b54:	d8f1      	bhi.n	8010b3a <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8010b56:	4668      	mov	r0, sp
 8010b58:	f7ff fe46 	bl	80107e8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8010b5c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010b60:	4669      	mov	r1, sp
 8010b62:	4630      	mov	r0, r6
 8010b64:	f7ff fddc 	bl	8010720 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8010b68:	2000      	movs	r0, #0
}
 8010b6a:	b004      	add	sp, #16
 8010b6c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8010b6e:	20ff      	movs	r0, #255	@ 0xff
}
 8010b70:	4770      	bx	lr
	...

08010b74 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010b74:	2300      	movs	r3, #0
 8010b76:	2b0a      	cmp	r3, #10
 8010b78:	d816      	bhi.n	8010ba8 <GetKeyByID+0x34>
{
 8010b7a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8010bac <GetKeyByID+0x38>)
 8010b7e:	6814      	ldr	r4, [r2, #0]
 8010b80:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010b84:	4422      	add	r2, r4
 8010b86:	7e12      	ldrb	r2, [r2, #24]
 8010b88:	4282      	cmp	r2, r0
 8010b8a:	d006      	beq.n	8010b9a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	2b0a      	cmp	r3, #10
 8010b92:	d9f3      	bls.n	8010b7c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010b94:	2003      	movs	r0, #3
}
 8010b96:	bc10      	pop	{r4}
 8010b98:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010b9a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010b9e:	3318      	adds	r3, #24
 8010ba0:	441c      	add	r4, r3
 8010ba2:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	e7f6      	b.n	8010b96 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010ba8:	2003      	movs	r0, #3
}
 8010baa:	4770      	bx	lr
 8010bac:	200011d4 	.word	0x200011d4

08010bb0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8010bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb4:	b0cc      	sub	sp, #304	@ 0x130
 8010bb6:	9d52      	ldr	r5, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010bb8:	b3a9      	cbz	r1, 8010c26 <ComputeCmac+0x76>
 8010bba:	4607      	mov	r7, r0
 8010bbc:	4616      	mov	r6, r2
 8010bbe:	461c      	mov	r4, r3
 8010bc0:	4688      	mov	r8, r1
 8010bc2:	b395      	cbz	r5, 8010c2a <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8010bc4:	a802      	add	r0, sp, #8
 8010bc6:	f7ff fbd9 	bl	801037c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8010bca:	a901      	add	r1, sp, #4
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f7ff ffd1 	bl	8010b74 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	b118      	cbz	r0, 8010bde <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	b04c      	add	sp, #304	@ 0x130
 8010bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8010bde:	9901      	ldr	r1, [sp, #4]
 8010be0:	3101      	adds	r1, #1
 8010be2:	a802      	add	r0, sp, #8
 8010be4:	f7ff fbd9 	bl	801039a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8010be8:	b127      	cbz	r7, 8010bf4 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8010bea:	2210      	movs	r2, #16
 8010bec:	4639      	mov	r1, r7
 8010bee:	a802      	add	r0, sp, #8
 8010bf0:	f7ff fbda 	bl	80103a8 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	4641      	mov	r1, r8
 8010bf8:	a802      	add	r0, sp, #8
 8010bfa:	f7ff fbd5 	bl	80103a8 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8010bfe:	a902      	add	r1, sp, #8
 8010c00:	a848      	add	r0, sp, #288	@ 0x120
 8010c02:	f7ff fc3f 	bl	8010484 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8010c06:	f89d 3120 	ldrb.w	r3, [sp, #288]	@ 0x120
 8010c0a:	f89d 2121 	ldrb.w	r2, [sp, #289]	@ 0x121
 8010c0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010c12:	f89d 2122 	ldrb.w	r2, [sp, #290]	@ 0x122
 8010c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c1a:	f89d 2123 	ldrb.w	r2, [sp, #291]	@ 0x123
 8010c1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010c22:	602b      	str	r3, [r5, #0]
 8010c24:	e7d7      	b.n	8010bd6 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8010c26:	2402      	movs	r4, #2
 8010c28:	e7d5      	b.n	8010bd6 <ComputeCmac+0x26>
 8010c2a:	2402      	movs	r4, #2
 8010c2c:	e7d3      	b.n	8010bd6 <ComputeCmac+0x26>
	...

08010c30 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8010c30:	b140      	cbz	r0, 8010c44 <SecureElementInit+0x14>
{
 8010c32:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8010c34:	4a04      	ldr	r2, [pc, #16]	@ (8010c48 <SecureElementInit+0x18>)
 8010c36:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8010c38:	22d8      	movs	r2, #216	@ 0xd8
 8010c3a:	4904      	ldr	r1, [pc, #16]	@ (8010c4c <SecureElementInit+0x1c>)
 8010c3c:	f000 fac9 	bl	80111d2 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8010c40:	2000      	movs	r0, #0
}
 8010c42:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010c44:	2002      	movs	r0, #2
}
 8010c46:	4770      	bx	lr
 8010c48:	200011d4 	.word	0x200011d4
 8010c4c:	0803e500 	.word	0x0803e500

08010c50 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010c50:	2300      	movs	r3, #0
 8010c52:	2b0a      	cmp	r3, #10
 8010c54:	d816      	bhi.n	8010c84 <SecureElementGetKeyByID+0x34>
{
 8010c56:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010c58:	4a0b      	ldr	r2, [pc, #44]	@ (8010c88 <SecureElementGetKeyByID+0x38>)
 8010c5a:	6814      	ldr	r4, [r2, #0]
 8010c5c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010c60:	4422      	add	r2, r4
 8010c62:	7e12      	ldrb	r2, [r2, #24]
 8010c64:	4282      	cmp	r2, r0
 8010c66:	d006      	beq.n	8010c76 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010c68:	3301      	adds	r3, #1
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	2b0a      	cmp	r3, #10
 8010c6e:	d9f3      	bls.n	8010c58 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010c70:	2003      	movs	r0, #3
}
 8010c72:	bc10      	pop	{r4}
 8010c74:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010c76:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010c7a:	3318      	adds	r3, #24
 8010c7c:	441c      	add	r4, r3
 8010c7e:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010c80:	2000      	movs	r0, #0
 8010c82:	e7f6      	b.n	8010c72 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010c84:	2003      	movs	r0, #3
}
 8010c86:	4770      	bx	lr
 8010c88:	200011d4 	.word	0x200011d4

08010c8c <PrintKey>:
{
 8010c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c90:	b099      	sub	sp, #100	@ 0x64
 8010c92:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8010c94:	a917      	add	r1, sp, #92	@ 0x5c
 8010c96:	f7ff ffdb 	bl	8010c50 <SecureElementGetKeyByID>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d042      	beq.n	8010d26 <PrintKey+0x9a>
}
 8010ca0:	b019      	add	sp, #100	@ 0x64
 8010ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 8010ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010caa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010cae:	689b      	ldr	r3, [r3, #8]
 8010cb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010cb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010cb4:	785a      	ldrb	r2, [r3, #1]
 8010cb6:	9214      	str	r2, [sp, #80]	@ 0x50
 8010cb8:	7899      	ldrb	r1, [r3, #2]
 8010cba:	9115      	str	r1, [sp, #84]	@ 0x54
 8010cbc:	78da      	ldrb	r2, [r3, #3]
 8010cbe:	7919      	ldrb	r1, [r3, #4]
 8010cc0:	7958      	ldrb	r0, [r3, #5]
 8010cc2:	799c      	ldrb	r4, [r3, #6]
 8010cc4:	79dd      	ldrb	r5, [r3, #7]
 8010cc6:	7a1e      	ldrb	r6, [r3, #8]
 8010cc8:	7a5f      	ldrb	r7, [r3, #9]
 8010cca:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8010cce:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8010cd2:	f893 800c 	ldrb.w	r8, [r3, #12]
 8010cd6:	f893 900d 	ldrb.w	r9, [r3, #13]
 8010cda:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8010cde:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8010ce2:	7c1b      	ldrb	r3, [r3, #16]
 8010ce4:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ce6:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8010cea:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8010cee:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8010cf2:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8010cf6:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8010cfa:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8010cfe:	9709      	str	r7, [sp, #36]	@ 0x24
 8010d00:	9608      	str	r6, [sp, #32]
 8010d02:	9507      	str	r5, [sp, #28]
 8010d04:	9406      	str	r4, [sp, #24]
 8010d06:	9005      	str	r0, [sp, #20]
 8010d08:	9104      	str	r1, [sp, #16]
 8010d0a:	9203      	str	r2, [sp, #12]
 8010d0c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8010d0e:	9102      	str	r1, [sp, #8]
 8010d10:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010d12:	9201      	str	r2, [sp, #4]
 8010d14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	4b09      	ldr	r3, [pc, #36]	@ (8010d40 <PrintKey+0xb4>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	4611      	mov	r1, r2
 8010d1e:	2002      	movs	r0, #2
 8010d20:	f002 fc0e 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8010d24:	e7bc      	b.n	8010ca0 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010d26:	2b0a      	cmp	r3, #10
 8010d28:	d8ba      	bhi.n	8010ca0 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8010d2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010d2e:	4905      	ldr	r1, [pc, #20]	@ (8010d44 <PrintKey+0xb8>)
 8010d30:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8010d34:	42a2      	cmp	r2, r4
 8010d36:	d0b6      	beq.n	8010ca6 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010d38:	3301      	adds	r3, #1
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	e7f3      	b.n	8010d26 <PrintKey+0x9a>
 8010d3e:	bf00      	nop
 8010d40:	08016384 	.word	0x08016384
 8010d44:	08016eb0 	.word	0x08016eb0

08010d48 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8010d48:	2b0b      	cmp	r3, #11
 8010d4a:	d80a      	bhi.n	8010d62 <SecureElementComputeAesCmac+0x1a>
{
 8010d4c:	b500      	push	{lr}
 8010d4e:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8010d50:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010d54:	f8cd c000 	str.w	ip, [sp]
 8010d58:	f7ff ff2a 	bl	8010bb0 <ComputeCmac>
}
 8010d5c:	b003      	add	sp, #12
 8010d5e:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010d62:	2003      	movs	r0, #3
}
 8010d64:	4770      	bx	lr

08010d66 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8010d66:	b190      	cbz	r0, 8010d8e <SecureElementVerifyAesCmac+0x28>
{
 8010d68:	b510      	push	{r4, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	468c      	mov	ip, r1
 8010d6e:	4614      	mov	r4, r2
 8010d70:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8010d72:	2000      	movs	r0, #0
 8010d74:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010d76:	aa03      	add	r2, sp, #12
 8010d78:	9200      	str	r2, [sp, #0]
 8010d7a:	4662      	mov	r2, ip
 8010d7c:	f7ff ff18 	bl	8010bb0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010d80:	b918      	cbnz	r0, 8010d8a <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8010d82:	9b03      	ldr	r3, [sp, #12]
 8010d84:	42a3      	cmp	r3, r4
 8010d86:	d000      	beq.n	8010d8a <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010d88:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8010d8a:	b004      	add	sp, #16
 8010d8c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010d8e:	2002      	movs	r0, #2
}
 8010d90:	4770      	bx	lr

08010d92 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8010d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d96:	b0be      	sub	sp, #248	@ 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8010d98:	b348      	cbz	r0, 8010dee <SecureElementAesEncrypt+0x5c>
 8010d9a:	460d      	mov	r5, r1
 8010d9c:	4614      	mov	r4, r2
 8010d9e:	461e      	mov	r6, r3
 8010da0:	4607      	mov	r7, r0
 8010da2:	b33b      	cbz	r3, 8010df4 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8010da4:	f011 0f0f 	tst.w	r1, #15
 8010da8:	d127      	bne.n	8010dfa <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010daa:	22f0      	movs	r2, #240	@ 0xf0
 8010dac:	2100      	movs	r1, #0
 8010dae:	a801      	add	r0, sp, #4
 8010db0:	f000 fa27 	bl	8011202 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8010db4:	4669      	mov	r1, sp
 8010db6:	4620      	mov	r0, r4
 8010db8:	f7ff fedc 	bl	8010b74 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010dbc:	4680      	mov	r8, r0
 8010dbe:	b118      	cbz	r0, 8010dc8 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8010dc0:	4640      	mov	r0, r8
 8010dc2:	b03e      	add	sp, #248	@ 0xf8
 8010dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8010dc8:	aa01      	add	r2, sp, #4
 8010dca:	2110      	movs	r1, #16
 8010dcc:	9800      	ldr	r0, [sp, #0]
 8010dce:	3001      	adds	r0, #1
 8010dd0:	f7ff fe24 	bl	8010a1c <lorawan_aes_set_key>
        uint8_t block = 0;
 8010dd4:	4644      	mov	r4, r8
        while( size != 0 )
 8010dd6:	e007      	b.n	8010de8 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8010dd8:	aa01      	add	r2, sp, #4
 8010dda:	1931      	adds	r1, r6, r4
 8010ddc:	1938      	adds	r0, r7, r4
 8010dde:	f7ff fe9f 	bl	8010b20 <lorawan_aes_encrypt>
            block = block + 16;
 8010de2:	3410      	adds	r4, #16
 8010de4:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 8010de6:	3d10      	subs	r5, #16
        while( size != 0 )
 8010de8:	2d00      	cmp	r5, #0
 8010dea:	d1f5      	bne.n	8010dd8 <SecureElementAesEncrypt+0x46>
 8010dec:	e7e8      	b.n	8010dc0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8010dee:	f04f 0802 	mov.w	r8, #2
 8010df2:	e7e5      	b.n	8010dc0 <SecureElementAesEncrypt+0x2e>
 8010df4:	f04f 0802 	mov.w	r8, #2
 8010df8:	e7e2      	b.n	8010dc0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010dfa:	f04f 0805 	mov.w	r8, #5
 8010dfe:	e7df      	b.n	8010dc0 <SecureElementAesEncrypt+0x2e>

08010e00 <SecureElementSetKey>:
{
 8010e00:	b530      	push	{r4, r5, lr}
 8010e02:	b085      	sub	sp, #20
    if( key == NULL )
 8010e04:	2900      	cmp	r1, #0
 8010e06:	d038      	beq.n	8010e7a <SecureElementSetKey+0x7a>
 8010e08:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	2b0a      	cmp	r3, #10
 8010e0e:	d830      	bhi.n	8010e72 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010e10:	4a1b      	ldr	r2, [pc, #108]	@ (8010e80 <SecureElementSetKey+0x80>)
 8010e12:	6811      	ldr	r1, [r2, #0]
 8010e14:	461c      	mov	r4, r3
 8010e16:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010e1a:	440a      	add	r2, r1
 8010e1c:	7e12      	ldrb	r2, [r2, #24]
 8010e1e:	4282      	cmp	r2, r0
 8010e20:	d002      	beq.n	8010e28 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010e22:	3301      	adds	r3, #1
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	e7f1      	b.n	8010e0c <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8010e28:	280d      	cmp	r0, #13
 8010e2a:	d00a      	beq.n	8010e42 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010e2c:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8010e30:	3418      	adds	r4, #24
 8010e32:	1908      	adds	r0, r1, r4
 8010e34:	2210      	movs	r2, #16
 8010e36:	4661      	mov	r1, ip
 8010e38:	3001      	adds	r0, #1
 8010e3a:	f000 f9ca 	bl	80111d2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8010e3e:	2500      	movs	r5, #0
 8010e40:	e018      	b.n	8010e74 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8010e42:	2300      	movs	r3, #0
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	9301      	str	r3, [sp, #4]
 8010e48:	9302      	str	r3, [sp, #8]
 8010e4a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8010e4c:	466b      	mov	r3, sp
 8010e4e:	220c      	movs	r2, #12
 8010e50:	2110      	movs	r1, #16
 8010e52:	4660      	mov	r0, ip
 8010e54:	f7ff ff9d 	bl	8010d92 <SecureElementAesEncrypt>
 8010e58:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010e5a:	4b09      	ldr	r3, [pc, #36]	@ (8010e80 <SecureElementSetKey+0x80>)
 8010e5c:	6818      	ldr	r0, [r3, #0]
 8010e5e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8010e62:	3418      	adds	r4, #24
 8010e64:	4420      	add	r0, r4
 8010e66:	2210      	movs	r2, #16
 8010e68:	4669      	mov	r1, sp
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	f000 f9b1 	bl	80111d2 <memcpy1>
                return retval;
 8010e70:	e000      	b.n	8010e74 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010e72:	2503      	movs	r5, #3
}
 8010e74:	4628      	mov	r0, r5
 8010e76:	b005      	add	sp, #20
 8010e78:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010e7a:	2502      	movs	r5, #2
 8010e7c:	e7fa      	b.n	8010e74 <SecureElementSetKey+0x74>
 8010e7e:	bf00      	nop
 8010e80:	200011d4 	.word	0x200011d4

08010e84 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010e84:	b1d0      	cbz	r0, 8010ebc <SecureElementDeriveAndStoreKey+0x38>
{
 8010e86:	b510      	push	{r4, lr}
 8010e88:	b084      	sub	sp, #16
 8010e8a:	4614      	mov	r4, r2
 8010e8c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8010e8e:	2a0c      	cmp	r2, #12
 8010e90:	d101      	bne.n	8010e96 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010e92:	290b      	cmp	r1, #11
 8010e94:	d114      	bne.n	8010ec0 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8010e96:	2300      	movs	r3, #0
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	9301      	str	r3, [sp, #4]
 8010e9c:	9302      	str	r3, [sp, #8]
 8010e9e:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8010ea0:	466b      	mov	r3, sp
 8010ea2:	460a      	mov	r2, r1
 8010ea4:	2110      	movs	r1, #16
 8010ea6:	4660      	mov	r0, ip
 8010ea8:	f7ff ff73 	bl	8010d92 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010eac:	b108      	cbz	r0, 8010eb2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010eae:	b004      	add	sp, #16
 8010eb0:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010eb2:	4669      	mov	r1, sp
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f7ff ffa3 	bl	8010e00 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010eba:	e7f8      	b.n	8010eae <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010ebc:	2002      	movs	r0, #2
}
 8010ebe:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010ec0:	2003      	movs	r0, #3
 8010ec2:	e7f4      	b.n	8010eae <SecureElementDeriveAndStoreKey+0x2a>

08010ec4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8010ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ec6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8010eca:	9c07      	ldr	r4, [sp, #28]
 8010ecc:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010ece:	b35b      	cbz	r3, 8010f28 <SecureElementProcessJoinAccept+0x64>
 8010ed0:	461f      	mov	r7, r3
 8010ed2:	b35c      	cbz	r4, 8010f2c <SecureElementProcessJoinAccept+0x68>
 8010ed4:	b366      	cbz	r6, 8010f30 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010ed6:	2d21      	cmp	r5, #33	@ 0x21
 8010ed8:	d82c      	bhi.n	8010f34 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8010eda:	462a      	mov	r2, r5
 8010edc:	4619      	mov	r1, r3
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f000 f977 	bl	80111d2 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010ee4:	1c63      	adds	r3, r4, #1
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	1e69      	subs	r1, r5, #1
 8010eea:	18b8      	adds	r0, r7, r2
 8010eec:	f7ff ff51 	bl	8010d92 <SecureElementAesEncrypt>
 8010ef0:	bb10      	cbnz	r0, 8010f38 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010ef2:	7ae3      	ldrb	r3, [r4, #11]
 8010ef4:	09db      	lsrs	r3, r3, #7
 8010ef6:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8010ef8:	1961      	adds	r1, r4, r5
 8010efa:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8010efe:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8010f02:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010f06:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8010f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010f0e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8010f12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8010f16:	b98b      	cbnz	r3, 8010f3c <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8010f18:	2301      	movs	r3, #1
 8010f1a:	1f29      	subs	r1, r5, #4
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	f7ff ff22 	bl	8010d66 <SecureElementVerifyAesCmac>
 8010f22:	b140      	cbz	r0, 8010f36 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010f24:	2001      	movs	r0, #1
 8010f26:	e006      	b.n	8010f36 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8010f28:	2002      	movs	r0, #2
 8010f2a:	e004      	b.n	8010f36 <SecureElementProcessJoinAccept+0x72>
 8010f2c:	2002      	movs	r0, #2
 8010f2e:	e002      	b.n	8010f36 <SecureElementProcessJoinAccept+0x72>
 8010f30:	2002      	movs	r0, #2
 8010f32:	e000      	b.n	8010f36 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010f34:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010f38:	2007      	movs	r0, #7
 8010f3a:	e7fc      	b.n	8010f36 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010f3c:	2004      	movs	r0, #4
 8010f3e:	e7fa      	b.n	8010f36 <SecureElementProcessJoinAccept+0x72>

08010f40 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8010f40:	b140      	cbz	r0, 8010f54 <SecureElementSetDevEui+0x14>
{
 8010f42:	b508      	push	{r3, lr}
 8010f44:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8010f46:	2208      	movs	r2, #8
 8010f48:	4b03      	ldr	r3, [pc, #12]	@ (8010f58 <SecureElementSetDevEui+0x18>)
 8010f4a:	6818      	ldr	r0, [r3, #0]
 8010f4c:	f000 f941 	bl	80111d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010f50:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010f52:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010f54:	2002      	movs	r0, #2
}
 8010f56:	4770      	bx	lr
 8010f58:	200011d4 	.word	0x200011d4

08010f5c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8010f5c:	b138      	cbz	r0, 8010f6e <SecureElementGetDevEui+0x12>
{
 8010f5e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8010f60:	2208      	movs	r2, #8
 8010f62:	4904      	ldr	r1, [pc, #16]	@ (8010f74 <SecureElementGetDevEui+0x18>)
 8010f64:	6809      	ldr	r1, [r1, #0]
 8010f66:	f000 f934 	bl	80111d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010f6a:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010f6c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010f6e:	2002      	movs	r0, #2
}
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	200011d4 	.word	0x200011d4

08010f78 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8010f78:	b148      	cbz	r0, 8010f8e <SecureElementSetJoinEui+0x16>
{
 8010f7a:	b508      	push	{r3, lr}
 8010f7c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8010f7e:	4b05      	ldr	r3, [pc, #20]	@ (8010f94 <SecureElementSetJoinEui+0x1c>)
 8010f80:	6818      	ldr	r0, [r3, #0]
 8010f82:	2208      	movs	r2, #8
 8010f84:	4410      	add	r0, r2
 8010f86:	f000 f924 	bl	80111d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010f8a:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010f8c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010f8e:	2002      	movs	r0, #2
}
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	200011d4 	.word	0x200011d4

08010f98 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8010f98:	b140      	cbz	r0, 8010fac <SecureElementGetJoinEui+0x14>
{
 8010f9a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8010f9c:	4a04      	ldr	r2, [pc, #16]	@ (8010fb0 <SecureElementGetJoinEui+0x18>)
 8010f9e:	6811      	ldr	r1, [r2, #0]
 8010fa0:	2208      	movs	r2, #8
 8010fa2:	4411      	add	r1, r2
 8010fa4:	f000 f915 	bl	80111d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010fa8:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010faa:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010fac:	2002      	movs	r0, #2
}
 8010fae:	4770      	bx	lr
 8010fb0:	200011d4 	.word	0x200011d4

08010fb4 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8010fb4:	2802      	cmp	r0, #2
 8010fb6:	d004      	beq.n	8010fc2 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8010fb8:	4b04      	ldr	r3, [pc, #16]	@ (8010fcc <SecureElementSetDevAddr+0x18>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8010fc2:	4b02      	ldr	r3, [pc, #8]	@ (8010fcc <SecureElementSetDevAddr+0x18>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	6119      	str	r1, [r3, #16]
 8010fc8:	e7f9      	b.n	8010fbe <SecureElementSetDevAddr+0xa>
 8010fca:	bf00      	nop
 8010fcc:	200011d4 	.word	0x200011d4

08010fd0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8010fd0:	b169      	cbz	r1, 8010fee <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8010fd2:	2802      	cmp	r0, #2
 8010fd4:	d005      	beq.n	8010fe2 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8010fd6:	4a07      	ldr	r2, [pc, #28]	@ (8010ff4 <SecureElementGetDevAddr+0x24>)
 8010fd8:	6812      	ldr	r2, [r2, #0]
 8010fda:	6952      	ldr	r2, [r2, #20]
 8010fdc:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8010fde:	2000      	movs	r0, #0
 8010fe0:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8010fe2:	4a04      	ldr	r2, [pc, #16]	@ (8010ff4 <SecureElementGetDevAddr+0x24>)
 8010fe4:	6812      	ldr	r2, [r2, #0]
 8010fe6:	6912      	ldr	r2, [r2, #16]
 8010fe8:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8010fea:	2000      	movs	r0, #0
 8010fec:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8010fee:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8010ff0:	4770      	bx	lr
 8010ff2:	bf00      	nop
 8010ff4:	200011d4 	.word	0x200011d4

08010ff8 <SecureElementInitMcuID>:
{
 8010ff8:	b530      	push	{r4, r5, lr}
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8011000:	2300      	movs	r3, #0
 8011002:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8011004:	a802      	add	r0, sp, #8
 8011006:	f7ff ffa9 	bl	8010f5c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 801100a:	a901      	add	r1, sp, #4
 801100c:	2001      	movs	r0, #1
 801100e:	f7ff ffdf 	bl	8010fd0 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8011012:	b195      	cbz	r5, 801103a <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8011014:	2300      	movs	r3, #0
 8011016:	2b07      	cmp	r3, #7
 8011018:	d808      	bhi.n	801102c <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 801101a:	f103 0210 	add.w	r2, r3, #16
 801101e:	446a      	add	r2, sp
 8011020:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8011024:	b9aa      	cbnz	r2, 8011052 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8011026:	3301      	adds	r3, #1
 8011028:	b2db      	uxtb	r3, r3
 801102a:	e7f4      	b.n	8011016 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 801102c:	2300      	movs	r3, #0
        if( id_init == false )
 801102e:	b923      	cbnz	r3, 801103a <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8011030:	a802      	add	r0, sp, #8
 8011032:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8011034:	a802      	add	r0, sp, #8
 8011036:	f7ff ff83 	bl	8010f40 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 801103a:	b13c      	cbz	r4, 801104c <SecureElementInitMcuID+0x54>
 801103c:	9b01      	ldr	r3, [sp, #4]
 801103e:	b92b      	cbnz	r3, 801104c <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8011040:	a801      	add	r0, sp, #4
 8011042:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8011044:	9901      	ldr	r1, [sp, #4]
 8011046:	2001      	movs	r0, #1
 8011048:	f7ff ffb4 	bl	8010fb4 <SecureElementSetDevAddr>
}
 801104c:	2000      	movs	r0, #0
 801104e:	b005      	add	sp, #20
 8011050:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8011052:	2301      	movs	r3, #1
 8011054:	e7eb      	b.n	801102e <SecureElementInitMcuID+0x36>
	...

08011058 <PrintIds>:
{
 8011058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801105a:	b08f      	sub	sp, #60	@ 0x3c
 801105c:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 801105e:	2400      	movs	r4, #0
 8011060:	9409      	str	r4, [sp, #36]	@ 0x24
    SecureElementGetDevEui( devEui );
 8011062:	a80a      	add	r0, sp, #40	@ 0x28
 8011064:	f7ff ff7a 	bl	8010f5c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8011068:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801106c:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8011070:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 8011074:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8011078:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 801107c:	f89d 702d 	ldrb.w	r7, [sp, #45]	@ 0x2d
 8011080:	f89d c02e 	ldrb.w	ip, [sp, #46]	@ 0x2e
 8011084:	f89d e02f 	ldrb.w	lr, [sp, #47]	@ 0x2f
 8011088:	f8cd e01c 	str.w	lr, [sp, #28]
 801108c:	f8cd c018 	str.w	ip, [sp, #24]
 8011090:	9705      	str	r7, [sp, #20]
 8011092:	9604      	str	r6, [sp, #16]
 8011094:	9003      	str	r0, [sp, #12]
 8011096:	9102      	str	r1, [sp, #8]
 8011098:	9201      	str	r2, [sp, #4]
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	4b20      	ldr	r3, [pc, #128]	@ (8011120 <PrintIds+0xc8>)
 801109e:	4622      	mov	r2, r4
 80110a0:	4621      	mov	r1, r4
 80110a2:	2002      	movs	r0, #2
 80110a4:	f002 fa4c 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 80110a8:	a80c      	add	r0, sp, #48	@ 0x30
 80110aa:	f7ff ff75 	bl	8010f98 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 80110ae:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80110b2:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 80110b6:	f89d 1032 	ldrb.w	r1, [sp, #50]	@ 0x32
 80110ba:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 80110be:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80110c2:	f89d 7035 	ldrb.w	r7, [sp, #53]	@ 0x35
 80110c6:	f89d c036 	ldrb.w	ip, [sp, #54]	@ 0x36
 80110ca:	f89d e037 	ldrb.w	lr, [sp, #55]	@ 0x37
 80110ce:	f8cd e01c 	str.w	lr, [sp, #28]
 80110d2:	f8cd c018 	str.w	ip, [sp, #24]
 80110d6:	9705      	str	r7, [sp, #20]
 80110d8:	9604      	str	r6, [sp, #16]
 80110da:	9003      	str	r0, [sp, #12]
 80110dc:	9102      	str	r1, [sp, #8]
 80110de:	9201      	str	r2, [sp, #4]
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	4b10      	ldr	r3, [pc, #64]	@ (8011124 <PrintIds+0xcc>)
 80110e4:	4622      	mov	r2, r4
 80110e6:	4621      	mov	r1, r4
 80110e8:	2002      	movs	r0, #2
 80110ea:	f002 fa29 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 80110ee:	a909      	add	r1, sp, #36	@ 0x24
 80110f0:	4628      	mov	r0, r5
 80110f2:	f7ff ff6d 	bl	8010fd0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 80110f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80110fa:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80110fe:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 8011102:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8011106:	9003      	str	r0, [sp, #12]
 8011108:	9102      	str	r1, [sp, #8]
 801110a:	9201      	str	r2, [sp, #4]
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	4b06      	ldr	r3, [pc, #24]	@ (8011128 <PrintIds+0xd0>)
 8011110:	4622      	mov	r2, r4
 8011112:	4621      	mov	r1, r4
 8011114:	2002      	movs	r0, #2
 8011116:	f002 fa13 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 801111a:	b00f      	add	sp, #60	@ 0x3c
 801111c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801111e:	bf00      	nop
 8011120:	080163e0 	.word	0x080163e0
 8011124:	08016420 	.word	0x08016420
 8011128:	08016460 	.word	0x08016460

0801112c <SecureElementPrintKeys>:
{
 801112c:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 801112e:	2000      	movs	r0, #0
 8011130:	f7ff fdac 	bl	8010c8c <PrintKey>
    PrintKey( NWK_KEY );
 8011134:	2001      	movs	r0, #1
 8011136:	f7ff fda9 	bl	8010c8c <PrintKey>
    PrintKey( APP_S_KEY );
 801113a:	2009      	movs	r0, #9
 801113c:	f7ff fda6 	bl	8010c8c <PrintKey>
    PrintKey( NWK_S_KEY );
 8011140:	2008      	movs	r0, #8
 8011142:	f7ff fda3 	bl	8010c8c <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8011146:	2000      	movs	r0, #0
 8011148:	f7ff ff86 	bl	8011058 <PrintIds>
}
 801114c:	2000      	movs	r0, #0
 801114e:	bd08      	pop	{r3, pc}

08011150 <SecureElementPrintSessionKeys>:
{
 8011150:	b510      	push	{r4, lr}
 8011152:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8011154:	200b      	movs	r0, #11
 8011156:	f7ff fd99 	bl	8010c8c <PrintKey>
    PrintKey( MC_KE_KEY );
 801115a:	200c      	movs	r0, #12
 801115c:	f7ff fd96 	bl	8010c8c <PrintKey>
    PrintKey( APP_S_KEY );
 8011160:	2009      	movs	r0, #9
 8011162:	f7ff fd93 	bl	8010c8c <PrintKey>
    PrintKey( NWK_S_KEY );
 8011166:	2008      	movs	r0, #8
 8011168:	f7ff fd90 	bl	8010c8c <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 801116c:	200a      	movs	r0, #10
 801116e:	f7ff fd8d 	bl	8010c8c <PrintKey>
    PrintIds( mode );
 8011172:	4620      	mov	r0, r4
 8011174:	f7ff ff70 	bl	8011058 <PrintIds>
}
 8011178:	2000      	movs	r0, #0
 801117a:	bd10      	pop	{r4, pc}

0801117c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801117c:	4b09      	ldr	r3, [pc, #36]	@ (80111a4 <rand1+0x28>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	4909      	ldr	r1, [pc, #36]	@ (80111a8 <rand1+0x2c>)
 8011182:	f243 0039 	movw	r0, #12345	@ 0x3039
 8011186:	fb01 0002 	mla	r0, r1, r2, r0
 801118a:	6018      	str	r0, [r3, #0]
 801118c:	2303      	movs	r3, #3
 801118e:	fba3 2300 	umull	r2, r3, r3, r0
 8011192:	1ac2      	subs	r2, r0, r3
 8011194:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8011198:	0f9b      	lsrs	r3, r3, #30
 801119a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801119e:	1ac0      	subs	r0, r0, r3
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	20000120 	.word	0x20000120
 80111a8:	41c64e6d 	.word	0x41c64e6d

080111ac <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80111ac:	4b01      	ldr	r3, [pc, #4]	@ (80111b4 <srand1+0x8>)
 80111ae:	6018      	str	r0, [r3, #0]
}
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop
 80111b4:	20000120 	.word	0x20000120

080111b8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4605      	mov	r5, r0
 80111bc:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80111be:	f7ff ffdd 	bl	801117c <rand1>
 80111c2:	1b61      	subs	r1, r4, r5
 80111c4:	3101      	adds	r1, #1
 80111c6:	fb90 f3f1 	sdiv	r3, r0, r1
 80111ca:	fb01 0013 	mls	r0, r1, r3, r0
}
 80111ce:	4428      	add	r0, r5
 80111d0:	bd38      	pop	{r3, r4, r5, pc}

080111d2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80111d2:	e004      	b.n	80111de <memcpy1+0xc>
    {
        *dst++ = *src++;
 80111d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111d8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 80111dc:	461a      	mov	r2, r3
 80111de:	1e53      	subs	r3, r2, #1
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	2a00      	cmp	r2, #0
 80111e4:	d1f6      	bne.n	80111d4 <memcpy1+0x2>
    }
}
 80111e6:	4770      	bx	lr

080111e8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 80111e8:	1e53      	subs	r3, r2, #1
 80111ea:	4418      	add	r0, r3
    while( size-- )
 80111ec:	e004      	b.n	80111f8 <memcpyr+0x10>
    {
        *dst-- = *src++;
 80111ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111f2:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80111f6:	461a      	mov	r2, r3
 80111f8:	1e53      	subs	r3, r2, #1
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	d1f6      	bne.n	80111ee <memcpyr+0x6>
    }
}
 8011200:	4770      	bx	lr

08011202 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8011202:	e002      	b.n	801120a <memset1+0x8>
    {
        *dst++ = value;
 8011204:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8011208:	461a      	mov	r2, r3
 801120a:	1e53      	subs	r3, r2, #1
 801120c:	b29b      	uxth	r3, r3
 801120e:	2a00      	cmp	r2, #0
 8011210:	d1f8      	bne.n	8011204 <memset1+0x2>
    }
}
 8011212:	4770      	bx	lr

08011214 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8011214:	b1f0      	cbz	r0, 8011254 <Crc32+0x40>
{
 8011216:	b510      	push	{r4, lr}
 8011218:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801121a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 801121e:	f04f 30ff 	mov.w	r0, #4294967295
 8011222:	e00e      	b.n	8011242 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8011224:	f340 0c00 	sbfx	ip, r0, #0, #1
 8011228:	4a0b      	ldr	r2, [pc, #44]	@ (8011258 <Crc32+0x44>)
 801122a:	ea0c 0202 	and.w	r2, ip, r2
 801122e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8011232:	3301      	adds	r3, #1
 8011234:	b29b      	uxth	r3, r3
 8011236:	2b07      	cmp	r3, #7
 8011238:	d9f4      	bls.n	8011224 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 801123a:	f10e 0e01 	add.w	lr, lr, #1
 801123e:	fa1f fe8e 	uxth.w	lr, lr
 8011242:	458e      	cmp	lr, r1
 8011244:	d204      	bcs.n	8011250 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8011246:	f814 300e 	ldrb.w	r3, [r4, lr]
 801124a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 801124c:	2300      	movs	r3, #0
 801124e:	e7f2      	b.n	8011236 <Crc32+0x22>
        }
    }

    return ~crc;
 8011250:	43c0      	mvns	r0, r0
}
 8011252:	bd10      	pop	{r4, pc}
        return 0;
 8011254:	2000      	movs	r0, #0
}
 8011256:	4770      	bx	lr
 8011258:	edb88320 	.word	0xedb88320

0801125c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 801125c:	2001      	movs	r0, #1
 801125e:	4770      	bx	lr

08011260 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8011260:	280a      	cmp	r0, #10
 8011262:	d807      	bhi.n	8011274 <RadioGetLoRaBandwidthInHz+0x14>
 8011264:	e8df f000 	tbb	[pc, r0]
 8011268:	17110b20 	.word	0x17110b20
 801126c:	061e1c1a 	.word	0x061e1c1a
 8011270:	0e08      	.short	0x0e08
 8011272:	14          	.byte	0x14
 8011273:	00          	.byte	0x00
 8011274:	2000      	movs	r0, #0
 8011276:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8011278:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 801127c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801127e:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 8011282:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8011284:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 8011288:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801128a:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 801128e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8011290:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 8011294:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8011296:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 801129a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801129c:	4804      	ldr	r0, [pc, #16]	@ (80112b0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801129e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80112a0:	4804      	ldr	r0, [pc, #16]	@ (80112b4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80112a2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80112a4:	4804      	ldr	r0, [pc, #16]	@ (80112b8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80112a6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80112a8:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	0001e848 	.word	0x0001e848
 80112b4:	0003d090 	.word	0x0003d090
 80112b8:	0007a120 	.word	0x0007a120

080112bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80112bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80112c0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80112c2:	b953      	cbnz	r3, 80112da <RadioGetGfskTimeOnAirNumerator+0x1e>
 80112c4:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 80112c6:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80112c8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80112ca:	b141      	cbz	r1, 80112de <RadioGetGfskTimeOnAirNumerator+0x22>
 80112cc:	2302      	movs	r3, #2
 80112ce:	f89d 0000 	ldrb.w	r0, [sp]
 80112d2:	4418      	add	r0, r3
}
 80112d4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80112d8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80112da:	2300      	movs	r3, #0
 80112dc:	e7f3      	b.n	80112c6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80112de:	2300      	movs	r3, #0
 80112e0:	e7f5      	b.n	80112ce <RadioGetGfskTimeOnAirNumerator+0x12>

080112e2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80112e2:	b570      	push	{r4, r5, r6, lr}
 80112e4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80112e8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 80112ec:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80112ee:	f1a1 0c05 	sub.w	ip, r1, #5
 80112f2:	f1bc 0f01 	cmp.w	ip, #1
 80112f6:	d931      	bls.n	801135c <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80112f8:	b918      	cbnz	r0, 8011302 <RadioGetLoRaTimeOnAirNumerator+0x20>
 80112fa:	f1a1 060b 	sub.w	r6, r1, #11
 80112fe:	2e01      	cmp	r6, #1
 8011300:	d934      	bls.n	801136c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8011302:	2801      	cmp	r0, #1
 8011304:	d02e      	beq.n	8011364 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8011306:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011308:	f89d c014 	ldrb.w	ip, [sp, #20]
 801130c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8011310:	b385      	cbz	r5, 8011374 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8011312:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011314:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8011316:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8011318:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801131c:	b364      	cbz	r4, 8011378 <RadioGetLoRaTimeOnAirNumerator+0x96>
 801131e:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8011322:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8011324:	2906      	cmp	r1, #6
 8011326:	d904      	bls.n	8011332 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8011328:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 801132c:	b10e      	cbz	r6, 8011332 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801132e:	1e88      	subs	r0, r1, #2
 8011330:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8011332:	f1bc 0f00 	cmp.w	ip, #0
 8011336:	db22      	blt.n	801137e <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8011338:	4484      	add	ip, r0
 801133a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801133e:	fb9c fcf0 	sdiv	ip, ip, r0
 8011342:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8011346:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 801134a:	2906      	cmp	r1, #6
 801134c:	d801      	bhi.n	8011352 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 801134e:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8011352:	0080      	lsls	r0, r0, #2
 8011354:	3001      	adds	r0, #1
 8011356:	3902      	subs	r1, #2
}
 8011358:	4088      	lsls	r0, r1
 801135a:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 801135c:	2b0b      	cmp	r3, #11
 801135e:	d8cb      	bhi.n	80112f8 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8011360:	230c      	movs	r3, #12
 8011362:	e7c9      	b.n	80112f8 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011364:	290c      	cmp	r1, #12
 8011366:	d003      	beq.n	8011370 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8011368:	2600      	movs	r6, #0
 801136a:	e7cd      	b.n	8011308 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 801136c:	2601      	movs	r6, #1
 801136e:	e7cb      	b.n	8011308 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8011370:	2601      	movs	r6, #1
 8011372:	e7c9      	b.n	8011308 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8011374:	2000      	movs	r0, #0
 8011376:	e7cd      	b.n	8011314 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8011378:	f04f 0e14 	mov.w	lr, #20
 801137c:	e7d1      	b.n	8011322 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 801137e:	f04f 0c00 	mov.w	ip, #0
 8011382:	e7d9      	b.n	8011338 <RadioGetLoRaTimeOnAirNumerator+0x56>

08011384 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8011384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011386:	b085      	sub	sp, #20
 8011388:	460e      	mov	r6, r1
 801138a:	4615      	mov	r5, r2
 801138c:	4619      	mov	r1, r3
 801138e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8011392:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8011396:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 801139a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 801139e:	b120      	cbz	r0, 80113aa <RadioTimeOnAir+0x26>
 80113a0:	2801      	cmp	r0, #1
 80113a2:	d011      	beq.n	80113c8 <RadioTimeOnAir+0x44>
 80113a4:	2501      	movs	r5, #1
 80113a6:	2400      	movs	r4, #0
 80113a8:	e008      	b.n	80113bc <RadioTimeOnAir+0x38>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80113aa:	9701      	str	r7, [sp, #4]
 80113ac:	9400      	str	r4, [sp, #0]
 80113ae:	4628      	mov	r0, r5
 80113b0:	f7ff ff84 	bl	80112bc <RadioGetGfskTimeOnAirNumerator>
 80113b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113b8:	fb03 f400 	mul.w	r4, r3, r0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80113bc:	1960      	adds	r0, r4, r5
 80113be:	3801      	subs	r0, #1
}
 80113c0:	fbb0 f0f5 	udiv	r0, r0, r5
 80113c4:	b005      	add	sp, #20
 80113c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80113c8:	9702      	str	r7, [sp, #8]
 80113ca:	9401      	str	r4, [sp, #4]
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	4613      	mov	r3, r2
 80113d0:	460a      	mov	r2, r1
 80113d2:	4629      	mov	r1, r5
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7ff ff84 	bl	80112e2 <RadioGetLoRaTimeOnAirNumerator>
 80113da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113de:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80113e2:	4b03      	ldr	r3, [pc, #12]	@ (80113f0 <RadioTimeOnAir+0x6c>)
 80113e4:	5d98      	ldrb	r0, [r3, r6]
 80113e6:	f7ff ff3b 	bl	8011260 <RadioGetLoRaBandwidthInHz>
 80113ea:	4605      	mov	r5, r0
        break;
 80113ec:	e7e6      	b.n	80113bc <RadioTimeOnAir+0x38>
 80113ee:	bf00      	nop
 80113f0:	08016f34 	.word	0x08016f34

080113f4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80113f4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80113f6:	4b05      	ldr	r3, [pc, #20]	@ (801140c <RadioOnTxTimeoutProcess+0x18>)
 80113f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80113fc:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80113fe:	4b04      	ldr	r3, [pc, #16]	@ (8011410 <RadioOnTxTimeoutProcess+0x1c>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	b113      	cbz	r3, 801140a <RadioOnTxTimeoutProcess+0x16>
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	b103      	cbz	r3, 801140a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8011408:	4798      	blx	r3
    }
}
 801140a:	bd08      	pop	{r3, pc}
 801140c:	48000400 	.word	0x48000400
 8011410:	20001264 	.word	0x20001264

08011414 <RadioOnTxTimeoutIrq>:
{
 8011414:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8011416:	f7ff ffed 	bl	80113f4 <RadioOnTxTimeoutProcess>
}
 801141a:	bd08      	pop	{r3, pc}

0801141c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801141c:	b508      	push	{r3, lr}
 801141e:	4b05      	ldr	r3, [pc, #20]	@ (8011434 <RadioOnRxTimeoutProcess+0x18>)
 8011420:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011424:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011426:	4b04      	ldr	r3, [pc, #16]	@ (8011438 <RadioOnRxTimeoutProcess+0x1c>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	b113      	cbz	r3, 8011432 <RadioOnRxTimeoutProcess+0x16>
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	b103      	cbz	r3, 8011432 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8011430:	4798      	blx	r3
    }
}
 8011432:	bd08      	pop	{r3, pc}
 8011434:	48000400 	.word	0x48000400
 8011438:	20001264 	.word	0x20001264

0801143c <RadioOnRxTimeoutIrq>:
{
 801143c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 801143e:	f7ff ffed 	bl	801141c <RadioOnRxTimeoutProcess>
}
 8011442:	bd08      	pop	{r3, pc}

08011444 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8011444:	2001      	movs	r0, #1
 8011446:	4770      	bx	lr

08011448 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8011448:	2001      	movs	r0, #1
 801144a:	4770      	bx	lr

0801144c <RadioSetMaxPayloadLength>:
{
 801144c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 801144e:	2801      	cmp	r0, #1
 8011450:	d004      	beq.n	801145c <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8011452:	4b0a      	ldr	r3, [pc, #40]	@ (801147c <RadioSetMaxPayloadLength+0x30>)
 8011454:	7d5b      	ldrb	r3, [r3, #21]
 8011456:	2b01      	cmp	r3, #1
 8011458:	d008      	beq.n	801146c <RadioSetMaxPayloadLength+0x20>
}
 801145a:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801145c:	4b08      	ldr	r3, [pc, #32]	@ (8011480 <RadioSetMaxPayloadLength+0x34>)
 801145e:	7019      	strb	r1, [r3, #0]
 8011460:	4806      	ldr	r0, [pc, #24]	@ (801147c <RadioSetMaxPayloadLength+0x30>)
 8011462:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011464:	300e      	adds	r0, #14
 8011466:	f001 fd65 	bl	8012f34 <SUBGRF_SetPacketParams>
 801146a:	e7f6      	b.n	801145a <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801146c:	4b04      	ldr	r3, [pc, #16]	@ (8011480 <RadioSetMaxPayloadLength+0x34>)
 801146e:	7019      	strb	r1, [r3, #0]
 8011470:	4802      	ldr	r0, [pc, #8]	@ (801147c <RadioSetMaxPayloadLength+0x30>)
 8011472:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011474:	300e      	adds	r0, #14
 8011476:	f001 fd5d 	bl	8012f34 <SUBGRF_SetPacketParams>
}
 801147a:	e7ee      	b.n	801145a <RadioSetMaxPayloadLength+0xe>
 801147c:	20001208 	.word	0x20001208
 8011480:	20000124 	.word	0x20000124

08011484 <RadioRead>:
{
 8011484:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8011486:	f001 f8f9 	bl	801267c <SUBGRF_ReadRegister>
}
 801148a:	bd08      	pop	{r3, pc}

0801148c <RadioWrite>:
{
 801148c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801148e:	f001 f8e5 	bl	801265c <SUBGRF_WriteRegister>
}
 8011492:	bd08      	pop	{r3, pc}

08011494 <RadioTxCw>:
{
 8011494:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8011496:	f001 fe75 	bl	8013184 <SUBGRF_SetRfTxPower>
 801149a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801149c:	210e      	movs	r1, #14
 801149e:	f640 101f 	movw	r0, #2335	@ 0x91f
 80114a2:	f001 f8db 	bl	801265c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80114a6:	2101      	movs	r1, #1
 80114a8:	4620      	mov	r0, r4
 80114aa:	f001 fe57 	bl	801315c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80114ae:	f001 faa5 	bl	80129fc <SUBGRF_SetTxContinuousWave>
}
 80114b2:	bd10      	pop	{r4, pc}

080114b4 <RadioTxPrbs>:
{
 80114b4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80114b6:	2101      	movs	r1, #1
 80114b8:	4b07      	ldr	r3, [pc, #28]	@ (80114d8 <RadioTxPrbs+0x24>)
 80114ba:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 80114be:	f001 fe4d 	bl	801315c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80114c2:	212d      	movs	r1, #45	@ 0x2d
 80114c4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80114c8:	f7ff ffe0 	bl	801148c <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80114cc:	f001 fa9d 	bl	8012a0a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80114d0:	4802      	ldr	r0, [pc, #8]	@ (80114dc <RadioTxPrbs+0x28>)
 80114d2:	f001 f9d3 	bl	801287c <SUBGRF_SetTx>
}
 80114d6:	bd08      	pop	{r3, pc}
 80114d8:	20001208 	.word	0x20001208
 80114dc:	000fffff 	.word	0x000fffff

080114e0 <RadioSetRxDutyCycle>:
{
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	4604      	mov	r4, r0
 80114e4:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80114e6:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80114ea:	4e09      	ldr	r6, [pc, #36]	@ (8011510 <RadioSetRxDutyCycle+0x30>)
 80114ec:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80114ee:	2300      	movs	r3, #0
 80114f0:	461a      	mov	r2, r3
 80114f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80114f6:	4608      	mov	r0, r1
 80114f8:	f001 fb53 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80114fc:	2100      	movs	r1, #0
 80114fe:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8011502:	f001 fe2b 	bl	801315c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8011506:	4629      	mov	r1, r5
 8011508:	4620      	mov	r0, r4
 801150a:	f001 fa47 	bl	801299c <SUBGRF_SetRxDutyCycle>
}
 801150e:	bd70      	pop	{r4, r5, r6, pc}
 8011510:	20001208 	.word	0x20001208

08011514 <RadioRxBoosted>:
{
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8011518:	f001 ff12 	bl	8013340 <RFW_Is_Init>
 801151c:	2801      	cmp	r0, #1
 801151e:	d019      	beq.n	8011554 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011520:	2300      	movs	r3, #0
 8011522:	461a      	mov	r2, r3
 8011524:	f240 2162 	movw	r1, #610	@ 0x262
 8011528:	4608      	mov	r0, r1
 801152a:	f001 fb3a 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801152e:	b9a4      	cbnz	r4, 801155a <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011530:	4c11      	ldr	r4, [pc, #68]	@ (8011578 <RadioRxBoosted+0x64>)
 8011532:	2100      	movs	r1, #0
 8011534:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8011536:	4b11      	ldr	r3, [pc, #68]	@ (801157c <RadioRxBoosted+0x68>)
 8011538:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801153c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801153e:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8011542:	f001 fe0b 	bl	801315c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8011546:	7863      	ldrb	r3, [r4, #1]
 8011548:	b183      	cbz	r3, 801156c <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801154a:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801154e:	f001 fa07 	bl	8012960 <SUBGRF_SetRxBoosted>
}
 8011552:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8011554:	f001 fefc 	bl	8013350 <RFW_ReceiveInit>
 8011558:	e7e9      	b.n	801152e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801155a:	4d09      	ldr	r5, [pc, #36]	@ (8011580 <RadioRxBoosted+0x6c>)
 801155c:	4621      	mov	r1, r4
 801155e:	4628      	mov	r0, r5
 8011560:	f002 fd12 	bl	8013f88 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011564:	4628      	mov	r0, r5
 8011566:	f002 fcc9 	bl	8013efc <UTIL_TIMER_Start>
 801156a:	e7e1      	b.n	8011530 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801156c:	4b02      	ldr	r3, [pc, #8]	@ (8011578 <RadioRxBoosted+0x64>)
 801156e:	6898      	ldr	r0, [r3, #8]
 8011570:	0180      	lsls	r0, r0, #6
 8011572:	f001 f9f5 	bl	8012960 <SUBGRF_SetRxBoosted>
}
 8011576:	e7ec      	b.n	8011552 <RadioRxBoosted+0x3e>
 8011578:	20001208 	.word	0x20001208
 801157c:	48000400 	.word	0x48000400
 8011580:	200011d8 	.word	0x200011d8

08011584 <RadioStandby>:
{
 8011584:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8011586:	2000      	movs	r0, #0
 8011588:	f001 f95e 	bl	8012848 <SUBGRF_SetStandby>
}
 801158c:	bd08      	pop	{r3, pc}

0801158e <RadioGetStatus>:
{
 801158e:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8011590:	f001 f858 	bl	8012644 <SUBGRF_GetOperatingMode>
 8011594:	2805      	cmp	r0, #5
 8011596:	d005      	beq.n	80115a4 <RadioGetStatus+0x16>
 8011598:	2807      	cmp	r0, #7
 801159a:	d005      	beq.n	80115a8 <RadioGetStatus+0x1a>
 801159c:	2804      	cmp	r0, #4
 801159e:	d105      	bne.n	80115ac <RadioGetStatus+0x1e>
 80115a0:	2002      	movs	r0, #2
 80115a2:	e002      	b.n	80115aa <RadioGetStatus+0x1c>
            return RF_RX_RUNNING;
 80115a4:	2001      	movs	r0, #1
 80115a6:	e000      	b.n	80115aa <RadioGetStatus+0x1c>
            return RF_CAD;
 80115a8:	2003      	movs	r0, #3
}
 80115aa:	bd08      	pop	{r3, pc}
            return RF_IDLE;
 80115ac:	2000      	movs	r0, #0
 80115ae:	e7fc      	b.n	80115aa <RadioGetStatus+0x1c>

080115b0 <RadioIrqProcess>:
{
 80115b0:	b530      	push	{r4, r5, lr}
 80115b2:	b083      	sub	sp, #12
    uint8_t size = 0;
 80115b4:	2300      	movs	r3, #0
 80115b6:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80115ba:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80115bc:	4ba5      	ldr	r3, [pc, #660]	@ (8011854 <RadioIrqProcess+0x2a4>)
 80115be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80115c2:	2b20      	cmp	r3, #32
 80115c4:	d829      	bhi.n	801161a <RadioIrqProcess+0x6a>
 80115c6:	b21a      	sxth	r2, r3
 80115c8:	2a00      	cmp	r2, #0
 80115ca:	f000 8140 	beq.w	801184e <RadioIrqProcess+0x29e>
 80115ce:	3b01      	subs	r3, #1
 80115d0:	2b1f      	cmp	r3, #31
 80115d2:	f200 813c 	bhi.w	801184e <RadioIrqProcess+0x29e>
 80115d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80115da:	0063      	.short	0x0063
 80115dc:	013a007f 	.word	0x013a007f
 80115e0:	013a00f7 	.word	0x013a00f7
 80115e4:	013a013a 	.word	0x013a013a
 80115e8:	013a0127 	.word	0x013a0127
 80115ec:	013a013a 	.word	0x013a013a
 80115f0:	013a013a 	.word	0x013a013a
 80115f4:	013a013a 	.word	0x013a013a
 80115f8:	013a0134 	.word	0x013a0134
 80115fc:	013a013a 	.word	0x013a013a
 8011600:	013a013a 	.word	0x013a013a
 8011604:	013a013a 	.word	0x013a013a
 8011608:	013a013a 	.word	0x013a013a
 801160c:	013a013a 	.word	0x013a013a
 8011610:	013a013a 	.word	0x013a013a
 8011614:	013a013a 	.word	0x013a013a
 8011618:	0155      	.short	0x0155
 801161a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801161e:	f000 80b3 	beq.w	8011788 <RadioIrqProcess+0x1d8>
 8011622:	d814      	bhi.n	801164e <RadioIrqProcess+0x9e>
 8011624:	2b40      	cmp	r3, #64	@ 0x40
 8011626:	f000 8146 	beq.w	80118b6 <RadioIrqProcess+0x306>
 801162a:	2b80      	cmp	r3, #128	@ 0x80
 801162c:	f040 810f 	bne.w	801184e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011630:	2000      	movs	r0, #0
 8011632:	f001 f909 	bl	8012848 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011636:	4b88      	ldr	r3, [pc, #544]	@ (8011858 <RadioIrqProcess+0x2a8>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	f000 8107 	beq.w	801184e <RadioIrqProcess+0x29e>
 8011640:	699b      	ldr	r3, [r3, #24]
 8011642:	2b00      	cmp	r3, #0
 8011644:	f000 8103 	beq.w	801184e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8011648:	2000      	movs	r0, #0
 801164a:	4798      	blx	r3
 801164c:	e0ff      	b.n	801184e <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 801164e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011652:	f040 80fc 	bne.w	801184e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8011656:	4b81      	ldr	r3, [pc, #516]	@ (801185c <RadioIrqProcess+0x2ac>)
 8011658:	2201      	movs	r2, #1
 801165a:	2100      	movs	r1, #0
 801165c:	2002      	movs	r0, #2
 801165e:	f001 ff6f 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8011662:	f000 ffef 	bl	8012644 <SUBGRF_GetOperatingMode>
 8011666:	2804      	cmp	r0, #4
 8011668:	f000 809b 	beq.w	80117a2 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801166c:	f000 ffea 	bl	8012644 <SUBGRF_GetOperatingMode>
 8011670:	2805      	cmp	r0, #5
 8011672:	f040 80ec 	bne.w	801184e <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8011676:	4b7a      	ldr	r3, [pc, #488]	@ (8011860 <RadioIrqProcess+0x2b0>)
 8011678:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801167c:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 801167e:	4879      	ldr	r0, [pc, #484]	@ (8011864 <RadioIrqProcess+0x2b4>)
 8011680:	f002 fbe2 	bl	8013e48 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011684:	2000      	movs	r0, #0
 8011686:	f001 f8df 	bl	8012848 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801168a:	4b73      	ldr	r3, [pc, #460]	@ (8011858 <RadioIrqProcess+0x2a8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	f000 80dd 	beq.w	801184e <RadioIrqProcess+0x29e>
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	2b00      	cmp	r3, #0
 8011698:	f000 80d9 	beq.w	801184e <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 801169c:	4798      	blx	r3
 801169e:	e0d6      	b.n	801184e <RadioIrqProcess+0x29e>
 80116a0:	4b6f      	ldr	r3, [pc, #444]	@ (8011860 <RadioIrqProcess+0x2b0>)
 80116a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80116a6:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 80116a8:	486f      	ldr	r0, [pc, #444]	@ (8011868 <RadioIrqProcess+0x2b8>)
 80116aa:	f002 fbcd 	bl	8013e48 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80116ae:	2000      	movs	r0, #0
 80116b0:	f001 f8ca 	bl	8012848 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80116b4:	f001 fe46 	bl	8013344 <RFW_Is_LongPacketModeEnabled>
 80116b8:	2801      	cmp	r0, #1
 80116ba:	d00a      	beq.n	80116d2 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80116bc:	4b66      	ldr	r3, [pc, #408]	@ (8011858 <RadioIrqProcess+0x2a8>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	f000 80c4 	beq.w	801184e <RadioIrqProcess+0x29e>
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f000 80c0 	beq.w	801184e <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80116ce:	4798      	blx	r3
 80116d0:	e0bd      	b.n	801184e <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80116d2:	f001 fe40 	bl	8013356 <RFW_DeInit_TxLongPacket>
 80116d6:	e7f1      	b.n	80116bc <RadioIrqProcess+0x10c>
 80116d8:	4b61      	ldr	r3, [pc, #388]	@ (8011860 <RadioIrqProcess+0x2b0>)
 80116da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80116de:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 80116e0:	4860      	ldr	r0, [pc, #384]	@ (8011864 <RadioIrqProcess+0x2b4>)
 80116e2:	f002 fbb1 	bl	8013e48 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80116e6:	4b5b      	ldr	r3, [pc, #364]	@ (8011854 <RadioIrqProcess+0x2a4>)
 80116e8:	785b      	ldrb	r3, [r3, #1]
 80116ea:	b303      	cbz	r3, 801172e <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80116ec:	22ff      	movs	r2, #255	@ 0xff
 80116ee:	f10d 0107 	add.w	r1, sp, #7
 80116f2:	485e      	ldr	r0, [pc, #376]	@ (801186c <RadioIrqProcess+0x2bc>)
 80116f4:	f001 fcdc 	bl	80130b0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80116f8:	485d      	ldr	r0, [pc, #372]	@ (8011870 <RadioIrqProcess+0x2c0>)
 80116fa:	f001 fcf3 	bl	80130e4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80116fe:	4b56      	ldr	r3, [pc, #344]	@ (8011858 <RadioIrqProcess+0x2a8>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 80a3 	beq.w	801184e <RadioIrqProcess+0x29e>
 8011708:	689c      	ldr	r4, [r3, #8]
 801170a:	2c00      	cmp	r4, #0
 801170c:	f000 809f 	beq.w	801184e <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8011710:	4b50      	ldr	r3, [pc, #320]	@ (8011854 <RadioIrqProcess+0x2a4>)
 8011712:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011716:	2b01      	cmp	r3, #1
 8011718:	d11d      	bne.n	8011756 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801171a:	4a4e      	ldr	r2, [pc, #312]	@ (8011854 <RadioIrqProcess+0x2a4>)
 801171c:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 8011720:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 8011724:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011728:	4850      	ldr	r0, [pc, #320]	@ (801186c <RadioIrqProcess+0x2bc>)
 801172a:	47a0      	blx	r4
                break;
 801172c:	e08f      	b.n	801184e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801172e:	2000      	movs	r0, #0
 8011730:	f001 f88a 	bl	8012848 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8011734:	2100      	movs	r1, #0
 8011736:	f640 1002 	movw	r0, #2306	@ 0x902
 801173a:	f000 ff8f 	bl	801265c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801173e:	f640 1044 	movw	r0, #2372	@ 0x944
 8011742:	f000 ff9b 	bl	801267c <SUBGRF_ReadRegister>
 8011746:	f040 0102 	orr.w	r1, r0, #2
 801174a:	b2c9      	uxtb	r1, r1
 801174c:	f640 1044 	movw	r0, #2372	@ 0x944
 8011750:	f000 ff84 	bl	801265c <SUBGRF_WriteRegister>
 8011754:	e7ca      	b.n	80116ec <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8011756:	4c3f      	ldr	r4, [pc, #252]	@ (8011854 <RadioIrqProcess+0x2a4>)
 8011758:	4669      	mov	r1, sp
 801175a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801175c:	f001 fda2 	bl	80132a4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8011760:	4b3d      	ldr	r3, [pc, #244]	@ (8011858 <RadioIrqProcess+0x2a8>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	689d      	ldr	r5, [r3, #8]
 8011766:	9b00      	ldr	r3, [sp, #0]
 8011768:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801176c:	4a41      	ldr	r2, [pc, #260]	@ (8011874 <RadioIrqProcess+0x2c4>)
 801176e:	fb82 1203 	smull	r1, r2, r2, r3
 8011772:	17db      	asrs	r3, r3, #31
 8011774:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011778:	b25b      	sxtb	r3, r3
 801177a:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 801177e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011782:	483a      	ldr	r0, [pc, #232]	@ (801186c <RadioIrqProcess+0x2bc>)
 8011784:	47a8      	blx	r5
                break;
 8011786:	e062      	b.n	801184e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011788:	2000      	movs	r0, #0
 801178a:	f001 f85d 	bl	8012848 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801178e:	4b32      	ldr	r3, [pc, #200]	@ (8011858 <RadioIrqProcess+0x2a8>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d05b      	beq.n	801184e <RadioIrqProcess+0x29e>
 8011796:	699b      	ldr	r3, [r3, #24]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d058      	beq.n	801184e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 801179c:	2001      	movs	r0, #1
 801179e:	4798      	blx	r3
 80117a0:	e055      	b.n	801184e <RadioIrqProcess+0x29e>
 80117a2:	4b2f      	ldr	r3, [pc, #188]	@ (8011860 <RadioIrqProcess+0x2b0>)
 80117a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80117a8:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 80117aa:	482f      	ldr	r0, [pc, #188]	@ (8011868 <RadioIrqProcess+0x2b8>)
 80117ac:	f002 fb4c 	bl	8013e48 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80117b0:	2000      	movs	r0, #0
 80117b2:	f001 f849 	bl	8012848 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80117b6:	4b28      	ldr	r3, [pc, #160]	@ (8011858 <RadioIrqProcess+0x2a8>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d047      	beq.n	801184e <RadioIrqProcess+0x29e>
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d044      	beq.n	801184e <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80117c4:	4798      	blx	r3
 80117c6:	e042      	b.n	801184e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80117c8:	4b2b      	ldr	r3, [pc, #172]	@ (8011878 <RadioIrqProcess+0x2c8>)
 80117ca:	2201      	movs	r2, #1
 80117cc:	2100      	movs	r1, #0
 80117ce:	2002      	movs	r0, #2
 80117d0:	f001 feb6 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80117d4:	4b1f      	ldr	r3, [pc, #124]	@ (8011854 <RadioIrqProcess+0x2a4>)
 80117d6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80117d8:	b3c9      	cbz	r1, 801184e <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80117da:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80117de:	f640 1003 	movw	r0, #2307	@ 0x903
 80117e2:	f7ff fe53 	bl	801148c <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80117e6:	4c1b      	ldr	r4, [pc, #108]	@ (8011854 <RadioIrqProcess+0x2a4>)
 80117e8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80117ec:	f640 1004 	movw	r0, #2308	@ 0x904
 80117f0:	f7ff fe4c 	bl	801148c <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80117f4:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 80117f8:	f640 1005 	movw	r0, #2309	@ 0x905
 80117fc:	f7ff fe46 	bl	801148c <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8011800:	f640 1002 	movw	r0, #2306	@ 0x902
 8011804:	f7ff fe3e 	bl	8011484 <RadioRead>
 8011808:	f040 0101 	orr.w	r1, r0, #1
 801180c:	b2c9      	uxtb	r1, r1
 801180e:	f640 1002 	movw	r0, #2306	@ 0x902
 8011812:	f7ff fe3b 	bl	801148c <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8011816:	2200      	movs	r2, #0
 8011818:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801181a:	4613      	mov	r3, r2
 801181c:	f240 2162 	movw	r1, #610	@ 0x262
 8011820:	4608      	mov	r0, r1
 8011822:	f001 f9be 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
 8011826:	e012      	b.n	801184e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8011828:	4b14      	ldr	r3, [pc, #80]	@ (801187c <RadioIrqProcess+0x2cc>)
 801182a:	2201      	movs	r2, #1
 801182c:	2100      	movs	r1, #0
 801182e:	2002      	movs	r0, #2
 8011830:	f001 fe86 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8011834:	f001 fd84 	bl	8013340 <RFW_Is_Init>
 8011838:	2801      	cmp	r0, #1
 801183a:	d108      	bne.n	801184e <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 801183c:	f001 fd8c 	bl	8013358 <RFW_ReceivePayload>
 8011840:	e005      	b.n	801184e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8011842:	4b0f      	ldr	r3, [pc, #60]	@ (8011880 <RadioIrqProcess+0x2d0>)
 8011844:	2201      	movs	r2, #1
 8011846:	2100      	movs	r1, #0
 8011848:	2002      	movs	r0, #2
 801184a:	f001 fe79 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
}
 801184e:	b003      	add	sp, #12
 8011850:	bd30      	pop	{r4, r5, pc}
 8011852:	bf00      	nop
 8011854:	20001208 	.word	0x20001208
 8011858:	20001264 	.word	0x20001264
 801185c:	0801651c 	.word	0x0801651c
 8011860:	48000400 	.word	0x48000400
 8011864:	200011d8 	.word	0x200011d8
 8011868:	200011f0 	.word	0x200011f0
 801186c:	20001268 	.word	0x20001268
 8011870:	2000122c 	.word	0x2000122c
 8011874:	10624dd3 	.word	0x10624dd3
 8011878:	08016530 	.word	0x08016530
 801187c:	0801653c 	.word	0x0801653c
 8011880:	08016548 	.word	0x08016548
        TimerStop( &RxTimeoutTimer );
 8011884:	4817      	ldr	r0, [pc, #92]	@ (80118e4 <RadioIrqProcess+0x334>)
 8011886:	f002 fadf 	bl	8013e48 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801188a:	4b17      	ldr	r3, [pc, #92]	@ (80118e8 <RadioIrqProcess+0x338>)
 801188c:	785b      	ldrb	r3, [r3, #1]
 801188e:	b173      	cbz	r3, 80118ae <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011890:	4b16      	ldr	r3, [pc, #88]	@ (80118ec <RadioIrqProcess+0x33c>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d0da      	beq.n	801184e <RadioIrqProcess+0x29e>
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d0d7      	beq.n	801184e <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 801189e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80118a0:	4b13      	ldr	r3, [pc, #76]	@ (80118f0 <RadioIrqProcess+0x340>)
 80118a2:	2201      	movs	r2, #1
 80118a4:	2100      	movs	r1, #0
 80118a6:	2002      	movs	r0, #2
 80118a8:	f001 fe4a 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
 80118ac:	e7cf      	b.n	801184e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80118ae:	2000      	movs	r0, #0
 80118b0:	f000 ffca 	bl	8012848 <SUBGRF_SetStandby>
 80118b4:	e7ec      	b.n	8011890 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80118b6:	4b0f      	ldr	r3, [pc, #60]	@ (80118f4 <RadioIrqProcess+0x344>)
 80118b8:	2201      	movs	r2, #1
 80118ba:	2100      	movs	r1, #0
 80118bc:	2002      	movs	r0, #2
 80118be:	f001 fe3f 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80118c2:	4b09      	ldr	r3, [pc, #36]	@ (80118e8 <RadioIrqProcess+0x338>)
 80118c4:	785b      	ldrb	r3, [r3, #1]
 80118c6:	b143      	cbz	r3, 80118da <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80118c8:	4b08      	ldr	r3, [pc, #32]	@ (80118ec <RadioIrqProcess+0x33c>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d0be      	beq.n	801184e <RadioIrqProcess+0x29e>
 80118d0:	691b      	ldr	r3, [r3, #16]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d0bb      	beq.n	801184e <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80118d6:	4798      	blx	r3
}
 80118d8:	e7b9      	b.n	801184e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80118da:	2000      	movs	r0, #0
 80118dc:	f000 ffb4 	bl	8012848 <SUBGRF_SetStandby>
 80118e0:	e7f2      	b.n	80118c8 <RadioIrqProcess+0x318>
 80118e2:	bf00      	nop
 80118e4:	200011d8 	.word	0x200011d8
 80118e8:	20001208 	.word	0x20001208
 80118ec:	20001264 	.word	0x20001264
 80118f0:	08016554 	.word	0x08016554
 80118f4:	08016560 	.word	0x08016560

080118f8 <RadioOnDioIrq>:
{
 80118f8:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80118fa:	4b03      	ldr	r3, [pc, #12]	@ (8011908 <RadioOnDioIrq+0x10>)
 80118fc:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 8011900:	f7ff fe56 	bl	80115b0 <RadioIrqProcess>
}
 8011904:	bd08      	pop	{r3, pc}
 8011906:	bf00      	nop
 8011908:	20001208 	.word	0x20001208

0801190c <RadioGetWakeupTime>:
{
 801190c:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801190e:	f001 fc50 	bl	80131b2 <SUBGRF_GetRadioWakeUpTime>
}
 8011912:	3003      	adds	r0, #3
 8011914:	bd08      	pop	{r3, pc}

08011916 <RadioReadRegisters>:
{
 8011916:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8011918:	f000 ff2e 	bl	8012778 <SUBGRF_ReadRegisters>
}
 801191c:	bd08      	pop	{r3, pc}

0801191e <RadioWriteRegisters>:
{
 801191e:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8011920:	f000 fee8 	bl	80126f4 <SUBGRF_WriteRegisters>
}
 8011924:	bd08      	pop	{r3, pc}

08011926 <RadioRssi>:
{
 8011926:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8011928:	f001 fb92 	bl	8013050 <SUBGRF_GetRssiInst>
}
 801192c:	bd08      	pop	{r3, pc}
	...

08011930 <RadioSetTxContinuousWave>:
{
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8011934:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011938:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 801193c:	f001 f9a4 	bl	8012c88 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011940:	4628      	mov	r0, r5
 8011942:	f001 fc1f 	bl	8013184 <SUBGRF_SetRfTxPower>
 8011946:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011948:	210e      	movs	r1, #14
 801194a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801194e:	f000 fe85 	bl	801265c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8011952:	2101      	movs	r1, #1
 8011954:	4628      	mov	r0, r5
 8011956:	f001 fc01 	bl	801315c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801195a:	f001 f84f 	bl	80129fc <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 801195e:	4d04      	ldr	r5, [pc, #16]	@ (8011970 <RadioSetTxContinuousWave+0x40>)
 8011960:	4621      	mov	r1, r4
 8011962:	4628      	mov	r0, r5
 8011964:	f002 fb10 	bl	8013f88 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8011968:	4628      	mov	r0, r5
 801196a:	f002 fac7 	bl	8013efc <UTIL_TIMER_Start>
}
 801196e:	bd38      	pop	{r3, r4, r5, pc}
 8011970:	200011f0 	.word	0x200011f0

08011974 <RadioSetChannel>:
{
 8011974:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8011976:	f001 f987 	bl	8012c88 <SUBGRF_SetRfFrequency>
}
 801197a:	bd08      	pop	{r3, pc}

0801197c <RadioStartCad>:
{
 801197c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801197e:	2100      	movs	r1, #0
 8011980:	4b07      	ldr	r3, [pc, #28]	@ (80119a0 <RadioStartCad+0x24>)
 8011982:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8011986:	f001 fbe9 	bl	801315c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801198a:	2300      	movs	r3, #0
 801198c:	461a      	mov	r2, r3
 801198e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8011992:	4608      	mov	r0, r1
 8011994:	f001 f905 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8011998:	f001 f824 	bl	80129e4 <SUBGRF_SetCad>
}
 801199c:	bd08      	pop	{r3, pc}
 801199e:	bf00      	nop
 80119a0:	20001208 	.word	0x20001208

080119a4 <RadioRx>:
{
 80119a4:	b538      	push	{r3, r4, r5, lr}
 80119a6:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80119a8:	f001 fcca 	bl	8013340 <RFW_Is_Init>
 80119ac:	2801      	cmp	r0, #1
 80119ae:	d019      	beq.n	80119e4 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80119b0:	2300      	movs	r3, #0
 80119b2:	461a      	mov	r2, r3
 80119b4:	f240 2162 	movw	r1, #610	@ 0x262
 80119b8:	4608      	mov	r0, r1
 80119ba:	f001 f8f2 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80119be:	b9a4      	cbnz	r4, 80119ea <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80119c0:	4c11      	ldr	r4, [pc, #68]	@ (8011a08 <RadioRx+0x64>)
 80119c2:	2100      	movs	r1, #0
 80119c4:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80119c6:	4b11      	ldr	r3, [pc, #68]	@ (8011a0c <RadioRx+0x68>)
 80119c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80119cc:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80119ce:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 80119d2:	f001 fbc3 	bl	801315c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80119d6:	7863      	ldrb	r3, [r4, #1]
 80119d8:	b183      	cbz	r3, 80119fc <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80119da:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80119de:	f000 ff6f 	bl	80128c0 <SUBGRF_SetRx>
}
 80119e2:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 80119e4:	f001 fcb4 	bl	8013350 <RFW_ReceiveInit>
 80119e8:	e7e9      	b.n	80119be <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80119ea:	4d09      	ldr	r5, [pc, #36]	@ (8011a10 <RadioRx+0x6c>)
 80119ec:	4621      	mov	r1, r4
 80119ee:	4628      	mov	r0, r5
 80119f0:	f002 faca 	bl	8013f88 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80119f4:	4628      	mov	r0, r5
 80119f6:	f002 fa81 	bl	8013efc <UTIL_TIMER_Start>
 80119fa:	e7e1      	b.n	80119c0 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80119fc:	4b02      	ldr	r3, [pc, #8]	@ (8011a08 <RadioRx+0x64>)
 80119fe:	6898      	ldr	r0, [r3, #8]
 8011a00:	0180      	lsls	r0, r0, #6
 8011a02:	f000 ff5d 	bl	80128c0 <SUBGRF_SetRx>
}
 8011a06:	e7ec      	b.n	80119e2 <RadioRx+0x3e>
 8011a08:	20001208 	.word	0x20001208
 8011a0c:	48000400 	.word	0x48000400
 8011a10:	200011d8 	.word	0x200011d8

08011a14 <RadioSleep>:
{
 8011a14:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8011a16:	f04f 0004 	mov.w	r0, #4
 8011a1a:	f000 fef5 	bl	8012808 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8011a1e:	2002      	movs	r0, #2
 8011a20:	f7ef fe2a 	bl	8001678 <HAL_Delay>
}
 8011a24:	bd08      	pop	{r3, pc}
	...

08011a28 <RadioSend>:
{
 8011a28:	b570      	push	{r4, r5, r6, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	4605      	mov	r5, r0
 8011a2e:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8011a30:	2300      	movs	r3, #0
 8011a32:	461a      	mov	r2, r3
 8011a34:	f240 2101 	movw	r1, #513	@ 0x201
 8011a38:	4608      	mov	r0, r1
 8011a3a:	f001 f8b2 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
 8011a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8011b3c <RadioSend+0x114>)
 8011a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8011a44:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8011a46:	4e3e      	ldr	r6, [pc, #248]	@ (8011b40 <RadioSend+0x118>)
 8011a48:	2101      	movs	r1, #1
 8011a4a:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8011a4e:	f001 fb85 	bl	801315c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8011a52:	7833      	ldrb	r3, [r6, #0]
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d103      	bne.n	8011a60 <RadioSend+0x38>
 8011a58:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8011a5c:	2b06      	cmp	r3, #6
 8011a5e:	d012      	beq.n	8011a86 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011a60:	f640 0089 	movw	r0, #2185	@ 0x889
 8011a64:	f000 fe0a 	bl	801267c <SUBGRF_ReadRegister>
 8011a68:	f040 0104 	orr.w	r1, r0, #4
 8011a6c:	b2c9      	uxtb	r1, r1
 8011a6e:	f640 0089 	movw	r0, #2185	@ 0x889
 8011a72:	f000 fdf3 	bl	801265c <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8011a76:	4b32      	ldr	r3, [pc, #200]	@ (8011b40 <RadioSend+0x118>)
 8011a78:	781b      	ldrb	r3, [r3, #0]
 8011a7a:	2b03      	cmp	r3, #3
 8011a7c:	d818      	bhi.n	8011ab0 <RadioSend+0x88>
 8011a7e:	e8df f003 	tbb	[pc, r3]
 8011a82:	0d23      	.short	0x0d23
 8011a84:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8011a86:	f640 0089 	movw	r0, #2185	@ 0x889
 8011a8a:	f000 fdf7 	bl	801267c <SUBGRF_ReadRegister>
 8011a8e:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8011a92:	f640 0089 	movw	r0, #2185	@ 0x889
 8011a96:	f000 fde1 	bl	801265c <SUBGRF_WriteRegister>
 8011a9a:	e7ec      	b.n	8011a76 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8011a9c:	4828      	ldr	r0, [pc, #160]	@ (8011b40 <RadioSend+0x118>)
 8011a9e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011aa0:	300e      	adds	r0, #14
 8011aa2:	f001 fa47 	bl	8012f34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	4621      	mov	r1, r4
 8011aaa:	4628      	mov	r0, r5
 8011aac:	f000 ff00 	bl	80128b0 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8011ab0:	4c24      	ldr	r4, [pc, #144]	@ (8011b44 <RadioSend+0x11c>)
 8011ab2:	4b23      	ldr	r3, [pc, #140]	@ (8011b40 <RadioSend+0x118>)
 8011ab4:	6859      	ldr	r1, [r3, #4]
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f002 fa66 	bl	8013f88 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8011abc:	4620      	mov	r0, r4
 8011abe:	f002 fa1d 	bl	8013efc <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8011ac2:	2000      	movs	r0, #0
}
 8011ac4:	b002      	add	sp, #8
 8011ac6:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8011ac8:	f001 fc3a 	bl	8013340 <RFW_Is_Init>
 8011acc:	2801      	cmp	r0, #1
 8011ace:	d00a      	beq.n	8011ae6 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8011ad0:	481b      	ldr	r0, [pc, #108]	@ (8011b40 <RadioSend+0x118>)
 8011ad2:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011ad4:	300e      	adds	r0, #14
 8011ad6:	f001 fa2d 	bl	8012f34 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8011ada:	2200      	movs	r2, #0
 8011adc:	4621      	mov	r1, r4
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f000 fee6 	bl	80128b0 <SUBGRF_SendPayload>
 8011ae4:	e7e4      	b.n	8011ab0 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8011ae6:	f10d 0207 	add.w	r2, sp, #7
 8011aea:	4621      	mov	r1, r4
 8011aec:	4628      	mov	r0, r5
 8011aee:	f001 fc2c 	bl	801334a <RFW_TransmitInit>
 8011af2:	b968      	cbnz	r0, 8011b10 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8011af4:	4812      	ldr	r0, [pc, #72]	@ (8011b40 <RadioSend+0x118>)
 8011af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011afa:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011afc:	300e      	adds	r0, #14
 8011afe:	f001 fa19 	bl	8012f34 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8011b02:	2200      	movs	r2, #0
 8011b04:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011b08:	4628      	mov	r0, r5
 8011b0a:	f000 fed1 	bl	80128b0 <SUBGRF_SendPayload>
 8011b0e:	e7cf      	b.n	8011ab0 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8011b10:	4b0d      	ldr	r3, [pc, #52]	@ (8011b48 <RadioSend+0x120>)
 8011b12:	2201      	movs	r2, #1
 8011b14:	2100      	movs	r1, #0
 8011b16:	2002      	movs	r0, #2
 8011b18:	f001 fd12 	bl	8013540 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8011b1c:	2003      	movs	r0, #3
 8011b1e:	e7d1      	b.n	8011ac4 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8011b20:	4807      	ldr	r0, [pc, #28]	@ (8011b40 <RadioSend+0x118>)
 8011b22:	2302      	movs	r3, #2
 8011b24:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8011b26:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011b28:	300e      	adds	r0, #14
 8011b2a:	f001 fa03 	bl	8012f34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011b2e:	2200      	movs	r2, #0
 8011b30:	4621      	mov	r1, r4
 8011b32:	4628      	mov	r0, r5
 8011b34:	f000 febc 	bl	80128b0 <SUBGRF_SendPayload>
            break;
 8011b38:	e7ba      	b.n	8011ab0 <RadioSend+0x88>
 8011b3a:	bf00      	nop
 8011b3c:	48000400 	.word	0x48000400
 8011b40:	20001208 	.word	0x20001208
 8011b44:	200011f0 	.word	0x200011f0
 8011b48:	08016570 	.word	0x08016570

08011b4c <RadioRandom>:
{
 8011b4c:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011b4e:	2300      	movs	r3, #0
 8011b50:	461a      	mov	r2, r3
 8011b52:	4619      	mov	r1, r3
 8011b54:	4618      	mov	r0, r3
 8011b56:	f001 f824 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8011b5a:	f000 fecb 	bl	80128f4 <SUBGRF_GetRandom>
}
 8011b5e:	bd08      	pop	{r3, pc}

08011b60 <RadioSetModem>:
{
 8011b60:	b510      	push	{r4, lr}
 8011b62:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011b64:	4b14      	ldr	r3, [pc, #80]	@ (8011bb8 <RadioSetModem+0x58>)
 8011b66:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8011b68:	f001 fbf7 	bl	801335a <RFW_SetRadioModem>
    switch( modem )
 8011b6c:	2c01      	cmp	r4, #1
 8011b6e:	d010      	beq.n	8011b92 <RadioSetModem+0x32>
 8011b70:	2c03      	cmp	r4, #3
 8011b72:	d01a      	beq.n	8011baa <RadioSetModem+0x4a>
 8011b74:	b134      	cbz	r4, 8011b84 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8011b76:	2003      	movs	r0, #3
 8011b78:	f001 f8b2 	bl	8012ce0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8011bb8 <RadioSetModem+0x58>)
 8011b7e:	2200      	movs	r2, #0
 8011b80:	735a      	strb	r2, [r3, #13]
}
 8011b82:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8011b84:	2000      	movs	r0, #0
 8011b86:	f001 f8ab 	bl	8012ce0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8011bb8 <RadioSetModem+0x58>)
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	735a      	strb	r2, [r3, #13]
        break;
 8011b90:	e7f7      	b.n	8011b82 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8011b92:	2001      	movs	r0, #1
 8011b94:	f001 f8a4 	bl	8012ce0 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8011b98:	4b07      	ldr	r3, [pc, #28]	@ (8011bb8 <RadioSetModem+0x58>)
 8011b9a:	7b5a      	ldrb	r2, [r3, #13]
 8011b9c:	7b18      	ldrb	r0, [r3, #12]
 8011b9e:	4282      	cmp	r2, r0
 8011ba0:	d0ef      	beq.n	8011b82 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8011ba2:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8011ba4:	f000 fad0 	bl	8012148 <RadioSetPublicNetwork>
 8011ba8:	e7eb      	b.n	8011b82 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011baa:	2002      	movs	r0, #2
 8011bac:	f001 f898 	bl	8012ce0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011bb0:	4b01      	ldr	r3, [pc, #4]	@ (8011bb8 <RadioSetModem+0x58>)
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	735a      	strb	r2, [r3, #13]
}
 8011bb6:	e7e4      	b.n	8011b82 <RadioSetModem+0x22>
 8011bb8:	20001208 	.word	0x20001208

08011bbc <RadioSetTxGenericConfig>:
{
 8011bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc0:	b086      	sub	sp, #24
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	460c      	mov	r4, r1
 8011bc6:	4617      	mov	r7, r2
 8011bc8:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8011bca:	2100      	movs	r1, #0
 8011bcc:	9104      	str	r1, [sp, #16]
 8011bce:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8011bd0:	f001 fbb5 	bl	801333e <RFW_DeInit>
    switch( modem )
 8011bd4:	2d03      	cmp	r5, #3
 8011bd6:	f200 8153 	bhi.w	8011e80 <RadioSetTxGenericConfig+0x2c4>
 8011bda:	e8df f015 	tbh	[pc, r5, lsl #1]
 8011bde:	0079      	.short	0x0079
 8011be0:	013d00db 	.word	0x013d00db
 8011be4:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 8011be6:	7ca2      	ldrb	r2, [r4, #18]
 8011be8:	2a08      	cmp	r2, #8
 8011bea:	f200 8156 	bhi.w	8011e9a <RadioSetTxGenericConfig+0x2de>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8011bee:	68a1      	ldr	r1, [r4, #8]
 8011bf0:	a804      	add	r0, sp, #16
 8011bf2:	f001 fdbb 	bl	801376c <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 8011bf6:	6823      	ldr	r3, [r4, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f000 8151 	beq.w	8011ea0 <RadioSetTxGenericConfig+0x2e4>
        else if( config->msk.BitRate <= 10000 )
 8011bfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d823      	bhi.n	8011c4e <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8011c06:	4bac      	ldr	r3, [pc, #688]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011c08:	2203      	movs	r2, #3
 8011c0a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8011c0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8011c10:	6822      	ldr	r2, [r4, #0]
 8011c12:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8011c14:	7ce2      	ldrb	r2, [r4, #19]
 8011c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            radio_modem = MODEM_MSK;
 8011c1a:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8011c1c:	6863      	ldr	r3, [r4, #4]
 8011c1e:	00da      	lsls	r2, r3, #3
 8011c20:	4ba5      	ldr	r3, [pc, #660]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011c22:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8011c24:	2204      	movs	r2, #4
 8011c26:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8011c28:	7ca2      	ldrb	r2, [r4, #18]
 8011c2a:	00d2      	lsls	r2, r2, #3
 8011c2c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8011c2e:	2200      	movs	r2, #0
 8011c30:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8011c32:	7da3      	ldrb	r3, [r4, #22]
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d018      	beq.n	8011c6a <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8011c38:	7d23      	ldrb	r3, [r4, #20]
 8011c3a:	2b02      	cmp	r3, #2
 8011c3c:	d015      	beq.n	8011c6a <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8011c3e:	7d62      	ldrb	r2, [r4, #21]
 8011c40:	4b9d      	ldr	r3, [pc, #628]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011c42:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8011c44:	7da2      	ldrb	r2, [r4, #22]
 8011c46:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8011c48:	7d22      	ldrb	r2, [r4, #20]
 8011c4a:	755a      	strb	r2, [r3, #21]
 8011c4c:	e026      	b.n	8011c9c <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011c4e:	4b9a      	ldr	r3, [pc, #616]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011c50:	2500      	movs	r5, #0
 8011c52:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011c54:	f883 5038 	strb.w	r5, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8011c58:	6822      	ldr	r2, [r4, #0]
 8011c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8011c5c:	7ce2      	ldrb	r2, [r4, #19]
 8011c5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8011c62:	6822      	ldr	r2, [r4, #0]
 8011c64:	0892      	lsrs	r2, r2, #2
 8011c66:	641a      	str	r2, [r3, #64]	@ 0x40
 8011c68:	e7d8      	b.n	8011c1c <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8011c6a:	7d62      	ldrb	r2, [r4, #21]
 8011c6c:	f102 030f 	add.w	r3, r2, #15
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d901      	bls.n	8011c7a <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8011c76:	2a01      	cmp	r2, #1
 8011c78:	d127      	bne.n	8011cca <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig = config;
 8011c7a:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8011c82:	4a8e      	ldr	r2, [pc, #568]	@ (8011ebc <RadioSetTxGenericConfig+0x300>)
 8011c84:	4b8e      	ldr	r3, [pc, #568]	@ (8011ec0 <RadioSetTxGenericConfig+0x304>)
 8011c86:	6819      	ldr	r1, [r3, #0]
 8011c88:	a801      	add	r0, sp, #4
 8011c8a:	f001 fb55 	bl	8013338 <RFW_Init>
 8011c8e:	b9e0      	cbnz	r0, 8011cca <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8011c90:	4b89      	ldr	r3, [pc, #548]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011c92:	2200      	movs	r2, #0
 8011c94:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8011c96:	2101      	movs	r1, #1
 8011c98:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8011c9a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8011c9c:	f7ff fc72 	bl	8011584 <RadioStandby>
        RadioSetModem( radio_modem );
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	f7ff ff5d 	bl	8011b60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011ca6:	4d87      	ldr	r5, [pc, #540]	@ (8011ec4 <RadioSetTxGenericConfig+0x308>)
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f001 f8c1 	bl	8012e30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011cae:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8011cb2:	f001 f93f 	bl	8012f34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8011cb6:	a804      	add	r0, sp, #16
 8011cb8:	f000 fd2c 	bl	8012714 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8011cbc:	8a20      	ldrh	r0, [r4, #16]
 8011cbe:	f000 fd00 	bl	80126c2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8011cc2:	89a0      	ldrh	r0, [r4, #12]
 8011cc4:	f000 fd43 	bl	801274e <SUBGRF_SetCrcPolynomial>
        break;
 8011cc8:	e0da      	b.n	8011e80 <RadioSetTxGenericConfig+0x2c4>
                return -1;
 8011cca:	f04f 30ff 	mov.w	r0, #4294967295
 8011cce:	e0e1      	b.n	8011e94 <RadioSetTxGenericConfig+0x2d8>
        if( config->fsk.BitRate == 0 )
 8011cd0:	6823      	ldr	r3, [r4, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	f000 80e7 	beq.w	8011ea6 <RadioSetTxGenericConfig+0x2ea>
        if( config->fsk.SyncWordLength > 8 )
 8011cd8:	7ca2      	ldrb	r2, [r4, #18]
 8011cda:	2a08      	cmp	r2, #8
 8011cdc:	f200 80e6 	bhi.w	8011eac <RadioSetTxGenericConfig+0x2f0>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8011ce0:	68a1      	ldr	r1, [r4, #8]
 8011ce2:	a804      	add	r0, sp, #16
 8011ce4:	f001 fd42 	bl	801376c <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011ce8:	4b73      	ldr	r3, [pc, #460]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8011cf0:	6821      	ldr	r1, [r4, #0]
 8011cf2:	63d9      	str	r1, [r3, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8011cf4:	7ce1      	ldrb	r1, [r4, #19]
 8011cf6:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8011cfa:	69a1      	ldr	r1, [r4, #24]
 8011cfc:	6419      	str	r1, [r3, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011cfe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8011d00:	6861      	ldr	r1, [r4, #4]
 8011d02:	00c9      	lsls	r1, r1, #3
 8011d04:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8011d06:	2104      	movs	r1, #4
 8011d08:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8011d0a:	7ca1      	ldrb	r1, [r4, #18]
 8011d0c:	00c9      	lsls	r1, r1, #3
 8011d0e:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8011d10:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8011d12:	7da3      	ldrb	r3, [r4, #22]
 8011d14:	2b02      	cmp	r3, #2
 8011d16:	d00a      	beq.n	8011d2e <RadioSetTxGenericConfig+0x172>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8011d18:	7d23      	ldrb	r3, [r4, #20]
 8011d1a:	2b02      	cmp	r3, #2
 8011d1c:	d007      	beq.n	8011d2e <RadioSetTxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8011d1e:	7d62      	ldrb	r2, [r4, #21]
 8011d20:	4b65      	ldr	r3, [pc, #404]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011d22:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8011d24:	7da2      	ldrb	r2, [r4, #22]
 8011d26:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8011d28:	7d22      	ldrb	r2, [r4, #20]
 8011d2a:	755a      	strb	r2, [r3, #21]
 8011d2c:	e018      	b.n	8011d60 <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8011d2e:	7d62      	ldrb	r2, [r4, #21]
 8011d30:	f102 030f 	add.w	r3, r2, #15
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d901      	bls.n	8011d3e <RadioSetTxGenericConfig+0x182>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8011d3a:	2a01      	cmp	r2, #1
 8011d3c:	d127      	bne.n	8011d8e <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8011d44:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8011d46:	4a5d      	ldr	r2, [pc, #372]	@ (8011ebc <RadioSetTxGenericConfig+0x300>)
 8011d48:	4b5d      	ldr	r3, [pc, #372]	@ (8011ec0 <RadioSetTxGenericConfig+0x304>)
 8011d4a:	6819      	ldr	r1, [r3, #0]
 8011d4c:	a801      	add	r0, sp, #4
 8011d4e:	f001 faf3 	bl	8013338 <RFW_Init>
 8011d52:	b9e0      	cbnz	r0, 8011d8e <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8011d54:	4b58      	ldr	r3, [pc, #352]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011d56:	2200      	movs	r2, #0
 8011d58:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8011d5a:	2101      	movs	r1, #1
 8011d5c:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8011d5e:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8011d60:	f7ff fc10 	bl	8011584 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8011d64:	2000      	movs	r0, #0
 8011d66:	f7ff fefb 	bl	8011b60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011d6a:	4d56      	ldr	r5, [pc, #344]	@ (8011ec4 <RadioSetTxGenericConfig+0x308>)
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f001 f85f 	bl	8012e30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011d72:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8011d76:	f001 f8dd 	bl	8012f34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8011d7a:	a804      	add	r0, sp, #16
 8011d7c:	f000 fcca 	bl	8012714 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8011d80:	8a20      	ldrh	r0, [r4, #16]
 8011d82:	f000 fc9e 	bl	80126c2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8011d86:	89a0      	ldrh	r0, [r4, #12]
 8011d88:	f000 fce1 	bl	801274e <SUBGRF_SetCrcPolynomial>
        break;
 8011d8c:	e078      	b.n	8011e80 <RadioSetTxGenericConfig+0x2c4>
                return -1;
 8011d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d92:	e07f      	b.n	8011e94 <RadioSetTxGenericConfig+0x2d8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011d94:	4b48      	ldr	r3, [pc, #288]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011d96:	2201      	movs	r2, #1
 8011d98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8011d9c:	7822      	ldrb	r2, [r4, #0]
 8011d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8011da2:	7862      	ldrb	r2, [r4, #1]
 8011da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8011da8:	78a2      	ldrb	r2, [r4, #2]
 8011daa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8011dae:	78e3      	ldrb	r3, [r4, #3]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d032      	beq.n	8011e1a <RadioSetTxGenericConfig+0x25e>
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d035      	beq.n	8011e24 <RadioSetTxGenericConfig+0x268>
 8011db8:	b91b      	cbnz	r3, 8011dc2 <RadioSetTxGenericConfig+0x206>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011dba:	4b3f      	ldr	r3, [pc, #252]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011dc2:	4d3d      	ldr	r5, [pc, #244]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011dc4:	f04f 0801 	mov.w	r8, #1
 8011dc8:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8011dcc:	88a3      	ldrh	r3, [r4, #4]
 8011dce:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8011dd0:	79a3      	ldrb	r3, [r4, #6]
 8011dd2:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8011dd4:	79e3      	ldrb	r3, [r4, #7]
 8011dd6:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8011dda:	7a23      	ldrb	r3, [r4, #8]
 8011ddc:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 8011de0:	f7ff fbd0 	bl	8011584 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8011de4:	4640      	mov	r0, r8
 8011de6:	f7ff febb 	bl	8011b60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011dea:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8011dee:	f001 f81f 	bl	8012e30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011df2:	f105 000e 	add.w	r0, r5, #14
 8011df6:	f001 f89d 	bl	8012f34 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8011dfa:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 8011dfe:	2b06      	cmp	r3, #6
 8011e00:	d01f      	beq.n	8011e42 <RadioSetTxGenericConfig+0x286>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011e02:	f640 0089 	movw	r0, #2185	@ 0x889
 8011e06:	f000 fc39 	bl	801267c <SUBGRF_ReadRegister>
 8011e0a:	f040 0104 	orr.w	r1, r0, #4
 8011e0e:	b2c9      	uxtb	r1, r1
 8011e10:	f640 0089 	movw	r0, #2185	@ 0x889
 8011e14:	f000 fc22 	bl	801265c <SUBGRF_WriteRegister>
 8011e18:	e032      	b.n	8011e80 <RadioSetTxGenericConfig+0x2c4>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011e1a:	4b27      	ldr	r3, [pc, #156]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8011e22:	e7ce      	b.n	8011dc2 <RadioSetTxGenericConfig+0x206>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8011e24:	7823      	ldrb	r3, [r4, #0]
 8011e26:	3b0b      	subs	r3, #11
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d904      	bls.n	8011e38 <RadioSetTxGenericConfig+0x27c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011e2e:	4b22      	ldr	r3, [pc, #136]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011e30:	2200      	movs	r2, #0
 8011e32:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8011e36:	e7c4      	b.n	8011dc2 <RadioSetTxGenericConfig+0x206>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011e38:	4b1f      	ldr	r3, [pc, #124]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8011e40:	e7bf      	b.n	8011dc2 <RadioSetTxGenericConfig+0x206>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8011e42:	f640 0089 	movw	r0, #2185	@ 0x889
 8011e46:	f000 fc19 	bl	801267c <SUBGRF_ReadRegister>
 8011e4a:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8011e4e:	f640 0089 	movw	r0, #2185	@ 0x889
 8011e52:	f000 fc03 	bl	801265c <SUBGRF_WriteRegister>
 8011e56:	e013      	b.n	8011e80 <RadioSetTxGenericConfig+0x2c4>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011e60:	d227      	bcs.n	8011eb2 <RadioSetTxGenericConfig+0x2f6>
        RadioSetModem( MODEM_BPSK );
 8011e62:	2003      	movs	r0, #3
 8011e64:	f7ff fe7c 	bl	8011b60 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8011e68:	4813      	ldr	r0, [pc, #76]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011e6a:	2302      	movs	r3, #2
 8011e6c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8011e70:	6823      	ldr	r3, [r4, #0]
 8011e72:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8011e74:	2316      	movs	r3, #22
 8011e76:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011e7a:	3038      	adds	r0, #56	@ 0x38
 8011e7c:	f000 ffd8 	bl	8012e30 <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011e80:	4638      	mov	r0, r7
 8011e82:	f001 f97f 	bl	8013184 <SUBGRF_SetRfTxPower>
 8011e86:	4c0c      	ldr	r4, [pc, #48]	@ (8011eb8 <RadioSetTxGenericConfig+0x2fc>)
 8011e88:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8011e8c:	f001 fa5c 	bl	8013348 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011e90:	6066      	str	r6, [r4, #4]
    return 0;
 8011e92:	2000      	movs	r0, #0
}
 8011e94:	b006      	add	sp, #24
 8011e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8011e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e9e:	e7f9      	b.n	8011e94 <RadioSetTxGenericConfig+0x2d8>
            return -1;
 8011ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea4:	e7f6      	b.n	8011e94 <RadioSetTxGenericConfig+0x2d8>
            return -1;
 8011ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eaa:	e7f3      	b.n	8011e94 <RadioSetTxGenericConfig+0x2d8>
            return -1;
 8011eac:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb0:	e7f0      	b.n	8011e94 <RadioSetTxGenericConfig+0x2d8>
            return -1;
 8011eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb6:	e7ed      	b.n	8011e94 <RadioSetTxGenericConfig+0x2d8>
 8011eb8:	20001208 	.word	0x20001208
 8011ebc:	200011f0 	.word	0x200011f0
 8011ec0:	20001264 	.word	0x20001264
 8011ec4:	20001240 	.word	0x20001240

08011ec8 <RadioSetRxGenericConfig>:
{
 8011ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ecc:	b086      	sub	sp, #24
 8011ece:	4606      	mov	r6, r0
 8011ed0:	460c      	mov	r4, r1
 8011ed2:	4615      	mov	r5, r2
 8011ed4:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	9304      	str	r3, [sp, #16]
 8011eda:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8011edc:	f001 fa2f 	bl	801333e <RFW_DeInit>
    if( rxContinuous != 0 )
 8011ee0:	b105      	cbz	r5, 8011ee4 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 8011ee2:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8011ee4:	3d00      	subs	r5, #0
 8011ee6:	bf18      	it	ne
 8011ee8:	2501      	movne	r5, #1
 8011eea:	4b93      	ldr	r3, [pc, #588]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8011eec:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8011eee:	b136      	cbz	r6, 8011efe <RadioSetRxGenericConfig+0x36>
 8011ef0:	2e01      	cmp	r6, #1
 8011ef2:	f000 808f 	beq.w	8012014 <RadioSetRxGenericConfig+0x14c>
 8011ef6:	2000      	movs	r0, #0
}
 8011ef8:	b006      	add	sp, #24
 8011efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8011efe:	68a3      	ldr	r3, [r4, #8]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	f000 810c 	beq.w	801211e <RadioSetRxGenericConfig+0x256>
 8011f06:	68e3      	ldr	r3, [r4, #12]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	f000 810b 	beq.w	8012124 <RadioSetRxGenericConfig+0x25c>
        if( config->fsk.SyncWordLength > 8 )
 8011f0e:	7fa2      	ldrb	r2, [r4, #30]
 8011f10:	2a08      	cmp	r2, #8
 8011f12:	f200 810a 	bhi.w	801212a <RadioSetRxGenericConfig+0x262>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8011f16:	6921      	ldr	r1, [r4, #16]
 8011f18:	a804      	add	r0, sp, #16
 8011f1a:	f001 fc27 	bl	801376c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8011f1e:	6820      	ldr	r0, [r4, #0]
 8011f20:	3800      	subs	r0, #0
 8011f22:	bf18      	it	ne
 8011f24:	2001      	movne	r0, #1
 8011f26:	f000 fd77 	bl	8012a18 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011f2a:	4d83      	ldr	r5, [pc, #524]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8011f2c:	2600      	movs	r6, #0
 8011f2e:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8011f32:	68a3      	ldr	r3, [r4, #8]
 8011f34:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8011f36:	f894 3020 	ldrb.w	r3, [r4, #32]
 8011f3a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8011f3e:	6860      	ldr	r0, [r4, #4]
 8011f40:	f001 f998 	bl	8013274 <SUBGRF_GetFskBandwidthRegValue>
 8011f44:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011f48:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8011f4a:	68e3      	ldr	r3, [r4, #12]
 8011f4c:	00db      	lsls	r3, r3, #3
 8011f4e:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8011f50:	7fe3      	ldrb	r3, [r4, #31]
 8011f52:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8011f54:	7fa3      	ldrb	r3, [r4, #30]
 8011f56:	00db      	lsls	r3, r3, #3
 8011f58:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8011f5a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8011f5e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8011f60:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8011f64:	b973      	cbnz	r3, 8011f84 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8011f66:	6961      	ldr	r1, [r4, #20]
 8011f68:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8011f6a:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 8011f6e:	2a02      	cmp	r2, #2
 8011f70:	d012      	beq.n	8011f98 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8011f72:	2b02      	cmp	r3, #2
 8011f74:	d010      	beq.n	8011f98 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8011f76:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8011f7a:	496f      	ldr	r1, [pc, #444]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8011f7c:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8011f7e:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8011f80:	754b      	strb	r3, [r1, #21]
 8011f82:	e023      	b.n	8011fcc <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8011f84:	2b02      	cmp	r3, #2
 8011f86:	d003      	beq.n	8011f90 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8011f88:	4a6b      	ldr	r2, [pc, #428]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8011f8a:	21ff      	movs	r1, #255	@ 0xff
 8011f8c:	7591      	strb	r1, [r2, #22]
 8011f8e:	e7ec      	b.n	8011f6a <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8011f90:	4a69      	ldr	r2, [pc, #420]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8011f92:	21ff      	movs	r1, #255	@ 0xff
 8011f94:	7591      	strb	r1, [r2, #22]
 8011f96:	e7e8      	b.n	8011f6a <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8011f98:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8011f9c:	f102 030f 	add.w	r3, r2, #15
 8011fa0:	b2db      	uxtb	r3, r3
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d901      	bls.n	8011faa <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8011fa6:	2a01      	cmp	r2, #1
 8011fa8:	d131      	bne.n	801200e <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 8011faa:	2300      	movs	r3, #0
 8011fac:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8011fb0:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8011fb2:	4a62      	ldr	r2, [pc, #392]	@ (801213c <RadioSetRxGenericConfig+0x274>)
 8011fb4:	4b62      	ldr	r3, [pc, #392]	@ (8012140 <RadioSetRxGenericConfig+0x278>)
 8011fb6:	6819      	ldr	r1, [r3, #0]
 8011fb8:	a801      	add	r0, sp, #4
 8011fba:	f001 f9bd 	bl	8013338 <RFW_Init>
 8011fbe:	bb30      	cbnz	r0, 801200e <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8011fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8011fc6:	2101      	movs	r1, #1
 8011fc8:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8011fca:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8011fcc:	f7ff fada 	bl	8011584 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	f7ff fdc5 	bl	8011b60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011fd6:	4d5b      	ldr	r5, [pc, #364]	@ (8012144 <RadioSetRxGenericConfig+0x27c>)
 8011fd8:	4628      	mov	r0, r5
 8011fda:	f000 ff29 	bl	8012e30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011fde:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8011fe2:	f000 ffa7 	bl	8012f34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8011fe6:	a804      	add	r0, sp, #16
 8011fe8:	f000 fb94 	bl	8012714 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8011fec:	8ba0      	ldrh	r0, [r4, #28]
 8011fee:	f000 fb68 	bl	80126c2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8011ff2:	8b20      	ldrh	r0, [r4, #24]
 8011ff4:	f000 fbab 	bl	801274e <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8011ff8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8011ffc:	fb07 f303 	mul.w	r3, r7, r3
 8012000:	68a2      	ldr	r2, [r4, #8]
 8012002:	fbb3 f3f2 	udiv	r3, r3, r2
 8012006:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 801200a:	2000      	movs	r0, #0
        break;
 801200c:	e774      	b.n	8011ef8 <RadioSetRxGenericConfig+0x30>
                return -1;
 801200e:	f04f 30ff 	mov.w	r0, #4294967295
 8012012:	e771      	b.n	8011ef8 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8012014:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012016:	2b00      	cmp	r3, #0
 8012018:	f000 808a 	beq.w	8012130 <RadioSetRxGenericConfig+0x268>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801201c:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8012020:	2b01      	cmp	r3, #1
 8012022:	d059      	beq.n	80120d8 <RadioSetRxGenericConfig+0x210>
            MaxPayloadLength = 0xFF;
 8012024:	f04f 08ff 	mov.w	r8, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8012028:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801202a:	3800      	subs	r0, #0
 801202c:	bf18      	it	ne
 801202e:	2001      	movne	r0, #1
 8012030:	f000 fcf2 	bl	8012a18 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8012034:	b2f8      	uxtb	r0, r7
 8012036:	f000 fcfc 	bl	8012a32 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801203a:	4b3f      	ldr	r3, [pc, #252]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 801203c:	2201      	movs	r2, #1
 801203e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8012042:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8012046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801204a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801204e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8012052:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8012056:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801205a:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 801205e:	2b01      	cmp	r3, #1
 8012060:	d03d      	beq.n	80120de <RadioSetRxGenericConfig+0x216>
 8012062:	2b02      	cmp	r3, #2
 8012064:	d040      	beq.n	80120e8 <RadioSetRxGenericConfig+0x220>
 8012066:	b91b      	cbnz	r3, 8012070 <RadioSetRxGenericConfig+0x1a8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8012068:	4b33      	ldr	r3, [pc, #204]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 801206a:	2200      	movs	r2, #0
 801206c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8012070:	4d31      	ldr	r5, [pc, #196]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8012072:	2601      	movs	r6, #1
 8012074:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8012076:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012078:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801207a:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 801207e:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012080:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8012084:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8012088:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801208c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8012090:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 8012094:	f7ff fa76 	bl	8011584 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8012098:	4630      	mov	r0, r6
 801209a:	f7ff fd61 	bl	8011b60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801209e:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80120a2:	f000 fec5 	bl	8012e30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80120a6:	f105 000e 	add.w	r0, r5, #14
 80120aa:	f000 ff43 	bl	8012f34 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80120ae:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80120b2:	42b3      	cmp	r3, r6
 80120b4:	d028      	beq.n	8012108 <RadioSetRxGenericConfig+0x240>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80120b6:	f240 7036 	movw	r0, #1846	@ 0x736
 80120ba:	f000 fadf 	bl	801267c <SUBGRF_ReadRegister>
 80120be:	f040 0104 	orr.w	r1, r0, #4
 80120c2:	b2c9      	uxtb	r1, r1
 80120c4:	f240 7036 	movw	r0, #1846	@ 0x736
 80120c8:	f000 fac8 	bl	801265c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80120cc:	4b1a      	ldr	r3, [pc, #104]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 80120ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120d2:	609a      	str	r2, [r3, #8]
    return status;
 80120d4:	2000      	movs	r0, #0
        break;
 80120d6:	e70f      	b.n	8011ef8 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80120d8:	f894 8014 	ldrb.w	r8, [r4, #20]
 80120dc:	e7a4      	b.n	8012028 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80120de:	4b16      	ldr	r3, [pc, #88]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 80120e0:	2201      	movs	r2, #1
 80120e2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80120e6:	e7c3      	b.n	8012070 <RadioSetRxGenericConfig+0x1a8>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80120e8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80120ec:	3b0b      	subs	r3, #11
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d904      	bls.n	80120fe <RadioSetRxGenericConfig+0x236>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80120f4:	4b10      	ldr	r3, [pc, #64]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 80120f6:	2200      	movs	r2, #0
 80120f8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80120fc:	e7b8      	b.n	8012070 <RadioSetRxGenericConfig+0x1a8>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80120fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012138 <RadioSetRxGenericConfig+0x270>)
 8012100:	2201      	movs	r2, #1
 8012102:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8012106:	e7b3      	b.n	8012070 <RadioSetRxGenericConfig+0x1a8>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8012108:	f240 7036 	movw	r0, #1846	@ 0x736
 801210c:	f000 fab6 	bl	801267c <SUBGRF_ReadRegister>
 8012110:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8012114:	f240 7036 	movw	r0, #1846	@ 0x736
 8012118:	f000 faa0 	bl	801265c <SUBGRF_WriteRegister>
 801211c:	e7d6      	b.n	80120cc <RadioSetRxGenericConfig+0x204>
            return -1;
 801211e:	f04f 30ff 	mov.w	r0, #4294967295
 8012122:	e6e9      	b.n	8011ef8 <RadioSetRxGenericConfig+0x30>
 8012124:	f04f 30ff 	mov.w	r0, #4294967295
 8012128:	e6e6      	b.n	8011ef8 <RadioSetRxGenericConfig+0x30>
            return -1;
 801212a:	f04f 30ff 	mov.w	r0, #4294967295
 801212e:	e6e3      	b.n	8011ef8 <RadioSetRxGenericConfig+0x30>
            return -1;
 8012130:	f04f 30ff 	mov.w	r0, #4294967295
 8012134:	e6e0      	b.n	8011ef8 <RadioSetRxGenericConfig+0x30>
 8012136:	bf00      	nop
 8012138:	20001208 	.word	0x20001208
 801213c:	200011d8 	.word	0x200011d8
 8012140:	20001264 	.word	0x20001264
 8012144:	20001240 	.word	0x20001240

08012148 <RadioSetPublicNetwork>:
{
 8012148:	b510      	push	{r4, lr}
 801214a:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801214c:	4b0e      	ldr	r3, [pc, #56]	@ (8012188 <RadioSetPublicNetwork+0x40>)
 801214e:	7318      	strb	r0, [r3, #12]
 8012150:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8012152:	2001      	movs	r0, #1
 8012154:	f7ff fd04 	bl	8011b60 <RadioSetModem>
    if( enable == true )
 8012158:	b154      	cbz	r4, 8012170 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801215a:	2134      	movs	r1, #52	@ 0x34
 801215c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8012160:	f000 fa7c 	bl	801265c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8012164:	2144      	movs	r1, #68	@ 0x44
 8012166:	f240 7041 	movw	r0, #1857	@ 0x741
 801216a:	f000 fa77 	bl	801265c <SUBGRF_WriteRegister>
}
 801216e:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8012170:	2114      	movs	r1, #20
 8012172:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8012176:	f000 fa71 	bl	801265c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801217a:	2124      	movs	r1, #36	@ 0x24
 801217c:	f240 7041 	movw	r0, #1857	@ 0x741
 8012180:	f000 fa6c 	bl	801265c <SUBGRF_WriteRegister>
}
 8012184:	e7f3      	b.n	801216e <RadioSetPublicNetwork+0x26>
 8012186:	bf00      	nop
 8012188:	20001208 	.word	0x20001208

0801218c <RadioSetTxConfig>:
{
 801218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012190:	b083      	sub	sp, #12
 8012192:	4604      	mov	r4, r0
 8012194:	460e      	mov	r6, r1
 8012196:	4617      	mov	r7, r2
 8012198:	461d      	mov	r5, r3
 801219a:	f8bd 8038 	ldrh.w	r8, [sp, #56]	@ 0x38
 801219e:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 80121a2:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 80121a6:	f001 f8ca 	bl	801333e <RFW_DeInit>
    switch( modem )
 80121aa:	2c00      	cmp	r4, #0
 80121ac:	d043      	beq.n	8012236 <RadioSetTxConfig+0xaa>
 80121ae:	2c01      	cmp	r4, #1
 80121b0:	f040 8083 	bne.w	80122ba <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80121b4:	4a57      	ldr	r2, [pc, #348]	@ (8012314 <RadioSetTxConfig+0x188>)
 80121b6:	2301      	movs	r3, #1
 80121b8:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80121bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80121c4:	4954      	ldr	r1, [pc, #336]	@ (8012318 <RadioSetTxConfig+0x18c>)
 80121c6:	5d49      	ldrb	r1, [r1, r5]
 80121c8:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80121cc:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 80121d0:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80121d4:	b925      	cbnz	r5, 80121e0 <RadioSetTxConfig+0x54>
 80121d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80121d8:	3a0b      	subs	r2, #11
 80121da:	2a01      	cmp	r2, #1
 80121dc:	f240 8089 	bls.w	80122f2 <RadioSetTxConfig+0x166>
 80121e0:	2d01      	cmp	r5, #1
 80121e2:	f000 8082 	beq.w	80122ea <RadioSetTxConfig+0x15e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80121e6:	4a4b      	ldr	r2, [pc, #300]	@ (8012314 <RadioSetTxConfig+0x188>)
 80121e8:	2100      	movs	r1, #0
 80121ea:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80121ee:	4a49      	ldr	r2, [pc, #292]	@ (8012314 <RadioSetTxConfig+0x188>)
 80121f0:	2101      	movs	r1, #1
 80121f2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80121f4:	3b05      	subs	r3, #5
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	428b      	cmp	r3, r1
 80121fa:	d97f      	bls.n	80122fc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80121fc:	4b45      	ldr	r3, [pc, #276]	@ (8012314 <RadioSetTxConfig+0x188>)
 80121fe:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8012202:	4c44      	ldr	r4, [pc, #272]	@ (8012314 <RadioSetTxConfig+0x188>)
 8012204:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012208:	4b44      	ldr	r3, [pc, #272]	@ (801231c <RadioSetTxConfig+0x190>)
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801220e:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8012212:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8012216:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 801221a:	f7ff f9b3 	bl	8011584 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801221e:	2001      	movs	r0, #1
 8012220:	f7ff fc9e 	bl	8011b60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012224:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8012228:	f000 fe02 	bl	8012e30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801222c:	f104 000e 	add.w	r0, r4, #14
 8012230:	f000 fe80 	bl	8012f34 <SUBGRF_SetPacketParams>
            break;
 8012234:	e041      	b.n	80122ba <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8012236:	4c37      	ldr	r4, [pc, #220]	@ (8012314 <RadioSetTxConfig+0x188>)
 8012238:	f04f 0b00 	mov.w	fp, #0
 801223c:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8012240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012242:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8012244:	230b      	movs	r3, #11
 8012246:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801224a:	4628      	mov	r0, r5
 801224c:	f001 f812 	bl	8013274 <SUBGRF_GetFskBandwidthRegValue>
 8012250:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8012254:	6427      	str	r7, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8012256:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801225a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801225e:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8012262:	2304      	movs	r3, #4
 8012264:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8012266:	2318      	movs	r3, #24
 8012268:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801226a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801226e:	f089 0901 	eor.w	r9, r9, #1
 8012272:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8012276:	f1ba 0f00 	cmp.w	sl, #0
 801227a:	d032      	beq.n	80122e2 <RadioSetTxConfig+0x156>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801227c:	22f2      	movs	r2, #242	@ 0xf2
 801227e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8012280:	4c24      	ldr	r4, [pc, #144]	@ (8012314 <RadioSetTxConfig+0x188>)
 8012282:	2301      	movs	r3, #1
 8012284:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8012286:	f7ff f97d 	bl	8011584 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801228a:	2000      	movs	r0, #0
 801228c:	f7ff fc68 	bl	8011b60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012290:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8012294:	f000 fdcc 	bl	8012e30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012298:	f104 000e 	add.w	r0, r4, #14
 801229c:	f000 fe4a 	bl	8012f34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80122a0:	4a1f      	ldr	r2, [pc, #124]	@ (8012320 <RadioSetTxConfig+0x194>)
 80122a2:	466b      	mov	r3, sp
 80122a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80122ac:	4618      	mov	r0, r3
 80122ae:	f000 fa31 	bl	8012714 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80122b2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80122b6:	f000 fa04 	bl	80126c2 <SUBGRF_SetWhiteningSeed>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80122ba:	4630      	mov	r0, r6
 80122bc:	f000 ff62 	bl	8013184 <SUBGRF_SetRfTxPower>
 80122c0:	4c14      	ldr	r4, [pc, #80]	@ (8012314 <RadioSetTxConfig+0x188>)
 80122c2:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80122c6:	210e      	movs	r1, #14
 80122c8:	f640 101f 	movw	r0, #2335	@ 0x91f
 80122cc:	f000 f9c6 	bl	801265c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80122d0:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 80122d4:	f001 f838 	bl	8013348 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80122d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80122da:	6063      	str	r3, [r4, #4]
}
 80122dc:	b003      	add	sp, #12
 80122de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80122e2:	4b0c      	ldr	r3, [pc, #48]	@ (8012314 <RadioSetTxConfig+0x188>)
 80122e4:	2201      	movs	r2, #1
 80122e6:	75da      	strb	r2, [r3, #23]
 80122e8:	e7ca      	b.n	8012280 <RadioSetTxConfig+0xf4>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80122ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122ec:	2a0c      	cmp	r2, #12
 80122ee:	f47f af7a 	bne.w	80121e6 <RadioSetTxConfig+0x5a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80122f2:	4a08      	ldr	r2, [pc, #32]	@ (8012314 <RadioSetTxConfig+0x188>)
 80122f4:	2101      	movs	r1, #1
 80122f6:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 80122fa:	e778      	b.n	80121ee <RadioSetTxConfig+0x62>
                if( preambleLen < 12 )
 80122fc:	f1b8 0f0b 	cmp.w	r8, #11
 8012300:	d803      	bhi.n	801230a <RadioSetTxConfig+0x17e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8012302:	4613      	mov	r3, r2
 8012304:	220c      	movs	r2, #12
 8012306:	839a      	strh	r2, [r3, #28]
 8012308:	e77b      	b.n	8012202 <RadioSetTxConfig+0x76>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801230a:	4b02      	ldr	r3, [pc, #8]	@ (8012314 <RadioSetTxConfig+0x188>)
 801230c:	f8a3 801c 	strh.w	r8, [r3, #28]
 8012310:	e777      	b.n	8012202 <RadioSetTxConfig+0x76>
 8012312:	bf00      	nop
 8012314:	20001208 	.word	0x20001208
 8012318:	08016f34 	.word	0x08016f34
 801231c:	20000124 	.word	0x20000124
 8012320:	080148b8 	.word	0x080148b8

08012324 <RadioSetRxConfig>:
{
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	b085      	sub	sp, #20
 801232a:	4604      	mov	r4, r0
 801232c:	460d      	mov	r5, r1
 801232e:	4616      	mov	r6, r2
 8012330:	9301      	str	r3, [sp, #4]
 8012332:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8012336:	f8bd a040 	ldrh.w	sl, [sp, #64]	@ 0x40
 801233a:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 801233e:	f89d b04c 	ldrb.w	fp, [sp, #76]	@ 0x4c
 8012342:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8012346:	4b76      	ldr	r3, [pc, #472]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 8012348:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 801234c:	f000 fff7 	bl	801333e <RFW_DeInit>
    if( rxContinuous == true )
 8012350:	f1b8 0f00 	cmp.w	r8, #0
 8012354:	d001      	beq.n	801235a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8012356:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 801235a:	2f00      	cmp	r7, #0
 801235c:	d06b      	beq.n	8012436 <RadioSetRxConfig+0x112>
        MaxPayloadLength = payloadLen;
 801235e:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 8012362:	4b70      	ldr	r3, [pc, #448]	@ (8012524 <RadioSetRxConfig+0x200>)
 8012364:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8012366:	2c00      	cmp	r4, #0
 8012368:	d069      	beq.n	801243e <RadioSetRxConfig+0x11a>
 801236a:	2c01      	cmp	r4, #1
 801236c:	f040 80b3 	bne.w	80124d6 <RadioSetRxConfig+0x1b2>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8012370:	2000      	movs	r0, #0
 8012372:	f000 fb51 	bl	8012a18 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8012376:	4a6a      	ldr	r2, [pc, #424]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 8012378:	2301      	movs	r3, #1
 801237a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801237e:	b2f3      	uxtb	r3, r6
 8012380:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8012384:	4968      	ldr	r1, [pc, #416]	@ (8012528 <RadioSetRxConfig+0x204>)
 8012386:	5d49      	ldrb	r1, [r1, r5]
 8012388:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801238c:	9901      	ldr	r1, [sp, #4]
 801238e:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012392:	b925      	cbnz	r5, 801239e <RadioSetRxConfig+0x7a>
 8012394:	f1a6 020b 	sub.w	r2, r6, #11
 8012398:	2a01      	cmp	r2, #1
 801239a:	f240 80a6 	bls.w	80124ea <RadioSetRxConfig+0x1c6>
 801239e:	2d01      	cmp	r5, #1
 80123a0:	f000 80a0 	beq.w	80124e4 <RadioSetRxConfig+0x1c0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80123a4:	4a5e      	ldr	r2, [pc, #376]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 80123a6:	2100      	movs	r1, #0
 80123a8:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80123ac:	4a5c      	ldr	r2, [pc, #368]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 80123ae:	2101      	movs	r1, #1
 80123b0:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80123b2:	3b05      	subs	r3, #5
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	428b      	cmp	r3, r1
 80123b8:	f240 809c 	bls.w	80124f4 <RadioSetRxConfig+0x1d0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80123bc:	4b58      	ldr	r3, [pc, #352]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 80123be:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80123c2:	4c57      	ldr	r4, [pc, #348]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 80123c4:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80123c6:	4b57      	ldr	r3, [pc, #348]	@ (8012524 <RadioSetRxConfig+0x200>)
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80123cc:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80123d0:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80123d4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 80123d8:	f7ff f8d4 	bl	8011584 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80123dc:	2001      	movs	r0, #1
 80123de:	f7ff fbbf 	bl	8011b60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80123e2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80123e6:	f000 fd23 	bl	8012e30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80123ea:	f104 000e 	add.w	r0, r4, #14
 80123ee:	f000 fda1 	bl	8012f34 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80123f2:	fa5f f08a 	uxtb.w	r0, sl
 80123f6:	f000 fb1c 	bl	8012a32 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80123fa:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80123fe:	f000 f93d 	bl	801267c <SUBGRF_ReadRegister>
 8012402:	f000 0101 	and.w	r1, r0, #1
 8012406:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801240a:	f000 f927 	bl	801265c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801240e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8012412:	2b01      	cmp	r3, #1
 8012414:	d079      	beq.n	801250a <RadioSetRxConfig+0x1e6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8012416:	f240 7036 	movw	r0, #1846	@ 0x736
 801241a:	f000 f92f 	bl	801267c <SUBGRF_ReadRegister>
 801241e:	f040 0104 	orr.w	r1, r0, #4
 8012422:	b2c9      	uxtb	r1, r1
 8012424:	f240 7036 	movw	r0, #1846	@ 0x736
 8012428:	f000 f918 	bl	801265c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801242c:	4b3c      	ldr	r3, [pc, #240]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 801242e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012432:	609a      	str	r2, [r3, #8]
}
 8012434:	e04f      	b.n	80124d6 <RadioSetRxConfig+0x1b2>
        MaxPayloadLength = 0xFF;
 8012436:	4b3b      	ldr	r3, [pc, #236]	@ (8012524 <RadioSetRxConfig+0x200>)
 8012438:	22ff      	movs	r2, #255	@ 0xff
 801243a:	701a      	strb	r2, [r3, #0]
 801243c:	e793      	b.n	8012366 <RadioSetRxConfig+0x42>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801243e:	2000      	movs	r0, #0
 8012440:	f000 faea 	bl	8012a18 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8012444:	4c36      	ldr	r4, [pc, #216]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 8012446:	f04f 0800 	mov.w	r8, #0
 801244a:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801244e:	63e6      	str	r6, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8012450:	230b      	movs	r3, #11
 8012452:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8012456:	4628      	mov	r0, r5
 8012458:	f000 ff0c 	bl	8013274 <SUBGRF_GetFskBandwidthRegValue>
 801245c:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8012460:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8012464:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8012468:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801246c:	2304      	movs	r3, #4
 801246e:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8012470:	2318      	movs	r3, #24
 8012472:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8012474:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8012478:	f087 0701 	eor.w	r7, r7, #1
 801247c:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801247e:	4b29      	ldr	r3, [pc, #164]	@ (8012524 <RadioSetRxConfig+0x200>)
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8012484:	f1bb 0f00 	cmp.w	fp, #0
 8012488:	d028      	beq.n	80124dc <RadioSetRxConfig+0x1b8>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801248a:	22f2      	movs	r2, #242	@ 0xf2
 801248c:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801248e:	4c24      	ldr	r4, [pc, #144]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 8012490:	2301      	movs	r3, #1
 8012492:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8012494:	f7ff f876 	bl	8011584 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8012498:	2000      	movs	r0, #0
 801249a:	f7ff fb61 	bl	8011b60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801249e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80124a2:	f000 fcc5 	bl	8012e30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80124a6:	f104 000e 	add.w	r0, r4, #14
 80124aa:	f000 fd43 	bl	8012f34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80124ae:	4a1f      	ldr	r2, [pc, #124]	@ (801252c <RadioSetRxConfig+0x208>)
 80124b0:	ab02      	add	r3, sp, #8
 80124b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80124ba:	4618      	mov	r0, r3
 80124bc:	f000 f92a 	bl	8012714 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80124c0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80124c4:	f000 f8fd 	bl	80126c2 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80124c8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80124cc:	fb03 f30a 	mul.w	r3, r3, sl
 80124d0:	fbb3 f3f6 	udiv	r3, r3, r6
 80124d4:	60a3      	str	r3, [r4, #8]
}
 80124d6:	b005      	add	sp, #20
 80124d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80124dc:	4b10      	ldr	r3, [pc, #64]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 80124de:	2201      	movs	r2, #1
 80124e0:	75da      	strb	r2, [r3, #23]
 80124e2:	e7d4      	b.n	801248e <RadioSetRxConfig+0x16a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80124e4:	2e0c      	cmp	r6, #12
 80124e6:	f47f af5d 	bne.w	80123a4 <RadioSetRxConfig+0x80>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80124ea:	4a0d      	ldr	r2, [pc, #52]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 80124ec:	2101      	movs	r1, #1
 80124ee:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 80124f2:	e75b      	b.n	80123ac <RadioSetRxConfig+0x88>
                if( preambleLen < 12 )
 80124f4:	f1b9 0f0b 	cmp.w	r9, #11
 80124f8:	d803      	bhi.n	8012502 <RadioSetRxConfig+0x1de>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80124fa:	4613      	mov	r3, r2
 80124fc:	220c      	movs	r2, #12
 80124fe:	839a      	strh	r2, [r3, #28]
 8012500:	e75f      	b.n	80123c2 <RadioSetRxConfig+0x9e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012502:	4b07      	ldr	r3, [pc, #28]	@ (8012520 <RadioSetRxConfig+0x1fc>)
 8012504:	f8a3 901c 	strh.w	r9, [r3, #28]
 8012508:	e75b      	b.n	80123c2 <RadioSetRxConfig+0x9e>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801250a:	f240 7036 	movw	r0, #1846	@ 0x736
 801250e:	f000 f8b5 	bl	801267c <SUBGRF_ReadRegister>
 8012512:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8012516:	f240 7036 	movw	r0, #1846	@ 0x736
 801251a:	f000 f89f 	bl	801265c <SUBGRF_WriteRegister>
 801251e:	e785      	b.n	801242c <RadioSetRxConfig+0x108>
 8012520:	20001208 	.word	0x20001208
 8012524:	20000124 	.word	0x20000124
 8012528:	08016f34 	.word	0x08016f34
 801252c:	080148b8 	.word	0x080148b8

08012530 <RadioIsChannelFree>:
{
 8012530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012532:	b08b      	sub	sp, #44	@ 0x2c
 8012534:	4604      	mov	r4, r0
 8012536:	460f      	mov	r7, r1
 8012538:	4616      	mov	r6, r2
 801253a:	461d      	mov	r5, r3
    RadioStandby( );
 801253c:	f7ff f822 	bl	8011584 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8012540:	2000      	movs	r0, #0
 8012542:	f7ff fb0d 	bl	8011b60 <RadioSetModem>
    RadioSetChannel( freq );
 8012546:	4620      	mov	r0, r4
 8012548:	f7ff fa14 	bl	8011974 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801254c:	2301      	movs	r3, #1
 801254e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012550:	2400      	movs	r4, #0
 8012552:	9408      	str	r4, [sp, #32]
 8012554:	9407      	str	r4, [sp, #28]
 8012556:	9406      	str	r4, [sp, #24]
 8012558:	9405      	str	r4, [sp, #20]
 801255a:	9404      	str	r4, [sp, #16]
 801255c:	9403      	str	r4, [sp, #12]
 801255e:	9402      	str	r4, [sp, #8]
 8012560:	2303      	movs	r3, #3
 8012562:	9301      	str	r3, [sp, #4]
 8012564:	9700      	str	r7, [sp, #0]
 8012566:	4623      	mov	r3, r4
 8012568:	f44f 7216 	mov.w	r2, #600	@ 0x258
 801256c:	4639      	mov	r1, r7
 801256e:	4620      	mov	r0, r4
 8012570:	f7ff fed8 	bl	8012324 <RadioSetRxConfig>
    RadioRx( 0 );
 8012574:	4620      	mov	r0, r4
 8012576:	f7ff fa15 	bl	80119a4 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801257a:	f7ff f9c7 	bl	801190c <RadioGetWakeupTime>
 801257e:	f7ef f87b 	bl	8001678 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8012582:	f001 fc21 	bl	8013dc8 <UTIL_TIMER_GetCurrentTime>
 8012586:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8012588:	4620      	mov	r0, r4
 801258a:	f001 fc27 	bl	8013ddc <UTIL_TIMER_GetElapsedTime>
 801258e:	42a8      	cmp	r0, r5
 8012590:	d206      	bcs.n	80125a0 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8012592:	2000      	movs	r0, #0
 8012594:	f7ff f9c7 	bl	8011926 <RadioRssi>
        if( rssi > rssiThresh )
 8012598:	42b0      	cmp	r0, r6
 801259a:	ddf5      	ble.n	8012588 <RadioIsChannelFree+0x58>
            status = false;
 801259c:	2400      	movs	r4, #0
 801259e:	e000      	b.n	80125a2 <RadioIsChannelFree+0x72>
    bool status = true;
 80125a0:	2401      	movs	r4, #1
    RadioStandby( );
 80125a2:	f7fe ffef 	bl	8011584 <RadioStandby>
}
 80125a6:	4620      	mov	r0, r4
 80125a8:	b00b      	add	sp, #44	@ 0x2c
 80125aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125ac <RadioInit>:
{
 80125ac:	b570      	push	{r4, r5, r6, lr}
 80125ae:	b082      	sub	sp, #8
    RadioEvents = events;
 80125b0:	4b1d      	ldr	r3, [pc, #116]	@ (8012628 <RadioInit+0x7c>)
 80125b2:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80125b4:	4d1d      	ldr	r5, [pc, #116]	@ (801262c <RadioInit+0x80>)
 80125b6:	2400      	movs	r4, #0
 80125b8:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 80125ba:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 80125bc:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80125be:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 80125c0:	481b      	ldr	r0, [pc, #108]	@ (8012630 <RadioInit+0x84>)
 80125c2:	f000 fb27 	bl	8012c14 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 80125c6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 80125c8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 80125ca:	f000 fa53 	bl	8012a74 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80125ce:	4621      	mov	r1, r4
 80125d0:	4620      	mov	r0, r4
 80125d2:	f000 fd1f 	bl	8013014 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80125d6:	2204      	movs	r2, #4
 80125d8:	4621      	mov	r1, r4
 80125da:	2001      	movs	r0, #1
 80125dc:	f000 fb9a 	bl	8012d14 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80125e0:	4623      	mov	r3, r4
 80125e2:	4622      	mov	r2, r4
 80125e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80125e8:	4608      	mov	r0, r1
 80125ea:	f000 fada 	bl	8012ba2 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 80125ee:	f7ff fa11 	bl	8011a14 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80125f2:	4e10      	ldr	r6, [pc, #64]	@ (8012634 <RadioInit+0x88>)
 80125f4:	9400      	str	r4, [sp, #0]
 80125f6:	4b10      	ldr	r3, [pc, #64]	@ (8012638 <RadioInit+0x8c>)
 80125f8:	4622      	mov	r2, r4
 80125fa:	f04f 31ff 	mov.w	r1, #4294967295
 80125fe:	4630      	mov	r0, r6
 8012600:	f001 fbc4 	bl	8013d8c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8012604:	4d0d      	ldr	r5, [pc, #52]	@ (801263c <RadioInit+0x90>)
 8012606:	9400      	str	r4, [sp, #0]
 8012608:	4b0d      	ldr	r3, [pc, #52]	@ (8012640 <RadioInit+0x94>)
 801260a:	4622      	mov	r2, r4
 801260c:	f04f 31ff 	mov.w	r1, #4294967295
 8012610:	4628      	mov	r0, r5
 8012612:	f001 fbbb 	bl	8013d8c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8012616:	4630      	mov	r0, r6
 8012618:	f001 fc16 	bl	8013e48 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801261c:	4628      	mov	r0, r5
 801261e:	f001 fc13 	bl	8013e48 <UTIL_TIMER_Stop>
}
 8012622:	b002      	add	sp, #8
 8012624:	bd70      	pop	{r4, r5, r6, pc}
 8012626:	bf00      	nop
 8012628:	20001264 	.word	0x20001264
 801262c:	20001208 	.word	0x20001208
 8012630:	080118f9 	.word	0x080118f9
 8012634:	200011f0 	.word	0x200011f0
 8012638:	08011415 	.word	0x08011415
 801263c:	200011d8 	.word	0x200011d8
 8012640:	0801143d 	.word	0x0801143d

08012644 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8012644:	4b01      	ldr	r3, [pc, #4]	@ (801264c <SUBGRF_GetOperatingMode+0x8>)
 8012646:	7818      	ldrb	r0, [r3, #0]
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	20001376 	.word	0x20001376

08012650 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8012650:	4b01      	ldr	r3, [pc, #4]	@ (8012658 <SUBGRF_GetPacketType+0x8>)
 8012652:	7818      	ldrb	r0, [r3, #0]
 8012654:	4770      	bx	lr
 8012656:	bf00      	nop
 8012658:	20001375 	.word	0x20001375

0801265c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801265c:	b500      	push	{lr}
 801265e:	b083      	sub	sp, #12
 8012660:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8012664:	2301      	movs	r3, #1
 8012666:	f10d 0207 	add.w	r2, sp, #7
 801266a:	4601      	mov	r1, r0
 801266c:	4802      	ldr	r0, [pc, #8]	@ (8012678 <SUBGRF_WriteRegister+0x1c>)
 801266e:	f7f4 fb17 	bl	8006ca0 <HAL_SUBGHZ_WriteRegisters>
}
 8012672:	b003      	add	sp, #12
 8012674:	f85d fb04 	ldr.w	pc, [sp], #4
 8012678:	200001ec 	.word	0x200001ec

0801267c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801267c:	b500      	push	{lr}
 801267e:	b083      	sub	sp, #12
 8012680:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8012682:	2301      	movs	r3, #1
 8012684:	f10d 0207 	add.w	r2, sp, #7
 8012688:	4803      	ldr	r0, [pc, #12]	@ (8012698 <SUBGRF_ReadRegister+0x1c>)
 801268a:	f7f4 fb59 	bl	8006d40 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 801268e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012692:	b003      	add	sp, #12
 8012694:	f85d fb04 	ldr.w	pc, [sp], #4
 8012698:	200001ec 	.word	0x200001ec

0801269c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 801269c:	b510      	push	{r4, lr}
 801269e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80126a0:	f7f1 fc54 	bl	8003f4c <RBI_IsDCDC>
 80126a4:	2801      	cmp	r0, #1
 80126a6:	d000      	beq.n	80126aa <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80126a8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80126aa:	f640 1023 	movw	r0, #2339	@ 0x923
 80126ae:	f7ff ffe5 	bl	801267c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80126b2:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80126b6:	4321      	orrs	r1, r4
 80126b8:	f640 1023 	movw	r0, #2339	@ 0x923
 80126bc:	f7ff ffce 	bl	801265c <SUBGRF_WriteRegister>
}
 80126c0:	e7f2      	b.n	80126a8 <Radio_SMPS_Set+0xc>

080126c2 <SUBGRF_SetWhiteningSeed>:
{
 80126c2:	b510      	push	{r4, lr}
 80126c4:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80126c6:	f7ff ffc3 	bl	8012650 <SUBGRF_GetPacketType>
 80126ca:	b100      	cbz	r0, 80126ce <SUBGRF_SetWhiteningSeed+0xc>
}
 80126cc:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80126ce:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80126d2:	f7ff ffd3 	bl	801267c <SUBGRF_ReadRegister>
 80126d6:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80126da:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80126de:	4301      	orrs	r1, r0
 80126e0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80126e4:	f7ff ffba 	bl	801265c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80126e8:	b2e1      	uxtb	r1, r4
 80126ea:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80126ee:	f7ff ffb5 	bl	801265c <SUBGRF_WriteRegister>
}
 80126f2:	e7eb      	b.n	80126cc <SUBGRF_SetWhiteningSeed+0xa>

080126f4 <SUBGRF_WriteRegisters>:
{
 80126f4:	b510      	push	{r4, lr}
 80126f6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126f8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126fc:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80126fe:	460a      	mov	r2, r1
 8012700:	4601      	mov	r1, r0
 8012702:	4803      	ldr	r0, [pc, #12]	@ (8012710 <SUBGRF_WriteRegisters+0x1c>)
 8012704:	f7f4 facc 	bl	8006ca0 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012708:	f384 8810 	msr	PRIMASK, r4
}
 801270c:	bd10      	pop	{r4, pc}
 801270e:	bf00      	nop
 8012710:	200001ec 	.word	0x200001ec

08012714 <SUBGRF_SetSyncWord>:
{
 8012714:	b508      	push	{r3, lr}
 8012716:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8012718:	2208      	movs	r2, #8
 801271a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801271e:	f7ff ffe9 	bl	80126f4 <SUBGRF_WriteRegisters>
}
 8012722:	2000      	movs	r0, #0
 8012724:	bd08      	pop	{r3, pc}

08012726 <SUBGRF_SetCrcSeed>:
{
 8012726:	b500      	push	{lr}
 8012728:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801272a:	0a03      	lsrs	r3, r0, #8
 801272c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8012730:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8012734:	f7ff ff8c 	bl	8012650 <SUBGRF_GetPacketType>
 8012738:	b110      	cbz	r0, 8012740 <SUBGRF_SetCrcSeed+0x1a>
}
 801273a:	b003      	add	sp, #12
 801273c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8012740:	2202      	movs	r2, #2
 8012742:	a901      	add	r1, sp, #4
 8012744:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8012748:	f7ff ffd4 	bl	80126f4 <SUBGRF_WriteRegisters>
}
 801274c:	e7f5      	b.n	801273a <SUBGRF_SetCrcSeed+0x14>

0801274e <SUBGRF_SetCrcPolynomial>:
{
 801274e:	b500      	push	{lr}
 8012750:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8012752:	0a03      	lsrs	r3, r0, #8
 8012754:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8012758:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 801275c:	f7ff ff78 	bl	8012650 <SUBGRF_GetPacketType>
 8012760:	b110      	cbz	r0, 8012768 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8012762:	b003      	add	sp, #12
 8012764:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8012768:	2202      	movs	r2, #2
 801276a:	a901      	add	r1, sp, #4
 801276c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8012770:	f7ff ffc0 	bl	80126f4 <SUBGRF_WriteRegisters>
}
 8012774:	e7f5      	b.n	8012762 <SUBGRF_SetCrcPolynomial+0x14>
	...

08012778 <SUBGRF_ReadRegisters>:
{
 8012778:	b510      	push	{r4, lr}
 801277a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801277c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012780:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8012782:	460a      	mov	r2, r1
 8012784:	4601      	mov	r1, r0
 8012786:	4803      	ldr	r0, [pc, #12]	@ (8012794 <SUBGRF_ReadRegisters+0x1c>)
 8012788:	f7f4 fada 	bl	8006d40 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801278c:	f384 8810 	msr	PRIMASK, r4
}
 8012790:	bd10      	pop	{r4, pc}
 8012792:	bf00      	nop
 8012794:	200001ec 	.word	0x200001ec

08012798 <SUBGRF_WriteBuffer>:
{
 8012798:	b510      	push	{r4, lr}
 801279a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801279c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80127a0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80127a2:	460a      	mov	r2, r1
 80127a4:	4601      	mov	r1, r0
 80127a6:	4803      	ldr	r0, [pc, #12]	@ (80127b4 <SUBGRF_WriteBuffer+0x1c>)
 80127a8:	f7f4 fc28 	bl	8006ffc <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127ac:	f384 8810 	msr	PRIMASK, r4
}
 80127b0:	bd10      	pop	{r4, pc}
 80127b2:	bf00      	nop
 80127b4:	200001ec 	.word	0x200001ec

080127b8 <SUBGRF_SetPayload>:
{
 80127b8:	b508      	push	{r3, lr}
 80127ba:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80127bc:	4601      	mov	r1, r0
 80127be:	2000      	movs	r0, #0
 80127c0:	f7ff ffea 	bl	8012798 <SUBGRF_WriteBuffer>
}
 80127c4:	bd08      	pop	{r3, pc}
	...

080127c8 <SUBGRF_ReadBuffer>:
{
 80127c8:	b510      	push	{r4, lr}
 80127ca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80127d0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80127d2:	460a      	mov	r2, r1
 80127d4:	4601      	mov	r1, r0
 80127d6:	4803      	ldr	r0, [pc, #12]	@ (80127e4 <SUBGRF_ReadBuffer+0x1c>)
 80127d8:	f7f4 fc5a 	bl	8007090 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127dc:	f384 8810 	msr	PRIMASK, r4
}
 80127e0:	bd10      	pop	{r4, pc}
 80127e2:	bf00      	nop
 80127e4:	200001ec 	.word	0x200001ec

080127e8 <SUBGRF_WriteCommand>:
{
 80127e8:	b510      	push	{r4, lr}
 80127ea:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80127f0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80127f2:	460a      	mov	r2, r1
 80127f4:	4601      	mov	r1, r0
 80127f6:	4803      	ldr	r0, [pc, #12]	@ (8012804 <SUBGRF_WriteCommand+0x1c>)
 80127f8:	f7f4 faf6 	bl	8006de8 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127fc:	f384 8810 	msr	PRIMASK, r4
}
 8012800:	bd10      	pop	{r4, pc}
 8012802:	bf00      	nop
 8012804:	200001ec 	.word	0x200001ec

08012808 <SUBGRF_SetSleep>:
{
 8012808:	b510      	push	{r4, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801280e:	2000      	movs	r0, #0
 8012810:	f7f1 fb90 	bl	8003f34 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012814:	2002      	movs	r0, #2
 8012816:	f7ff ff41 	bl	801269c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801281a:	f004 0304 	and.w	r3, r4, #4
 801281e:	f004 0202 	and.w	r2, r4, #2
 8012822:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8012824:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012828:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801282a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801282e:	2201      	movs	r2, #1
 8012830:	f10d 0107 	add.w	r1, sp, #7
 8012834:	2084      	movs	r0, #132	@ 0x84
 8012836:	f7ff ffd7 	bl	80127e8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801283a:	4b02      	ldr	r3, [pc, #8]	@ (8012844 <SUBGRF_SetSleep+0x3c>)
 801283c:	2200      	movs	r2, #0
 801283e:	701a      	strb	r2, [r3, #0]
}
 8012840:	b002      	add	sp, #8
 8012842:	bd10      	pop	{r4, pc}
 8012844:	20001376 	.word	0x20001376

08012848 <SUBGRF_SetStandby>:
{
 8012848:	b500      	push	{lr}
 801284a:	b083      	sub	sp, #12
 801284c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8012850:	2201      	movs	r2, #1
 8012852:	f10d 0107 	add.w	r1, sp, #7
 8012856:	2080      	movs	r0, #128	@ 0x80
 8012858:	f7ff ffc6 	bl	80127e8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801285c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012860:	b92b      	cbnz	r3, 801286e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8012862:	4b05      	ldr	r3, [pc, #20]	@ (8012878 <SUBGRF_SetStandby+0x30>)
 8012864:	2201      	movs	r2, #1
 8012866:	701a      	strb	r2, [r3, #0]
}
 8012868:	b003      	add	sp, #12
 801286a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801286e:	4b02      	ldr	r3, [pc, #8]	@ (8012878 <SUBGRF_SetStandby+0x30>)
 8012870:	2202      	movs	r2, #2
 8012872:	701a      	strb	r2, [r3, #0]
}
 8012874:	e7f8      	b.n	8012868 <SUBGRF_SetStandby+0x20>
 8012876:	bf00      	nop
 8012878:	20001376 	.word	0x20001376

0801287c <SUBGRF_SetTx>:
{
 801287c:	b500      	push	{lr}
 801287e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8012880:	4b0a      	ldr	r3, [pc, #40]	@ (80128ac <SUBGRF_SetTx+0x30>)
 8012882:	2204      	movs	r2, #4
 8012884:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012886:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801288a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801288e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012892:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012896:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801289a:	2203      	movs	r2, #3
 801289c:	a901      	add	r1, sp, #4
 801289e:	2083      	movs	r0, #131	@ 0x83
 80128a0:	f7ff ffa2 	bl	80127e8 <SUBGRF_WriteCommand>
}
 80128a4:	b003      	add	sp, #12
 80128a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80128aa:	bf00      	nop
 80128ac:	20001376 	.word	0x20001376

080128b0 <SUBGRF_SendPayload>:
{
 80128b0:	b510      	push	{r4, lr}
 80128b2:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80128b4:	f7ff ff80 	bl	80127b8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80128b8:	4620      	mov	r0, r4
 80128ba:	f7ff ffdf 	bl	801287c <SUBGRF_SetTx>
}
 80128be:	bd10      	pop	{r4, pc}

080128c0 <SUBGRF_SetRx>:
{
 80128c0:	b500      	push	{lr}
 80128c2:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80128c4:	4b0a      	ldr	r3, [pc, #40]	@ (80128f0 <SUBGRF_SetRx+0x30>)
 80128c6:	2205      	movs	r2, #5
 80128c8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80128ca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80128ce:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80128d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80128d6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80128da:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80128de:	2203      	movs	r2, #3
 80128e0:	a901      	add	r1, sp, #4
 80128e2:	2082      	movs	r0, #130	@ 0x82
 80128e4:	f7ff ff80 	bl	80127e8 <SUBGRF_WriteCommand>
}
 80128e8:	b003      	add	sp, #12
 80128ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80128ee:	bf00      	nop
 80128f0:	20001376 	.word	0x20001376

080128f4 <SUBGRF_GetRandom>:
{
 80128f4:	b570      	push	{r4, r5, r6, lr}
 80128f6:	b082      	sub	sp, #8
    uint32_t number = 0;
 80128f8:	2600      	movs	r6, #0
 80128fa:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80128fc:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8012900:	f7ff febc 	bl	801267c <SUBGRF_ReadRegister>
 8012904:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8012906:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 801290a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801290e:	f7ff fea5 	bl	801265c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8012912:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8012916:	f7ff feb1 	bl	801267c <SUBGRF_ReadRegister>
 801291a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801291c:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8012920:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8012924:	f7ff fe9a 	bl	801265c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8012928:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801292c:	f7ff ffc8 	bl	80128c0 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8012930:	2204      	movs	r2, #4
 8012932:	eb0d 0102 	add.w	r1, sp, r2
 8012936:	f640 0019 	movw	r0, #2073	@ 0x819
 801293a:	f7ff ff1d 	bl	8012778 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801293e:	4630      	mov	r0, r6
 8012940:	f7ff ff82 	bl	8012848 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8012944:	4629      	mov	r1, r5
 8012946:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801294a:	f7ff fe87 	bl	801265c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801294e:	4621      	mov	r1, r4
 8012950:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8012954:	f7ff fe82 	bl	801265c <SUBGRF_WriteRegister>
}
 8012958:	9801      	ldr	r0, [sp, #4]
 801295a:	b002      	add	sp, #8
 801295c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012960 <SUBGRF_SetRxBoosted>:
{
 8012960:	b510      	push	{r4, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8012966:	4b0c      	ldr	r3, [pc, #48]	@ (8012998 <SUBGRF_SetRxBoosted+0x38>)
 8012968:	2205      	movs	r2, #5
 801296a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801296c:	2197      	movs	r1, #151	@ 0x97
 801296e:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8012972:	f7ff fe73 	bl	801265c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012976:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801297a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801297e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8012982:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012986:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801298a:	2203      	movs	r2, #3
 801298c:	a901      	add	r1, sp, #4
 801298e:	2082      	movs	r0, #130	@ 0x82
 8012990:	f7ff ff2a 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012994:	b002      	add	sp, #8
 8012996:	bd10      	pop	{r4, pc}
 8012998:	20001376 	.word	0x20001376

0801299c <SUBGRF_SetRxDutyCycle>:
{
 801299c:	b500      	push	{lr}
 801299e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80129a0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80129a4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80129a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80129ac:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80129b0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80129b4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80129b8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80129bc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80129c0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80129c4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80129c8:	2206      	movs	r2, #6
 80129ca:	4669      	mov	r1, sp
 80129cc:	2094      	movs	r0, #148	@ 0x94
 80129ce:	f7ff ff0b 	bl	80127e8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80129d2:	4b03      	ldr	r3, [pc, #12]	@ (80129e0 <SUBGRF_SetRxDutyCycle+0x44>)
 80129d4:	2206      	movs	r2, #6
 80129d6:	701a      	strb	r2, [r3, #0]
}
 80129d8:	b003      	add	sp, #12
 80129da:	f85d fb04 	ldr.w	pc, [sp], #4
 80129de:	bf00      	nop
 80129e0:	20001376 	.word	0x20001376

080129e4 <SUBGRF_SetCad>:
{
 80129e4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80129e6:	2200      	movs	r2, #0
 80129e8:	4611      	mov	r1, r2
 80129ea:	20c5      	movs	r0, #197	@ 0xc5
 80129ec:	f7ff fefc 	bl	80127e8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80129f0:	4b01      	ldr	r3, [pc, #4]	@ (80129f8 <SUBGRF_SetCad+0x14>)
 80129f2:	2207      	movs	r2, #7
 80129f4:	701a      	strb	r2, [r3, #0]
}
 80129f6:	bd08      	pop	{r3, pc}
 80129f8:	20001376 	.word	0x20001376

080129fc <SUBGRF_SetTxContinuousWave>:
{
 80129fc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80129fe:	2200      	movs	r2, #0
 8012a00:	4611      	mov	r1, r2
 8012a02:	20d1      	movs	r0, #209	@ 0xd1
 8012a04:	f7ff fef0 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012a08:	bd08      	pop	{r3, pc}

08012a0a <SUBGRF_SetTxInfinitePreamble>:
{
 8012a0a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	4611      	mov	r1, r2
 8012a10:	20d2      	movs	r0, #210	@ 0xd2
 8012a12:	f7ff fee9 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012a16:	bd08      	pop	{r3, pc}

08012a18 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8012a18:	b500      	push	{lr}
 8012a1a:	b083      	sub	sp, #12
 8012a1c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8012a20:	2201      	movs	r2, #1
 8012a22:	f10d 0107 	add.w	r1, sp, #7
 8012a26:	209f      	movs	r0, #159	@ 0x9f
 8012a28:	f7ff fede 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012a2c:	b003      	add	sp, #12
 8012a2e:	f85d fb04 	ldr.w	pc, [sp], #4

08012a32 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8012a32:	b500      	push	{lr}
 8012a34:	b083      	sub	sp, #12
 8012a36:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	f10d 0107 	add.w	r1, sp, #7
 8012a40:	20a0      	movs	r0, #160	@ 0xa0
 8012a42:	f7ff fed1 	bl	80127e8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8012a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012a4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8012a4c:	d90f      	bls.n	8012a6e <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8012a4e:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8012a50:	2200      	movs	r2, #0
        while( mant > 31 )
 8012a52:	e002      	b.n	8012a5a <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8012a54:	089b      	lsrs	r3, r3, #2
            exp++;
 8012a56:	3201      	adds	r2, #1
 8012a58:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8012a5a:	2b1f      	cmp	r3, #31
 8012a5c:	d8fa      	bhi.n	8012a54 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8012a5e:	00d9      	lsls	r1, r3, #3
 8012a60:	b2c9      	uxtb	r1, r1
 8012a62:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012a64:	b2c9      	uxtb	r1, r1
 8012a66:	f240 7006 	movw	r0, #1798	@ 0x706
 8012a6a:	f7ff fdf7 	bl	801265c <SUBGRF_WriteRegister>
}
 8012a6e:	b003      	add	sp, #12
 8012a70:	f85d fb04 	ldr.w	pc, [sp], #4

08012a74 <SUBGRF_SetRegulatorMode>:
{
 8012a74:	b500      	push	{lr}
 8012a76:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8012a78:	f7f1 fa68 	bl	8003f4c <RBI_IsDCDC>
 8012a7c:	2801      	cmp	r0, #1
 8012a7e:	d00b      	beq.n	8012a98 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8012a80:	2300      	movs	r3, #0
 8012a82:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8012a86:	2201      	movs	r2, #1
 8012a88:	f10d 0107 	add.w	r1, sp, #7
 8012a8c:	2096      	movs	r0, #150	@ 0x96
 8012a8e:	f7ff feab 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012a92:	b003      	add	sp, #12
 8012a94:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a9e:	e7f2      	b.n	8012a86 <SUBGRF_SetRegulatorMode+0x12>

08012aa0 <SUBGRF_Calibrate>:
{
 8012aa0:	b500      	push	{lr}
 8012aa2:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012aa4:	f000 0340 	and.w	r3, r0, #64	@ 0x40
 8012aa8:	f000 0220 	and.w	r2, r0, #32
 8012aac:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8012aae:	f000 0210 	and.w	r2, r0, #16
 8012ab2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012ab4:	f000 0208 	and.w	r2, r0, #8
 8012ab8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8012aba:	f000 0204 	and.w	r2, r0, #4
 8012abe:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012ac0:	f000 0202 	and.w	r2, r0, #2
 8012ac4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8012ac6:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012aca:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012acc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	f10d 0107 	add.w	r1, sp, #7
 8012ad6:	2089      	movs	r0, #137	@ 0x89
 8012ad8:	f7ff fe86 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012adc:	b003      	add	sp, #12
 8012ade:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012ae4 <SUBGRF_CalibrateImage>:
{
 8012ae4:	b500      	push	{lr}
 8012ae6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8012ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8012b68 <SUBGRF_CalibrateImage+0x84>)
 8012aea:	4298      	cmp	r0, r3
 8012aec:	d90d      	bls.n	8012b0a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8012aee:	23e1      	movs	r3, #225	@ 0xe1
 8012af0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8012af4:	23e9      	movs	r3, #233	@ 0xe9
 8012af6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8012afa:	2202      	movs	r2, #2
 8012afc:	a901      	add	r1, sp, #4
 8012afe:	2098      	movs	r0, #152	@ 0x98
 8012b00:	f7ff fe72 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012b04:	b003      	add	sp, #12
 8012b06:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8012b0a:	4b18      	ldr	r3, [pc, #96]	@ (8012b6c <SUBGRF_CalibrateImage+0x88>)
 8012b0c:	4298      	cmp	r0, r3
 8012b0e:	d906      	bls.n	8012b1e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8012b10:	23d7      	movs	r3, #215	@ 0xd7
 8012b12:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8012b16:	23db      	movs	r3, #219	@ 0xdb
 8012b18:	f88d 3005 	strb.w	r3, [sp, #5]
 8012b1c:	e7ed      	b.n	8012afa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8012b1e:	4b14      	ldr	r3, [pc, #80]	@ (8012b70 <SUBGRF_CalibrateImage+0x8c>)
 8012b20:	4298      	cmp	r0, r3
 8012b22:	d906      	bls.n	8012b32 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8012b24:	23c1      	movs	r3, #193	@ 0xc1
 8012b26:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8012b2a:	23c5      	movs	r3, #197	@ 0xc5
 8012b2c:	f88d 3005 	strb.w	r3, [sp, #5]
 8012b30:	e7e3      	b.n	8012afa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8012b32:	4b10      	ldr	r3, [pc, #64]	@ (8012b74 <SUBGRF_CalibrateImage+0x90>)
 8012b34:	4298      	cmp	r0, r3
 8012b36:	d906      	bls.n	8012b46 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8012b38:	2375      	movs	r3, #117	@ 0x75
 8012b3a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8012b3e:	2381      	movs	r3, #129	@ 0x81
 8012b40:	f88d 3005 	strb.w	r3, [sp, #5]
 8012b44:	e7d9      	b.n	8012afa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8012b46:	4b0c      	ldr	r3, [pc, #48]	@ (8012b78 <SUBGRF_CalibrateImage+0x94>)
 8012b48:	4298      	cmp	r0, r3
 8012b4a:	d906      	bls.n	8012b5a <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8012b4c:	236b      	movs	r3, #107	@ 0x6b
 8012b4e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8012b52:	236f      	movs	r3, #111	@ 0x6f
 8012b54:	f88d 3005 	strb.w	r3, [sp, #5]
 8012b58:	e7cf      	b.n	8012afa <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8012b5a:	2329      	movs	r3, #41	@ 0x29
 8012b5c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8012b60:	232b      	movs	r3, #43	@ 0x2b
 8012b62:	f88d 3005 	strb.w	r3, [sp, #5]
 8012b66:	e7c8      	b.n	8012afa <SUBGRF_CalibrateImage+0x16>
 8012b68:	35a4e900 	.word	0x35a4e900
 8012b6c:	32a9f880 	.word	0x32a9f880
 8012b70:	2de54480 	.word	0x2de54480
 8012b74:	1b6b0b00 	.word	0x1b6b0b00
 8012b78:	1954fc40 	.word	0x1954fc40

08012b7c <SUBGRF_SetPaConfig>:
{
 8012b7c:	b500      	push	{lr}
 8012b7e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8012b80:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8012b84:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8012b88:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8012b8c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012b90:	2204      	movs	r2, #4
 8012b92:	eb0d 0102 	add.w	r1, sp, r2
 8012b96:	2095      	movs	r0, #149	@ 0x95
 8012b98:	f7ff fe26 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012b9c:	b003      	add	sp, #12
 8012b9e:	f85d fb04 	ldr.w	pc, [sp], #4

08012ba2 <SUBGRF_SetDioIrqParams>:
{
 8012ba2:	b500      	push	{lr}
 8012ba4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8012ba6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8012baa:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8012bae:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8012bb2:	0a08      	lsrs	r0, r1, #8
 8012bb4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8012bb8:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8012bbc:	0a11      	lsrs	r1, r2, #8
 8012bbe:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8012bc2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8012bc6:	0a1a      	lsrs	r2, r3, #8
 8012bc8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8012bcc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012bd0:	2208      	movs	r2, #8
 8012bd2:	4669      	mov	r1, sp
 8012bd4:	4610      	mov	r0, r2
 8012bd6:	f7ff fe07 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012bda:	b003      	add	sp, #12
 8012bdc:	f85d fb04 	ldr.w	pc, [sp], #4

08012be0 <SUBGRF_SetTcxoMode>:
{
 8012be0:	b500      	push	{lr}
 8012be2:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8012be4:	f000 0007 	and.w	r0, r0, #7
 8012be8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012bec:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012bf0:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012bf4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012bf8:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8012bfc:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8012c00:	2204      	movs	r2, #4
 8012c02:	eb0d 0102 	add.w	r1, sp, r2
 8012c06:	2097      	movs	r0, #151	@ 0x97
 8012c08:	f7ff fdee 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012c0c:	b003      	add	sp, #12
 8012c0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012c14 <SUBGRF_Init>:
{
 8012c14:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8012c16:	b108      	cbz	r0, 8012c1c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8012c18:	4a18      	ldr	r2, [pc, #96]	@ (8012c7c <SUBGRF_Init+0x68>)
 8012c1a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8012c1c:	f7ee fc28 	bl	8001470 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012c20:	2002      	movs	r0, #2
 8012c22:	f7ff fd3b 	bl	801269c <Radio_SMPS_Set>
    ImageCalibrated = false;
 8012c26:	2000      	movs	r0, #0
 8012c28:	4b15      	ldr	r3, [pc, #84]	@ (8012c80 <SUBGRF_Init+0x6c>)
 8012c2a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8012c2c:	f7ff fe0c 	bl	8012848 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8012c30:	f7f1 f988 	bl	8003f44 <RBI_IsTCXO>
 8012c34:	2801      	cmp	r0, #1
 8012c36:	d014      	beq.n	8012c62 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012c38:	2120      	movs	r1, #32
 8012c3a:	f640 1011 	movw	r0, #2321	@ 0x911
 8012c3e:	f7ff fd0d 	bl	801265c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012c42:	2120      	movs	r1, #32
 8012c44:	f640 1012 	movw	r0, #2322	@ 0x912
 8012c48:	f7ff fd08 	bl	801265c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8012c4c:	210e      	movs	r1, #14
 8012c4e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8012c52:	f7ff fd03 	bl	801265c <SUBGRF_WriteRegister>
    RBI_Init();
 8012c56:	f7f1 f969 	bl	8003f2c <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8012c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8012c84 <SUBGRF_Init+0x70>)
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	701a      	strb	r2, [r3, #0]
}
 8012c60:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8012c62:	2140      	movs	r1, #64	@ 0x40
 8012c64:	f7ff ffbc 	bl	8012be0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8012c68:	2100      	movs	r1, #0
 8012c6a:	f640 1011 	movw	r0, #2321	@ 0x911
 8012c6e:	f7ff fcf5 	bl	801265c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8012c72:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 8012c76:	f7ff ff13 	bl	8012aa0 <SUBGRF_Calibrate>
 8012c7a:	e7e7      	b.n	8012c4c <SUBGRF_Init+0x38>
 8012c7c:	20001368 	.word	0x20001368
 8012c80:	2000136c 	.word	0x2000136c
 8012c84:	20001376 	.word	0x20001376

08012c88 <SUBGRF_SetRfFrequency>:
{
 8012c88:	b510      	push	{r4, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8012c8e:	4b12      	ldr	r3, [pc, #72]	@ (8012cd8 <SUBGRF_SetRfFrequency+0x50>)
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	b1d3      	cbz	r3, 8012cca <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8012c94:	4a11      	ldr	r2, [pc, #68]	@ (8012cdc <SUBGRF_SetRfFrequency+0x54>)
 8012c96:	2300      	movs	r3, #0
 8012c98:	0660      	lsls	r0, r4, #25
 8012c9a:	09e1      	lsrs	r1, r4, #7
 8012c9c:	f7ed fdee 	bl	800087c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8012ca0:	0e03      	lsrs	r3, r0, #24
 8012ca2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8012ca6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012caa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8012cae:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012cb2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8012cb6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8012cba:	2204      	movs	r2, #4
 8012cbc:	eb0d 0102 	add.w	r1, sp, r2
 8012cc0:	2086      	movs	r0, #134	@ 0x86
 8012cc2:	f7ff fd91 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012cc6:	b002      	add	sp, #8
 8012cc8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8012cca:	f7ff ff0b 	bl	8012ae4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8012cce:	4b02      	ldr	r3, [pc, #8]	@ (8012cd8 <SUBGRF_SetRfFrequency+0x50>)
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	701a      	strb	r2, [r3, #0]
 8012cd4:	e7de      	b.n	8012c94 <SUBGRF_SetRfFrequency+0xc>
 8012cd6:	bf00      	nop
 8012cd8:	2000136c 	.word	0x2000136c
 8012cdc:	01e84800 	.word	0x01e84800

08012ce0 <SUBGRF_SetPacketType>:
{
 8012ce0:	b500      	push	{lr}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8012ce8:	b2c3      	uxtb	r3, r0
 8012cea:	4a09      	ldr	r2, [pc, #36]	@ (8012d10 <SUBGRF_SetPacketType+0x30>)
 8012cec:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8012cee:	b143      	cbz	r3, 8012d02 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	f10d 0107 	add.w	r1, sp, #7
 8012cf6:	208a      	movs	r0, #138	@ 0x8a
 8012cf8:	f7ff fd76 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012cfc:	b003      	add	sp, #12
 8012cfe:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8012d02:	2100      	movs	r1, #0
 8012d04:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8012d08:	f7ff fca8 	bl	801265c <SUBGRF_WriteRegister>
 8012d0c:	e7f0      	b.n	8012cf0 <SUBGRF_SetPacketType+0x10>
 8012d0e:	bf00      	nop
 8012d10:	20001375 	.word	0x20001375

08012d14 <SUBGRF_SetTxParams>:
{
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	460c      	mov	r4, r1
 8012d1a:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8012d1c:	2801      	cmp	r0, #1
 8012d1e:	d035      	beq.n	8012d8c <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8012d20:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8012d24:	f7ff fcaa 	bl	801267c <SUBGRF_ReadRegister>
 8012d28:	f040 011e 	orr.w	r1, r0, #30
 8012d2c:	b2c9      	uxtb	r1, r1
 8012d2e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8012d32:	f7ff fc93 	bl	801265c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8012d36:	2001      	movs	r0, #1
 8012d38:	f7f1 f90c 	bl	8003f54 <RBI_GetRFOMaxPowerConfig>
 8012d3c:	4605      	mov	r5, r0
        if (power > max_power)
 8012d3e:	4284      	cmp	r4, r0
 8012d40:	dd00      	ble.n	8012d44 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8012d42:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8012d44:	2d14      	cmp	r5, #20
 8012d46:	d054      	beq.n	8012df2 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8012d48:	2d11      	cmp	r5, #17
 8012d4a:	d05c      	beq.n	8012e06 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8012d4c:	2d0e      	cmp	r5, #14
 8012d4e:	d064      	beq.n	8012e1a <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8012d50:	2301      	movs	r3, #1
 8012d52:	2200      	movs	r2, #0
 8012d54:	2107      	movs	r1, #7
 8012d56:	2004      	movs	r0, #4
 8012d58:	f7ff ff10 	bl	8012b7c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012d5c:	1b64      	subs	r4, r4, r5
 8012d5e:	3416      	adds	r4, #22
 8012d60:	b265      	sxtb	r5, r4
        if (power < -9)
 8012d62:	f115 0f09 	cmn.w	r5, #9
 8012d66:	da01      	bge.n	8012d6c <SUBGRF_SetTxParams+0x58>
            power = -9;
 8012d68:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8012d6c:	2138      	movs	r1, #56	@ 0x38
 8012d6e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8012d72:	f7ff fc73 	bl	801265c <SUBGRF_WriteRegister>
    buf[0] = power;
 8012d76:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8012d7a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8012d7e:	2202      	movs	r2, #2
 8012d80:	a901      	add	r1, sp, #4
 8012d82:	208e      	movs	r0, #142	@ 0x8e
 8012d84:	f7ff fd30 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012d88:	b002      	add	sp, #8
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	f7f1 f8e1 	bl	8003f54 <RBI_GetRFOMaxPowerConfig>
 8012d92:	4605      	mov	r5, r0
        if (power >  max_power)
 8012d94:	4284      	cmp	r4, r0
 8012d96:	dd00      	ble.n	8012d9a <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8012d98:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8012d9a:	2d0e      	cmp	r5, #14
 8012d9c:	d015      	beq.n	8012dca <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8012d9e:	2d0a      	cmp	r5, #10
 8012da0:	d01d      	beq.n	8012dde <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8012da2:	2301      	movs	r3, #1
 8012da4:	461a      	mov	r2, r3
 8012da6:	2100      	movs	r1, #0
 8012da8:	2007      	movs	r0, #7
 8012daa:	f7ff fee7 	bl	8012b7c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012dae:	1b65      	subs	r5, r4, r5
 8012db0:	350e      	adds	r5, #14
 8012db2:	b26d      	sxtb	r5, r5
        if (power < -17)
 8012db4:	f115 0f11 	cmn.w	r5, #17
 8012db8:	da01      	bge.n	8012dbe <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8012dba:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8012dbe:	2118      	movs	r1, #24
 8012dc0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8012dc4:	f7ff fc4a 	bl	801265c <SUBGRF_WriteRegister>
 8012dc8:	e7d5      	b.n	8012d76 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8012dca:	2301      	movs	r3, #1
 8012dcc:	461a      	mov	r2, r3
 8012dce:	2100      	movs	r1, #0
 8012dd0:	2004      	movs	r0, #4
 8012dd2:	f7ff fed3 	bl	8012b7c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012dd6:	1b65      	subs	r5, r4, r5
 8012dd8:	350e      	adds	r5, #14
 8012dda:	b26d      	sxtb	r5, r5
 8012ddc:	e7ea      	b.n	8012db4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8012dde:	2301      	movs	r3, #1
 8012de0:	461a      	mov	r2, r3
 8012de2:	2100      	movs	r1, #0
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7ff fec9 	bl	8012b7c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8012dea:	1b65      	subs	r5, r4, r5
 8012dec:	350d      	adds	r5, #13
 8012dee:	b26d      	sxtb	r5, r5
 8012df0:	e7e0      	b.n	8012db4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8012df2:	2301      	movs	r3, #1
 8012df4:	2200      	movs	r2, #0
 8012df6:	2105      	movs	r1, #5
 8012df8:	2003      	movs	r0, #3
 8012dfa:	f7ff febf 	bl	8012b7c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012dfe:	1b65      	subs	r5, r4, r5
 8012e00:	3516      	adds	r5, #22
 8012e02:	b26d      	sxtb	r5, r5
 8012e04:	e7ad      	b.n	8012d62 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8012e06:	2301      	movs	r3, #1
 8012e08:	2200      	movs	r2, #0
 8012e0a:	2103      	movs	r1, #3
 8012e0c:	2002      	movs	r0, #2
 8012e0e:	f7ff feb5 	bl	8012b7c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012e12:	1b65      	subs	r5, r4, r5
 8012e14:	3516      	adds	r5, #22
 8012e16:	b26d      	sxtb	r5, r5
 8012e18:	e7a3      	b.n	8012d62 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	2102      	movs	r1, #2
 8012e20:	4608      	mov	r0, r1
 8012e22:	f7ff feab 	bl	8012b7c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012e26:	1b65      	subs	r5, r4, r5
 8012e28:	350e      	adds	r5, #14
 8012e2a:	b26d      	sxtb	r5, r5
 8012e2c:	e799      	b.n	8012d62 <SUBGRF_SetTxParams+0x4e>
	...

08012e30 <SUBGRF_SetModulationParams>:
{
 8012e30:	b510      	push	{r4, lr}
 8012e32:	b082      	sub	sp, #8
 8012e34:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8012e36:	2300      	movs	r3, #0
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	9301      	str	r3, [sp, #4]
    if( PacketType != modulationParams->PacketType )
 8012e3c:	7800      	ldrb	r0, [r0, #0]
 8012e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8012f28 <SUBGRF_SetModulationParams+0xf8>)
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	4298      	cmp	r0, r3
 8012e44:	d106      	bne.n	8012e54 <SUBGRF_SetModulationParams+0x24>
    switch( modulationParams->PacketType )
 8012e46:	7823      	ldrb	r3, [r4, #0]
 8012e48:	2b03      	cmp	r3, #3
 8012e4a:	d82c      	bhi.n	8012ea6 <SUBGRF_SetModulationParams+0x76>
 8012e4c:	e8df f003 	tbb	[pc, r3]
 8012e50:	542d4205 	.word	0x542d4205
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8012e54:	f7ff ff44 	bl	8012ce0 <SUBGRF_SetPacketType>
 8012e58:	e7f5      	b.n	8012e46 <SUBGRF_SetModulationParams+0x16>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8012e5a:	6862      	ldr	r2, [r4, #4]
 8012e5c:	4b33      	ldr	r3, [pc, #204]	@ (8012f2c <SUBGRF_SetModulationParams+0xfc>)
 8012e5e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012e62:	0c1a      	lsrs	r2, r3, #16
 8012e64:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012e68:	0a1a      	lsrs	r2, r3, #8
 8012e6a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012e6e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012e72:	7b23      	ldrb	r3, [r4, #12]
 8012e74:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012e78:	7b63      	ldrb	r3, [r4, #13]
 8012e7a:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8012e7e:	68a1      	ldr	r1, [r4, #8]
 8012e80:	4a2b      	ldr	r2, [pc, #172]	@ (8012f30 <SUBGRF_SetModulationParams+0x100>)
 8012e82:	2300      	movs	r3, #0
 8012e84:	0648      	lsls	r0, r1, #25
 8012e86:	09c9      	lsrs	r1, r1, #7
 8012e88:	f7ed fcf8 	bl	800087c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8012e8c:	0c03      	lsrs	r3, r0, #16
 8012e8e:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012e92:	0a03      	lsrs	r3, r0, #8
 8012e94:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8012e98:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012e9c:	2208      	movs	r2, #8
 8012e9e:	4669      	mov	r1, sp
 8012ea0:	208b      	movs	r0, #139	@ 0x8b
 8012ea2:	f7ff fca1 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012ea6:	b002      	add	sp, #8
 8012ea8:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012eaa:	6922      	ldr	r2, [r4, #16]
 8012eac:	4b1f      	ldr	r3, [pc, #124]	@ (8012f2c <SUBGRF_SetModulationParams+0xfc>)
 8012eae:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012eb2:	0c1a      	lsrs	r2, r3, #16
 8012eb4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012eb8:	0a1a      	lsrs	r2, r3, #8
 8012eba:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012ebe:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8012ec2:	7d23      	ldrb	r3, [r4, #20]
 8012ec4:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012ec8:	2204      	movs	r2, #4
 8012eca:	4669      	mov	r1, sp
 8012ecc:	208b      	movs	r0, #139	@ 0x8b
 8012ece:	f7ff fc8b 	bl	80127e8 <SUBGRF_WriteCommand>
        break;
 8012ed2:	e7e8      	b.n	8012ea6 <SUBGRF_SetModulationParams+0x76>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8012ed4:	7e23      	ldrb	r3, [r4, #24]
 8012ed6:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8012eda:	7e63      	ldrb	r3, [r4, #25]
 8012edc:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8012ee0:	7ea3      	ldrb	r3, [r4, #26]
 8012ee2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8012ee6:	7ee3      	ldrb	r3, [r4, #27]
 8012ee8:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012eec:	2204      	movs	r2, #4
 8012eee:	4669      	mov	r1, sp
 8012ef0:	208b      	movs	r0, #139	@ 0x8b
 8012ef2:	f7ff fc79 	bl	80127e8 <SUBGRF_WriteCommand>
        break;
 8012ef6:	e7d6      	b.n	8012ea6 <SUBGRF_SetModulationParams+0x76>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8012ef8:	6862      	ldr	r2, [r4, #4]
 8012efa:	4b0c      	ldr	r3, [pc, #48]	@ (8012f2c <SUBGRF_SetModulationParams+0xfc>)
 8012efc:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012f00:	0c1a      	lsrs	r2, r3, #16
 8012f02:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012f06:	0a1a      	lsrs	r2, r3, #8
 8012f08:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012f0c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012f10:	7b23      	ldrb	r3, [r4, #12]
 8012f12:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012f16:	7b63      	ldrb	r3, [r4, #13]
 8012f18:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012f1c:	2205      	movs	r2, #5
 8012f1e:	4669      	mov	r1, sp
 8012f20:	208b      	movs	r0, #139	@ 0x8b
 8012f22:	f7ff fc61 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012f26:	e7be      	b.n	8012ea6 <SUBGRF_SetModulationParams+0x76>
 8012f28:	20001375 	.word	0x20001375
 8012f2c:	3d090000 	.word	0x3d090000
 8012f30:	01e84800 	.word	0x01e84800

08012f34 <SUBGRF_SetPacketParams>:
{
 8012f34:	b510      	push	{r4, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	9301      	str	r3, [sp, #4]
 8012f3e:	9302      	str	r3, [sp, #8]
 8012f40:	f88d 300c 	strb.w	r3, [sp, #12]
    if( PacketType != packetParams->PacketType )
 8012f44:	7800      	ldrb	r0, [r0, #0]
 8012f46:	4b31      	ldr	r3, [pc, #196]	@ (801300c <SUBGRF_SetPacketParams+0xd8>)
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	4298      	cmp	r0, r3
 8012f4c:	d106      	bne.n	8012f5c <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8012f4e:	7823      	ldrb	r3, [r4, #0]
 8012f50:	2b03      	cmp	r3, #3
 8012f52:	d82a      	bhi.n	8012faa <SUBGRF_SetPacketParams+0x76>
 8012f54:	e8df f003 	tbb	[pc, r3]
 8012f58:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8012f5c:	f7ff fec0 	bl	8012ce0 <SUBGRF_SetPacketType>
 8012f60:	e7f5      	b.n	8012f4e <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8012f62:	7a63      	ldrb	r3, [r4, #9]
 8012f64:	2bf1      	cmp	r3, #241	@ 0xf1
 8012f66:	d022      	beq.n	8012fae <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8012f68:	2bf2      	cmp	r3, #242	@ 0xf2
 8012f6a:	d02a      	beq.n	8012fc2 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8012f6c:	8862      	ldrh	r2, [r4, #2]
 8012f6e:	0a11      	lsrs	r1, r2, #8
 8012f70:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8012f74:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8012f78:	7922      	ldrb	r2, [r4, #4]
 8012f7a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8012f7e:	7962      	ldrb	r2, [r4, #5]
 8012f80:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012f84:	79a2      	ldrb	r2, [r4, #6]
 8012f86:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8012f8a:	79e2      	ldrb	r2, [r4, #7]
 8012f8c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8012f90:	7a22      	ldrb	r2, [r4, #8]
 8012f92:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8012f96:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8012f9a:	7aa3      	ldrb	r3, [r4, #10]
 8012f9c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8012fa0:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8012fa2:	a901      	add	r1, sp, #4
 8012fa4:	208c      	movs	r0, #140	@ 0x8c
 8012fa6:	f7ff fc1f 	bl	80127e8 <SUBGRF_WriteCommand>
}
 8012faa:	b004      	add	sp, #16
 8012fac:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8012fae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8012fb2:	f7ff fbb8 	bl	8012726 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8012fb6:	f248 0005 	movw	r0, #32773	@ 0x8005
 8012fba:	f7ff fbc8 	bl	801274e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8012fbe:	2302      	movs	r3, #2
 8012fc0:	e7d4      	b.n	8012f6c <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8012fc2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8012fc6:	f7ff fbae 	bl	8012726 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8012fca:	f241 0021 	movw	r0, #4129	@ 0x1021
 8012fce:	f7ff fbbe 	bl	801274e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8012fd2:	2306      	movs	r3, #6
 8012fd4:	e7ca      	b.n	8012f6c <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8012fd6:	7b23      	ldrb	r3, [r4, #12]
 8012fd8:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8012fdc:	2201      	movs	r2, #1
        break;
 8012fde:	e7e0      	b.n	8012fa2 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8012fe0:	89e3      	ldrh	r3, [r4, #14]
 8012fe2:	0a1a      	lsrs	r2, r3, #8
 8012fe4:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8012fe8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8012fec:	7c23      	ldrb	r3, [r4, #16]
 8012fee:	4a08      	ldr	r2, [pc, #32]	@ (8013010 <SUBGRF_SetPacketParams+0xdc>)
 8012ff0:	7013      	strb	r3, [r2, #0]
 8012ff2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8012ff6:	7c63      	ldrb	r3, [r4, #17]
 8012ff8:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8012ffc:	7ca3      	ldrb	r3, [r4, #18]
 8012ffe:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8013002:	7ce3      	ldrb	r3, [r4, #19]
 8013004:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8013008:	2206      	movs	r2, #6
        break;
 801300a:	e7ca      	b.n	8012fa2 <SUBGRF_SetPacketParams+0x6e>
 801300c:	20001375 	.word	0x20001375
 8013010:	20001374 	.word	0x20001374

08013014 <SUBGRF_SetBufferBaseAddress>:
{
 8013014:	b500      	push	{lr}
 8013016:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8013018:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 801301c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8013020:	2202      	movs	r2, #2
 8013022:	a901      	add	r1, sp, #4
 8013024:	208f      	movs	r0, #143	@ 0x8f
 8013026:	f7ff fbdf 	bl	80127e8 <SUBGRF_WriteCommand>
}
 801302a:	b003      	add	sp, #12
 801302c:	f85d fb04 	ldr.w	pc, [sp], #4

08013030 <SUBGRF_ReadCommand>:
{
 8013030:	b510      	push	{r4, lr}
 8013032:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013034:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013038:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801303a:	460a      	mov	r2, r1
 801303c:	4601      	mov	r1, r0
 801303e:	4803      	ldr	r0, [pc, #12]	@ (801304c <SUBGRF_ReadCommand+0x1c>)
 8013040:	f7f3 ff28 	bl	8006e94 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013044:	f384 8810 	msr	PRIMASK, r4
}
 8013048:	bd10      	pop	{r4, pc}
 801304a:	bf00      	nop
 801304c:	200001ec 	.word	0x200001ec

08013050 <SUBGRF_GetRssiInst>:
{
 8013050:	b500      	push	{lr}
 8013052:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8013054:	2201      	movs	r2, #1
 8013056:	a901      	add	r1, sp, #4
 8013058:	2015      	movs	r0, #21
 801305a:	f7ff ffe9 	bl	8013030 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801305e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8013062:	4240      	negs	r0, r0
}
 8013064:	1040      	asrs	r0, r0, #1
 8013066:	b003      	add	sp, #12
 8013068:	f85d fb04 	ldr.w	pc, [sp], #4

0801306c <SUBGRF_GetRxBufferStatus>:
{
 801306c:	b530      	push	{r4, r5, lr}
 801306e:	b083      	sub	sp, #12
 8013070:	4605      	mov	r5, r0
 8013072:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8013074:	2202      	movs	r2, #2
 8013076:	a901      	add	r1, sp, #4
 8013078:	2013      	movs	r0, #19
 801307a:	f7ff ffd9 	bl	8013030 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801307e:	f7ff fae7 	bl	8012650 <SUBGRF_GetPacketType>
 8013082:	2801      	cmp	r0, #1
 8013084:	d007      	beq.n	8013096 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8013086:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801308a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 801308c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013090:	7023      	strb	r3, [r4, #0]
}
 8013092:	b003      	add	sp, #12
 8013094:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013096:	4b05      	ldr	r3, [pc, #20]	@ (80130ac <SUBGRF_GetRxBufferStatus+0x40>)
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	b2db      	uxtb	r3, r3
 801309c:	2b01      	cmp	r3, #1
 801309e:	d1f2      	bne.n	8013086 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80130a0:	f240 7002 	movw	r0, #1794	@ 0x702
 80130a4:	f7ff faea 	bl	801267c <SUBGRF_ReadRegister>
 80130a8:	7028      	strb	r0, [r5, #0]
 80130aa:	e7ef      	b.n	801308c <SUBGRF_GetRxBufferStatus+0x20>
 80130ac:	20001374 	.word	0x20001374

080130b0 <SUBGRF_GetPayload>:
{
 80130b0:	b570      	push	{r4, r5, r6, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	4606      	mov	r6, r0
 80130b6:	460c      	mov	r4, r1
 80130b8:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80130ba:	2300      	movs	r3, #0
 80130bc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80130c0:	f10d 0107 	add.w	r1, sp, #7
 80130c4:	4620      	mov	r0, r4
 80130c6:	f7ff ffd1 	bl	801306c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80130ca:	7822      	ldrb	r2, [r4, #0]
 80130cc:	42aa      	cmp	r2, r5
 80130ce:	d902      	bls.n	80130d6 <SUBGRF_GetPayload+0x26>
        return 1;
 80130d0:	2001      	movs	r0, #1
}
 80130d2:	b002      	add	sp, #8
 80130d4:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80130d6:	4631      	mov	r1, r6
 80130d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80130dc:	f7ff fb74 	bl	80127c8 <SUBGRF_ReadBuffer>
    return 0;
 80130e0:	2000      	movs	r0, #0
 80130e2:	e7f6      	b.n	80130d2 <SUBGRF_GetPayload+0x22>

080130e4 <SUBGRF_GetPacketStatus>:
{
 80130e4:	b510      	push	{r4, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80130ea:	2203      	movs	r2, #3
 80130ec:	a901      	add	r1, sp, #4
 80130ee:	2014      	movs	r0, #20
 80130f0:	f7ff ff9e 	bl	8013030 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80130f4:	f7ff faac 	bl	8012650 <SUBGRF_GetPacketType>
 80130f8:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80130fa:	b148      	cbz	r0, 8013110 <SUBGRF_GetPacketStatus+0x2c>
 80130fc:	2801      	cmp	r0, #1
 80130fe:	d018      	beq.n	8013132 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8013100:	2214      	movs	r2, #20
 8013102:	2100      	movs	r1, #0
 8013104:	4620      	mov	r0, r4
 8013106:	f000 fb3c 	bl	8013782 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801310a:	230f      	movs	r3, #15
 801310c:	7023      	strb	r3, [r4, #0]
}
 801310e:	e00e      	b.n	801312e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8013110:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013114:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8013116:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801311a:	425b      	negs	r3, r3
 801311c:	105b      	asrs	r3, r3, #1
 801311e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8013120:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013124:	425b      	negs	r3, r3
 8013126:	105b      	asrs	r3, r3, #1
 8013128:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801312a:	2300      	movs	r3, #0
 801312c:	60a3      	str	r3, [r4, #8]
}
 801312e:	b002      	add	sp, #8
 8013130:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8013132:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013136:	425b      	negs	r3, r3
 8013138:	105b      	asrs	r3, r3, #1
 801313a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801313c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8013140:	3302      	adds	r3, #2
 8013142:	109b      	asrs	r3, r3, #2
 8013144:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8013146:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801314a:	425b      	negs	r3, r3
 801314c:	105b      	asrs	r3, r3, #1
 801314e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8013150:	4b01      	ldr	r3, [pc, #4]	@ (8013158 <SUBGRF_GetPacketStatus+0x74>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	6123      	str	r3, [r4, #16]
            break;
 8013156:	e7ea      	b.n	801312e <SUBGRF_GetPacketStatus+0x4a>
 8013158:	20001370 	.word	0x20001370

0801315c <SUBGRF_SetSwitch>:
{
 801315c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801315e:	2901      	cmp	r1, #1
 8013160:	d003      	beq.n	801316a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8013162:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8013164:	f7f0 fee6 	bl	8003f34 <RBI_ConfigRFSwitch>
}
 8013168:	bd10      	pop	{r4, pc}
 801316a:	4604      	mov	r4, r0
 801316c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801316e:	2c01      	cmp	r4, #1
 8013170:	d003      	beq.n	801317a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8013172:	2c02      	cmp	r4, #2
 8013174:	d1f6      	bne.n	8013164 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8013176:	2003      	movs	r0, #3
 8013178:	e7f4      	b.n	8013164 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801317a:	2004      	movs	r0, #4
 801317c:	f7ff fa8e 	bl	801269c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8013180:	2002      	movs	r0, #2
 8013182:	e7f6      	b.n	8013172 <SUBGRF_SetSwitch+0x16>

08013184 <SUBGRF_SetRfTxPower>:
{
 8013184:	b538      	push	{r3, r4, r5, lr}
 8013186:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8013188:	f7f0 fed8 	bl	8003f3c <RBI_GetTxConfig>
    switch (TxConfig)
 801318c:	b148      	cbz	r0, 80131a2 <SUBGRF_SetRfTxPower+0x1e>
 801318e:	2802      	cmp	r0, #2
 8013190:	d10d      	bne.n	80131ae <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8013192:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8013194:	2202      	movs	r2, #2
 8013196:	4621      	mov	r1, r4
 8013198:	4628      	mov	r0, r5
 801319a:	f7ff fdbb 	bl	8012d14 <SUBGRF_SetTxParams>
}
 801319e:	4628      	mov	r0, r5
 80131a0:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80131a2:	2c0f      	cmp	r4, #15
 80131a4:	dc01      	bgt.n	80131aa <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80131a6:	2501      	movs	r5, #1
 80131a8:	e7f4      	b.n	8013194 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80131aa:	2502      	movs	r5, #2
 80131ac:	e7f2      	b.n	8013194 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80131ae:	2501      	movs	r5, #1
 80131b0:	e7f0      	b.n	8013194 <SUBGRF_SetRfTxPower+0x10>

080131b2 <SUBGRF_GetRadioWakeUpTime>:
}
 80131b2:	2001      	movs	r0, #1
 80131b4:	4770      	bx	lr
	...

080131b8 <HAL_SUBGHZ_TxCpltCallback>:
{
 80131b8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80131ba:	4b02      	ldr	r3, [pc, #8]	@ (80131c4 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2001      	movs	r0, #1
 80131c0:	4798      	blx	r3
}
 80131c2:	bd08      	pop	{r3, pc}
 80131c4:	20001368 	.word	0x20001368

080131c8 <HAL_SUBGHZ_RxCpltCallback>:
{
 80131c8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80131ca:	4b02      	ldr	r3, [pc, #8]	@ (80131d4 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	2002      	movs	r0, #2
 80131d0:	4798      	blx	r3
}
 80131d2:	bd08      	pop	{r3, pc}
 80131d4:	20001368 	.word	0x20001368

080131d8 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80131d8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80131da:	4b02      	ldr	r3, [pc, #8]	@ (80131e4 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2040      	movs	r0, #64	@ 0x40
 80131e0:	4798      	blx	r3
}
 80131e2:	bd08      	pop	{r3, pc}
 80131e4:	20001368 	.word	0x20001368

080131e8 <HAL_SUBGHZ_CADStatusCallback>:
{
 80131e8:	b508      	push	{r3, lr}
    switch (cadstatus)
 80131ea:	b139      	cbz	r1, 80131fc <HAL_SUBGHZ_CADStatusCallback+0x14>
 80131ec:	2901      	cmp	r1, #1
 80131ee:	d109      	bne.n	8013204 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80131f0:	4b05      	ldr	r3, [pc, #20]	@ (8013208 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80131f8:	4798      	blx	r3
}
 80131fa:	e003      	b.n	8013204 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80131fc:	4b02      	ldr	r3, [pc, #8]	@ (8013208 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	2080      	movs	r0, #128	@ 0x80
 8013202:	4798      	blx	r3
}
 8013204:	bd08      	pop	{r3, pc}
 8013206:	bf00      	nop
 8013208:	20001368 	.word	0x20001368

0801320c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 801320c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801320e:	4b03      	ldr	r3, [pc, #12]	@ (801321c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013216:	4798      	blx	r3
}
 8013218:	bd08      	pop	{r3, pc}
 801321a:	bf00      	nop
 801321c:	20001368 	.word	0x20001368

08013220 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8013220:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8013222:	4b02      	ldr	r3, [pc, #8]	@ (801322c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2020      	movs	r0, #32
 8013228:	4798      	blx	r3
}
 801322a:	bd08      	pop	{r3, pc}
 801322c:	20001368 	.word	0x20001368

08013230 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8013230:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8013232:	4b02      	ldr	r3, [pc, #8]	@ (801323c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	2004      	movs	r0, #4
 8013238:	4798      	blx	r3
}
 801323a:	bd08      	pop	{r3, pc}
 801323c:	20001368 	.word	0x20001368

08013240 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8013240:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8013242:	4b02      	ldr	r3, [pc, #8]	@ (801324c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2008      	movs	r0, #8
 8013248:	4798      	blx	r3
}
 801324a:	bd08      	pop	{r3, pc}
 801324c:	20001368 	.word	0x20001368

08013250 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8013250:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8013252:	4b02      	ldr	r3, [pc, #8]	@ (801325c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2010      	movs	r0, #16
 8013258:	4798      	blx	r3
}
 801325a:	bd08      	pop	{r3, pc}
 801325c:	20001368 	.word	0x20001368

08013260 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8013260:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8013262:	4b03      	ldr	r3, [pc, #12]	@ (8013270 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801326a:	4798      	blx	r3
}
 801326c:	bd08      	pop	{r3, pc}
 801326e:	bf00      	nop
 8013270:	20001368 	.word	0x20001368

08013274 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8013274:	4601      	mov	r1, r0
 8013276:	b180      	cbz	r0, 801329a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8013278:	2300      	movs	r3, #0
 801327a:	2b15      	cmp	r3, #21
 801327c:	d80c      	bhi.n	8013298 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801327e:	4a08      	ldr	r2, [pc, #32]	@ (80132a0 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013280:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013284:	428a      	cmp	r2, r1
 8013286:	d802      	bhi.n	801328e <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8013288:	3301      	adds	r3, #1
 801328a:	b2db      	uxtb	r3, r3
 801328c:	e7f5      	b.n	801327a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 801328e:	4a04      	ldr	r2, [pc, #16]	@ (80132a0 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013290:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013294:	7918      	ldrb	r0, [r3, #4]
 8013296:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8013298:	e7fe      	b.n	8013298 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 801329a:	201f      	movs	r0, #31
}
 801329c:	4770      	bx	lr
 801329e:	bf00      	nop
 80132a0:	08016fc4 	.word	0x08016fc4

080132a4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80132a4:	b570      	push	{r4, r5, r6, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	4605      	mov	r5, r0
 80132aa:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80132ac:	4b1d      	ldr	r3, [pc, #116]	@ (8013324 <SUBGRF_GetCFO+0x80>)
 80132ae:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80132b0:	f640 0007 	movw	r0, #2055	@ 0x807
 80132b4:	f7ff f9e2 	bl	801267c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80132b8:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80132bc:	3308      	adds	r3, #8
 80132be:	446b      	add	r3, sp
 80132c0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80132c4:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80132c8:	3301      	adds	r3, #1
 80132ca:	409a      	lsls	r2, r3
 80132cc:	4b16      	ldr	r3, [pc, #88]	@ (8013328 <SUBGRF_GetCFO+0x84>)
 80132ce:	fbb3 f3f2 	udiv	r3, r3, r2
  uint32_t cf_osr = cf_fs / bitRate;
 80132d2:	fbb3 f0f5 	udiv	r0, r3, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80132d6:	2807      	cmp	r0, #7
 80132d8:	d804      	bhi.n	80132e4 <SUBGRF_GetCFO+0x40>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80132da:	0040      	lsls	r0, r0, #1
 80132dc:	2803      	cmp	r0, #3
 80132de:	d91e      	bls.n	801331e <SUBGRF_GetCFO+0x7a>
 80132e0:	2502      	movs	r5, #2
 80132e2:	e000      	b.n	80132e6 <SUBGRF_GetCFO+0x42>
  uint8_t interp = 1;
 80132e4:	2501      	movs	r5, #1
  {
    interp = 4;
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80132e6:	fb03 f505 	mul.w	r5, r3, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80132ea:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 80132ee:	f7ff f9c5 	bl	801267c <SUBGRF_ReadRegister>
 80132f2:	0206      	lsls	r6, r0, #8
 80132f4:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80132f8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 80132fc:	f7ff f9be 	bl	801267c <SUBGRF_ReadRegister>
 8013300:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8013302:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8013306:	d003      	beq.n	8013310 <SUBGRF_GetCFO+0x6c>
  {
    cfo_bin |= 0xFFFFF000;
 8013308:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801330c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8013310:	096d      	lsrs	r5, r5, #5
 8013312:	fb05 f000 	mul.w	r0, r5, r0
 8013316:	11c0      	asrs	r0, r0, #7
 8013318:	6020      	str	r0, [r4, #0]
}
 801331a:	b002      	add	sp, #8
 801331c:	bd70      	pop	{r4, r5, r6, pc}
    interp = 4;
 801331e:	2504      	movs	r5, #4
 8013320:	e7e1      	b.n	80132e6 <SUBGRF_GetCFO+0x42>
 8013322:	bf00      	nop
 8013324:	0c0a0804 	.word	0x0c0a0804
 8013328:	01e84800 	.word	0x01e84800

0801332c <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 801332c:	f04f 30ff 	mov.w	r0, #4294967295
 8013330:	4770      	bx	lr

08013332 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8013332:	f04f 30ff 	mov.w	r0, #4294967295
 8013336:	4770      	bx	lr

08013338 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8013338:	f04f 30ff 	mov.w	r0, #4294967295
 801333c:	4770      	bx	lr

0801333e <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801333e:	4770      	bx	lr

08013340 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8013340:	2000      	movs	r0, #0
 8013342:	4770      	bx	lr

08013344 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8013344:	2000      	movs	r0, #0
 8013346:	4770      	bx	lr

08013348 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8013348:	4770      	bx	lr

0801334a <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 801334a:	f04f 30ff 	mov.w	r0, #4294967295
 801334e:	4770      	bx	lr

08013350 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8013350:	f04f 30ff 	mov.w	r0, #4294967295
 8013354:	4770      	bx	lr

08013356 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8013356:	4770      	bx	lr

08013358 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8013358:	4770      	bx	lr

0801335a <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801335a:	4770      	bx	lr

0801335c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801335c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801335e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013362:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8013364:	4b1e      	ldr	r3, [pc, #120]	@ (80133e0 <TRACE_AllocateBufer+0x84>)
 8013366:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 801336a:	8a1a      	ldrh	r2, [r3, #16]
 801336c:	4596      	cmp	lr, r2
 801336e:	d011      	beq.n	8013394 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8013370:	4596      	cmp	lr, r2
 8013372:	d921      	bls.n	80133b8 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013374:	f5ce 6300 	rsb	r3, lr, #2048	@ 0x800
 8013378:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801337a:	4283      	cmp	r3, r0
 801337c:	d81f      	bhi.n	80133be <TRACE_AllocateBufer+0x62>
 801337e:	4282      	cmp	r2, r0
 8013380:	d91d      	bls.n	80133be <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8013382:	4b17      	ldr	r3, [pc, #92]	@ (80133e0 <TRACE_AllocateBufer+0x84>)
 8013384:	2401      	movs	r4, #1
 8013386:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8013388:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801338c:	2400      	movs	r4, #0
 801338e:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8013390:	4613      	mov	r3, r2
 8013392:	e014      	b.n	80133be <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013394:	f5ce 6300 	rsb	r3, lr, #2048	@ 0x800
 8013398:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801339a:	4298      	cmp	r0, r3
 801339c:	d30f      	bcc.n	80133be <TRACE_AllocateBufer+0x62>
 801339e:	4282      	cmp	r2, r0
 80133a0:	d90d      	bls.n	80133be <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80133a2:	4b0f      	ldr	r3, [pc, #60]	@ (80133e0 <TRACE_AllocateBufer+0x84>)
 80133a4:	2401      	movs	r4, #1
 80133a6:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80133a8:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80133ac:	f04f 0e00 	mov.w	lr, #0
 80133b0:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80133b4:	4613      	mov	r3, r2
 80133b6:	e002      	b.n	80133be <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80133b8:	eba2 020e 	sub.w	r2, r2, lr
 80133bc:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80133be:	4283      	cmp	r3, r0
 80133c0:	d90a      	bls.n	80133d8 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80133c2:	4a07      	ldr	r2, [pc, #28]	@ (80133e0 <TRACE_AllocateBufer+0x84>)
 80133c4:	8a53      	ldrh	r3, [r2, #18]
 80133c6:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80133c8:	4403      	add	r3, r0
 80133ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80133ce:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80133d0:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133d2:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80133d6:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80133d8:	f04f 30ff 	mov.w	r0, #4294967295
 80133dc:	e7f9      	b.n	80133d2 <TRACE_AllocateBufer+0x76>
 80133de:	bf00      	nop
 80133e0:	20001f78 	.word	0x20001f78

080133e4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80133e8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80133ea:	4a03      	ldr	r2, [pc, #12]	@ (80133f8 <TRACE_Lock+0x14>)
 80133ec:	8ad3      	ldrh	r3, [r2, #22]
 80133ee:	3301      	adds	r3, #1
 80133f0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133f2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80133f6:	4770      	bx	lr
 80133f8:	20001f78 	.word	0x20001f78

080133fc <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013400:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8013402:	4a03      	ldr	r2, [pc, #12]	@ (8013410 <TRACE_UnLock+0x14>)
 8013404:	8ad3      	ldrh	r3, [r2, #22]
 8013406:	3b01      	subs	r3, #1
 8013408:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801340a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801340e:	4770      	bx	lr
 8013410:	20001f78 	.word	0x20001f78

08013414 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8013414:	4b02      	ldr	r3, [pc, #8]	@ (8013420 <TRACE_IsLocked+0xc>)
 8013416:	8ad8      	ldrh	r0, [r3, #22]
}
 8013418:	3800      	subs	r0, #0
 801341a:	bf18      	it	ne
 801341c:	2001      	movne	r0, #1
 801341e:	4770      	bx	lr
 8013420:	20001f78 	.word	0x20001f78

08013424 <UTIL_ADV_TRACE_Init>:
{
 8013424:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8013426:	2218      	movs	r2, #24
 8013428:	2100      	movs	r1, #0
 801342a:	4807      	ldr	r0, [pc, #28]	@ (8013448 <UTIL_ADV_TRACE_Init+0x24>)
 801342c:	f000 f9a9 	bl	8013782 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8013430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013434:	2100      	movs	r1, #0
 8013436:	4805      	ldr	r0, [pc, #20]	@ (801344c <UTIL_ADV_TRACE_Init+0x28>)
 8013438:	f000 f9a3 	bl	8013782 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801343c:	4b04      	ldr	r3, [pc, #16]	@ (8013450 <UTIL_ADV_TRACE_Init+0x2c>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4804      	ldr	r0, [pc, #16]	@ (8013454 <UTIL_ADV_TRACE_Init+0x30>)
 8013442:	4798      	blx	r3
}
 8013444:	bd08      	pop	{r3, pc}
 8013446:	bf00      	nop
 8013448:	20001f78 	.word	0x20001f78
 801344c:	20001778 	.word	0x20001778
 8013450:	08016620 	.word	0x08016620
 8013454:	08013609 	.word	0x08013609

08013458 <UTIL_ADV_TRACE_IsBufferEmpty>:
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8013458:	4b04      	ldr	r3, [pc, #16]	@ (801346c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>)
 801345a:	8a5a      	ldrh	r2, [r3, #18]
 801345c:	8a1b      	ldrh	r3, [r3, #16]
 801345e:	429a      	cmp	r2, r3
 8013460:	d001      	beq.n	8013466 <UTIL_ADV_TRACE_IsBufferEmpty+0xe>
  return 0;
 8013462:	2000      	movs	r0, #0
 8013464:	4770      	bx	lr
    return 1;
 8013466:	2001      	movs	r0, #1
}
 8013468:	4770      	bx	lr
 801346a:	bf00      	nop
 801346c:	20001f78 	.word	0x20001f78

08013470 <UTIL_ADV_TRACE_StartRxProcess>:
{
 8013470:	b508      	push	{r3, lr}
  return UTIL_TraceDriver.StartRx(UserCallback);
 8013472:	4b02      	ldr	r3, [pc, #8]	@ (801347c <UTIL_ADV_TRACE_StartRxProcess+0xc>)
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	4798      	blx	r3
}
 8013478:	bd08      	pop	{r3, pc}
 801347a:	bf00      	nop
 801347c:	08016620 	.word	0x08016620

08013480 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8013480:	4b01      	ldr	r3, [pc, #4]	@ (8013488 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8013482:	6058      	str	r0, [r3, #4]
}
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	20001f78 	.word	0x20001f78

0801348c <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801348c:	4b01      	ldr	r3, [pc, #4]	@ (8013494 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801348e:	7218      	strb	r0, [r3, #8]
}
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop
 8013494:	20001f78 	.word	0x20001f78

08013498 <UTIL_ADV_TRACE_GetVerboseLevel>:
}
 8013498:	4b01      	ldr	r3, [pc, #4]	@ (80134a0 <UTIL_ADV_TRACE_GetVerboseLevel+0x8>)
 801349a:	7a18      	ldrb	r0, [r3, #8]
 801349c:	4770      	bx	lr
 801349e:	bf00      	nop
 80134a0:	20001f78 	.word	0x20001f78

080134a4 <TRACE_Send>:
{
 80134a4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134a6:	f3ef 8310 	mrs	r3, PRIMASK
 80134aa:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80134ac:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80134ae:	f7ff ffb1 	bl	8013414 <TRACE_IsLocked>
 80134b2:	b118      	cbz	r0, 80134bc <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134b4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80134b8:	2000      	movs	r0, #0
}
 80134ba:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80134bc:	f7ff ff92 	bl	80133e4 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80134c0:	4b1c      	ldr	r3, [pc, #112]	@ (8013534 <TRACE_Send+0x90>)
 80134c2:	8a1a      	ldrh	r2, [r3, #16]
 80134c4:	8a5b      	ldrh	r3, [r3, #18]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d02e      	beq.n	8013528 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80134ca:	491a      	ldr	r1, [pc, #104]	@ (8013534 <TRACE_Send+0x90>)
 80134cc:	7889      	ldrb	r1, [r1, #2]
 80134ce:	2901      	cmp	r1, #1
 80134d0:	d017      	beq.n	8013502 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80134d2:	4a18      	ldr	r2, [pc, #96]	@ (8013534 <TRACE_Send+0x90>)
 80134d4:	7892      	ldrb	r2, [r2, #2]
 80134d6:	b932      	cbnz	r2, 80134e6 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80134d8:	4a16      	ldr	r2, [pc, #88]	@ (8013534 <TRACE_Send+0x90>)
 80134da:	8a12      	ldrh	r2, [r2, #16]
 80134dc:	4293      	cmp	r3, r2
 80134de:	d91e      	bls.n	801351e <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80134e0:	1a9b      	subs	r3, r3, r2
 80134e2:	4a14      	ldr	r2, [pc, #80]	@ (8013534 <TRACE_Send+0x90>)
 80134e4:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80134e6:	4e13      	ldr	r6, [pc, #76]	@ (8013534 <TRACE_Send+0x90>)
 80134e8:	8a35      	ldrh	r5, [r6, #16]
 80134ea:	4b13      	ldr	r3, [pc, #76]	@ (8013538 <TRACE_Send+0x94>)
 80134ec:	441d      	add	r5, r3
 80134ee:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80134f2:	f7ee f8a7 	bl	8001644 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80134f6:	4b11      	ldr	r3, [pc, #68]	@ (801353c <TRACE_Send+0x98>)
 80134f8:	68db      	ldr	r3, [r3, #12]
 80134fa:	8ab1      	ldrh	r1, [r6, #20]
 80134fc:	4628      	mov	r0, r5
 80134fe:	4798      	blx	r3
 8013500:	e7db      	b.n	80134ba <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8013502:	480c      	ldr	r0, [pc, #48]	@ (8013534 <TRACE_Send+0x90>)
 8013504:	8801      	ldrh	r1, [r0, #0]
 8013506:	1a8a      	subs	r2, r1, r2
 8013508:	b292      	uxth	r2, r2
 801350a:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801350c:	2102      	movs	r1, #2
 801350e:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8013510:	2100      	movs	r1, #0
 8013512:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8013514:	2a00      	cmp	r2, #0
 8013516:	d1dc      	bne.n	80134d2 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8013518:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801351a:	8201      	strh	r1, [r0, #16]
 801351c:	e7d9      	b.n	80134d2 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801351e:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 8013522:	4b04      	ldr	r3, [pc, #16]	@ (8013534 <TRACE_Send+0x90>)
 8013524:	829a      	strh	r2, [r3, #20]
 8013526:	e7de      	b.n	80134e6 <TRACE_Send+0x42>
      TRACE_UnLock();
 8013528:	f7ff ff68 	bl	80133fc <TRACE_UnLock>
 801352c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8013530:	2000      	movs	r0, #0
}
 8013532:	e7c2      	b.n	80134ba <TRACE_Send+0x16>
 8013534:	20001f78 	.word	0x20001f78
 8013538:	20001778 	.word	0x20001778
 801353c:	08016620 	.word	0x08016620

08013540 <UTIL_ADV_TRACE_COND_FSend>:
{
 8013540:	b408      	push	{r3}
 8013542:	b530      	push	{r4, r5, lr}
 8013544:	b086      	sub	sp, #24
 8013546:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 8013548:	2300      	movs	r3, #0
 801354a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801354e:	4b2b      	ldr	r3, [pc, #172]	@ (80135fc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8013550:	7a1b      	ldrb	r3, [r3, #8]
 8013552:	4283      	cmp	r3, r0
 8013554:	d34c      	bcc.n	80135f0 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8013556:	4b29      	ldr	r3, [pc, #164]	@ (80135fc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	4399      	bics	r1, r3
 801355c:	d14b      	bne.n	80135f6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801355e:	4b27      	ldr	r3, [pc, #156]	@ (80135fc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	b123      	cbz	r3, 801356e <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8013564:	b11a      	cbz	r2, 801356e <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8013566:	f10d 0102 	add.w	r1, sp, #2
 801356a:	a801      	add	r0, sp, #4
 801356c:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 801356e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013570:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8013572:	4622      	mov	r2, r4
 8013574:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013578:	4821      	ldr	r0, [pc, #132]	@ (8013600 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801357a:	f000 ffa9 	bl	80144d0 <tiny_vsnprintf_like>
 801357e:	b285      	uxth	r5, r0
  TRACE_Lock();
 8013580:	f7ff ff30 	bl	80133e4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8013584:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013588:	18e8      	adds	r0, r5, r3
 801358a:	4669      	mov	r1, sp
 801358c:	b280      	uxth	r0, r0
 801358e:	f7ff fee5 	bl	801335c <TRACE_AllocateBufer>
 8013592:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013596:	d026      	beq.n	80135e6 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8013598:	2300      	movs	r3, #0
 801359a:	e00d      	b.n	80135b8 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801359c:	f8bd 2000 	ldrh.w	r2, [sp]
 80135a0:	f103 0118 	add.w	r1, r3, #24
 80135a4:	4469      	add	r1, sp
 80135a6:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80135aa:	4916      	ldr	r1, [pc, #88]	@ (8013604 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80135ac:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80135ae:	3201      	adds	r2, #1
 80135b0:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80135b4:	3301      	adds	r3, #1
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d8ed      	bhi.n	801359c <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80135c0:	f8bd 0000 	ldrh.w	r0, [sp]
 80135c4:	9b05      	ldr	r3, [sp, #20]
 80135c6:	4622      	mov	r2, r4
 80135c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80135cc:	4c0d      	ldr	r4, [pc, #52]	@ (8013604 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80135ce:	4420      	add	r0, r4
 80135d0:	f000 ff7e 	bl	80144d0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80135d4:	f7ff ff12 	bl	80133fc <TRACE_UnLock>
    return TRACE_Send();
 80135d8:	f7ff ff64 	bl	80134a4 <TRACE_Send>
}
 80135dc:	b006      	add	sp, #24
 80135de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135e2:	b001      	add	sp, #4
 80135e4:	4770      	bx	lr
  TRACE_UnLock();
 80135e6:	f7ff ff09 	bl	80133fc <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80135ea:	f06f 0002 	mvn.w	r0, #2
 80135ee:	e7f5      	b.n	80135dc <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80135f0:	f06f 0004 	mvn.w	r0, #4
 80135f4:	e7f2      	b.n	80135dc <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80135f6:	f06f 0005 	mvn.w	r0, #5
 80135fa:	e7ef      	b.n	80135dc <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80135fc:	20001f78 	.word	0x20001f78
 8013600:	20001378 	.word	0x20001378
 8013604:	20001778 	.word	0x20001778

08013608 <TRACE_TxCpltCallback>:
{
 8013608:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801360a:	f3ef 8310 	mrs	r3, PRIMASK
 801360e:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013610:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8013612:	4b26      	ldr	r3, [pc, #152]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 8013614:	789b      	ldrb	r3, [r3, #2]
 8013616:	2b02      	cmp	r3, #2
 8013618:	d016      	beq.n	8013648 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801361a:	4a24      	ldr	r2, [pc, #144]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 801361c:	8a13      	ldrh	r3, [r2, #16]
 801361e:	8a90      	ldrh	r0, [r2, #20]
 8013620:	4403      	add	r3, r0
 8013622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013626:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8013628:	4b20      	ldr	r3, [pc, #128]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 801362a:	8a1a      	ldrh	r2, [r3, #16]
 801362c:	8a5b      	ldrh	r3, [r3, #18]
 801362e:	429a      	cmp	r2, r3
 8013630:	d003      	beq.n	801363a <TRACE_TxCpltCallback+0x32>
 8013632:	481e      	ldr	r0, [pc, #120]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 8013634:	8ac0      	ldrh	r0, [r0, #22]
 8013636:	2801      	cmp	r0, #1
 8013638:	d00b      	beq.n	8013652 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801363a:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 801363e:	f7ee f807 	bl	8001650 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8013642:	f7ff fedb 	bl	80133fc <TRACE_UnLock>
}
 8013646:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8013648:	4b18      	ldr	r3, [pc, #96]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 801364a:	2200      	movs	r2, #0
 801364c:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801364e:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8013650:	e7ea      	b.n	8013628 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8013652:	4816      	ldr	r0, [pc, #88]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 8013654:	7880      	ldrb	r0, [r0, #2]
 8013656:	2801      	cmp	r0, #1
 8013658:	d014      	beq.n	8013684 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801365a:	4a14      	ldr	r2, [pc, #80]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 801365c:	7892      	ldrb	r2, [r2, #2]
 801365e:	b932      	cbnz	r2, 801366e <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8013660:	4a12      	ldr	r2, [pc, #72]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 8013662:	8a12      	ldrh	r2, [r2, #16]
 8013664:	4293      	cmp	r3, r2
 8013666:	d91b      	bls.n	80136a0 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8013668:	1a9b      	subs	r3, r3, r2
 801366a:	4a10      	ldr	r2, [pc, #64]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 801366c:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801366e:	4b0f      	ldr	r3, [pc, #60]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 8013670:	8a18      	ldrh	r0, [r3, #16]
 8013672:	4a0f      	ldr	r2, [pc, #60]	@ (80136b0 <TRACE_TxCpltCallback+0xa8>)
 8013674:	4410      	add	r0, r2
 8013676:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801367a:	4a0e      	ldr	r2, [pc, #56]	@ (80136b4 <TRACE_TxCpltCallback+0xac>)
 801367c:	68d2      	ldr	r2, [r2, #12]
 801367e:	8a99      	ldrh	r1, [r3, #20]
 8013680:	4790      	blx	r2
 8013682:	e7e0      	b.n	8013646 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8013684:	4c09      	ldr	r4, [pc, #36]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 8013686:	8820      	ldrh	r0, [r4, #0]
 8013688:	1a82      	subs	r2, r0, r2
 801368a:	b292      	uxth	r2, r2
 801368c:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801368e:	2002      	movs	r0, #2
 8013690:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8013692:	2000      	movs	r0, #0
 8013694:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8013696:	2a00      	cmp	r2, #0
 8013698:	d1df      	bne.n	801365a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801369a:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801369c:	8220      	strh	r0, [r4, #16]
 801369e:	e7dc      	b.n	801365a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80136a0:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 80136a4:	4b01      	ldr	r3, [pc, #4]	@ (80136ac <TRACE_TxCpltCallback+0xa4>)
 80136a6:	829a      	strh	r2, [r3, #20]
 80136a8:	e7e1      	b.n	801366e <TRACE_TxCpltCallback+0x66>
 80136aa:	bf00      	nop
 80136ac:	20001f78 	.word	0x20001f78
 80136b0:	20001778 	.word	0x20001778
 80136b4:	08016620 	.word	0x08016620

080136b8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80136b8:	2300      	movs	r3, #0
 80136ba:	4a02      	ldr	r2, [pc, #8]	@ (80136c4 <UTIL_LPM_Init+0xc>)
 80136bc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80136be:	4a02      	ldr	r2, [pc, #8]	@ (80136c8 <UTIL_LPM_Init+0x10>)
 80136c0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80136c2:	4770      	bx	lr
 80136c4:	20001f94 	.word	0x20001f94
 80136c8:	20001f90 	.word	0x20001f90

080136cc <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80136d0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80136d2:	b141      	cbz	r1, 80136e6 <UTIL_LPM_SetStopMode+0x1a>
 80136d4:	2901      	cmp	r1, #1
 80136d6:	d103      	bne.n	80136e0 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80136d8:	4906      	ldr	r1, [pc, #24]	@ (80136f4 <UTIL_LPM_SetStopMode+0x28>)
 80136da:	680a      	ldr	r2, [r1, #0]
 80136dc:	4302      	orrs	r2, r0
 80136de:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136e0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80136e4:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80136e6:	4903      	ldr	r1, [pc, #12]	@ (80136f4 <UTIL_LPM_SetStopMode+0x28>)
 80136e8:	680a      	ldr	r2, [r1, #0]
 80136ea:	ea22 0200 	bic.w	r2, r2, r0
 80136ee:	600a      	str	r2, [r1, #0]
      break;
 80136f0:	e7f6      	b.n	80136e0 <UTIL_LPM_SetStopMode+0x14>
 80136f2:	bf00      	nop
 80136f4:	20001f94 	.word	0x20001f94

080136f8 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136f8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80136fc:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80136fe:	b141      	cbz	r1, 8013712 <UTIL_LPM_SetOffMode+0x1a>
 8013700:	2901      	cmp	r1, #1
 8013702:	d103      	bne.n	801370c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013704:	4906      	ldr	r1, [pc, #24]	@ (8013720 <UTIL_LPM_SetOffMode+0x28>)
 8013706:	680a      	ldr	r2, [r1, #0]
 8013708:	4302      	orrs	r2, r0
 801370a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801370c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013710:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8013712:	4903      	ldr	r1, [pc, #12]	@ (8013720 <UTIL_LPM_SetOffMode+0x28>)
 8013714:	680a      	ldr	r2, [r1, #0]
 8013716:	ea22 0200 	bic.w	r2, r2, r0
 801371a:	600a      	str	r2, [r1, #0]
      break;
 801371c:	e7f6      	b.n	801370c <UTIL_LPM_SetOffMode+0x14>
 801371e:	bf00      	nop
 8013720:	20001f90 	.word	0x20001f90

08013724 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8013724:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013726:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801372a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801372c:	4b0c      	ldr	r3, [pc, #48]	@ (8013760 <UTIL_LPM_EnterLowPower+0x3c>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	b13b      	cbz	r3, 8013742 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8013732:	4d0c      	ldr	r5, [pc, #48]	@ (8013764 <UTIL_LPM_EnterLowPower+0x40>)
 8013734:	682b      	ldr	r3, [r5, #0]
 8013736:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8013738:	686b      	ldr	r3, [r5, #4]
 801373a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801373c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8013740:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8013742:	4b09      	ldr	r3, [pc, #36]	@ (8013768 <UTIL_LPM_EnterLowPower+0x44>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	b12b      	cbz	r3, 8013754 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8013748:	4d06      	ldr	r5, [pc, #24]	@ (8013764 <UTIL_LPM_EnterLowPower+0x40>)
 801374a:	68ab      	ldr	r3, [r5, #8]
 801374c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801374e:	68eb      	ldr	r3, [r5, #12]
 8013750:	4798      	blx	r3
 8013752:	e7f3      	b.n	801373c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8013754:	4d03      	ldr	r5, [pc, #12]	@ (8013764 <UTIL_LPM_EnterLowPower+0x40>)
 8013756:	692b      	ldr	r3, [r5, #16]
 8013758:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801375a:	696b      	ldr	r3, [r5, #20]
 801375c:	4798      	blx	r3
 801375e:	e7ed      	b.n	801373c <UTIL_LPM_EnterLowPower+0x18>
 8013760:	20001f94 	.word	0x20001f94
 8013764:	080148d0 	.word	0x080148d0
 8013768:	20001f90 	.word	0x20001f90

0801376c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 801376c:	e004      	b.n	8013778 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801376e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013772:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8013776:	461a      	mov	r2, r3
 8013778:	1e53      	subs	r3, r2, #1
 801377a:	b29b      	uxth	r3, r3
 801377c:	2a00      	cmp	r2, #0
 801377e:	d1f6      	bne.n	801376e <UTIL_MEM_cpy_8+0x2>
    }
}
 8013780:	4770      	bx	lr

08013782 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8013782:	e002      	b.n	801378a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8013784:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8013788:	461a      	mov	r2, r3
 801378a:	1e53      	subs	r3, r2, #1
 801378c:	b29b      	uxth	r3, r3
 801378e:	2a00      	cmp	r2, #0
 8013790:	d1f8      	bne.n	8013784 <UTIL_MEM_set_8+0x2>
  }
}
 8013792:	4770      	bx	lr

08013794 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013794:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013798:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801379a:	4a06      	ldr	r2, [pc, #24]	@ (80137b4 <UTIL_SEQ_SetTask+0x20>)
 801379c:	6813      	ldr	r3, [r2, #0]
 801379e:	4303      	orrs	r3, r0
 80137a0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80137a2:	4a05      	ldr	r2, [pc, #20]	@ (80137b8 <UTIL_SEQ_SetTask+0x24>)
 80137a4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80137a8:	4303      	orrs	r3, r0
 80137aa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137ae:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80137b2:	4770      	bx	lr
 80137b4:	20001fbc 	.word	0x20001fbc
 80137b8:	20001f98 	.word	0x20001f98

080137bc <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80137bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80137c0:	b672      	cpsid	i

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 80137c2:	4a03      	ldr	r2, [pc, #12]	@ (80137d0 <UTIL_SEQ_SetEvt+0x14>)
 80137c4:	6813      	ldr	r3, [r2, #0]
 80137c6:	4318      	orrs	r0, r3
 80137c8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137ca:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80137ce:	4770      	bx	lr
 80137d0:	20001fb8 	.word	0x20001fb8

080137d4 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80137d4:	4770      	bx	lr

080137d6 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80137d6:	4770      	bx	lr

080137d8 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80137d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80137dc:	d216      	bcs.n	801380c <SEQ_BitPosition+0x34>
 80137de:	0400      	lsls	r0, r0, #16
 80137e0:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80137e2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80137e6:	d202      	bcs.n	80137ee <SEQ_BitPosition+0x16>
 80137e8:	3308      	adds	r3, #8
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80137ee:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 80137f2:	d202      	bcs.n	80137fa <SEQ_BitPosition+0x22>
 80137f4:	3304      	adds	r3, #4
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80137fa:	0f00      	lsrs	r0, r0, #28
 80137fc:	4a04      	ldr	r2, [pc, #16]	@ (8013810 <SEQ_BitPosition+0x38>)
 80137fe:	5c10      	ldrb	r0, [r2, r0]
 8013800:	4418      	add	r0, r3
 8013802:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8013804:	f1c0 001f 	rsb	r0, r0, #31
}
 8013808:	b2c0      	uxtb	r0, r0
 801380a:	4770      	bx	lr
uint8_t n = 0U;
 801380c:	2300      	movs	r3, #0
 801380e:	e7e8      	b.n	80137e2 <SEQ_BitPosition+0xa>
 8013810:	08017074 	.word	0x08017074

08013814 <UTIL_SEQ_Run>:
{
 8013814:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8013816:	4b42      	ldr	r3, [pc, #264]	@ (8013920 <UTIL_SEQ_Run+0x10c>)
 8013818:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 801381a:	4020      	ands	r0, r4
 801381c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801381e:	4b41      	ldr	r3, [pc, #260]	@ (8013924 <UTIL_SEQ_Run+0x110>)
 8013820:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8013822:	4b41      	ldr	r3, [pc, #260]	@ (8013928 <UTIL_SEQ_Run+0x114>)
 8013824:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8013826:	4941      	ldr	r1, [pc, #260]	@ (801392c <UTIL_SEQ_Run+0x118>)
 8013828:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 801382a:	4941      	ldr	r1, [pc, #260]	@ (8013930 <UTIL_SEQ_Run+0x11c>)
 801382c:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801382e:	e02f      	b.n	8013890 <UTIL_SEQ_Run+0x7c>
      counter++;
 8013830:	3301      	adds	r3, #1
 8013832:	e034      	b.n	801389e <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013834:	4d3f      	ldr	r5, [pc, #252]	@ (8013934 <UTIL_SEQ_Run+0x120>)
 8013836:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801383a:	6868      	ldr	r0, [r5, #4]
 801383c:	4010      	ands	r0, r2
 801383e:	f7ff ffcb 	bl	80137d8 <SEQ_BitPosition>
 8013842:	4e3d      	ldr	r6, [pc, #244]	@ (8013938 <UTIL_SEQ_Run+0x124>)
 8013844:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013846:	686a      	ldr	r2, [r5, #4]
 8013848:	2301      	movs	r3, #1
 801384a:	fa03 f000 	lsl.w	r0, r3, r0
 801384e:	ea22 0200 	bic.w	r2, r2, r0
 8013852:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013854:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013858:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 801385a:	6832      	ldr	r2, [r6, #0]
 801385c:	fa03 f202 	lsl.w	r2, r3, r2
 8013860:	43d6      	mvns	r6, r2
 8013862:	4d30      	ldr	r5, [pc, #192]	@ (8013924 <UTIL_SEQ_Run+0x110>)
 8013864:	6828      	ldr	r0, [r5, #0]
 8013866:	ea20 0202 	bic.w	r2, r0, r2
 801386a:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801386c:	2b00      	cmp	r3, #0
 801386e:	d12d      	bne.n	80138cc <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013870:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8013874:	4b30      	ldr	r3, [pc, #192]	@ (8013938 <UTIL_SEQ_Run+0x124>)
 8013876:	681a      	ldr	r2, [r3, #0]
 8013878:	4b30      	ldr	r3, [pc, #192]	@ (801393c <UTIL_SEQ_Run+0x128>)
 801387a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801387e:	4798      	blx	r3
    local_taskset = TaskSet;
 8013880:	4b28      	ldr	r3, [pc, #160]	@ (8013924 <UTIL_SEQ_Run+0x110>)
 8013882:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8013884:	4b28      	ldr	r3, [pc, #160]	@ (8013928 <UTIL_SEQ_Run+0x114>)
 8013886:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8013888:	4928      	ldr	r1, [pc, #160]	@ (801392c <UTIL_SEQ_Run+0x118>)
 801388a:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 801388c:	4928      	ldr	r1, [pc, #160]	@ (8013930 <UTIL_SEQ_Run+0x11c>)
 801388e:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013890:	4002      	ands	r2, r0
 8013892:	4d23      	ldr	r5, [pc, #140]	@ (8013920 <UTIL_SEQ_Run+0x10c>)
 8013894:	682d      	ldr	r5, [r5, #0]
 8013896:	422a      	tst	r2, r5
 8013898:	d020      	beq.n	80138dc <UTIL_SEQ_Run+0xc8>
 801389a:	400b      	ands	r3, r1
 801389c:	d11e      	bne.n	80138dc <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801389e:	4a25      	ldr	r2, [pc, #148]	@ (8013934 <UTIL_SEQ_Run+0x120>)
 80138a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80138a4:	4002      	ands	r2, r0
 80138a6:	422a      	tst	r2, r5
 80138a8:	d0c2      	beq.n	8013830 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80138aa:	4922      	ldr	r1, [pc, #136]	@ (8013934 <UTIL_SEQ_Run+0x120>)
 80138ac:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80138b0:	4002      	ands	r2, r0
 80138b2:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80138b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80138b8:	6849      	ldr	r1, [r1, #4]
 80138ba:	4211      	tst	r1, r2
 80138bc:	d1ba      	bne.n	8013834 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80138be:	491d      	ldr	r1, [pc, #116]	@ (8013934 <UTIL_SEQ_Run+0x120>)
 80138c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80138c4:	f04f 30ff 	mov.w	r0, #4294967295
 80138c8:	6048      	str	r0, [r1, #4]
 80138ca:	e7b3      	b.n	8013834 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80138cc:	3b01      	subs	r3, #1
 80138ce:	4819      	ldr	r0, [pc, #100]	@ (8013934 <UTIL_SEQ_Run+0x120>)
 80138d0:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 80138d4:	4032      	ands	r2, r6
 80138d6:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80138da:	e7c7      	b.n	801386c <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80138dc:	4b16      	ldr	r3, [pc, #88]	@ (8013938 <UTIL_SEQ_Run+0x124>)
 80138de:	f04f 32ff 	mov.w	r2, #4294967295
 80138e2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80138e4:	f7ff ff76 	bl	80137d4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80138e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80138ec:	b672      	cpsid	i
  local_taskset = TaskSet;
 80138ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013924 <UTIL_SEQ_Run+0x110>)
 80138f0:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80138f2:	4a0d      	ldr	r2, [pc, #52]	@ (8013928 <UTIL_SEQ_Run+0x114>)
 80138f4:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 80138f6:	4a0d      	ldr	r2, [pc, #52]	@ (801392c <UTIL_SEQ_Run+0x118>)
 80138f8:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80138fa:	4013      	ands	r3, r2
 80138fc:	4a08      	ldr	r2, [pc, #32]	@ (8013920 <UTIL_SEQ_Run+0x10c>)
 80138fe:	6812      	ldr	r2, [r2, #0]
 8013900:	4213      	tst	r3, r2
 8013902:	d103      	bne.n	801390c <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8013904:	4b0a      	ldr	r3, [pc, #40]	@ (8013930 <UTIL_SEQ_Run+0x11c>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	420b      	tst	r3, r1
 801390a:	d006      	beq.n	801391a <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801390c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8013910:	f7ff ff61 	bl	80137d6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8013914:	4b02      	ldr	r3, [pc, #8]	@ (8013920 <UTIL_SEQ_Run+0x10c>)
 8013916:	601c      	str	r4, [r3, #0]
}
 8013918:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 801391a:	f7ed fe1f 	bl	800155c <UTIL_SEQ_Idle>
 801391e:	e7f5      	b.n	801390c <UTIL_SEQ_Run+0xf8>
 8013920:	20000128 	.word	0x20000128
 8013924:	20001fbc 	.word	0x20001fbc
 8013928:	20001fb8 	.word	0x20001fb8
 801392c:	2000012c 	.word	0x2000012c
 8013930:	20001fb4 	.word	0x20001fb4
 8013934:	20001f98 	.word	0x20001f98
 8013938:	20001fb0 	.word	0x20001fb0
 801393c:	20001fa0 	.word	0x20001fa0

08013940 <UTIL_SEQ_EvtIdle>:
{
 8013940:	b508      	push	{r3, lr}
  UTIL_SEQ_Run(~TaskId_bm);
 8013942:	43c0      	mvns	r0, r0
 8013944:	f7ff ff66 	bl	8013814 <UTIL_SEQ_Run>
}
 8013948:	bd08      	pop	{r3, pc}
	...

0801394c <UTIL_SEQ_WaitEvt>:
{
 801394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801394e:	4604      	mov	r4, r0
  current_task_idx = CurrentTaskIdx;
 8013950:	4b11      	ldr	r3, [pc, #68]	@ (8013998 <UTIL_SEQ_WaitEvt+0x4c>)
 8013952:	681e      	ldr	r6, [r3, #0]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8013954:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013958:	d005      	beq.n	8013966 <UTIL_SEQ_WaitEvt+0x1a>
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801395a:	2501      	movs	r5, #1
 801395c:	40b5      	lsls	r5, r6
  event_waited_id_backup = EvtWaited;
 801395e:	4b0f      	ldr	r3, [pc, #60]	@ (801399c <UTIL_SEQ_WaitEvt+0x50>)
 8013960:	681f      	ldr	r7, [r3, #0]
  EvtWaited = EvtId_bm;
 8013962:	601c      	str	r4, [r3, #0]
  while ((EvtSet & EvtId_bm) == 0U)
 8013964:	e005      	b.n	8013972 <UTIL_SEQ_WaitEvt+0x26>
    wait_task_idx = 0u;
 8013966:	2500      	movs	r5, #0
 8013968:	e7f9      	b.n	801395e <UTIL_SEQ_WaitEvt+0x12>
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801396a:	4621      	mov	r1, r4
 801396c:	4628      	mov	r0, r5
 801396e:	f7ff ffe7 	bl	8013940 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8013972:	4b0b      	ldr	r3, [pc, #44]	@ (80139a0 <UTIL_SEQ_WaitEvt+0x54>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	4223      	tst	r3, r4
 8013978:	d0f7      	beq.n	801396a <UTIL_SEQ_WaitEvt+0x1e>
  CurrentTaskIdx = current_task_idx;
 801397a:	4b07      	ldr	r3, [pc, #28]	@ (8013998 <UTIL_SEQ_WaitEvt+0x4c>)
 801397c:	601e      	str	r6, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801397e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013982:	b672      	cpsid	i
  EvtSet &= (~EvtId_bm);
 8013984:	4a06      	ldr	r2, [pc, #24]	@ (80139a0 <UTIL_SEQ_WaitEvt+0x54>)
 8013986:	6813      	ldr	r3, [r2, #0]
 8013988:	ea23 0304 	bic.w	r3, r3, r4
 801398c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801398e:	f381 8810 	msr	PRIMASK, r1
  EvtWaited = event_waited_id_backup;
 8013992:	4b02      	ldr	r3, [pc, #8]	@ (801399c <UTIL_SEQ_WaitEvt+0x50>)
 8013994:	601f      	str	r7, [r3, #0]
}
 8013996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013998:	20001fb0 	.word	0x20001fb0
 801399c:	20001fb4 	.word	0x20001fb4
 80139a0:	20001fb8 	.word	0x20001fb8

080139a4 <UTIL_SEQ_RegTask>:
{
 80139a4:	b538      	push	{r3, r4, r5, lr}
 80139a6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139a8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80139ac:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80139ae:	f7ff ff13 	bl	80137d8 <SEQ_BitPosition>
 80139b2:	4b03      	ldr	r3, [pc, #12]	@ (80139c0 <UTIL_SEQ_RegTask+0x1c>)
 80139b4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139b8:	f385 8810 	msr	PRIMASK, r5
}
 80139bc:	bd38      	pop	{r3, r4, r5, pc}
 80139be:	bf00      	nop
 80139c0:	20001fa0 	.word	0x20001fa0

080139c4 <CalendarDiv86400>:
  }
  return month;
}

static void CalendarDiv86400( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 80139c4:	b430      	push	{r4, r5}
#if 0
  *remainder = in % SECONDS_IN_1DAY;
  *out     = in / SECONDS_IN_1DAY;
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_86400( in );
 80139c6:	0c43      	lsrs	r3, r0, #17
 80139c8:	eb03 4390 	add.w	r3, r3, r0, lsr #18
  uint32_t outTemp = 0;
 80139cc:	2400      	movs	r4, #0

  while( divResult >=1 )
 80139ce:	e006      	b.n	80139de <CalendarDiv86400+0x1a>
  {
    outTemp += divResult;
 80139d0:	441c      	add	r4, r3
    in -= divResult * 86400;
 80139d2:	4d0a      	ldr	r5, [pc, #40]	@ (80139fc <CalendarDiv86400+0x38>)
 80139d4:	fb05 0013 	mls	r0, r5, r3, r0
    divResult= DIV_APPROX_86400( in );
 80139d8:	0c43      	lsrs	r3, r0, #17
 80139da:	eb03 4390 	add.w	r3, r3, r0, lsr #18
  while( divResult >=1 )
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d1f6      	bne.n	80139d0 <CalendarDiv86400+0xc>
  }
  if( in >= 86400 )
 80139e2:	4b07      	ldr	r3, [pc, #28]	@ (8013a00 <CalendarDiv86400+0x3c>)
 80139e4:	4298      	cmp	r0, r3
 80139e6:	d904      	bls.n	80139f2 <CalendarDiv86400+0x2e>
  {
    outTemp += 1;
 80139e8:	3401      	adds	r4, #1
    in -= 86400;
 80139ea:	f5a0 30a8 	sub.w	r0, r0, #86016	@ 0x15000
 80139ee:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
  }

  *remainder = in;
 80139f2:	6010      	str	r0, [r2, #0]
  *out = outTemp;
 80139f4:	600c      	str	r4, [r1, #0]
#endif
}
 80139f6:	bc30      	pop	{r4, r5}
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop
 80139fc:	00015180 	.word	0x00015180
 8013a00:	0001517f 	.word	0x0001517f

08013a04 <CalendarDiv61>:

static uint32_t CalendarDiv61( uint32_t in )
{
 8013a04:	4602      	mov	r2, r0
#if 0
  return( in / 61 );
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_61( in );
 8013a06:	4b0b      	ldr	r3, [pc, #44]	@ (8013a34 <CalendarDiv61+0x30>)
 8013a08:	fb00 f303 	mul.w	r3, r0, r3
 8013a0c:	0d9b      	lsrs	r3, r3, #22
  uint32_t outTemp = 0;
 8013a0e:	2000      	movs	r0, #0
  while( divResult >=1 )
 8013a10:	e009      	b.n	8013a26 <CalendarDiv61+0x22>
  {
    outTemp += divResult;
 8013a12:	4418      	add	r0, r3
    in -= divResult * 61;
 8013a14:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8013a18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013a1c:	1ad2      	subs	r2, r2, r3
    divResult = DIV_APPROX_61( in );
 8013a1e:	4b05      	ldr	r3, [pc, #20]	@ (8013a34 <CalendarDiv61+0x30>)
 8013a20:	fb02 f303 	mul.w	r3, r2, r3
 8013a24:	0d9b      	lsrs	r3, r3, #22
  while( divResult >=1 )
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d1f3      	bne.n	8013a12 <CalendarDiv61+0xe>
  }
  if( in >= 61 )
 8013a2a:	2a3c      	cmp	r2, #60	@ 0x3c
 8013a2c:	d900      	bls.n	8013a30 <CalendarDiv61+0x2c>
  {
    outTemp += 1;
 8013a2e:	3001      	adds	r0, #1
    in -= 61;
  }
  return outTemp;
#endif
}
 8013a30:	4770      	bx	lr
 8013a32:	bf00      	nop
 8013a34:	00010c97 	.word	0x00010c97

08013a38 <CalendarGetMonth>:
{
 8013a38:	b508      	push	{r3, lr}
  if( ( year % 4 ) == 0 )
 8013a3a:	f011 0f03 	tst.w	r1, #3
 8013a3e:	d113      	bne.n	8013a68 <CalendarGetMonth+0x30>
    if( days < END_OF_FEBRUARY_LEAP )
 8013a40:	283b      	cmp	r0, #59	@ 0x3b
 8013a42:	d907      	bls.n	8013a54 <CalendarGetMonth+0x1c>
    else if( days < END_OF_JULY_LEAP )
 8013a44:	28d4      	cmp	r0, #212	@ 0xd4
 8013a46:	d809      	bhi.n	8013a5c <CalendarGetMonth+0x24>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 8013a48:	383c      	subs	r0, #60	@ 0x3c
 8013a4a:	0040      	lsls	r0, r0, #1
 8013a4c:	f7ff ffda 	bl	8013a04 <CalendarDiv61>
 8013a50:	3002      	adds	r0, #2
}
 8013a52:	bd08      	pop	{r3, pc}
      month = CalendarDiv61( days * 2 );
 8013a54:	0040      	lsls	r0, r0, #1
 8013a56:	f7ff ffd5 	bl	8013a04 <CalendarDiv61>
 8013a5a:	e7fa      	b.n	8013a52 <CalendarGetMonth+0x1a>
      month = CalendarDiv61( ( days - END_OF_JULY_LEAP ) * 2 ) + 7;
 8013a5c:	38d5      	subs	r0, #213	@ 0xd5
 8013a5e:	0040      	lsls	r0, r0, #1
 8013a60:	f7ff ffd0 	bl	8013a04 <CalendarDiv61>
 8013a64:	3007      	adds	r0, #7
 8013a66:	e7f4      	b.n	8013a52 <CalendarGetMonth+0x1a>
    if( days < END_OF_FEBRUARY_NORM )
 8013a68:	283a      	cmp	r0, #58	@ 0x3a
 8013a6a:	d907      	bls.n	8013a7c <CalendarGetMonth+0x44>
    else if( days < END_OF_JULY_NORM )
 8013a6c:	28d3      	cmp	r0, #211	@ 0xd3
 8013a6e:	d809      	bhi.n	8013a84 <CalendarGetMonth+0x4c>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 8013a70:	383b      	subs	r0, #59	@ 0x3b
 8013a72:	0040      	lsls	r0, r0, #1
 8013a74:	f7ff ffc6 	bl	8013a04 <CalendarDiv61>
 8013a78:	3002      	adds	r0, #2
 8013a7a:	e7ea      	b.n	8013a52 <CalendarGetMonth+0x1a>
      month = CalendarDiv61( days * 2 );
 8013a7c:	0040      	lsls	r0, r0, #1
 8013a7e:	f7ff ffc1 	bl	8013a04 <CalendarDiv61>
 8013a82:	e7e6      	b.n	8013a52 <CalendarGetMonth+0x1a>
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 8013a84:	38d4      	subs	r0, #212	@ 0xd4
 8013a86:	0040      	lsls	r0, r0, #1
 8013a88:	f7ff ffbc 	bl	8013a04 <CalendarDiv61>
 8013a8c:	3007      	adds	r0, #7
  return month;
 8013a8e:	e7e0      	b.n	8013a52 <CalendarGetMonth+0x1a>

08013a90 <CalendarDiv60>:

static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 8013a90:	b410      	push	{r4}
#if 0
  *remainder = in % 60;
  *out     = in / 60;
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_60( in );
 8013a92:	f244 4344 	movw	r3, #17476	@ 0x4444
 8013a96:	fb00 f303 	mul.w	r3, r0, r3
 8013a9a:	0d1b      	lsrs	r3, r3, #20
  uint32_t outTemp = 0;
 8013a9c:	2400      	movs	r4, #0

  while( divResult >=1 )
 8013a9e:	e009      	b.n	8013ab4 <CalendarDiv60+0x24>
  {
    outTemp += divResult;
 8013aa0:	441c      	add	r4, r3
    in -= divResult * 60;
 8013aa2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013aa6:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    divResult = DIV_APPROX_60( in );
 8013aaa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8013aae:	fb00 f303 	mul.w	r3, r0, r3
 8013ab2:	0d1b      	lsrs	r3, r3, #20
  while( divResult >=1 )
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d1f3      	bne.n	8013aa0 <CalendarDiv60+0x10>
  }
  if( in >= 60 )
 8013ab8:	283b      	cmp	r0, #59	@ 0x3b
 8013aba:	d901      	bls.n	8013ac0 <CalendarDiv60+0x30>
  {
    outTemp += 1;
 8013abc:	3401      	adds	r4, #1
    in -= 60;
 8013abe:	383c      	subs	r0, #60	@ 0x3c
  }
  *remainder = in;
 8013ac0:	6010      	str	r0, [r2, #0]
  *out = outTemp;
 8013ac2:	600c      	str	r4, [r1, #0]
#endif
}
 8013ac4:	bc10      	pop	{r4}
 8013ac6:	4770      	bx	lr

08013ac8 <SysTimeAdd>:
{
 8013ac8:	b082      	sub	sp, #8
 8013aca:	b082      	sub	sp, #8
 8013acc:	f10d 0c08 	add.w	ip, sp, #8
 8013ad0:	e90c 0006 	stmdb	ip, {r1, r2}
 8013ad4:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	6002      	str	r2, [r0, #0]
 8013ada:	8082      	strh	r2, [r0, #4]
  c.Seconds = a.Seconds + b.Seconds;
 8013adc:	440b      	add	r3, r1
 8013ade:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8013ae0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013ae4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013ae8:	440a      	add	r2, r1
 8013aea:	b291      	uxth	r1, r2
 8013aec:	b212      	sxth	r2, r2
 8013aee:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8013af0:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8013af4:	db04      	blt.n	8013b00 <SysTimeAdd+0x38>
    c.Seconds++;
 8013af6:	3301      	adds	r3, #1
 8013af8:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8013afa:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8013afe:	8081      	strh	r1, [r0, #4]
}
 8013b00:	b002      	add	sp, #8
 8013b02:	b002      	add	sp, #8
 8013b04:	4770      	bx	lr

08013b06 <SysTimeSub>:
{
 8013b06:	b082      	sub	sp, #8
 8013b08:	b082      	sub	sp, #8
 8013b0a:	f10d 0c08 	add.w	ip, sp, #8
 8013b0e:	e90c 0006 	stmdb	ip, {r1, r2}
 8013b12:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8013b14:	2200      	movs	r2, #0
 8013b16:	6002      	str	r2, [r0, #0]
 8013b18:	8082      	strh	r2, [r0, #4]
  c.Seconds = a.Seconds - b.Seconds;
 8013b1a:	1acb      	subs	r3, r1, r3
 8013b1c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8013b1e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013b22:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013b26:	1a52      	subs	r2, r2, r1
 8013b28:	b291      	uxth	r1, r2
 8013b2a:	b212      	sxth	r2, r2
 8013b2c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8013b2e:	2a00      	cmp	r2, #0
 8013b30:	db02      	blt.n	8013b38 <SysTimeSub+0x32>
}
 8013b32:	b002      	add	sp, #8
 8013b34:	b002      	add	sp, #8
 8013b36:	4770      	bx	lr
    c.Seconds--;
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8013b3c:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8013b40:	8081      	strh	r1, [r0, #4]
  return c;
 8013b42:	e7f6      	b.n	8013b32 <SysTimeSub+0x2c>

08013b44 <SysTimeSet>:
{
 8013b44:	b530      	push	{r4, r5, lr}
 8013b46:	b089      	sub	sp, #36	@ 0x24
 8013b48:	ac02      	add	r4, sp, #8
 8013b4a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013b4e:	2300      	movs	r3, #0
 8013b50:	9304      	str	r3, [sp, #16]
 8013b52:	f8ad 3014 	strh.w	r3, [sp, #20]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013b56:	4d0b      	ldr	r5, [pc, #44]	@ (8013b84 <SysTimeSet+0x40>)
 8013b58:	692b      	ldr	r3, [r5, #16]
 8013b5a:	a805      	add	r0, sp, #20
 8013b5c:	4798      	blx	r3
 8013b5e:	4603      	mov	r3, r0
 8013b60:	9004      	str	r0, [sp, #16]
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8013b62:	9a05      	ldr	r2, [sp, #20]
 8013b64:	9200      	str	r2, [sp, #0]
 8013b66:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013b6a:	a806      	add	r0, sp, #24
 8013b6c:	f7ff ffcb 	bl	8013b06 <SysTimeSub>
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8013b70:	682b      	ldr	r3, [r5, #0]
 8013b72:	9806      	ldr	r0, [sp, #24]
 8013b74:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8013b76:	68ab      	ldr	r3, [r5, #8]
 8013b78:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013b7c:	4798      	blx	r3
}
 8013b7e:	b009      	add	sp, #36	@ 0x24
 8013b80:	bd30      	pop	{r4, r5, pc}
 8013b82:	bf00      	nop
 8013b84:	080165e0 	.word	0x080165e0

08013b88 <SysTimeGet>:
{
 8013b88:	b530      	push	{r4, r5, lr}
 8013b8a:	b087      	sub	sp, #28
 8013b8c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013b8e:	2300      	movs	r3, #0
 8013b90:	9304      	str	r3, [sp, #16]
 8013b92:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8013b96:	6003      	str	r3, [r0, #0]
 8013b98:	8083      	strh	r3, [r0, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013b9a:	4d0b      	ldr	r5, [pc, #44]	@ (8013bc8 <SysTimeGet+0x40>)
 8013b9c:	692b      	ldr	r3, [r5, #16]
 8013b9e:	a805      	add	r0, sp, #20
 8013ba0:	4798      	blx	r3
 8013ba2:	9004      	str	r0, [sp, #16]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013ba4:	68eb      	ldr	r3, [r5, #12]
 8013ba6:	4798      	blx	r3
 8013ba8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013bac:	686b      	ldr	r3, [r5, #4]
 8013bae:	4798      	blx	r3
 8013bb0:	9002      	str	r0, [sp, #8]
  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8013bb2:	9b05      	ldr	r3, [sp, #20]
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	9b04      	ldr	r3, [sp, #16]
 8013bb8:	aa02      	add	r2, sp, #8
 8013bba:	ca06      	ldmia	r2, {r1, r2}
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	f7ff ff83 	bl	8013ac8 <SysTimeAdd>
}
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	b007      	add	sp, #28
 8013bc6:	bd30      	pop	{r4, r5, pc}
 8013bc8:	080165e0 	.word	0x080165e0

08013bcc <SysTimeGetMcuTime>:
{
 8013bcc:	b530      	push	{r4, r5, lr}
 8013bce:	b083      	sub	sp, #12
 8013bd0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	9300      	str	r3, [sp, #0]
 8013bd6:	f8ad 3004 	strh.w	r3, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013bda:	4b06      	ldr	r3, [pc, #24]	@ (8013bf4 <SysTimeGetMcuTime+0x28>)
 8013bdc:	691b      	ldr	r3, [r3, #16]
 8013bde:	466d      	mov	r5, sp
 8013be0:	a801      	add	r0, sp, #4
 8013be2:	4798      	blx	r3
 8013be4:	9000      	str	r0, [sp, #0]
  return calendarTime;
 8013be6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013bea:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8013bee:	4620      	mov	r0, r4
 8013bf0:	b003      	add	sp, #12
 8013bf2:	bd30      	pop	{r4, r5, pc}
 8013bf4:	080165e0 	.word	0x080165e0

08013bf8 <SysTimeToMs>:
{
 8013bf8:	b530      	push	{r4, r5, lr}
 8013bfa:	b089      	sub	sp, #36	@ 0x24
 8013bfc:	ac02      	add	r4, sp, #8
 8013bfe:	e884 0003 	stmia.w	r4, {r0, r1}
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013c02:	4d0c      	ldr	r5, [pc, #48]	@ (8013c34 <SysTimeToMs+0x3c>)
 8013c04:	68eb      	ldr	r3, [r5, #12]
 8013c06:	4798      	blx	r3
 8013c08:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013c0c:	686b      	ldr	r3, [r5, #4]
 8013c0e:	4798      	blx	r3
 8013c10:	4603      	mov	r3, r0
 8013c12:	9006      	str	r0, [sp, #24]
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8013c14:	9a07      	ldr	r2, [sp, #28]
 8013c16:	9200      	str	r2, [sp, #0]
 8013c18:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013c1c:	a804      	add	r0, sp, #16
 8013c1e:	f7ff ff72 	bl	8013b06 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8013c22:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8013c26:	9a04      	ldr	r2, [sp, #16]
 8013c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013c2c:	fb00 3002 	mla	r0, r0, r2, r3
 8013c30:	b009      	add	sp, #36	@ 0x24
 8013c32:	bd30      	pop	{r4, r5, pc}
 8013c34:	080165e0 	.word	0x080165e0

08013c38 <SysTimeFromMs>:
{
 8013c38:	b530      	push	{r4, r5, lr}
 8013c3a:	b087      	sub	sp, #28
 8013c3c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8013c3e:	4b12      	ldr	r3, [pc, #72]	@ (8013c88 <SysTimeFromMs+0x50>)
 8013c40:	fba3 2301 	umull	r2, r3, r3, r1
 8013c44:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8013c46:	9304      	str	r3, [sp, #16]
 8013c48:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8013c4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013c50:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8013c54:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8013c58:	2300      	movs	r3, #0
 8013c5a:	9302      	str	r3, [sp, #8]
 8013c5c:	9303      	str	r3, [sp, #12]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013c5e:	4d0b      	ldr	r5, [pc, #44]	@ (8013c8c <SysTimeFromMs+0x54>)
 8013c60:	68eb      	ldr	r3, [r5, #12]
 8013c62:	4798      	blx	r3
 8013c64:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013c68:	686b      	ldr	r3, [r5, #4]
 8013c6a:	4798      	blx	r3
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8013c70:	9a03      	ldr	r2, [sp, #12]
 8013c72:	9200      	str	r2, [sp, #0]
 8013c74:	aa06      	add	r2, sp, #24
 8013c76:	e912 0006 	ldmdb	r2, {r1, r2}
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	f7ff ff24 	bl	8013ac8 <SysTimeAdd>
}
 8013c80:	4620      	mov	r0, r4
 8013c82:	b007      	add	sp, #28
 8013c84:	bd30      	pop	{r4, r5, pc}
 8013c86:	bf00      	nop
 8013c88:	10624dd3 	.word	0x10624dd3
 8013c8c:	080165e0 	.word	0x080165e0

08013c90 <SysTimeLocalTime>:
{
 8013c90:	b570      	push	{r4, r5, r6, lr}
 8013c92:	b08a      	sub	sp, #40	@ 0x28
 8013c94:	4604      	mov	r4, r0
 8013c96:	460d      	mov	r5, r1
  uint32_t correctionMonth[4] =
 8013c98:	4b32      	ldr	r3, [pc, #200]	@ (8013d64 <SysTimeLocalTime+0xd4>)
 8013c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013c9c:	ae0a      	add	r6, sp, #40	@ 0x28
 8013c9e:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  CalendarDiv86400( timestamp + CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS, &days, &seconds );
 8013ca2:	aa05      	add	r2, sp, #20
 8013ca4:	a903      	add	r1, sp, #12
 8013ca6:	4830      	ldr	r0, [pc, #192]	@ (8013d68 <SysTimeLocalTime+0xd8>)
 8013ca8:	4420      	add	r0, r4
 8013caa:	f7ff fe8b 	bl	80139c4 <CalendarDiv86400>
  CalendarDiv60( seconds, &minutes, &divReminder );
 8013cae:	aa01      	add	r2, sp, #4
 8013cb0:	a904      	add	r1, sp, #16
 8013cb2:	9805      	ldr	r0, [sp, #20]
 8013cb4:	f7ff feec 	bl	8013a90 <CalendarDiv60>
  localtime->tm_sec = ( uint8_t )divReminder;
 8013cb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013cbc:	602b      	str	r3, [r5, #0]
  CalendarDiv60( minutes, &divOut, &divReminder);
 8013cbe:	aa01      	add	r2, sp, #4
 8013cc0:	a902      	add	r1, sp, #8
 8013cc2:	9804      	ldr	r0, [sp, #16]
 8013cc4:	f7ff fee4 	bl	8013a90 <CalendarDiv60>
  localtime->tm_min = ( uint8_t )divReminder;
 8013cc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013ccc:	606b      	str	r3, [r5, #4]
  localtime->tm_hour = ( uint8_t )divOut;
 8013cce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013cd2:	60ab      	str	r3, [r5, #8]
  localtime->tm_year = DIV_365_25( days );
 8013cd4:	9e03      	ldr	r6, [sp, #12]
 8013cd6:	4b25      	ldr	r3, [pc, #148]	@ (8013d6c <SysTimeLocalTime+0xdc>)
 8013cd8:	f645 04de 	movw	r4, #22750	@ 0x58de
 8013cdc:	fb03 4406 	mla	r4, r3, r6, r4
 8013ce0:	0e64      	lsrs	r4, r4, #25
 8013ce2:	616c      	str	r4, [r5, #20]
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 8013ce4:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8013ce8:	fb04 f303 	mul.w	r3, r4, r3
 8013cec:	3303      	adds	r3, #3
 8013cee:	eba6 0693 	sub.w	r6, r6, r3, lsr #2
 8013cf2:	9603      	str	r6, [sp, #12]
  localtime->tm_yday = days;
 8013cf4:	61ee      	str	r6, [r5, #28]
  localtime->tm_mon = CalendarGetMonth( days, localtime->tm_year );
 8013cf6:	4621      	mov	r1, r4
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	f7ff fe9d 	bl	8013a38 <CalendarGetMonth>
 8013cfe:	4602      	mov	r2, r0
 8013d00:	6128      	str	r0, [r5, #16]
  weekDays += DIVC_BY_4( ( localtime->tm_year * 5 ) );
 8013d02:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013d06:	3303      	adds	r3, #3
 8013d08:	109b      	asrs	r3, r3, #2
 8013d0a:	3301      	adds	r3, #1
  weekDays += days;
 8013d0c:	4433      	add	r3, r6
  localtime->tm_wday = MODULO_7( weekDays );
 8013d0e:	4918      	ldr	r1, [pc, #96]	@ (8013d70 <SysTimeLocalTime+0xe0>)
 8013d10:	fb03 1101 	mla	r1, r3, r1, r1
 8013d14:	0d49      	lsrs	r1, r1, #21
 8013d16:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8013d1a:	1a5b      	subs	r3, r3, r1
 8013d1c:	61ab      	str	r3, [r5, #24]
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 8013d1e:	4261      	negs	r1, r4
 8013d20:	f004 0303 	and.w	r3, r4, #3
 8013d24:	f001 0103 	and.w	r1, r1, #3
 8013d28:	bf58      	it	pl
 8013d2a:	424b      	negpl	r3, r1
 8013d2c:	a90a      	add	r1, sp, #40	@ 0x28
 8013d2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013d32:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8013d36:	0053      	lsls	r3, r2, #1
 8013d38:	40d8      	lsrs	r0, r3
 8013d3a:	f000 0003 	and.w	r0, r0, #3
  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
 8013d3e:	ebc2 1302 	rsb	r3, r2, r2, lsl #4
 8013d42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013d46:	3201      	adds	r2, #1
 8013d48:	eba0 0062 	sub.w	r0, r0, r2, asr #1
 8013d4c:	4430      	add	r0, r6
 8013d4e:	9003      	str	r0, [sp, #12]
  localtime->tm_mday = days + 1;
 8013d50:	3001      	adds	r0, #1
 8013d52:	60e8      	str	r0, [r5, #12]
  localtime->tm_year += CALC_REF_YEAR;
 8013d54:	3444      	adds	r4, #68	@ 0x44
 8013d56:	616c      	str	r4, [r5, #20]
  localtime->tm_isdst = -1;
 8013d58:	f04f 33ff 	mov.w	r3, #4294967295
 8013d5c:	622b      	str	r3, [r5, #32]
}
 8013d5e:	b00a      	add	sp, #40	@ 0x28
 8013d60:	bd70      	pop	{r4, r5, r6, pc}
 8013d62:	bf00      	nop
 8013d64:	080148c0 	.word	0x080148c0
 8013d68:	03c3b880 	.word	0x03c3b880
 8013d6c:	000166db 	.word	0x000166db
 8013d70:	00049249 	.word	0x00049249

08013d74 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8013d74:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8013d76:	4b03      	ldr	r3, [pc, #12]	@ (8013d84 <UTIL_TIMER_Init+0x10>)
 8013d78:	2200      	movs	r2, #0
 8013d7a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8013d7c:	4b02      	ldr	r3, [pc, #8]	@ (8013d88 <UTIL_TIMER_Init+0x14>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4798      	blx	r3
}
 8013d82:	bd08      	pop	{r3, pc}
 8013d84:	20001fc0 	.word	0x20001fc0
 8013d88:	080165f4 	.word	0x080165f4

08013d8c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8013d8c:	b1a8      	cbz	r0, 8013dba <UTIL_TIMER_Create+0x2e>
{
 8013d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d90:	4617      	mov	r7, r2
 8013d92:	461e      	mov	r6, r3
 8013d94:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8013d96:	b193      	cbz	r3, 8013dbe <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8013d98:	2500      	movs	r5, #0
 8013d9a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8013d9c:	4b09      	ldr	r3, [pc, #36]	@ (8013dc4 <UTIL_TIMER_Create+0x38>)
 8013d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013da0:	4608      	mov	r0, r1
 8013da2:	4798      	blx	r3
 8013da4:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8013da6:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8013da8:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013daa:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8013dac:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8013dae:	9b06      	ldr	r3, [sp, #24]
 8013db0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8013db2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8013db4:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8013db6:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8013db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8013dba:	2001      	movs	r0, #1
}
 8013dbc:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8013dbe:	2001      	movs	r0, #1
 8013dc0:	e7fa      	b.n	8013db8 <UTIL_TIMER_Create+0x2c>
 8013dc2:	bf00      	nop
 8013dc4:	080165f4 	.word	0x080165f4

08013dc8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8013dc8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8013dca:	4c03      	ldr	r4, [pc, #12]	@ (8013dd8 <UTIL_TIMER_GetCurrentTime+0x10>)
 8013dcc:	69e3      	ldr	r3, [r4, #28]
 8013dce:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8013dd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013dd2:	4798      	blx	r3
}
 8013dd4:	bd10      	pop	{r4, pc}
 8013dd6:	bf00      	nop
 8013dd8:	080165f4 	.word	0x080165f4

08013ddc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8013de0:	4d05      	ldr	r5, [pc, #20]	@ (8013df8 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8013de2:	69eb      	ldr	r3, [r5, #28]
 8013de4:	4798      	blx	r3
 8013de6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8013de8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013dea:	4630      	mov	r0, r6
 8013dec:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8013dee:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8013df0:	1a20      	subs	r0, r4, r0
 8013df2:	4798      	blx	r3
}
 8013df4:	bd70      	pop	{r4, r5, r6, pc}
 8013df6:	bf00      	nop
 8013df8:	080165f4 	.word	0x080165f4

08013dfc <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013dfc:	4b05      	ldr	r3, [pc, #20]	@ (8013e14 <TimerExists+0x18>)
 8013dfe:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8013e00:	e000      	b.n	8013e04 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8013e02:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8013e04:	b11b      	cbz	r3, 8013e0e <TimerExists+0x12>
    if( cur == TimerObject )
 8013e06:	4283      	cmp	r3, r0
 8013e08:	d1fb      	bne.n	8013e02 <TimerExists+0x6>
      return true;
 8013e0a:	2001      	movs	r0, #1
  }
  return false;
}
 8013e0c:	4770      	bx	lr
  return false;
 8013e0e:	2000      	movs	r0, #0
 8013e10:	4770      	bx	lr
 8013e12:	bf00      	nop
 8013e14:	20001fc0 	.word	0x20001fc0

08013e18 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8013e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8013e1c:	4e09      	ldr	r6, [pc, #36]	@ (8013e44 <TimerSetTimeout+0x2c>)
 8013e1e:	6a33      	ldr	r3, [r6, #32]
 8013e20:	4798      	blx	r3
 8013e22:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8013e24:	2301      	movs	r3, #1
 8013e26:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8013e28:	6827      	ldr	r7, [r4, #0]
 8013e2a:	69b6      	ldr	r6, [r6, #24]
 8013e2c:	47b0      	blx	r6
 8013e2e:	4428      	add	r0, r5
 8013e30:	4287      	cmp	r7, r0
 8013e32:	d202      	bcs.n	8013e3a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8013e34:	47b0      	blx	r6
 8013e36:	4428      	add	r0, r5
 8013e38:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8013e3a:	4b02      	ldr	r3, [pc, #8]	@ (8013e44 <TimerSetTimeout+0x2c>)
 8013e3c:	689b      	ldr	r3, [r3, #8]
 8013e3e:	6820      	ldr	r0, [r4, #0]
 8013e40:	4798      	blx	r3
}
 8013e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e44:	080165f4 	.word	0x080165f4

08013e48 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8013e48:	b368      	cbz	r0, 8013ea6 <UTIL_TIMER_Stop+0x5e>
{
 8013e4a:	b510      	push	{r4, lr}
 8013e4c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e4e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e52:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8013e54:	4b15      	ldr	r3, [pc, #84]	@ (8013eac <UTIL_TIMER_Stop+0x64>)
 8013e56:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8013e58:	2301      	movs	r3, #1
 8013e5a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8013e5c:	b1e1      	cbz	r1, 8013e98 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8013e62:	4288      	cmp	r0, r1
 8013e64:	d006      	beq.n	8013e74 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8013e66:	460b      	mov	r3, r1
        while( cur != NULL )
 8013e68:	b1b3      	cbz	r3, 8013e98 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	d011      	beq.n	8013e92 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8013e6e:	4619      	mov	r1, r3
            cur = cur->Next;
 8013e70:	695b      	ldr	r3, [r3, #20]
 8013e72:	e7f9      	b.n	8013e68 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8013e74:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8013e76:	6948      	ldr	r0, [r1, #20]
 8013e78:	b120      	cbz	r0, 8013e84 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8013e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8013eac <UTIL_TIMER_Stop+0x64>)
 8013e7c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8013e7e:	f7ff ffcb 	bl	8013e18 <TimerSetTimeout>
 8013e82:	e009      	b.n	8013e98 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8013e84:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb0 <UTIL_TIMER_Stop+0x68>)
 8013e86:	68db      	ldr	r3, [r3, #12]
 8013e88:	4798      	blx	r3
            TimerListHead = NULL;
 8013e8a:	4b08      	ldr	r3, [pc, #32]	@ (8013eac <UTIL_TIMER_Stop+0x64>)
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	601a      	str	r2, [r3, #0]
 8013e90:	e002      	b.n	8013e98 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8013e92:	695b      	ldr	r3, [r3, #20]
 8013e94:	b123      	cbz	r3, 8013ea0 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8013e96:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e98:	f384 8810 	msr	PRIMASK, r4
}
 8013e9c:	2000      	movs	r0, #0
}
 8013e9e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	614b      	str	r3, [r1, #20]
 8013ea4:	e7f8      	b.n	8013e98 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8013ea6:	2001      	movs	r0, #1
}
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	20001fc0 	.word	0x20001fc0
 8013eb0:	080165f4 	.word	0x080165f4

08013eb4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013eb4:	4b09      	ldr	r3, [pc, #36]	@ (8013edc <TimerInsertTimer+0x28>)
 8013eb6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8013eb8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8013eba:	e001      	b.n	8013ec0 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8013ebc:	461a      	mov	r2, r3
        next = next->Next;
 8013ebe:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8013ec0:	6951      	ldr	r1, [r2, #20]
 8013ec2:	b139      	cbz	r1, 8013ed4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8013ec4:	6819      	ldr	r1, [r3, #0]
 8013ec6:	f8d0 c000 	ldr.w	ip, [r0]
 8013eca:	458c      	cmp	ip, r1
 8013ecc:	d8f6      	bhi.n	8013ebc <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8013ece:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8013ed0:	6143      	str	r3, [r0, #20]
        return;
 8013ed2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8013ed4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	6143      	str	r3, [r0, #20]
}
 8013eda:	4770      	bx	lr
 8013edc:	20001fc0 	.word	0x20001fc0

08013ee0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8013ee0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013ee2:	4b05      	ldr	r3, [pc, #20]	@ (8013ef8 <TimerInsertNewHeadTimer+0x18>)
 8013ee4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8013ee6:	b10b      	cbz	r3, 8013eec <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8013ee8:	2200      	movs	r2, #0
 8013eea:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8013eec:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8013eee:	4b02      	ldr	r3, [pc, #8]	@ (8013ef8 <TimerInsertNewHeadTimer+0x18>)
 8013ef0:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8013ef2:	f7ff ff91 	bl	8013e18 <TimerSetTimeout>
}
 8013ef6:	bd08      	pop	{r3, pc}
 8013ef8:	20001fc0 	.word	0x20001fc0

08013efc <UTIL_TIMER_Start>:
{
 8013efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d036      	beq.n	8013f70 <UTIL_TIMER_Start+0x74>
 8013f02:	4604      	mov	r4, r0
 8013f04:	f7ff ff7a 	bl	8013dfc <TimerExists>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	d134      	bne.n	8013f76 <UTIL_TIMER_Start+0x7a>
 8013f0c:	7a65      	ldrb	r5, [r4, #9]
 8013f0e:	2d00      	cmp	r5, #0
 8013f10:	d133      	bne.n	8013f7a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f12:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f16:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8013f18:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8013f1a:	4b19      	ldr	r3, [pc, #100]	@ (8013f80 <UTIL_TIMER_Start+0x84>)
 8013f1c:	6a1b      	ldr	r3, [r3, #32]
 8013f1e:	4798      	blx	r3
    if( ticks < minValue )
 8013f20:	4287      	cmp	r7, r0
 8013f22:	d300      	bcc.n	8013f26 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8013f24:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8013f26:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013f30:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8013f32:	4b14      	ldr	r3, [pc, #80]	@ (8013f84 <UTIL_TIMER_Start+0x88>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	b183      	cbz	r3, 8013f5a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8013f38:	4b11      	ldr	r3, [pc, #68]	@ (8013f80 <UTIL_TIMER_Start+0x84>)
 8013f3a:	699b      	ldr	r3, [r3, #24]
 8013f3c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8013f3e:	6823      	ldr	r3, [r4, #0]
 8013f40:	4418      	add	r0, r3
 8013f42:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8013f44:	4b0f      	ldr	r3, [pc, #60]	@ (8013f84 <UTIL_TIMER_Start+0x88>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	4298      	cmp	r0, r3
 8013f4c:	d20c      	bcs.n	8013f68 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8013f4e:	4620      	mov	r0, r4
 8013f50:	f7ff ffc6 	bl	8013ee0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f54:	f386 8810 	msr	PRIMASK, r6
}
 8013f58:	e00b      	b.n	8013f72 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8013f5a:	4b09      	ldr	r3, [pc, #36]	@ (8013f80 <UTIL_TIMER_Start+0x84>)
 8013f5c:	691b      	ldr	r3, [r3, #16]
 8013f5e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8013f60:	4620      	mov	r0, r4
 8013f62:	f7ff ffbd 	bl	8013ee0 <TimerInsertNewHeadTimer>
 8013f66:	e7f5      	b.n	8013f54 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f7ff ffa3 	bl	8013eb4 <TimerInsertTimer>
 8013f6e:	e7f1      	b.n	8013f54 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013f70:	2501      	movs	r5, #1
}
 8013f72:	4628      	mov	r0, r5
 8013f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013f76:	2501      	movs	r5, #1
 8013f78:	e7fb      	b.n	8013f72 <UTIL_TIMER_Start+0x76>
 8013f7a:	2501      	movs	r5, #1
 8013f7c:	e7f9      	b.n	8013f72 <UTIL_TIMER_Start+0x76>
 8013f7e:	bf00      	nop
 8013f80:	080165f4 	.word	0x080165f4
 8013f84:	20001fc0 	.word	0x20001fc0

08013f88 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8013f88:	b198      	cbz	r0, 8013fb2 <UTIL_TIMER_SetPeriod+0x2a>
{
 8013f8a:	b510      	push	{r4, lr}
 8013f8c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8013f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8013fb8 <UTIL_TIMER_SetPeriod+0x30>)
 8013f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f92:	4608      	mov	r0, r1
 8013f94:	4798      	blx	r3
 8013f96:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7ff ff2f 	bl	8013dfc <TimerExists>
 8013f9e:	b908      	cbnz	r0, 8013fa4 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8013fa0:	2000      	movs	r0, #0
}
 8013fa2:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f7ff ff4f 	bl	8013e48 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8013faa:	4620      	mov	r0, r4
 8013fac:	f7ff ffa6 	bl	8013efc <UTIL_TIMER_Start>
 8013fb0:	e7f7      	b.n	8013fa2 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8013fb2:	2001      	movs	r0, #1
}
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop
 8013fb8:	080165f4 	.word	0x080165f4

08013fbc <UTIL_TIMER_IRQ_Handler>:
{
 8013fbc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fbe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013fc2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013fc4:	4c1e      	ldr	r4, [pc, #120]	@ (8014040 <UTIL_TIMER_IRQ_Handler+0x84>)
 8013fc6:	6963      	ldr	r3, [r4, #20]
 8013fc8:	4798      	blx	r3
 8013fca:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8013fcc:	6923      	ldr	r3, [r4, #16]
 8013fce:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8013fd0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8013fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8014044 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	b923      	cbnz	r3, 8013fe2 <UTIL_TIMER_IRQ_Handler+0x26>
 8013fd8:	e018      	b.n	801400c <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8013fda:	2200      	movs	r2, #0
 8013fdc:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8013fde:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8013fe0:	b1a3      	cbz	r3, 801400c <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	42a2      	cmp	r2, r4
 8013fe6:	d9f8      	bls.n	8013fda <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8013fe8:	1a31      	subs	r1, r6, r0
 8013fea:	440a      	add	r2, r1
 8013fec:	601a      	str	r2, [r3, #0]
 8013fee:	e7f6      	b.n	8013fde <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8013ff0:	4b14      	ldr	r3, [pc, #80]	@ (8014044 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013ff2:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8013ff4:	6962      	ldr	r2, [r4, #20]
 8013ff6:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8013ffc:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8013ffe:	68e3      	ldr	r3, [r4, #12]
 8014000:	6920      	ldr	r0, [r4, #16]
 8014002:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8014004:	8963      	ldrh	r3, [r4, #10]
 8014006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801400a:	d012      	beq.n	8014032 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801400c:	4b0d      	ldr	r3, [pc, #52]	@ (8014044 <UTIL_TIMER_IRQ_Handler+0x88>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	b13b      	cbz	r3, 8014022 <UTIL_TIMER_IRQ_Handler+0x66>
 8014012:	681c      	ldr	r4, [r3, #0]
 8014014:	2c00      	cmp	r4, #0
 8014016:	d0eb      	beq.n	8013ff0 <UTIL_TIMER_IRQ_Handler+0x34>
 8014018:	4b09      	ldr	r3, [pc, #36]	@ (8014040 <UTIL_TIMER_IRQ_Handler+0x84>)
 801401a:	699b      	ldr	r3, [r3, #24]
 801401c:	4798      	blx	r3
 801401e:	4284      	cmp	r4, r0
 8014020:	d3e6      	bcc.n	8013ff0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8014022:	4b08      	ldr	r3, [pc, #32]	@ (8014044 <UTIL_TIMER_IRQ_Handler+0x88>)
 8014024:	6818      	ldr	r0, [r3, #0]
 8014026:	b108      	cbz	r0, 801402c <UTIL_TIMER_IRQ_Handler+0x70>
 8014028:	7a03      	ldrb	r3, [r0, #8]
 801402a:	b133      	cbz	r3, 801403a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801402c:	f385 8810 	msr	PRIMASK, r5
}
 8014030:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8014032:	4620      	mov	r0, r4
 8014034:	f7ff ff62 	bl	8013efc <UTIL_TIMER_Start>
 8014038:	e7e8      	b.n	801400c <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 801403a:	f7ff feed 	bl	8013e18 <TimerSetTimeout>
 801403e:	e7f5      	b.n	801402c <UTIL_TIMER_IRQ_Handler+0x70>
 8014040:	080165f4 	.word	0x080165f4
 8014044:	20001fc0 	.word	0x20001fc0

08014048 <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 8014048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801404c:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8014050:	4605      	mov	r5, r0
 8014052:	460c      	mov	r4, r1
 8014054:	9201      	str	r2, [sp, #4]
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif

   fp_p = str;
  fp_r = strlen(str);
 8014056:	f7ec f88f 	bl	8000178 <strlen>
 801405a:	4601      	mov	r1, r0

  nassigned = 0;
  nread = 0;
  base = 0;    /* XXX just to keep gcc happy */
 801405c:	f04f 0c00 	mov.w	ip, #0
  nassigned = 0;
 8014060:	4660      	mov	r0, ip
  for (;;) {
    c = *fmt++;
 8014062:	4622      	mov	r2, r4
 8014064:	f812 3b01 	ldrb.w	r3, [r2], #1
    if (c == 0)
 8014068:	b13b      	cbz	r3, 801407a <tiny_vfscanf+0x32>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 801406a:	2b25      	cmp	r3, #37	@ 0x25
 801406c:	d009      	beq.n	8014082 <tiny_vfscanf+0x3a>
     */
again:    c = *fmt++;
    switch (c) {
    case '%':
literal:
      if (fp_r <= 0 && __srefill(fp))
 801406e:	2900      	cmp	r1, #0
 8014070:	f340 817c 	ble.w	801436c <tiny_vfscanf+0x324>
        goto input_failure;
      if (*fp_p != c)
 8014074:	782c      	ldrb	r4, [r5, #0]
 8014076:	429c      	cmp	r4, r3
 8014078:	d044      	beq.n	8014104 <tiny_vfscanf+0xbc>
  }
input_failure:
  return (nassigned ? nassigned : -1);
match_failure:
  return (nassigned);
}
 801407a:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 801407e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    flags = 0;
 8014082:	f04f 0e00 	mov.w	lr, #0
    width = 0;
 8014086:	4677      	mov	r7, lr
again:    c = *fmt++;
 8014088:	4614      	mov	r4, r2
 801408a:	f814 6b01 	ldrb.w	r6, [r4], #1
 801408e:	4633      	mov	r3, r6
    switch (c) {
 8014090:	2e78      	cmp	r6, #120	@ 0x78
 8014092:	d84f      	bhi.n	8014134 <tiny_vfscanf+0xec>
 8014094:	2e44      	cmp	r6, #68	@ 0x44
 8014096:	d31f      	bcc.n	80140d8 <tiny_vfscanf+0x90>
 8014098:	3e44      	subs	r6, #68	@ 0x44
 801409a:	2e34      	cmp	r6, #52	@ 0x34
 801409c:	d84a      	bhi.n	8014134 <tiny_vfscanf+0xec>
 801409e:	e8df f006 	tbb	[pc, r6]
 80140a2:	4944      	.short	0x4944
 80140a4:	49494949 	.word	0x49494949
 80140a8:	49494949 	.word	0x49494949
 80140ac:	49494949 	.word	0x49494949
 80140b0:	49494949 	.word	0x49494949
 80140b4:	49634949 	.word	0x49634949
 80140b8:	49494949 	.word	0x49494949
 80140bc:	49494949 	.word	0x49494949
 80140c0:	49694949 	.word	0x49694949
 80140c4:	49354949 	.word	0x49354949
 80140c8:	49404949 	.word	0x49404949
 80140cc:	49494949 	.word	0x49494949
 80140d0:	5d494949 	.word	0x5d494949
 80140d4:	4949      	.short	0x4949
 80140d6:	63          	.byte	0x63
 80140d7:	00          	.byte	0x00
 80140d8:	2e25      	cmp	r6, #37	@ 0x25
 80140da:	d011      	beq.n	8014100 <tiny_vfscanf+0xb8>
 80140dc:	d90c      	bls.n	80140f8 <tiny_vfscanf+0xb0>
 80140de:	f1a6 0230 	sub.w	r2, r6, #48	@ 0x30
 80140e2:	b2d2      	uxtb	r2, r2
 80140e4:	2a09      	cmp	r2, #9
 80140e6:	d825      	bhi.n	8014134 <tiny_vfscanf+0xec>
      width = width * 10 + c - '0';
 80140e8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80140ec:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 80140f0:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
again:    c = *fmt++;
 80140f4:	4622      	mov	r2, r4
      goto again;
 80140f6:	e7c7      	b.n	8014088 <tiny_vfscanf+0x40>
    switch (c) {
 80140f8:	b9e6      	cbnz	r6, 8014134 <tiny_vfscanf+0xec>
 80140fa:	f04f 30ff 	mov.w	r0, #4294967295
 80140fe:	e7bc      	b.n	801407a <tiny_vfscanf+0x32>
 8014100:	4622      	mov	r2, r4
 8014102:	e7b4      	b.n	801406e <tiny_vfscanf+0x26>
      fp_r--, fp_p++;
 8014104:	3901      	subs	r1, #1
 8014106:	3501      	adds	r5, #1
      continue;
 8014108:	4614      	mov	r4, r2
 801410a:	e7aa      	b.n	8014062 <tiny_vfscanf+0x1a>
      if (*fmt == 'h') {
 801410c:	7823      	ldrb	r3, [r4, #0]
 801410e:	2b68      	cmp	r3, #104	@ 0x68
 8014110:	d003      	beq.n	801411a <tiny_vfscanf+0xd2>
        flags |= SHORT;
 8014112:	f04e 0e04 	orr.w	lr, lr, #4
again:    c = *fmt++;
 8014116:	4622      	mov	r2, r4
      goto again;
 8014118:	e7b6      	b.n	8014088 <tiny_vfscanf+0x40>
        fmt++;
 801411a:	3202      	adds	r2, #2
        flags |= SHORTSHORT;
 801411c:	f04e 0e08 	orr.w	lr, lr, #8
 8014120:	e7b2      	b.n	8014088 <tiny_vfscanf+0x40>
      flags |= LONG;
 8014122:	f04e 0e01 	orr.w	lr, lr, #1
again:    c = *fmt++;
 8014126:	4622      	mov	r2, r4
      goto again;
 8014128:	e7ae      	b.n	8014088 <tiny_vfscanf+0x40>
      flags |= LONG;
 801412a:	f04e 0e01 	orr.w	lr, lr, #1
      base = 10;
 801412e:	f04f 0c0a 	mov.w	ip, #10
      c = CT_INT;
 8014132:	2303      	movs	r3, #3
    if (fp_r <= 0 && __srefill(fp))
 8014134:	2900      	cmp	r1, #0
 8014136:	f340 8119 	ble.w	801436c <tiny_vfscanf+0x324>
    switch (c) {
 801413a:	2b03      	cmp	r3, #3
 801413c:	d191      	bne.n	8014062 <tiny_vfscanf+0x1a>
      if (--width > sizeof(buf) - 2)
 801413e:	3f01      	subs	r7, #1
 8014140:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 8014144:	d301      	bcc.n	801414a <tiny_vfscanf+0x102>
        width = sizeof(buf) - 2;
 8014146:	f240 17ff 	movw	r7, #511	@ 0x1ff
      width++;
 801414a:	3701      	adds	r7, #1
      flags |= SIGNOK | NDIGITS;
 801414c:	f44e 4ea0 	orr.w	lr, lr, #20480	@ 0x5000
      sign_minus = 0;
 8014150:	f04f 0900 	mov.w	r9, #0
      value = 0;
 8014154:	464b      	mov	r3, r9
 8014156:	46ca      	mov	sl, r9
      for (p = buf; width; width--) {
 8014158:	aa03      	add	r2, sp, #12
 801415a:	e056      	b.n	801420a <tiny_vfscanf+0x1c2>
      flags |= UNSIGNED;
 801415c:	f44e 6e00 	orr.w	lr, lr, #2048	@ 0x800
      base = 10;
 8014160:	f04f 0c0a 	mov.w	ip, #10
      c = CT_INT;
 8014164:	2303      	movs	r3, #3
      break;
 8014166:	e7e5      	b.n	8014134 <tiny_vfscanf+0xec>
      flags |= UNSIGNED;
 8014168:	f44e 6e00 	orr.w	lr, lr, #2048	@ 0x800
      base = 16;
 801416c:	f04f 0c10 	mov.w	ip, #16
      c = CT_INT;
 8014170:	2303      	movs	r3, #3
      break;
 8014172:	e7df      	b.n	8014134 <tiny_vfscanf+0xec>
      base = 10;
 8014174:	f04f 0c0a 	mov.w	ip, #10
      c = CT_INT;
 8014178:	2303      	movs	r3, #3
 801417a:	e7db      	b.n	8014134 <tiny_vfscanf+0xec>
          flags &= ~(SIGNOK | NDIGITS);
 801417c:	f42e 4ea0 	bic.w	lr, lr, #20480	@ 0x5000
          value = value * base + c - '0';
 8014180:	fbac 3603 	umull	r3, r6, ip, r3
 8014184:	fb0c 660a 	mla	r6, ip, sl, r6
 8014188:	eb18 0303 	adds.w	r3, r8, r3
 801418c:	f146 0600 	adc.w	r6, r6, #0
 8014190:	3b30      	subs	r3, #48	@ 0x30
 8014192:	f146 3aff 	adc.w	sl, r6, #4294967295
          goto ok;
 8014196:	e030      	b.n	80141fa <tiny_vfscanf+0x1b2>
          if (base <= 10)
 8014198:	f1bc 0f0a 	cmp.w	ip, #10
 801419c:	f340 80ba 	ble.w	8014314 <tiny_vfscanf+0x2cc>
          flags &= ~(SIGNOK | NDIGITS);
 80141a0:	f42e 4ea0 	bic.w	lr, lr, #20480	@ 0x5000
          value = value * base + c - 'A' + 10;
 80141a4:	fbac 3603 	umull	r3, r6, ip, r3
 80141a8:	fb0c 660a 	mla	r6, ip, sl, r6
 80141ac:	eb18 0303 	adds.w	r3, r8, r3
 80141b0:	f146 0600 	adc.w	r6, r6, #0
 80141b4:	3b37      	subs	r3, #55	@ 0x37
 80141b6:	f146 3aff 	adc.w	sl, r6, #4294967295
          goto ok;
 80141ba:	e01e      	b.n	80141fa <tiny_vfscanf+0x1b2>
          if (base <= 10)
 80141bc:	f1bc 0f0a 	cmp.w	ip, #10
 80141c0:	f340 80a8 	ble.w	8014314 <tiny_vfscanf+0x2cc>
          flags &= ~(SIGNOK | NDIGITS);
 80141c4:	f42e 4ea0 	bic.w	lr, lr, #20480	@ 0x5000
          value = value * base + c - 'a' + 10;
 80141c8:	fbac 3603 	umull	r3, r6, ip, r3
 80141cc:	fb0c 660a 	mla	r6, ip, sl, r6
 80141d0:	eb18 0303 	adds.w	r3, r8, r3
 80141d4:	f146 0600 	adc.w	r6, r6, #0
 80141d8:	3b57      	subs	r3, #87	@ 0x57
 80141da:	f146 3aff 	adc.w	sl, r6, #4294967295
          goto ok;
 80141de:	e00c      	b.n	80141fa <tiny_vfscanf+0x1b2>
          if (!(flags & HAVESIGN)) {
 80141e0:	f41e 5f00 	tst.w	lr, #8192	@ 0x2000
 80141e4:	d101      	bne.n	80141ea <tiny_vfscanf+0x1a2>
            sign_minus = 1;
 80141e6:	f04f 0901 	mov.w	r9, #1
          if (flags & SIGNOK) {
 80141ea:	f41e 5f80 	tst.w	lr, #4096	@ 0x1000
 80141ee:	f000 8091 	beq.w	8014314 <tiny_vfscanf+0x2cc>
            flags &= ~SIGNOK;
 80141f2:	f42e 5e80 	bic.w	lr, lr, #4096	@ 0x1000
            flags |= HAVESIGN;
 80141f6:	f44e 5e00 	orr.w	lr, lr, #8192	@ 0x2000
        *p++ = c;
 80141fa:	f802 8b01 	strb.w	r8, [r2], #1
        if (--fp_r > 0)
 80141fe:	3901      	subs	r1, #1
 8014200:	2900      	cmp	r1, #0
 8014202:	f340 8087 	ble.w	8014314 <tiny_vfscanf+0x2cc>
          fp_p++;
 8014206:	3501      	adds	r5, #1
      for (p = buf; width; width--) {
 8014208:	3f01      	subs	r7, #1
 801420a:	2f00      	cmp	r7, #0
 801420c:	f000 8082 	beq.w	8014314 <tiny_vfscanf+0x2cc>
        c = *fp_p;
 8014210:	f895 8000 	ldrb.w	r8, [r5]
        switch (c) {
 8014214:	f1a8 062b 	sub.w	r6, r8, #43	@ 0x2b
 8014218:	2e3b      	cmp	r6, #59	@ 0x3b
 801421a:	d87b      	bhi.n	8014314 <tiny_vfscanf+0x2cc>
 801421c:	f20f 0b04 	addw	fp, pc, #4
 8014220:	f85b f026 	ldr.w	pc, [fp, r6, lsl #2]
 8014224:	080141eb 	.word	0x080141eb
 8014228:	08014315 	.word	0x08014315
 801422c:	080141e1 	.word	0x080141e1
 8014230:	08014315 	.word	0x08014315
 8014234:	08014315 	.word	0x08014315
 8014238:	0801417d 	.word	0x0801417d
 801423c:	0801417d 	.word	0x0801417d
 8014240:	0801417d 	.word	0x0801417d
 8014244:	0801417d 	.word	0x0801417d
 8014248:	0801417d 	.word	0x0801417d
 801424c:	0801417d 	.word	0x0801417d
 8014250:	0801417d 	.word	0x0801417d
 8014254:	0801417d 	.word	0x0801417d
 8014258:	0801417d 	.word	0x0801417d
 801425c:	0801417d 	.word	0x0801417d
 8014260:	08014315 	.word	0x08014315
 8014264:	08014315 	.word	0x08014315
 8014268:	08014315 	.word	0x08014315
 801426c:	08014315 	.word	0x08014315
 8014270:	08014315 	.word	0x08014315
 8014274:	08014315 	.word	0x08014315
 8014278:	08014315 	.word	0x08014315
 801427c:	08014199 	.word	0x08014199
 8014280:	08014199 	.word	0x08014199
 8014284:	08014199 	.word	0x08014199
 8014288:	08014199 	.word	0x08014199
 801428c:	08014199 	.word	0x08014199
 8014290:	08014199 	.word	0x08014199
 8014294:	08014315 	.word	0x08014315
 8014298:	08014315 	.word	0x08014315
 801429c:	08014315 	.word	0x08014315
 80142a0:	08014315 	.word	0x08014315
 80142a4:	08014315 	.word	0x08014315
 80142a8:	08014315 	.word	0x08014315
 80142ac:	08014315 	.word	0x08014315
 80142b0:	08014315 	.word	0x08014315
 80142b4:	08014315 	.word	0x08014315
 80142b8:	08014315 	.word	0x08014315
 80142bc:	08014315 	.word	0x08014315
 80142c0:	08014315 	.word	0x08014315
 80142c4:	08014315 	.word	0x08014315
 80142c8:	08014315 	.word	0x08014315
 80142cc:	08014315 	.word	0x08014315
 80142d0:	08014315 	.word	0x08014315
 80142d4:	08014315 	.word	0x08014315
 80142d8:	08014315 	.word	0x08014315
 80142dc:	08014315 	.word	0x08014315
 80142e0:	08014315 	.word	0x08014315
 80142e4:	08014315 	.word	0x08014315
 80142e8:	08014315 	.word	0x08014315
 80142ec:	08014315 	.word	0x08014315
 80142f0:	08014315 	.word	0x08014315
 80142f4:	08014315 	.word	0x08014315
 80142f8:	08014315 	.word	0x08014315
 80142fc:	080141bd 	.word	0x080141bd
 8014300:	080141bd 	.word	0x080141bd
 8014304:	080141bd 	.word	0x080141bd
 8014308:	080141bd 	.word	0x080141bd
 801430c:	080141bd 	.word	0x080141bd
 8014310:	080141bd 	.word	0x080141bd
      if (flags & NDIGITS) {
 8014314:	f41e 4f80 	tst.w	lr, #16384	@ 0x4000
 8014318:	f47f aeaf 	bne.w	801407a <tiny_vfscanf+0x32>
        *p = '\0';
 801431c:	2600      	movs	r6, #0
 801431e:	7016      	strb	r6, [r2, #0]
        if (sign_minus)
 8014320:	f1b9 0f00 	cmp.w	r9, #0
 8014324:	d000      	beq.n	8014328 <tiny_vfscanf+0x2e0>
          value = -value;
 8014326:	425b      	negs	r3, r3
        if (flags & LONG)
 8014328:	f01e 0f01 	tst.w	lr, #1
 801432c:	d006      	beq.n	801433c <tiny_vfscanf+0x2f4>
          *va_arg(ap, long *) = value;
 801432e:	9a01      	ldr	r2, [sp, #4]
 8014330:	1d16      	adds	r6, r2, #4
 8014332:	9601      	str	r6, [sp, #4]
 8014334:	6812      	ldr	r2, [r2, #0]
 8014336:	6013      	str	r3, [r2, #0]
        nassigned++;
 8014338:	3001      	adds	r0, #1
      break;
 801433a:	e692      	b.n	8014062 <tiny_vfscanf+0x1a>
        else if (flags & SHORT)
 801433c:	f01e 0f04 	tst.w	lr, #4
 8014340:	d005      	beq.n	801434e <tiny_vfscanf+0x306>
          *va_arg(ap, short *) = value;
 8014342:	9a01      	ldr	r2, [sp, #4]
 8014344:	1d16      	adds	r6, r2, #4
 8014346:	9601      	str	r6, [sp, #4]
 8014348:	6812      	ldr	r2, [r2, #0]
 801434a:	8013      	strh	r3, [r2, #0]
 801434c:	e7f4      	b.n	8014338 <tiny_vfscanf+0x2f0>
        else if (flags & SHORTSHORT)
 801434e:	f01e 0f08 	tst.w	lr, #8
 8014352:	d005      	beq.n	8014360 <tiny_vfscanf+0x318>
          *va_arg(ap, char *) = value;
 8014354:	9a01      	ldr	r2, [sp, #4]
 8014356:	1d16      	adds	r6, r2, #4
 8014358:	9601      	str	r6, [sp, #4]
 801435a:	6812      	ldr	r2, [r2, #0]
 801435c:	7013      	strb	r3, [r2, #0]
 801435e:	e7eb      	b.n	8014338 <tiny_vfscanf+0x2f0>
          *va_arg(ap, int *) = value;
 8014360:	9a01      	ldr	r2, [sp, #4]
 8014362:	1d16      	adds	r6, r2, #4
 8014364:	9601      	str	r6, [sp, #4]
 8014366:	6812      	ldr	r2, [r2, #0]
 8014368:	6013      	str	r3, [r2, #0]
 801436a:	e7e5      	b.n	8014338 <tiny_vfscanf+0x2f0>
  return (nassigned ? nassigned : -1);
 801436c:	2800      	cmp	r0, #0
 801436e:	f47f ae84 	bne.w	801407a <tiny_vfscanf+0x32>
 8014372:	f04f 30ff 	mov.w	r0, #4294967295
 8014376:	e680      	b.n	801407a <tiny_vfscanf+0x32>

08014378 <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 8014378:	b40e      	push	{r1, r2, r3}
 801437a:	b500      	push	{lr}
 801437c:	b082      	sub	sp, #8
 801437e:	aa03      	add	r2, sp, #12
 8014380:	f852 1b04 	ldr.w	r1, [r2], #4
  int ret;
  va_list ap;

  va_start(ap, fmt);
 8014384:	9201      	str	r2, [sp, #4]
  ret = tiny_vfscanf(str, fmt, ap);
 8014386:	f7ff fe5f 	bl	8014048 <tiny_vfscanf>
  va_end(ap);
  return (ret);
}
 801438a:	b002      	add	sp, #8
 801438c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014390:	b003      	add	sp, #12
 8014392:	4770      	bx	lr

08014394 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8014394:	4601      	mov	r1, r0
  int i = 0;
 8014396:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8014398:	e008      	b.n	80143ac <ee_skip_atoi+0x18>
 801439a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801439e:	1c53      	adds	r3, r2, #1
 80143a0:	600b      	str	r3, [r1, #0]
 80143a2:	7813      	ldrb	r3, [r2, #0]
 80143a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80143a8:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80143ac:	680a      	ldr	r2, [r1, #0]
 80143ae:	7813      	ldrb	r3, [r2, #0]
 80143b0:	3b30      	subs	r3, #48	@ 0x30
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	2b09      	cmp	r3, #9
 80143b6:	d9f0      	bls.n	801439a <ee_skip_atoi+0x6>
  return i;
}
 80143b8:	4770      	bx	lr
	...

080143bc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80143bc:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80143c0:	b093      	sub	sp, #76	@ 0x4c
 80143c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80143c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80143c6:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80143ca:	d110      	bne.n	80143ee <ee_number+0x32>
  char *dig = lower_digits;
 80143cc:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 80144c8 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80143d0:	1e9f      	subs	r7, r3, #2
 80143d2:	2f22      	cmp	r7, #34	@ 0x22
 80143d4:	d875      	bhi.n	80144c2 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80143d6:	f016 0401 	ands.w	r4, r6, #1
 80143da:	d00b      	beq.n	80143f4 <ee_number+0x38>
 80143dc:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 80143e0:	f016 0f02 	tst.w	r6, #2
 80143e4:	d00f      	beq.n	8014406 <ee_number+0x4a>
  {
    if (num < 0)
 80143e6:	2a00      	cmp	r2, #0
 80143e8:	db07      	blt.n	80143fa <ee_number+0x3e>
  sign = 0;
 80143ea:	2700      	movs	r7, #0
 80143ec:	e00c      	b.n	8014408 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80143ee:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 80144cc <ee_number+0x110>
 80143f2:	e7ed      	b.n	80143d0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80143f4:	f04f 0e20 	mov.w	lr, #32
 80143f8:	e7f2      	b.n	80143e0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80143fa:	4252      	negs	r2, r2
      size--;
 80143fc:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80143fe:	3e01      	subs	r6, #1
 8014400:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 8014402:	272d      	movs	r7, #45	@ 0x2d
 8014404:	e000      	b.n	8014408 <ee_number+0x4c>
  sign = 0;
 8014406:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8014408:	bb5a      	cbnz	r2, 8014462 <ee_number+0xa6>
    tmp[i++] = '0';
 801440a:	2330      	movs	r3, #48	@ 0x30
 801440c:	f88d 3004 	strb.w	r3, [sp, #4]
 8014410:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8014414:	45ac      	cmp	ip, r5
 8014416:	dd00      	ble.n	801441a <ee_number+0x5e>
 8014418:	4665      	mov	r5, ip
  size -= precision;
 801441a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801441c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801441e:	b31c      	cbz	r4, 8014468 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8014420:	b11f      	cbz	r7, 801442a <ee_number+0x6e>
 8014422:	f800 7b01 	strb.w	r7, [r0], #1
 8014426:	3901      	subs	r1, #1
 8014428:	d007      	beq.n	801443a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801442a:	2b00      	cmp	r3, #0
 801442c:	f103 33ff 	add.w	r3, r3, #4294967295
 8014430:	dd24      	ble.n	801447c <ee_number+0xc0>
 8014432:	f800 eb01 	strb.w	lr, [r0], #1
 8014436:	3901      	subs	r1, #1
 8014438:	d1f7      	bne.n	801442a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801443a:	b013      	add	sp, #76	@ 0x4c
 801443c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8014440:	fbb2 f6f3 	udiv	r6, r2, r3
 8014444:	fb03 2216 	mls	r2, r3, r6, r2
 8014448:	f81a 8002 	ldrb.w	r8, [sl, r2]
 801444c:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8014450:	446a      	add	r2, sp
 8014452:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8014456:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8014458:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 801445c:	2a00      	cmp	r2, #0
 801445e:	d1ef      	bne.n	8014440 <ee_number+0x84>
 8014460:	e7d8      	b.n	8014414 <ee_number+0x58>
  i = 0;
 8014462:	f04f 0c00 	mov.w	ip, #0
 8014466:	e7f9      	b.n	801445c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8014468:	2b00      	cmp	r3, #0
 801446a:	f103 33ff 	add.w	r3, r3, #4294967295
 801446e:	ddd7      	ble.n	8014420 <ee_number+0x64>
 8014470:	2220      	movs	r2, #32
 8014472:	f800 2b01 	strb.w	r2, [r0], #1
 8014476:	3901      	subs	r1, #1
 8014478:	d1f6      	bne.n	8014468 <ee_number+0xac>
 801447a:	e7de      	b.n	801443a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 801447c:	4565      	cmp	r5, ip
 801447e:	f105 35ff 	add.w	r5, r5, #4294967295
 8014482:	dd05      	ble.n	8014490 <ee_number+0xd4>
 8014484:	2230      	movs	r2, #48	@ 0x30
 8014486:	f800 2b01 	strb.w	r2, [r0], #1
 801448a:	3901      	subs	r1, #1
 801448c:	d1f6      	bne.n	801447c <ee_number+0xc0>
 801448e:	e7d4      	b.n	801443a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8014490:	4662      	mov	r2, ip
 8014492:	2a00      	cmp	r2, #0
 8014494:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014498:	dd09      	ble.n	80144ae <ee_number+0xf2>
 801449a:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 801449e:	446a      	add	r2, sp
 80144a0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80144a4:	f800 2b01 	strb.w	r2, [r0], #1
 80144a8:	3901      	subs	r1, #1
 80144aa:	d1f1      	bne.n	8014490 <ee_number+0xd4>
 80144ac:	e7c5      	b.n	801443a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80144b4:	ddc1      	ble.n	801443a <ee_number+0x7e>
 80144b6:	2220      	movs	r2, #32
 80144b8:	f800 2b01 	strb.w	r2, [r0], #1
 80144bc:	3901      	subs	r1, #1
 80144be:	d1f6      	bne.n	80144ae <ee_number+0xf2>
 80144c0:	e7bb      	b.n	801443a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80144c2:	2000      	movs	r0, #0
 80144c4:	e7b9      	b.n	801443a <ee_number+0x7e>
 80144c6:	bf00      	nop
 80144c8:	08016588 	.word	0x08016588
 80144cc:	080165b0 	.word	0x080165b0

080144d0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80144d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144d4:	b087      	sub	sp, #28
 80144d6:	9205      	str	r2, [sp, #20]
 80144d8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80144da:	1e0f      	subs	r7, r1, #0
 80144dc:	f340 80b8 	ble.w	8014650 <tiny_vsnprintf_like+0x180>
 80144e0:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80144e2:	4604      	mov	r4, r0
 80144e4:	e004      	b.n	80144f0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80144e6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80144ea:	9b05      	ldr	r3, [sp, #20]
 80144ec:	3301      	adds	r3, #1
 80144ee:	9305      	str	r3, [sp, #20]
 80144f0:	9905      	ldr	r1, [sp, #20]
 80144f2:	780a      	ldrb	r2, [r1, #0]
 80144f4:	b922      	cbnz	r2, 8014500 <tiny_vsnprintf_like+0x30>
 80144f6:	1ba3      	subs	r3, r4, r6
 80144f8:	1e78      	subs	r0, r7, #1
 80144fa:	4283      	cmp	r3, r0
 80144fc:	f2c0 80a2 	blt.w	8014644 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8014500:	1ba3      	subs	r3, r4, r6
 8014502:	f107 38ff 	add.w	r8, r7, #4294967295
 8014506:	4543      	cmp	r3, r8
 8014508:	f280 809c 	bge.w	8014644 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 801450c:	2a25      	cmp	r2, #37	@ 0x25
 801450e:	d1ea      	bne.n	80144e6 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8014510:	1c4b      	adds	r3, r1, #1
 8014512:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8014514:	784b      	ldrb	r3, [r1, #1]
 8014516:	2b30      	cmp	r3, #48	@ 0x30
 8014518:	d020      	beq.n	801455c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801451a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801451e:	3b30      	subs	r3, #48	@ 0x30
 8014520:	b2db      	uxtb	r3, r3
 8014522:	2b09      	cmp	r3, #9
 8014524:	d91d      	bls.n	8014562 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8014526:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801452a:	9b05      	ldr	r3, [sp, #20]
 801452c:	781a      	ldrb	r2, [r3, #0]
 801452e:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8014532:	2b20      	cmp	r3, #32
 8014534:	d867      	bhi.n	8014606 <tiny_vsnprintf_like+0x136>
 8014536:	e8df f003 	tbb	[pc, r3]
 801453a:	664a      	.short	0x664a
 801453c:	66666666 	.word	0x66666666
 8014540:	66666666 	.word	0x66666666
 8014544:	66621e66 	.word	0x66621e66
 8014548:	62666666 	.word	0x62666666
 801454c:	66666666 	.word	0x66666666
 8014550:	66666666 	.word	0x66666666
 8014554:	19662866 	.word	0x19662866
 8014558:	6666      	.short	0x6666
 801455a:	7c          	.byte	0x7c
 801455b:	00          	.byte	0x00
      flags |= ZEROPAD;
 801455c:	f04f 0901 	mov.w	r9, #1
 8014560:	e7dd      	b.n	801451e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8014562:	a805      	add	r0, sp, #20
 8014564:	f7ff ff16 	bl	8014394 <ee_skip_atoi>
 8014568:	4605      	mov	r5, r0
 801456a:	e7de      	b.n	801452a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 801456c:	230a      	movs	r3, #10
 801456e:	e031      	b.n	80145d4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8014570:	2320      	movs	r3, #32
 8014572:	f804 3b01 	strb.w	r3, [r4], #1
 8014576:	3d01      	subs	r5, #1
 8014578:	2d00      	cmp	r5, #0
 801457a:	dcf9      	bgt.n	8014570 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 801457c:	9b04      	ldr	r3, [sp, #16]
 801457e:	1d1a      	adds	r2, r3, #4
 8014580:	9204      	str	r2, [sp, #16]
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8014588:	e7af      	b.n	80144ea <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801458a:	9b04      	ldr	r3, [sp, #16]
 801458c:	1d1a      	adds	r2, r3, #4
 801458e:	9204      	str	r2, [sp, #16]
 8014590:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8014594:	f1b8 0f00 	cmp.w	r8, #0
 8014598:	d003      	beq.n	80145a2 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801459a:	4640      	mov	r0, r8
 801459c:	f7eb fdec 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80145a0:	e006      	b.n	80145b0 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80145a2:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8014654 <tiny_vsnprintf_like+0x184>
 80145a6:	e7f8      	b.n	801459a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80145a8:	2220      	movs	r2, #32
 80145aa:	f804 2b01 	strb.w	r2, [r4], #1
 80145ae:	461d      	mov	r5, r3
 80145b0:	1e6b      	subs	r3, r5, #1
 80145b2:	4285      	cmp	r5, r0
 80145b4:	dcf8      	bgt.n	80145a8 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80145b6:	2200      	movs	r2, #0
 80145b8:	e006      	b.n	80145c8 <tiny_vsnprintf_like+0xf8>
 80145ba:	4643      	mov	r3, r8
 80145bc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80145c0:	f804 1b01 	strb.w	r1, [r4], #1
 80145c4:	3201      	adds	r2, #1
 80145c6:	4698      	mov	r8, r3
 80145c8:	4282      	cmp	r2, r0
 80145ca:	dbf6      	blt.n	80145ba <tiny_vsnprintf_like+0xea>
 80145cc:	e78d      	b.n	80144ea <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80145ce:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 80145d2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80145d4:	f019 0f02 	tst.w	r9, #2
 80145d8:	d02f      	beq.n	801463a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80145da:	9a04      	ldr	r2, [sp, #16]
 80145dc:	1d11      	adds	r1, r2, #4
 80145de:	9104      	str	r1, [sp, #16]
 80145e0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80145e2:	1ba1      	subs	r1, r4, r6
 80145e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80145e8:	f04f 30ff 	mov.w	r0, #4294967295
 80145ec:	9001      	str	r0, [sp, #4]
 80145ee:	9500      	str	r5, [sp, #0]
 80145f0:	eba8 0101 	sub.w	r1, r8, r1
 80145f4:	4620      	mov	r0, r4
 80145f6:	f7ff fee1 	bl	80143bc <ee_number>
 80145fa:	4604      	mov	r4, r0
 80145fc:	e775      	b.n	80144ea <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80145fe:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8014602:	230a      	movs	r3, #10
 8014604:	e7e6      	b.n	80145d4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8014606:	2a25      	cmp	r2, #37	@ 0x25
 8014608:	d002      	beq.n	8014610 <tiny_vsnprintf_like+0x140>
 801460a:	2325      	movs	r3, #37	@ 0x25
 801460c:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8014610:	1ba3      	subs	r3, r4, r6
 8014612:	4598      	cmp	r8, r3
 8014614:	dd0f      	ble.n	8014636 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8014616:	9b05      	ldr	r3, [sp, #20]
 8014618:	781a      	ldrb	r2, [r3, #0]
 801461a:	b13a      	cbz	r2, 801462c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 801461c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8014620:	1ba3      	subs	r3, r4, r6
 8014622:	4598      	cmp	r8, r3
 8014624:	f73f af61 	bgt.w	80144ea <tiny_vsnprintf_like+0x1a>
    base = 10;
 8014628:	230a      	movs	r3, #10
 801462a:	e7d3      	b.n	80145d4 <tiny_vsnprintf_like+0x104>
          --fmt;
 801462c:	3b01      	subs	r3, #1
 801462e:	9305      	str	r3, [sp, #20]
 8014630:	e7f6      	b.n	8014620 <tiny_vsnprintf_like+0x150>
        base = 16;
 8014632:	2310      	movs	r3, #16
 8014634:	e7ce      	b.n	80145d4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8014636:	230a      	movs	r3, #10
 8014638:	e7cc      	b.n	80145d4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 801463a:	9a04      	ldr	r2, [sp, #16]
 801463c:	1d11      	adds	r1, r2, #4
 801463e:	9104      	str	r1, [sp, #16]
 8014640:	6812      	ldr	r2, [r2, #0]
 8014642:	e7ce      	b.n	80145e2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8014644:	2300      	movs	r3, #0
 8014646:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8014648:	1ba0      	subs	r0, r4, r6
}
 801464a:	b007      	add	sp, #28
 801464c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8014650:	2000      	movs	r0, #0
 8014652:	e7fa      	b.n	801464a <tiny_vsnprintf_like+0x17a>
 8014654:	080165d8 	.word	0x080165d8

08014658 <memset>:
 8014658:	4402      	add	r2, r0
 801465a:	4603      	mov	r3, r0
 801465c:	4293      	cmp	r3, r2
 801465e:	d100      	bne.n	8014662 <memset+0xa>
 8014660:	4770      	bx	lr
 8014662:	f803 1b01 	strb.w	r1, [r3], #1
 8014666:	e7f9      	b.n	801465c <memset+0x4>

08014668 <strncmp>:
 8014668:	b510      	push	{r4, lr}
 801466a:	b16a      	cbz	r2, 8014688 <strncmp+0x20>
 801466c:	3901      	subs	r1, #1
 801466e:	1884      	adds	r4, r0, r2
 8014670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014674:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014678:	429a      	cmp	r2, r3
 801467a:	d103      	bne.n	8014684 <strncmp+0x1c>
 801467c:	42a0      	cmp	r0, r4
 801467e:	d001      	beq.n	8014684 <strncmp+0x1c>
 8014680:	2a00      	cmp	r2, #0
 8014682:	d1f5      	bne.n	8014670 <strncmp+0x8>
 8014684:	1ad0      	subs	r0, r2, r3
 8014686:	bd10      	pop	{r4, pc}
 8014688:	4610      	mov	r0, r2
 801468a:	e7fc      	b.n	8014686 <strncmp+0x1e>

0801468c <__libc_init_array>:
 801468c:	b570      	push	{r4, r5, r6, lr}
 801468e:	4d0d      	ldr	r5, [pc, #52]	@ (80146c4 <__libc_init_array+0x38>)
 8014690:	4c0d      	ldr	r4, [pc, #52]	@ (80146c8 <__libc_init_array+0x3c>)
 8014692:	1b64      	subs	r4, r4, r5
 8014694:	10a4      	asrs	r4, r4, #2
 8014696:	2600      	movs	r6, #0
 8014698:	42a6      	cmp	r6, r4
 801469a:	d109      	bne.n	80146b0 <__libc_init_array+0x24>
 801469c:	4d0b      	ldr	r5, [pc, #44]	@ (80146cc <__libc_init_array+0x40>)
 801469e:	4c0c      	ldr	r4, [pc, #48]	@ (80146d0 <__libc_init_array+0x44>)
 80146a0:	f000 f89a 	bl	80147d8 <_init>
 80146a4:	1b64      	subs	r4, r4, r5
 80146a6:	10a4      	asrs	r4, r4, #2
 80146a8:	2600      	movs	r6, #0
 80146aa:	42a6      	cmp	r6, r4
 80146ac:	d105      	bne.n	80146ba <__libc_init_array+0x2e>
 80146ae:	bd70      	pop	{r4, r5, r6, pc}
 80146b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80146b4:	4798      	blx	r3
 80146b6:	3601      	adds	r6, #1
 80146b8:	e7ee      	b.n	8014698 <__libc_init_array+0xc>
 80146ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80146be:	4798      	blx	r3
 80146c0:	3601      	adds	r6, #1
 80146c2:	e7f2      	b.n	80146aa <__libc_init_array+0x1e>
 80146c4:	08017090 	.word	0x08017090
 80146c8:	08017090 	.word	0x08017090
 80146cc:	08017090 	.word	0x08017090
 80146d0:	08017094 	.word	0x08017094
 80146d4:	00000000 	.word	0x00000000

080146d8 <floor>:
 80146d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146dc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80146e0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80146e4:	2e13      	cmp	r6, #19
 80146e6:	4602      	mov	r2, r0
 80146e8:	460b      	mov	r3, r1
 80146ea:	460c      	mov	r4, r1
 80146ec:	4605      	mov	r5, r0
 80146ee:	4680      	mov	r8, r0
 80146f0:	dc35      	bgt.n	801475e <floor+0x86>
 80146f2:	2e00      	cmp	r6, #0
 80146f4:	da17      	bge.n	8014726 <floor+0x4e>
 80146f6:	a334      	add	r3, pc, #208	@ (adr r3, 80147c8 <floor+0xf0>)
 80146f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fc:	f7eb fd4a 	bl	8000194 <__adddf3>
 8014700:	2200      	movs	r2, #0
 8014702:	2300      	movs	r3, #0
 8014704:	f7eb ff7a 	bl	80005fc <__aeabi_dcmpgt>
 8014708:	b150      	cbz	r0, 8014720 <floor+0x48>
 801470a:	2c00      	cmp	r4, #0
 801470c:	da57      	bge.n	80147be <floor+0xe6>
 801470e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014712:	432c      	orrs	r4, r5
 8014714:	2500      	movs	r5, #0
 8014716:	42ac      	cmp	r4, r5
 8014718:	4c2d      	ldr	r4, [pc, #180]	@ (80147d0 <floor+0xf8>)
 801471a:	bf08      	it	eq
 801471c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014720:	4623      	mov	r3, r4
 8014722:	462a      	mov	r2, r5
 8014724:	e024      	b.n	8014770 <floor+0x98>
 8014726:	4f2b      	ldr	r7, [pc, #172]	@ (80147d4 <floor+0xfc>)
 8014728:	4137      	asrs	r7, r6
 801472a:	ea01 0c07 	and.w	ip, r1, r7
 801472e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8014732:	d01d      	beq.n	8014770 <floor+0x98>
 8014734:	a324      	add	r3, pc, #144	@ (adr r3, 80147c8 <floor+0xf0>)
 8014736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473a:	f7eb fd2b 	bl	8000194 <__adddf3>
 801473e:	2200      	movs	r2, #0
 8014740:	2300      	movs	r3, #0
 8014742:	f7eb ff5b 	bl	80005fc <__aeabi_dcmpgt>
 8014746:	2800      	cmp	r0, #0
 8014748:	d0ea      	beq.n	8014720 <floor+0x48>
 801474a:	2c00      	cmp	r4, #0
 801474c:	bfbe      	ittt	lt
 801474e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014752:	4133      	asrlt	r3, r6
 8014754:	18e4      	addlt	r4, r4, r3
 8014756:	ea24 0407 	bic.w	r4, r4, r7
 801475a:	2500      	movs	r5, #0
 801475c:	e7e0      	b.n	8014720 <floor+0x48>
 801475e:	2e33      	cmp	r6, #51	@ 0x33
 8014760:	dd0a      	ble.n	8014778 <floor+0xa0>
 8014762:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014766:	d103      	bne.n	8014770 <floor+0x98>
 8014768:	f7eb fd14 	bl	8000194 <__adddf3>
 801476c:	4602      	mov	r2, r0
 801476e:	460b      	mov	r3, r1
 8014770:	4610      	mov	r0, r2
 8014772:	4619      	mov	r1, r3
 8014774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014778:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801477c:	f04f 3cff 	mov.w	ip, #4294967295
 8014780:	fa2c f707 	lsr.w	r7, ip, r7
 8014784:	4207      	tst	r7, r0
 8014786:	d0f3      	beq.n	8014770 <floor+0x98>
 8014788:	a30f      	add	r3, pc, #60	@ (adr r3, 80147c8 <floor+0xf0>)
 801478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801478e:	f7eb fd01 	bl	8000194 <__adddf3>
 8014792:	2200      	movs	r2, #0
 8014794:	2300      	movs	r3, #0
 8014796:	f7eb ff31 	bl	80005fc <__aeabi_dcmpgt>
 801479a:	2800      	cmp	r0, #0
 801479c:	d0c0      	beq.n	8014720 <floor+0x48>
 801479e:	2c00      	cmp	r4, #0
 80147a0:	da0a      	bge.n	80147b8 <floor+0xe0>
 80147a2:	2e14      	cmp	r6, #20
 80147a4:	d101      	bne.n	80147aa <floor+0xd2>
 80147a6:	3401      	adds	r4, #1
 80147a8:	e006      	b.n	80147b8 <floor+0xe0>
 80147aa:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80147ae:	2301      	movs	r3, #1
 80147b0:	40b3      	lsls	r3, r6
 80147b2:	441d      	add	r5, r3
 80147b4:	4545      	cmp	r5, r8
 80147b6:	d3f6      	bcc.n	80147a6 <floor+0xce>
 80147b8:	ea25 0507 	bic.w	r5, r5, r7
 80147bc:	e7b0      	b.n	8014720 <floor+0x48>
 80147be:	2500      	movs	r5, #0
 80147c0:	462c      	mov	r4, r5
 80147c2:	e7ad      	b.n	8014720 <floor+0x48>
 80147c4:	f3af 8000 	nop.w
 80147c8:	8800759c 	.word	0x8800759c
 80147cc:	7e37e43c 	.word	0x7e37e43c
 80147d0:	bff00000 	.word	0xbff00000
 80147d4:	000fffff 	.word	0x000fffff

080147d8 <_init>:
 80147d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147da:	bf00      	nop
 80147dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147de:	bc08      	pop	{r3}
 80147e0:	469e      	mov	lr, r3
 80147e2:	4770      	bx	lr

080147e4 <_fini>:
 80147e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e6:	bf00      	nop
 80147e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ea:	bc08      	pop	{r3}
 80147ec:	469e      	mov	lr, r3
 80147ee:	4770      	bx	lr
